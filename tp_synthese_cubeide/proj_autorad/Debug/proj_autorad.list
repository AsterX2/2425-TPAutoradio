
proj_autorad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b684  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800b818  0800b818  0000c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd60  0800bd60  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd60  0800bd60  0000cd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd68  0800bd68  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0000cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0000cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bd70  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  200001d8  0800bf48  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  0800bf48  0000d698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143d8  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386a  00000000  00000000  000215e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00024e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  00025f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029368  00000000  00000000  00026c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014627  00000000  00000000  0004ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a7d  00000000  00000000  000645d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015704e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  00157094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0015c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7fc 	.word	0x0800b7fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b7fc 	.word	0x0800b7fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001f8 	.word	0x200001f8
 8001014:	2000024c 	.word	0x2000024c

08001018 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_FREERTOS_Init+0x30>)
 8001020:	1d3c      	adds	r4, r7, #4
 8001022:	461d      	mov	r5, r3
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f834 	bl	80050a2 <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a03      	ldr	r2, [pc, #12]	@ (800104c <MX_FREERTOS_Init+0x34>)
 800103e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	0800b824 	.word	0x0800b824
 800104c:	200001f4 	.word	0x200001f4

08001050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f004 f86e 	bl	800513a <osDelay>
 800105e:	e7fb      	b.n	8001058 <StartDefaultTask+0x8>

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 f89f 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0xc8>)
 80010fa:	f000 fee7 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fe:	2320      	movs	r3, #32
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f000 fed8 	bl	8001ecc <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <__io_putchar+0x20>)
 800113e:	f002 fbf5 	bl	800392c <HAL_UART_Transmit>

	return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200007b0 	.word	0x200007b0

08001150 <tache_shell>:



void tache_shell(void * unused)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	//xSemaphoreTake(sem1, portMAX_DELAY); artefact question a) pour prendre le semaphore

	printf("tache Shell\r\n");
 8001158:	480a      	ldr	r0, [pc, #40]	@ (8001184 <tache_shell+0x34>)
 800115a:	f006 fed9 	bl	8007f10 <puts>

	h_sh.drv.receive = drv_uart1_receive;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <tache_shell+0x38>)
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <tache_shell+0x3c>)
 8001162:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_sh.drv.transmit = drv_uart1_transmit;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <tache_shell+0x38>)
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <tache_shell+0x40>)
 800116a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
	shell_init(&h_sh);
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <tache_shell+0x38>)
 8001170:	f000 fb1c 	bl	80017ac <shell_init>


	shell_run(&h_sh);
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <tache_shell+0x38>)
 8001176:	f000 fc09 	bl	800198c <shell_run>


}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800b840 	.word	0x0800b840
 8001188:	20000450 	.word	0x20000450
 800118c:	080016cd 	.word	0x080016cd
 8001190:	08001705 	.word	0x08001705

08001194 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800119a:	f000 fc8b 	bl	8001ab4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800119e:	f000 f81d 	bl	80011dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011a2:	f7ff ff5d 	bl	8001060 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011a6:	f000 f9a3 	bl	80014f0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	//sem_init() déclarer dans drv_uart1.c


	xTaskCreate(tache_shell, "Shell", TASK_SHELL_STACK_SIZE, NULL, TASK_SHELL_PRIORITY, &h_task_shell);
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <main+0x3c>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	4906      	ldr	r1, [pc, #24]	@ (80011d4 <main+0x40>)
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <main+0x44>)
 80011bc:	f004 fbca 	bl	8005954 <xTaskCreate>


	//vTaskDelay(10);

	vTaskStartScheduler();
 80011c0:	f004 fd36 	bl	8005c30 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80011c4:	f7ff ff28 	bl	8001018 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80011c8:	f003 ff64 	bl	8005094 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <main+0x38>
 80011d0:	2000044c 	.word	0x2000044c
 80011d4:	0800b850 	.word	0x0800b850
 80011d8:	08001151 	.word	0x08001151

080011dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	@ 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 ffc4 	bl	8008178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001202:	f001 f833 	bl	800226c <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800120c:	f000 f837 	bl	800127e <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001218:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	2310      	movs	r3, #16
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800122a:	230a      	movs	r3, #10
 800122c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800122e:	2307      	movs	r3, #7
 8001230:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f001 f86a 	bl	8002318 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800124a:	f000 f818 	bl	800127e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2303      	movs	r3, #3
 8001254:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fc32 	bl	8002ad0 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001272:	f000 f804 	bl	800127e <Error_Handler>
	}
}
 8001276:	bf00      	nop
 8001278:	3758      	adds	r7, #88	@ 0x58
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001282:	b672      	cpsid	i
}
 8001284:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <Error_Handler+0x8>
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_MspInit+0x4c>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_MspInit+0x4c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	@ 0x60
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	f06f 0001 	mvn.w	r0, #1
 80012ca:	f000 fd4a 	bl	8001d62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001316:	f000 fc29 	bl	8001b6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800131a:	f005 f893 	bl	8006444 <xTaskGetSchedulerState>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d001      	beq.n	8001328 <SysTick_Handler+0x16>
	{
#endif /* INCLUDE_xTaskGetSchedulerState */
		xPortSysTickHandler();
 8001324:	f005 fbf0 	bl	8006b08 <xPortSysTickHandler>
	}
#endif /* INCLUDE_xTaskGetSchedulerState */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <USART2_IRQHandler+0x10>)
 8001332:	f002 fbd1 	bl	8003ad8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200007b0 	.word	0x200007b0

08001340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_kill>:

int _kill(int pid, int sig)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135a:	f006 ff5f 	bl	800821c <__errno>
 800135e:	4603      	mov	r3, r0
 8001360:	2216      	movs	r2, #22
 8001362:	601a      	str	r2, [r3, #0]
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_exit>:

void _exit (int status)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffe7 	bl	8001350 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <_exit+0x12>

08001386 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e00a      	b.n	80013ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001398:	f3af 8000 	nop.w
 800139c:	4601      	mov	r1, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	60ba      	str	r2, [r7, #8]
 80013a4:	b2ca      	uxtb	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbf0      	blt.n	8001398 <_read+0x12>
  }

  return len;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e009      	b.n	80013e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fea6 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbf1      	blt.n	80013d2 <_write+0x12>
  }
  return len;
 80013ee:	687b      	ldr	r3, [r7, #4]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_close>:

int _close(int file)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001420:	605a      	str	r2, [r3, #4]
  return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_isatty>:

int _isatty(int file)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f006 fec4 	bl	800821c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20018000 	.word	0x20018000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	200007ac 	.word	0x200007ac
 80014c8:	20001698 	.word	0x20001698

080014cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	@ (800154c <MX_USART2_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_USART2_UART_Init+0x58>)
 8001534:	f002 f9ac 	bl	8003890 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f7ff fe9e 	bl	800127e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200007b0 	.word	0x200007b0
 800154c:	40004400 	.word	0x40004400

08001550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0ac      	sub	sp, #176	@ 0xb0
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2288      	movs	r2, #136	@ 0x88
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f006 fe01 	bl	8008178 <memset>
  if(uartHandle->Instance==USART2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <HAL_UART_MspInit+0xc0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d143      	bne.n	8001608 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001580:	2302      	movs	r3, #2
 8001582:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001584:	2300      	movs	r3, #0
 8001586:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fcc3 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001598:	f7ff fe71 	bl	800127e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <HAL_UART_MspInit+0xc4>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015cc:	230c      	movs	r3, #12
 80015ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e4:	2307      	movs	r3, #7
 80015e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f000 fc6a 	bl	8001ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2105      	movs	r1, #5
 80015fc:	2026      	movs	r0, #38	@ 0x26
 80015fe:	f000 fbb0 	bl	8001d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001602:	2026      	movs	r0, #38	@ 0x26
 8001604:	f000 fbc9 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001608:	bf00      	nop
 800160a:	37b0      	adds	r7, #176	@ 0xb0
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40004400 	.word	0x40004400
 8001614:	40021000 	.word	0x40021000

08001618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800161c:	f7ff ff56 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <LoopForever+0x6>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <LoopForever+0xe>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	@ (8001664 <LoopForever+0x16>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f006 fdef 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800164a:	f7ff fda3 	bl	8001194 <main>

0800164e <LoopForever>:

LoopForever:
    b LoopForever
 800164e:	e7fe      	b.n	800164e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800165c:	0800bd70 	.word	0x0800bd70
  ldr r2, =_sbss
 8001660:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001664:	20001698 	.word	0x20001698

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <drv_sem_init>:
#include "semphr.h"

SemaphoreHandle_t semain;

//fonction pour créer le sémaphore
SemaphoreHandle_t drv_sem_init(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

	// Crée un sémaphore binaire
	semain = xSemaphoreCreateBinary();
 8001670:	2203      	movs	r2, #3
 8001672:	2100      	movs	r1, #0
 8001674:	2001      	movs	r0, #1
 8001676:	f003 fe93 	bl	80053a0 <xQueueGenericCreate>
 800167a:	4603      	mov	r3, r0
 800167c:	4a02      	ldr	r2, [pc, #8]	@ (8001688 <drv_sem_init+0x1c>)
 800167e:	6013      	str	r3, [r2, #0]

	//pas de gestion d'erreur = c'est un choix
	//printf("init sema");
	return semain;
 8001680:	4b01      	ldr	r3, [pc, #4]	@ (8001688 <drv_sem_init+0x1c>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000838 	.word	0x20000838

0800168c <give_sem_uart>:


void give_sem_uart(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

	BaseType_t higher_priority_task_woken = pdFALSE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(semain, &higher_priority_task_woken);
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <give_sem_uart+0x38>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1d3a      	adds	r2, r7, #4
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fed8 	bl	8005454 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(higher_priority_task_woken);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <give_sem_uart+0x2e>
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <give_sem_uart+0x3c>)
 80016ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	f3bf 8f6f 	isb	sy
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000838 	.word	0x20000838
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	461a      	mov	r2, r3
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <drv_uart1_receive+0x30>)
 80016e0:	f002 f9ae 	bl	8003a40 <HAL_UART_Receive_IT>

	xSemaphoreTake(semain, portMAX_DELAY); // prendre le sémaphore
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <drv_uart1_receive+0x34>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 ff41 	bl	8005574 <xQueueSemaphoreTake>

	return 0;	// Life's too short for error management
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200007b0 	.word	0x200007b0
 8001700:	20000838 	.word	0x20000838

08001704 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4803      	ldr	r0, [pc, #12]	@ (8001728 <drv_uart1_transmit+0x24>)
 800171a:	f002 f907 	bl	800392c <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200007b0 	.word	0x200007b0

0800172c <sh_help>:
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"


static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e029      	b.n	8001792 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3304      	adds	r3, #4
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461c      	mov	r4, r3
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	330c      	adds	r3, #12
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <sh_help+0x7c>)
 8001770:	2128      	movs	r1, #40	@ 0x28
 8001772:	f006 fbd5 	bl	8007f20 <sniprintf>
 8001776:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	b289      	uxth	r1, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbd0      	blt.n	800173e <sh_help+0x12>
	}

	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800b858 	.word	0x0800b858

080017ac <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	int size = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]

	// création du sémaphore avec drv_sem_init
	drv_sem_init();
 80017b8:	f7ff ff58 	bl	800166c <drv_sem_init>


	h_shell->func_list_size = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <shell_init+0x78>)
 80017ca:	2128      	movs	r1, #40	@ 0x28
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fba7 	bl	8007f20 <sniprintf>
 80017d2:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	b289      	uxth	r1, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <shell_init+0x7c>)
 80017f0:	2128      	movs	r1, #40	@ 0x28
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fb94 	bl	8007f20 <sniprintf>
 80017f8:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	b289      	uxth	r1, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <shell_init+0x80>)
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <shell_init+0x84>)
 8001812:	2168      	movs	r1, #104	@ 0x68
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f80d 	bl	8001834 <shell_add>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0800b864 	.word	0x0800b864
 8001828:	0800b88c 	.word	0x0800b88c
 800182c:	0800b8b0 	.word	0x0800b8b0
 8001830:	0800172d 	.word	0x0800172d

08001834 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	460b      	mov	r3, r1
 8001842:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b3f      	cmp	r3, #63	@ 0x3f
 800184a:	dc27      	bgt.n	800189c <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3304      	adds	r3, #4
 800185e:	7afa      	ldrb	r2, [r7, #11]
 8001860:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3308      	adds	r3, #8
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	330c      	adds	r3, #12
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]
		return 0;
 8001898:	2300      	movs	r3, #0
 800189a:	e001      	b.n	80018a0 <shell_add+0x6c>
	}

	return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	@ 0x40
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018c2:	e041      	b.n	8001948 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80018da:	429a      	cmp	r2, r3
 80018dc:	d131      	bne.n	8001942 <shell_exec+0x96>
			argc = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ea:	e013      	b.n	8001914 <shell_exec+0x68>
				if(*p == ' ') {
 80018ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d10c      	bne.n	800190e <shell_exec+0x62>
					*p = '\0';
 80018f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80018fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001902:	3201      	adds	r2, #1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	3340      	adds	r3, #64	@ 0x40
 8001908:	443b      	add	r3, r7
 800190a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001910:	3301      	adds	r3, #1
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
 8001914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <shell_exec+0x76>
 800191c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800191e:	2b07      	cmp	r3, #7
 8001920:	dde4      	ble.n	80018ec <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3308      	adds	r3, #8
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
 800193e:	4603      	mov	r3, r0
 8001940:	e01d      	b.n	800197e <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001944:	3301      	adds	r3, #1
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800194e:	429a      	cmp	r2, r3
 8001950:	dbb8      	blt.n	80018c4 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <shell_exec+0xdc>)
 800195e:	2128      	movs	r1, #40	@ 0x28
 8001960:	f006 fade 	bl	8007f20 <sniprintf>
 8001964:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001974:	b289      	uxth	r1, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4798      	blx	r3
	return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800197e:	4618      	mov	r0, r3
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	0800b8b8 	.word	0x0800b8b8

0800198c <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80019a2:	2102      	movs	r1, #2
 80019a4:	483a      	ldr	r0, [pc, #232]	@ (8001a90 <shell_run+0x104>)
 80019a6:	4798      	blx	r3
		reading = 1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]

		while(reading) {
 80019ac:	e064      	b.n	8001a78 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80019b4:	f107 020b 	add.w	r2, r7, #11
 80019b8:	2101      	movs	r1, #1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4798      	blx	r3
			int size;

			switch (c) {
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d036      	beq.n	8001a32 <shell_run+0xa6>
 80019c4:	2b0d      	cmp	r3, #13
 80019c6:	d141      	bne.n	8001a4c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80019ce:	4a31      	ldr	r2, [pc, #196]	@ (8001a94 <shell_run+0x108>)
 80019d0:	2128      	movs	r1, #40	@ 0x28
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 faa4 	bl	8007f20 <sniprintf>
 80019d8:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	b289      	uxth	r1, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	613a      	str	r2, [r7, #16]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001a0a:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <shell_run+0x10c>)
 8001a0c:	2128      	movs	r1, #40	@ 0x28
 8001a0e:	f006 fa87 	bl	8007f20 <sniprintf>
 8001a12:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	b289      	uxth	r1, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4798      	blx	r3
				reading = 0;        //exit read loop
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
				break;
 8001a30:	e022      	b.n	8001a78 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dd1e      	ble.n	8001a76 <shell_run+0xea>
					pos--;          //remove it in buffer
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001a44:	2103      	movs	r1, #3
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <shell_run+0x110>)
 8001a48:	4798      	blx	r3
				}
				break;
 8001a4a:	e014      	b.n	8001a76 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b27      	cmp	r3, #39	@ 0x27
 8001a50:	dc12      	bgt.n	8001a78 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001a58:	f107 020b 	add.w	r2, r7, #11
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	613a      	str	r2, [r7, #16]
 8001a68:	7af9      	ldrb	r1, [r7, #11]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001a74:	e000      	b.n	8001a78 <shell_run+0xec>
				break;
 8001a76:	bf00      	nop
		while(reading) {
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d197      	bne.n	80019ae <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff10 	bl	80018ac <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8001a8c:	e786      	b.n	800199c <shell_run+0x10>
 8001a8e:	bf00      	nop
 8001a90:	0800b930 	.word	0x0800b930
 8001a94:	0800b8d0 	.word	0x0800b8d0
 8001a98:	0800b8d4 	.word	0x0800b8d4
 8001a9c:	0800b92c 	.word	0x0800b92c

08001aa0 <HAL_UART_RxCpltCallback>:
	}
	return 0;
}

// TODO a bouger dans le main
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

	// on appelle simplement la fonction callback du drv_uart
	give_sem_uart();
 8001aa8:	f7ff fdf0 	bl	800168c <give_sem_uart>

	//..
	// Relancer la réception pour le prochain octet <= pas la peine
	//HAL_UART_Receive_IT(&huart2, &rx_byte, 1);

}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_Init+0x3c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_Init+0x3c>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f000 f93e 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad0:	200f      	movs	r0, #15
 8001ad2:	f000 f80f 	bl	8001af4 <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	e001      	b.n	8001ae6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae2:	f7ff fbd3 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <HAL_InitTick+0x6c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_InitTick+0x70>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f949 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d809      	bhi.n	8001b44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b38:	f000 f913 	bl	8001d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <HAL_InitTick+0x74>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e007      	b.n	8001b54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e004      	b.n	8001b54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e001      	b.n	8001b54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	2000083c 	.word	0x2000083c

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000083c 	.word	0x2000083c

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d008      	beq.n	8001df8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e022      	b.n	8001e3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020e 	bic.w	r2, r2, #14
 8001e06:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	f003 021c 	and.w	r2, r3, #28
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e029      	b.n	8001ec2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020e 	bic.w	r2, r2, #14
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f003 021c 	and.w	r2, r3, #28
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
    }
  }
  return status;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e17f      	b.n	80021dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8171 	beq.w	80021d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_GPIO_Init+0x40>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d130      	bne.n	8001f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d118      	bne.n	8001fac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80ac 	beq.w	80021d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	4b5f      	ldr	r3, [pc, #380]	@ (80021fc <HAL_GPIO_Init+0x330>)
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	4a5e      	ldr	r2, [pc, #376]	@ (80021fc <HAL_GPIO_Init+0x330>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6613      	str	r3, [r2, #96]	@ 0x60
 800208a:	4b5c      	ldr	r3, [pc, #368]	@ (80021fc <HAL_GPIO_Init+0x330>)
 800208c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002096:	4a5a      	ldr	r2, [pc, #360]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x242>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002204 <HAL_GPIO_Init+0x338>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x23e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002208 <HAL_GPIO_Init+0x33c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x23a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4d      	ldr	r2, [pc, #308]	@ (800220c <HAL_GPIO_Init+0x340>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x236>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002210 <HAL_GPIO_Init+0x344>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x232>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002214 <HAL_GPIO_Init+0x348>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x22e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002218 <HAL_GPIO_Init+0x34c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x22a>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x244>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x244>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x244>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x244>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x244>
 800210e:	2300      	movs	r3, #0
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002120:	4937      	ldr	r1, [pc, #220]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_GPIO_Init+0x350>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002152:	4a32      	ldr	r2, [pc, #200]	@ (800221c <HAL_GPIO_Init+0x350>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002158:	4b30      	ldr	r3, [pc, #192]	@ (800221c <HAL_GPIO_Init+0x350>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800217c:	4a27      	ldr	r2, [pc, #156]	@ (800221c <HAL_GPIO_Init+0x350>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002182:	4b26      	ldr	r3, [pc, #152]	@ (800221c <HAL_GPIO_Init+0x350>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_GPIO_Init+0x350>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_GPIO_Init+0x350>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d0:	4a12      	ldr	r2, [pc, #72]	@ (800221c <HAL_GPIO_Init+0x350>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f ae78 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	48000400 	.word	0x48000400
 8002208:	48000800 	.word	0x48000800
 800220c:	48000c00 	.word	0x48000c00
 8002210:	48001000 	.word	0x48001000
 8002214:	48001400 	.word	0x48001400
 8002218:	48001800 	.word	0x48001800
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800223c:	e002      	b.n	8002244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <HAL_PWREx_GetVoltageRange+0x18>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227a:	d130      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	4b23      	ldr	r3, [pc, #140]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002288:	d038      	beq.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002292:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800229a:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2232      	movs	r2, #50	@ 0x32
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b0:	e002      	b.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b8:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c4:	d102      	bne.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f2      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d8:	d110      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e00f      	b.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ea:	d007      	beq.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ec:	4b07      	ldr	r3, [pc, #28]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022f4:	4a05      	ldr	r2, [pc, #20]	@ (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000
 8002310:	20000000 	.word	0x20000000
 8002314:	431bde83 	.word	0x431bde83

08002318 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e3ca      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b97      	ldr	r3, [pc, #604]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002334:	4b94      	ldr	r3, [pc, #592]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80e4 	beq.w	8002514 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_RCC_OscConfig+0x4a>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	f040 808b 	bne.w	8002470 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 8087 	bne.w	8002470 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002362:	4b89      	ldr	r3, [pc, #548]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e3a2      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	4b82      	ldr	r3, [pc, #520]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_RCC_OscConfig+0x7c>
 800238a:	4b7f      	ldr	r3, [pc, #508]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002392:	e005      	b.n	80023a0 <HAL_RCC_OscConfig+0x88>
 8002394:	4b7c      	ldr	r3, [pc, #496]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d223      	bcs.n	80023ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd55 	bl	8002e58 <RCC_SetFlashLatencyFromMSIRange>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e383      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b8:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a72      	ldr	r2, [pc, #456]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b70      	ldr	r3, [pc, #448]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	496d      	ldr	r1, [pc, #436]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4968      	ldr	r1, [pc, #416]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
 80023ea:	e025      	b.n	8002438 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ec:	4b66      	ldr	r3, [pc, #408]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a65      	ldr	r2, [pc, #404]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4960      	ldr	r1, [pc, #384]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240a:	4b5f      	ldr	r3, [pc, #380]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	495b      	ldr	r1, [pc, #364]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd15 	bl	8002e58 <RCC_SetFlashLatencyFromMSIRange>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e343      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002438:	f000 fc4a 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b52      	ldr	r3, [pc, #328]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	4950      	ldr	r1, [pc, #320]	@ (800258c <HAL_RCC_OscConfig+0x274>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <HAL_RCC_OscConfig+0x278>)
 8002456:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002458:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_RCC_OscConfig+0x27c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fb49 	bl	8001af4 <HAL_InitTick>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d052      	beq.n	8002512 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	e327      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d032      	beq.n	80024de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002478:	4b43      	ldr	r3, [pc, #268]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a42      	ldr	r2, [pc, #264]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002484:	f7ff fb86 	bl	8001b94 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248c:	f7ff fb82 	bl	8001b94 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e310      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a36      	ldr	r2, [pc, #216]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4931      	ldr	r1, [pc, #196]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	492c      	ldr	r1, [pc, #176]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e01a      	b.n	8002514 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024de:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ea:	f7ff fb53 	bl	8001b94 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f2:	f7ff fb4f 	bl	8001b94 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e2dd      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1da>
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002512:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d074      	beq.n	800260a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x21a>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d10e      	bne.n	800254a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d064      	beq.n	8002608 <HAL_RCC_OscConfig+0x2f0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d160      	bne.n	8002608 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e2ba      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x24a>
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0b      	ldr	r2, [pc, #44]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e026      	b.n	80025b0 <HAL_RCC_OscConfig+0x298>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800256a:	d115      	bne.n	8002598 <HAL_RCC_OscConfig+0x280>
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 8002572:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a02      	ldr	r2, [pc, #8]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x298>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	0800b8e4 	.word	0x0800b8e4
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004
 8002598:	4ba0      	ldr	r3, [pc, #640]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a9f      	ldr	r2, [pc, #636]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b9d      	ldr	r3, [pc, #628]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a9c      	ldr	r2, [pc, #624]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff faec 	bl	8001b94 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fae8 	bl	8001b94 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e276      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d2:	4b92      	ldr	r3, [pc, #584]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2a8>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fad8 	bl	8001b94 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fad4 	bl	8001b94 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e262      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fa:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2d0>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d060      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x310>
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d119      	bne.n	8002656 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d116      	bne.n	8002656 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	4b7c      	ldr	r3, [pc, #496]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x328>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e23f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b76      	ldr	r3, [pc, #472]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	4973      	ldr	r1, [pc, #460]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	e040      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265e:	4b6f      	ldr	r3, [pc, #444]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6e      	ldr	r2, [pc, #440]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff fa93 	bl	8001b94 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff fa8f 	bl	8001b94 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e21d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b62      	ldr	r3, [pc, #392]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	495f      	ldr	r1, [pc, #380]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b5d      	ldr	r3, [pc, #372]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5c      	ldr	r2, [pc, #368]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff fa6f 	bl	8001b94 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff fa6b 	bl	8001b94 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1f9      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026cc:	4b53      	ldr	r3, [pc, #332]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03c      	beq.n	800275e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01c      	beq.n	8002726 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f2:	4a4a      	ldr	r2, [pc, #296]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff fa4a 	bl	8001b94 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff fa46 	bl	8001b94 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1d4      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <HAL_RCC_OscConfig+0x3ec>
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272c:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7ff fa2d 	bl	8001b94 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273e:	f7ff fa29 	bl	8001b94 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1b7      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ef      	bne.n	800273e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80a6 	beq.w	80028b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002770:	4b2a      	ldr	r3, [pc, #168]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	4a26      	ldr	r2, [pc, #152]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	@ 0x58
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002794:	2301      	movs	r3, #1
 8002796:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002798:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <HAL_RCC_OscConfig+0x508>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d118      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <HAL_RCC_OscConfig+0x508>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_RCC_OscConfig+0x508>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b0:	f7ff f9f0 	bl	8001b94 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7ff f9ec 	bl	8001b94 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e17a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_RCC_OscConfig+0x508>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4d8>
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ee:	e029      	b.n	8002844 <HAL_RCC_OscConfig+0x52c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_OscConfig+0x50c>
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a07      	ldr	r2, [pc, #28]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a03      	ldr	r2, [pc, #12]	@ (800281c <HAL_RCC_OscConfig+0x504>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002818:	e014      	b.n	8002844 <HAL_RCC_OscConfig+0x52c>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	4b9c      	ldr	r3, [pc, #624]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	4a9b      	ldr	r2, [pc, #620]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002834:	4b98      	ldr	r3, [pc, #608]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	4a97      	ldr	r2, [pc, #604]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d016      	beq.n	800287a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff f9a2 	bl	8001b94 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7ff f99e 	bl	8001b94 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e12a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ed      	beq.n	8002854 <HAL_RCC_OscConfig+0x53c>
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7ff f98b 	bl	8001b94 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff f987 	bl	8001b94 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e113      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	4b7f      	ldr	r3, [pc, #508]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ed      	bne.n	8002882 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	4a79      	ldr	r2, [pc, #484]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80fe 	beq.w	8002abe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	f040 80d0 	bne.w	8002a6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028cc:	4b72      	ldr	r3, [pc, #456]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d130      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	3b01      	subs	r3, #1
 80028ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d127      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11f      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800290c:	2a07      	cmp	r2, #7
 800290e:	bf14      	ite	ne
 8002910:	2201      	movne	r2, #1
 8002912:	2200      	moveq	r2, #0
 8002914:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d109      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d06e      	beq.n	8002a20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d069      	beq.n	8002a1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002954:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0ad      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002964:	4b4c      	ldr	r3, [pc, #304]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4b      	ldr	r2, [pc, #300]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002970:	f7ff f910 	bl	8001b94 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff f90c 	bl	8001b94 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e09a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298a:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002996:	4b40      	ldr	r3, [pc, #256]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4b40      	ldr	r3, [pc, #256]	@ (8002a9c <HAL_RCC_OscConfig+0x784>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029a6:	3a01      	subs	r2, #1
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029b0:	0212      	lsls	r2, r2, #8
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	3a01      	subs	r2, #1
 80029bc:	0552      	lsls	r2, r2, #21
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029c4:	0852      	lsrs	r2, r2, #1
 80029c6:	3a01      	subs	r2, #1
 80029c8:	0652      	lsls	r2, r2, #25
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029d0:	0912      	lsrs	r2, r2, #4
 80029d2:	0452      	lsls	r2, r2, #17
 80029d4:	430a      	orrs	r2, r1
 80029d6:	4930      	ldr	r1, [pc, #192]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f4:	f7ff f8ce 	bl	8001b94 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff f8ca 	bl	8001b94 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e058      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1a:	e050      	b.n	8002abe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e04f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d148      	bne.n	8002abe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a44:	f7ff f8a6 	bl	8001b94 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7ff f8a2 	bl	8001b94 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e030      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x734>
 8002a6a:	e028      	b.n	8002abe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d023      	beq.n	8002aba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <HAL_RCC_OscConfig+0x780>)
 8002a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f889 	bl	8001b94 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a84:	e00c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff f885 	bl	8001b94 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d905      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e013      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x7b0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ec      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_RCC_OscConfig+0x7b0>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4905      	ldr	r1, [pc, #20]	@ (8002ac8 <HAL_RCC_OscConfig+0x7b0>)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_RCC_OscConfig+0x7b4>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
 8002ab8:	e001      	b.n	8002abe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	feeefffc 	.word	0xfeeefffc

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0e7      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b75      	ldr	r3, [pc, #468]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4970      	ldr	r1, [pc, #448]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b6e      	ldr	r3, [pc, #440]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cf      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b66      	ldr	r3, [pc, #408]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d908      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4960      	ldr	r1, [pc, #384]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d04c      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d121      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0a6      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	4b54      	ldr	r3, [pc, #336]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e09a      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b86:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08e      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e086      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4943      	ldr	r1, [pc, #268]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe ffec 	bl	8001b94 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe ffe8 	bl	8001b94 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e06e      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d208      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	492b      	ldr	r1, [pc, #172]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c16:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d210      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c24:	4b25      	ldr	r3, [pc, #148]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0207 	bic.w	r2, r3, #7
 8002c2c:	4923      	ldr	r1, [pc, #140]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c34:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <HAL_RCC_ClockConfig+0x1ec>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e036      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4918      	ldr	r1, [pc, #96]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4910      	ldr	r1, [pc, #64]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c84:	f000 f824 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	490b      	ldr	r1, [pc, #44]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_ClockConfig+0x1fc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe ff23 	bl	8001af4 <HAL_InitTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	0800b8e4 	.word	0x0800b8e4
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d121      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d11e      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d04:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d48:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e004      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d54:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d134      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d003      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xac>
 8002d74:	e005      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d78:	617b      	str	r3, [r7, #20]
      break;
 8002d7a:	e005      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d7c:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d7e:	617b      	str	r3, [r7, #20]
      break;
 8002d80:	e002      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	617b      	str	r3, [r7, #20]
      break;
 8002d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	3301      	adds	r3, #1
 8002d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	fb03 f202 	mul.w	r2, r3, r2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	0e5b      	lsrs	r3, r3, #25
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	3301      	adds	r3, #1
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	0800b8fc 	.word	0x0800b8fc
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200

08002de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4904      	ldr	r1, [pc, #16]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800b8f4 	.word	0x0800b8f4

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e30:	f7ff ffda 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4904      	ldr	r1, [pc, #16]	@ (8002e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	0800b8f4 	.word	0x0800b8f4

08002e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e64:	4b2a      	ldr	r3, [pc, #168]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e70:	f7ff f9ee 	bl	8002250 <HAL_PWREx_GetVoltageRange>
 8002e74:	6178      	str	r0, [r7, #20]
 8002e76:	e014      	b.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e84:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e90:	f7ff f9de 	bl	8002250 <HAL_PWREx_GetVoltageRange>
 8002e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea8:	d10b      	bne.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b80      	cmp	r3, #128	@ 0x80
 8002eae:	d919      	bls.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002eb4:	d902      	bls.n	8002ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e013      	b.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	e010      	b.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d902      	bls.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ec8:	2303      	movs	r3, #3
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	e00a      	b.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b80      	cmp	r3, #128	@ 0x80
 8002ed2:	d102      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e004      	b.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b70      	cmp	r3, #112	@ 0x70
 8002ede:	d101      	bne.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0207 	bic.w	r2, r3, #7
 8002eec:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ef4:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40022000 	.word	0x40022000

08002f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f20:	2300      	movs	r3, #0
 8002f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f24:	2300      	movs	r3, #0
 8002f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d041      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f3c:	d02a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f42:	d824      	bhi.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f48:	d008      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f4e:	d81e      	bhi.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f58:	d010      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f5a:	e018      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f5c:	4b86      	ldr	r3, [pc, #536]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a85      	ldr	r2, [pc, #532]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f68:	e015      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fabb 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7a:	e00c      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3320      	adds	r3, #32
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fba6 	bl	80036d4 <RCCEx_PLLSAI2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8c:	e003      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	74fb      	strb	r3, [r7, #19]
      break;
 8002f92:	e000      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f9c:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002faa:	4973      	ldr	r1, [pc, #460]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d041      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fcc:	d02a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fd2:	d824      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd8:	d008      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fde:	d81e      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe8:	d010      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fea:	e018      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fec:	4b62      	ldr	r3, [pc, #392]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a61      	ldr	r2, [pc, #388]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff8:	e015      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fa73 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3320      	adds	r3, #32
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb5e 	bl	80036d4 <RCCEx_PLLSAI2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	74fb      	strb	r3, [r7, #19]
      break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800302c:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800303a:	494f      	ldr	r1, [pc, #316]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a0 	beq.w	8003196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305a:	4b47      	ldr	r3, [pc, #284]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b41      	ldr	r3, [pc, #260]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	4a40      	ldr	r2, [pc, #256]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	@ 0x58
 800307c:	4b3e      	ldr	r3, [pc, #248]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308c:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3a      	ldr	r2, [pc, #232]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003098:	f7fe fd7c 	bl	8001b94 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fe fd78 	bl	8001b94 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	74fb      	strb	r3, [r7, #19]
        break;
 80030b2:	e005      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ef      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d15c      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01f      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d019      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030e4:	4b24      	ldr	r3, [pc, #144]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f0:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f6:	4a20      	ldr	r2, [pc, #128]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003100:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	4a1c      	ldr	r2, [pc, #112]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003110:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fd37 	bl	8001b94 <HAL_GetTick>
 8003126:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003128:	e00b      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fd33 	bl	8001b94 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
            break;
 8003140:	e006      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ec      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	4904      	ldr	r1, [pc, #16]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800316e:	e009      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003184:	7c7b      	ldrb	r3, [r7, #17]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b9e      	ldr	r3, [pc, #632]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	4a9d      	ldr	r2, [pc, #628]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a2:	4b98      	ldr	r3, [pc, #608]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a8:	f023 0203 	bic.w	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	4994      	ldr	r1, [pc, #592]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 020c 	bic.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	498c      	ldr	r1, [pc, #560]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031e6:	4b87      	ldr	r3, [pc, #540]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4983      	ldr	r1, [pc, #524]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003208:	4b7e      	ldr	r3, [pc, #504]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	497b      	ldr	r1, [pc, #492]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800322a:	4b76      	ldr	r3, [pc, #472]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003238:	4972      	ldr	r1, [pc, #456]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800324c:	4b6d      	ldr	r3, [pc, #436]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	496a      	ldr	r1, [pc, #424]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800326e:	4b65      	ldr	r3, [pc, #404]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	4961      	ldr	r1, [pc, #388]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003290:	4b5c      	ldr	r3, [pc, #368]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	4959      	ldr	r1, [pc, #356]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	4950      	ldr	r1, [pc, #320]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	4948      	ldr	r1, [pc, #288]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	493f      	ldr	r1, [pc, #252]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d028      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003318:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003326:	4937      	ldr	r1, [pc, #220]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003336:	d106      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003338:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a31      	ldr	r2, [pc, #196]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003342:	60d3      	str	r3, [r2, #12]
 8003344:	e011      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800334e:	d10c      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	2101      	movs	r1, #1
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f8c8 	bl	80034ec <RCCEx_PLLSAI1_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d028      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003376:	4b23      	ldr	r3, [pc, #140]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	491f      	ldr	r1, [pc, #124]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003394:	d106      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a1a      	ldr	r2, [pc, #104]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033a0:	60d3      	str	r3, [r2, #12]
 80033a2:	e011      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f899 	bl	80034ec <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02b      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	4908      	ldr	r1, [pc, #32]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033f2:	d109      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a02      	ldr	r2, [pc, #8]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e014      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f867 	bl	80034ec <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003438:	4b2b      	ldr	r3, [pc, #172]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003446:	4928      	ldr	r1, [pc, #160]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003456:	d10d      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f844 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3320      	adds	r3, #32
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f925 	bl	80036d4 <RCCEx_PLLSAI2_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b2:	490d      	ldr	r1, [pc, #52]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d6:	4904      	ldr	r1, [pc, #16]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034de:	7cbb      	ldrb	r3, [r7, #18]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034fa:	4b75      	ldr	r3, [pc, #468]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003506:	4b72      	ldr	r3, [pc, #456]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
       ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800351e:	4b6c      	ldr	r3, [pc, #432]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
       ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d047      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e044      	b.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d018      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0x86>
 8003540:	2b03      	cmp	r3, #3
 8003542:	d825      	bhi.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
 8003544:	2b01      	cmp	r3, #1
 8003546:	d002      	beq.n	800354e <RCCEx_PLLSAI1_Config+0x62>
 8003548:	2b02      	cmp	r3, #2
 800354a:	d009      	beq.n	8003560 <RCCEx_PLLSAI1_Config+0x74>
 800354c:	e020      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800354e:	4b60      	ldr	r3, [pc, #384]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355e:	e01a      	b.n	8003596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003560:	4b5b      	ldr	r3, [pc, #364]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e013      	b.n	800359a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003572:	4b57      	ldr	r3, [pc, #348]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800357e:	4b54      	ldr	r3, [pc, #336]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800358e:	e006      	b.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e004      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800359e:	bf00      	nop
    }

    if(status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035a6:	4b4a      	ldr	r3, [pc, #296]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	430b      	orrs	r3, r1
 80035bc:	4944      	ldr	r1, [pc, #272]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d17d      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035c8:	4b41      	ldr	r3, [pc, #260]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a40      	ldr	r2, [pc, #256]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d4:	f7fe fade 	bl	8001b94 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035da:	e009      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035dc:	f7fe fada 	bl	8001b94 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	73fb      	strb	r3, [r7, #15]
        break;
 80035ee:	e005      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035f0:	4b37      	ldr	r3, [pc, #220]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ef      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d160      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003608:	4b31      	ldr	r3, [pc, #196]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	0912      	lsrs	r2, r2, #4
 8003620:	0452      	lsls	r2, r2, #17
 8003622:	430a      	orrs	r2, r1
 8003624:	492a      	ldr	r1, [pc, #168]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
 800362a:	e027      	b.n	800367c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d112      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003632:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800363a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6892      	ldr	r2, [r2, #8]
 8003642:	0211      	lsls	r1, r2, #8
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6912      	ldr	r2, [r2, #16]
 8003648:	0852      	lsrs	r2, r2, #1
 800364a:	3a01      	subs	r2, #1
 800364c:	0552      	lsls	r2, r2, #21
 800364e:	430a      	orrs	r2, r1
 8003650:	491f      	ldr	r1, [pc, #124]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	610b      	str	r3, [r1, #16]
 8003656:	e011      	b.n	800367c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003660:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	0211      	lsls	r1, r2, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6952      	ldr	r2, [r2, #20]
 800366e:	0852      	lsrs	r2, r2, #1
 8003670:	3a01      	subs	r2, #1
 8003672:	0652      	lsls	r2, r2, #25
 8003674:	430a      	orrs	r2, r1
 8003676:	4916      	ldr	r1, [pc, #88]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800367c:	4b14      	ldr	r3, [pc, #80]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003682:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe fa84 	bl	8001b94 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800368e:	e009      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003690:	f7fe fa80 	bl	8001b94 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	73fb      	strb	r3, [r7, #15]
          break;
 80036a2:	e005      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	4904      	ldr	r1, [pc, #16]	@ (80036d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000

080036d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e2:	4b6a      	ldr	r3, [pc, #424]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036ee:	4b67      	ldr	r3, [pc, #412]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0203 	and.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
       ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003706:	4b61      	ldr	r3, [pc, #388]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
       ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d047      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e044      	b.n	80037aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d018      	beq.n	800375a <RCCEx_PLLSAI2_Config+0x86>
 8003728:	2b03      	cmp	r3, #3
 800372a:	d825      	bhi.n	8003778 <RCCEx_PLLSAI2_Config+0xa4>
 800372c:	2b01      	cmp	r3, #1
 800372e:	d002      	beq.n	8003736 <RCCEx_PLLSAI2_Config+0x62>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d009      	beq.n	8003748 <RCCEx_PLLSAI2_Config+0x74>
 8003734:	e020      	b.n	8003778 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003736:	4b55      	ldr	r3, [pc, #340]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11d      	bne.n	800377e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003746:	e01a      	b.n	800377e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e013      	b.n	8003782 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375a:	4b4c      	ldr	r3, [pc, #304]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003766:	4b49      	ldr	r3, [pc, #292]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003776:	e006      	b.n	8003786 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e004      	b.n	8003788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003786:	bf00      	nop
    }

    if(status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	430b      	orrs	r3, r1
 80037a4:	4939      	ldr	r1, [pc, #228]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d167      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037b0:	4b36      	ldr	r3, [pc, #216]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a35      	ldr	r2, [pc, #212]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fe f9ea 	bl	8001b94 <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c2:	e009      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c4:	f7fe f9e6 	bl	8001b94 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	73fb      	strb	r3, [r7, #15]
        break;
 80037d6:	e005      	b.n	80037e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037d8:	4b2c      	ldr	r3, [pc, #176]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ef      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d14a      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d111      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037f0:	4b26      	ldr	r3, [pc, #152]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6892      	ldr	r2, [r2, #8]
 8003800:	0211      	lsls	r1, r2, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	0912      	lsrs	r2, r2, #4
 8003808:	0452      	lsls	r2, r2, #17
 800380a:	430a      	orrs	r2, r1
 800380c:	491f      	ldr	r1, [pc, #124]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	614b      	str	r3, [r1, #20]
 8003812:	e011      	b.n	8003838 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003814:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800381c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	0211      	lsls	r1, r2, #8
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6912      	ldr	r2, [r2, #16]
 800382a:	0852      	lsrs	r2, r2, #1
 800382c:	3a01      	subs	r2, #1
 800382e:	0652      	lsls	r2, r2, #25
 8003830:	430a      	orrs	r2, r1
 8003832:	4916      	ldr	r1, [pc, #88]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a13      	ldr	r2, [pc, #76]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe f9a6 	bl	8001b94 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800384a:	e009      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800384c:	f7fe f9a2 	bl	8001b94 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	73fb      	strb	r3, [r7, #15]
          break;
 800385e:	e005      	b.n	800386c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ef      	beq.n	800384c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4904      	ldr	r1, [pc, #16]	@ (800388c <RCCEx_PLLSAI2_Config+0x1b8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e040      	b.n	8003924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fe4c 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	@ 0x24
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fedc 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fc21 	bl	8004124 <UART_SetConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01b      	b.n	8003924 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 ff5b 	bl	80047d8 <UART_CheckIdleState>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	@ 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003940:	2b20      	cmp	r3, #32
 8003942:	d177      	bne.n	8003a34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Transmit+0x24>
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e070      	b.n	8003a36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2221      	movs	r2, #33	@ 0x21
 8003960:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003962:	f7fe f917 	bl	8001b94 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003980:	d108      	bne.n	8003994 <HAL_UART_Transmit+0x68>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800399c:	e02f      	b.n	80039fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	@ 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 ffbd 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e03b      	b.n	8003a36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	881a      	ldrh	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d0:	b292      	uxth	r2, r2
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	3302      	adds	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e007      	b.n	80039ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1c9      	bne.n	800399e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2140      	movs	r1, #64	@ 0x40
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 ff87 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e005      	b.n	8003a36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d137      	bne.n	8003ac8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Receive_IT+0x24>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e030      	b.n	8003aca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_UART_Receive_IT+0x94>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01f      	beq.n	8003ab8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69f9      	ldr	r1, [r7, #28]
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e6      	bne.n	8003a86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 ffa0 	bl	8004a04 <UART_Start_Receive_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	@ 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40008000 	.word	0x40008000

08003ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0ba      	sub	sp, #232	@ 0xe8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b06:	4013      	ands	r3, r2
 8003b08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d115      	bne.n	8003b40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00f      	beq.n	8003b40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 82ca 	beq.w	80040ca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
      }
      return;
 8003b3e:	e2c4      	b.n	80040ca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8117 	beq.w	8003d78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b5a:	4b85      	ldr	r3, [pc, #532]	@ (8003d70 <HAL_UART_IRQHandler+0x298>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 810a 	beq.w	8003d78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_IRQHandler+0xbc>
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d011      	beq.n	8003bc4 <HAL_UART_IRQHandler+0xec>
 8003ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bba:	f043 0204 	orr.w	r2, r3, #4
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d011      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x11c>
 8003bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00b      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bea:	f043 0202 	orr.w	r2, r3, #2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d017      	beq.n	8003c30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c26:	f043 0208 	orr.w	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_UART_IRQHandler+0x18a>
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8230 	beq.w	80040ce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d005      	beq.n	8003cba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04f      	beq.n	8003d5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 ff68 	bl	8004b90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d141      	bne.n	8003d52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1d9      	bne.n	8003cce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	4a13      	ldr	r2, [pc, #76]	@ (8003d74 <HAL_UART_IRQHandler+0x29c>)
 8003d28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe f88b 	bl	8001e4a <HAL_DMA_Abort_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d017      	beq.n	8003d6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d44:	4610      	mov	r0, r2
 8003d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e00f      	b.n	8003d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9d4 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e00b      	b.n	8003d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9d0 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e007      	b.n	8003d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f9cc 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d68:	e1b1      	b.n	80040ce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	bf00      	nop
    return;
 8003d6c:	e1af      	b.n	80040ce <HAL_UART_IRQHandler+0x5f6>
 8003d6e:	bf00      	nop
 8003d70:	04000120 	.word	0x04000120
 8003d74:	08004c59 	.word	0x08004c59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 816a 	bne.w	8004056 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8163 	beq.w	8004056 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 815c 	beq.w	8004056 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	f040 80d4 	bne.w	8003f5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80ad 	beq.w	8003f26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	f080 80a5 	bcs.w	8003f26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 8086 	bne.w	8003f04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1da      	bne.n	8003df8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e1      	bne.n	8003e42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3308      	adds	r3, #8
 8003e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e3      	bne.n	8003e7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed4:	f023 0310 	bic.w	r3, r3, #16
 8003ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e4      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd ff65 	bl	8001dce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8f4 	bl	800410c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f24:	e0d5      	b.n	80040d2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f040 80ce 	bne.w	80040d2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	f040 80c5 	bne.w	80040d2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8d8 	bl	800410c <HAL_UARTEx_RxEventCallback>
      return;
 8003f5c:	e0b9      	b.n	80040d2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80ab 	beq.w	80040d6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a6 	beq.w	80040d6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e4      	bne.n	8003f8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	623b      	str	r3, [r7, #32]
   return(result);
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fe4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e3      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	60fb      	str	r3, [r7, #12]
   return(result);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	69b9      	ldr	r1, [r7, #24]
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	617b      	str	r3, [r7, #20]
   return(result);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e4      	bne.n	800400c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f85c 	bl	800410c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004054:	e03f      	b.n	80040d6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00e      	beq.n	8004080 <HAL_UART_IRQHandler+0x5a8>
 8004062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004076:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 ffe9 	bl	8005050 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800407e:	e02d      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01c      	beq.n	80040da <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
    }
    return;
 80040a8:	e017      	b.n	80040da <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_UART_IRQHandler+0x604>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fdde 	bl	8004c84 <UART_EndTransmit_IT>
    return;
 80040c8:	e008      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
      return;
 80040ca:	bf00      	nop
 80040cc:	e006      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
    return;
 80040ce:	bf00      	nop
 80040d0:	e004      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
      return;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
      return;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_UART_IRQHandler+0x604>
    return;
 80040da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80040dc:	37e8      	adds	r7, #232	@ 0xe8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b08a      	sub	sp, #40	@ 0x28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4313      	orrs	r3, r2
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4ba4      	ldr	r3, [pc, #656]	@ (80043e4 <UART_SetConfig+0x2c0>)
 8004154:	4013      	ands	r3, r2
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a99      	ldr	r2, [pc, #612]	@ (80043e8 <UART_SetConfig+0x2c4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418c:	4313      	orrs	r3, r2
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a90      	ldr	r2, [pc, #576]	@ (80043ec <UART_SetConfig+0x2c8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d126      	bne.n	80041fc <UART_SetConfig+0xd8>
 80041ae:	4b90      	ldr	r3, [pc, #576]	@ (80043f0 <UART_SetConfig+0x2cc>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d81b      	bhi.n	80041f4 <UART_SetConfig+0xd0>
 80041bc:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <UART_SetConfig+0xa0>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041e5 	.word	0x080041e5
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041da:	e116      	b.n	800440a <UART_SetConfig+0x2e6>
 80041dc:	2302      	movs	r3, #2
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e2:	e112      	b.n	800440a <UART_SetConfig+0x2e6>
 80041e4:	2304      	movs	r3, #4
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ea:	e10e      	b.n	800440a <UART_SetConfig+0x2e6>
 80041ec:	2308      	movs	r3, #8
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f2:	e10a      	b.n	800440a <UART_SetConfig+0x2e6>
 80041f4:	2310      	movs	r3, #16
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fa:	e106      	b.n	800440a <UART_SetConfig+0x2e6>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7c      	ldr	r2, [pc, #496]	@ (80043f4 <UART_SetConfig+0x2d0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d138      	bne.n	8004278 <UART_SetConfig+0x154>
 8004206:	4b7a      	ldr	r3, [pc, #488]	@ (80043f0 <UART_SetConfig+0x2cc>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d82d      	bhi.n	8004270 <UART_SetConfig+0x14c>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0xf8>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004251 	.word	0x08004251
 8004220:	08004271 	.word	0x08004271
 8004224:	08004271 	.word	0x08004271
 8004228:	08004271 	.word	0x08004271
 800422c:	08004261 	.word	0x08004261
 8004230:	08004271 	.word	0x08004271
 8004234:	08004271 	.word	0x08004271
 8004238:	08004271 	.word	0x08004271
 800423c:	08004259 	.word	0x08004259
 8004240:	08004271 	.word	0x08004271
 8004244:	08004271 	.word	0x08004271
 8004248:	08004271 	.word	0x08004271
 800424c:	08004269 	.word	0x08004269
 8004250:	2300      	movs	r3, #0
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e0d8      	b.n	800440a <UART_SetConfig+0x2e6>
 8004258:	2302      	movs	r3, #2
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425e:	e0d4      	b.n	800440a <UART_SetConfig+0x2e6>
 8004260:	2304      	movs	r3, #4
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004266:	e0d0      	b.n	800440a <UART_SetConfig+0x2e6>
 8004268:	2308      	movs	r3, #8
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426e:	e0cc      	b.n	800440a <UART_SetConfig+0x2e6>
 8004270:	2310      	movs	r3, #16
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004276:	e0c8      	b.n	800440a <UART_SetConfig+0x2e6>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5e      	ldr	r2, [pc, #376]	@ (80043f8 <UART_SetConfig+0x2d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d125      	bne.n	80042ce <UART_SetConfig+0x1aa>
 8004282:	4b5b      	ldr	r3, [pc, #364]	@ (80043f0 <UART_SetConfig+0x2cc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800428c:	2b30      	cmp	r3, #48	@ 0x30
 800428e:	d016      	beq.n	80042be <UART_SetConfig+0x19a>
 8004290:	2b30      	cmp	r3, #48	@ 0x30
 8004292:	d818      	bhi.n	80042c6 <UART_SetConfig+0x1a2>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d00a      	beq.n	80042ae <UART_SetConfig+0x18a>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d814      	bhi.n	80042c6 <UART_SetConfig+0x1a2>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <UART_SetConfig+0x182>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d008      	beq.n	80042b6 <UART_SetConfig+0x192>
 80042a4:	e00f      	b.n	80042c6 <UART_SetConfig+0x1a2>
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ac:	e0ad      	b.n	800440a <UART_SetConfig+0x2e6>
 80042ae:	2302      	movs	r3, #2
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b4:	e0a9      	b.n	800440a <UART_SetConfig+0x2e6>
 80042b6:	2304      	movs	r3, #4
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042bc:	e0a5      	b.n	800440a <UART_SetConfig+0x2e6>
 80042be:	2308      	movs	r3, #8
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c4:	e0a1      	b.n	800440a <UART_SetConfig+0x2e6>
 80042c6:	2310      	movs	r3, #16
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042cc:	e09d      	b.n	800440a <UART_SetConfig+0x2e6>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a4a      	ldr	r2, [pc, #296]	@ (80043fc <UART_SetConfig+0x2d8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d125      	bne.n	8004324 <UART_SetConfig+0x200>
 80042d8:	4b45      	ldr	r3, [pc, #276]	@ (80043f0 <UART_SetConfig+0x2cc>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042e4:	d016      	beq.n	8004314 <UART_SetConfig+0x1f0>
 80042e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80042e8:	d818      	bhi.n	800431c <UART_SetConfig+0x1f8>
 80042ea:	2b80      	cmp	r3, #128	@ 0x80
 80042ec:	d00a      	beq.n	8004304 <UART_SetConfig+0x1e0>
 80042ee:	2b80      	cmp	r3, #128	@ 0x80
 80042f0:	d814      	bhi.n	800431c <UART_SetConfig+0x1f8>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <UART_SetConfig+0x1d8>
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	d008      	beq.n	800430c <UART_SetConfig+0x1e8>
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x1f8>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e082      	b.n	800440a <UART_SetConfig+0x2e6>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430a:	e07e      	b.n	800440a <UART_SetConfig+0x2e6>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e07a      	b.n	800440a <UART_SetConfig+0x2e6>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e076      	b.n	800440a <UART_SetConfig+0x2e6>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e072      	b.n	800440a <UART_SetConfig+0x2e6>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a35      	ldr	r2, [pc, #212]	@ (8004400 <UART_SetConfig+0x2dc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d12a      	bne.n	8004384 <UART_SetConfig+0x260>
 800432e:	4b30      	ldr	r3, [pc, #192]	@ (80043f0 <UART_SetConfig+0x2cc>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800433c:	d01a      	beq.n	8004374 <UART_SetConfig+0x250>
 800433e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004342:	d81b      	bhi.n	800437c <UART_SetConfig+0x258>
 8004344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004348:	d00c      	beq.n	8004364 <UART_SetConfig+0x240>
 800434a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800434e:	d815      	bhi.n	800437c <UART_SetConfig+0x258>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x238>
 8004354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004358:	d008      	beq.n	800436c <UART_SetConfig+0x248>
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x258>
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e052      	b.n	800440a <UART_SetConfig+0x2e6>
 8004364:	2302      	movs	r3, #2
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e04e      	b.n	800440a <UART_SetConfig+0x2e6>
 800436c:	2304      	movs	r3, #4
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e04a      	b.n	800440a <UART_SetConfig+0x2e6>
 8004374:	2308      	movs	r3, #8
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e046      	b.n	800440a <UART_SetConfig+0x2e6>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e042      	b.n	800440a <UART_SetConfig+0x2e6>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <UART_SetConfig+0x2c4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d13a      	bne.n	8004404 <UART_SetConfig+0x2e0>
 800438e:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <UART_SetConfig+0x2cc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004394:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004398:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800439c:	d01a      	beq.n	80043d4 <UART_SetConfig+0x2b0>
 800439e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043a2:	d81b      	bhi.n	80043dc <UART_SetConfig+0x2b8>
 80043a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a8:	d00c      	beq.n	80043c4 <UART_SetConfig+0x2a0>
 80043aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ae:	d815      	bhi.n	80043dc <UART_SetConfig+0x2b8>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <UART_SetConfig+0x298>
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b8:	d008      	beq.n	80043cc <UART_SetConfig+0x2a8>
 80043ba:	e00f      	b.n	80043dc <UART_SetConfig+0x2b8>
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e022      	b.n	800440a <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e01e      	b.n	800440a <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e01a      	b.n	800440a <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e016      	b.n	800440a <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e012      	b.n	800440a <UART_SetConfig+0x2e6>
 80043e4:	efff69f3 	.word	0xefff69f3
 80043e8:	40008000 	.word	0x40008000
 80043ec:	40013800 	.word	0x40013800
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40004400 	.word	0x40004400
 80043f8:	40004800 	.word	0x40004800
 80043fc:	40004c00 	.word	0x40004c00
 8004400:	40005000 	.word	0x40005000
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a9f      	ldr	r2, [pc, #636]	@ (800468c <UART_SetConfig+0x568>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d17a      	bne.n	800450a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004414:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004418:	2b08      	cmp	r3, #8
 800441a:	d824      	bhi.n	8004466 <UART_SetConfig+0x342>
 800441c:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <UART_SetConfig+0x300>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	08004467 	.word	0x08004467
 800442c:	08004451 	.word	0x08004451
 8004430:	08004467 	.word	0x08004467
 8004434:	08004457 	.word	0x08004457
 8004438:	08004467 	.word	0x08004467
 800443c:	08004467 	.word	0x08004467
 8004440:	08004467 	.word	0x08004467
 8004444:	0800445f 	.word	0x0800445f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fcda 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800444c:	61f8      	str	r0, [r7, #28]
        break;
 800444e:	e010      	b.n	8004472 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004450:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <UART_SetConfig+0x56c>)
 8004452:	61fb      	str	r3, [r7, #28]
        break;
 8004454:	e00d      	b.n	8004472 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004456:	f7fe fc3b 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 800445a:	61f8      	str	r0, [r7, #28]
        break;
 800445c:	e009      	b.n	8004472 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004462:	61fb      	str	r3, [r7, #28]
        break;
 8004464:	e005      	b.n	8004472 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80fb 	beq.w	8004670 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	429a      	cmp	r2, r3
 8004488:	d305      	bcc.n	8004496 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	429a      	cmp	r2, r3
 8004494:	d903      	bls.n	800449e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800449c:	e0e8      	b.n	8004670 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2200      	movs	r2, #0
 80044a2:	461c      	mov	r4, r3
 80044a4:	4615      	mov	r5, r2
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	022b      	lsls	r3, r5, #8
 80044b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044b4:	0222      	lsls	r2, r4, #8
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6849      	ldr	r1, [r1, #4]
 80044ba:	0849      	lsrs	r1, r1, #1
 80044bc:	2000      	movs	r0, #0
 80044be:	4688      	mov	r8, r1
 80044c0:	4681      	mov	r9, r0
 80044c2:	eb12 0a08 	adds.w	sl, r2, r8
 80044c6:	eb43 0b09 	adc.w	fp, r3, r9
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d8:	4650      	mov	r0, sl
 80044da:	4659      	mov	r1, fp
 80044dc:	f7fc fbd4 	bl	8000c88 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ee:	d308      	bcc.n	8004502 <UART_SetConfig+0x3de>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f6:	d204      	bcs.n	8004502 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e0b6      	b.n	8004670 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004508:	e0b2      	b.n	8004670 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004512:	d15e      	bne.n	80045d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004514:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004518:	2b08      	cmp	r3, #8
 800451a:	d828      	bhi.n	800456e <UART_SetConfig+0x44a>
 800451c:	a201      	add	r2, pc, #4	@ (adr r2, 8004524 <UART_SetConfig+0x400>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004549 	.word	0x08004549
 8004528:	08004551 	.word	0x08004551
 800452c:	08004559 	.word	0x08004559
 8004530:	0800456f 	.word	0x0800456f
 8004534:	0800455f 	.word	0x0800455f
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800456f 	.word	0x0800456f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7fe fc5a 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800454c:	61f8      	str	r0, [r7, #28]
        break;
 800454e:	e014      	b.n	800457a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004550:	f7fe fc6c 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8004554:	61f8      	str	r0, [r7, #28]
        break;
 8004556:	e010      	b.n	800457a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <UART_SetConfig+0x56c>)
 800455a:	61fb      	str	r3, [r7, #28]
        break;
 800455c:	e00d      	b.n	800457a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7fe fbb7 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8004562:	61f8      	str	r0, [r7, #28]
        break;
 8004564:	e009      	b.n	800457a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456a:	61fb      	str	r3, [r7, #28]
        break;
 800456c:	e005      	b.n	800457a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d077      	beq.n	8004670 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005a      	lsls	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b0f      	cmp	r3, #15
 800459a:	d916      	bls.n	80045ca <UART_SetConfig+0x4a6>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a2:	d212      	bcs.n	80045ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f023 030f 	bic.w	r3, r3, #15
 80045ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	8afb      	ldrh	r3, [r7, #22]
 80045bc:	4313      	orrs	r3, r2
 80045be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	8afa      	ldrh	r2, [r7, #22]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e052      	b.n	8004670 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045d0:	e04e      	b.n	8004670 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d827      	bhi.n	800462a <UART_SetConfig+0x506>
 80045da:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0x4bc>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe fbfc 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8004608:	61f8      	str	r0, [r7, #28]
        break;
 800460a:	e014      	b.n	8004636 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe fc0e 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e010      	b.n	8004636 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b1e      	ldr	r3, [pc, #120]	@ (8004690 <UART_SetConfig+0x56c>)
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e00d      	b.n	8004636 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fe fb59 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 800461e:	61f8      	str	r0, [r7, #28]
        break;
 8004620:	e009      	b.n	8004636 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004626:	61fb      	str	r3, [r7, #28]
        break;
 8004628:	e005      	b.n	8004636 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004634:	bf00      	nop
    }

    if (pclk != 0U)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d019      	beq.n	8004670 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	085a      	lsrs	r2, r3, #1
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	441a      	add	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d909      	bls.n	800466a <UART_SetConfig+0x546>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465c:	d205      	bcs.n	800466a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e002      	b.n	8004670 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800467c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	@ 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40008000 	.word	0x40008000
 8004690:	00f42400 	.word	0x00f42400

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b098      	sub	sp, #96	@ 0x60
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fd f9d4 	bl	8001b94 <HAL_GetTick>
 80047ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d12e      	bne.n	800485a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f88c 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d021      	beq.n	800485a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482a:	653b      	str	r3, [r7, #80]	@ 0x50
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800483a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e062      	b.n	8004920 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d149      	bne.n	80048fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f856 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03c      	beq.n	80048fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	623b      	str	r3, [r7, #32]
   return(result);
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	617b      	str	r3, [r7, #20]
   return(result);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e011      	b.n	8004920 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3758      	adds	r7, #88	@ 0x58
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e04f      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004940:	d04b      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fd f927 	bl	8001b94 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e04e      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d037      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b80      	cmp	r3, #128	@ 0x80
 800496e:	d034      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d031      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d110      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2208      	movs	r2, #8
 800498a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f8ff 	bl	8004b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2208      	movs	r2, #8
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e029      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b4:	d111      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f8e5 	bl	8004b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e00f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0a0      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b097      	sub	sp, #92	@ 0x5c
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a36:	d10e      	bne.n	8004a56 <UART_Start_Receive_IT+0x52>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <UART_Start_Receive_IT+0x48>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a4a:	e02d      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	22ff      	movs	r2, #255	@ 0xff
 8004a50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a54:	e028      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <UART_Start_Receive_IT+0x76>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <UART_Start_Receive_IT+0x6c>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	22ff      	movs	r2, #255	@ 0xff
 8004a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a6e:	e01b      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	227f      	movs	r2, #127	@ 0x7f
 8004a74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a78:	e016      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a82:	d10d      	bne.n	8004aa0 <UART_Start_Receive_IT+0x9c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <UART_Start_Receive_IT+0x92>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	227f      	movs	r2, #127	@ 0x7f
 8004a90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a94:	e008      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	223f      	movs	r2, #63	@ 0x3f
 8004a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a9e:	e003      	b.n	8004aa8 <UART_Start_Receive_IT+0xa4>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2222      	movs	r2, #34	@ 0x22
 8004ab4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ad8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ada:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af4:	d107      	bne.n	8004b06 <UART_Start_Receive_IT+0x102>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <UART_Start_Receive_IT+0x184>)
 8004b02:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b04:	e002      	b.n	8004b0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a20      	ldr	r2, [pc, #128]	@ (8004b8c <UART_Start_Receive_IT+0x188>)
 8004b0a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d019      	beq.n	8004b48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e6      	bne.n	8004b14 <UART_Start_Receive_IT+0x110>
 8004b46:	e018      	b.n	8004b7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	613b      	str	r3, [r7, #16]
   return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f043 0320 	orr.w	r3, r3, #32
 8004b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	375c      	adds	r7, #92	@ 0x5c
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	08004e95 	.word	0x08004e95
 8004b8c:	08004cd9 	.word	0x08004cd9

08004b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b095      	sub	sp, #84	@ 0x54
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d118      	bne.n	8004c38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0310 	bic.w	r3, r3, #16
 8004c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c4c:	bf00      	nop
 8004c4e:	3754      	adds	r7, #84	@ 0x54
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fa3e 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e6      	bne.n	8004c8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fa0a 	bl	80040e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd0:	bf00      	nop
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b09c      	sub	sp, #112	@ 0x70
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ce6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf0:	2b22      	cmp	r3, #34	@ 0x22
 8004cf2:	f040 80be 	bne.w	8004e72 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d04:	b2d9      	uxtb	r1, r3
 8004d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	400a      	ands	r2, r1
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 80a3 	bne.w	8004e86 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a34      	ldr	r2, [pc, #208]	@ (8004e90 <UART_RxISR_8BIT+0x1b8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01f      	beq.n	8004e04 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	623b      	str	r3, [r7, #32]
   return(result);
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d12e      	bne.n	8004e6a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e6      	bne.n	8004e12 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d103      	bne.n	8004e5a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2210      	movs	r2, #16
 8004e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff f952 	bl	800410c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e68:	e00d      	b.n	8004e86 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc fe18 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8004e70:	e009      	b.n	8004e86 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	8b1b      	ldrh	r3, [r3, #24]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	b292      	uxth	r2, r2
 8004e84:	831a      	strh	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	3770      	adds	r7, #112	@ 0x70
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40008000 	.word	0x40008000

08004e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b09c      	sub	sp, #112	@ 0x70
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eac:	2b22      	cmp	r3, #34	@ 0x22
 8004eae:	f040 80be 	bne.w	800502e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ec2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004ec6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	1c9a      	adds	r2, r3, #2
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 80a3 	bne.w	8005042 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a34      	ldr	r2, [pc, #208]	@ (800504c <UART_RxISR_16BIT+0x1b8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01f      	beq.n	8004fc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d12e      	bne.n	8005026 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d103      	bne.n	8005016 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2210      	movs	r2, #16
 8005014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff f874 	bl	800410c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005024:	e00d      	b.n	8005042 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fc fd3a 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 800502c:	e009      	b.n	8005042 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	8b1b      	ldrh	r3, [r3, #24]
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	b292      	uxth	r2, r2
 8005040:	831a      	strh	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	3770      	adds	r7, #112	@ 0x70
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40008000 	.word	0x40008000

08005050 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005076:	2b84      	cmp	r3, #132	@ 0x84
 8005078:	d005      	beq.n	8005086 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800507a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	3303      	adds	r3, #3
 8005084:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005098:	f000 fdca 	bl	8005c30 <vTaskStartScheduler>
  
  return osOK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a4:	b089      	sub	sp, #36	@ 0x24
 80050a6:	af04      	add	r7, sp, #16
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <osThreadCreate+0x54>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685c      	ldr	r4, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691e      	ldr	r6, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ffc8 	bl	8005064 <makeFreeRtosPriority>
 80050d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050de:	9202      	str	r2, [sp, #8]
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	9100      	str	r1, [sp, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4632      	mov	r2, r6
 80050e8:	4629      	mov	r1, r5
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fbd2 	bl	8005894 <xTaskCreateStatic>
 80050f0:	4603      	mov	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e01c      	b.n	8005130 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685c      	ldr	r4, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005102:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffaa 	bl	8005064 <makeFreeRtosPriority>
 8005110:	4602      	mov	r2, r0
 8005112:	f107 030c 	add.w	r3, r7, #12
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	9200      	str	r2, [sp, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	4632      	mov	r2, r6
 800511e:	4629      	mov	r1, r5
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fc17 	bl	8005954 <xTaskCreate>
 8005126:	4603      	mov	r3, r0
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800513a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <osDelay+0x16>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	e000      	b.n	8005152 <osDelay+0x18>
 8005150:	2301      	movs	r3, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fd36 	bl	8005bc4 <vTaskDelay>
  
  return osOK;
 8005158:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f103 0208 	add.w	r2, r3, #8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800517a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f103 0208 	add.w	r2, r3, #8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800521a:	d103      	bne.n	8005224 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e00c      	b.n	800523e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3308      	adds	r3, #8
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e002      	b.n	8005232 <vListInsert+0x2e>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	d2f6      	bcs.n	800522c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6892      	ldr	r2, [r2, #8]
 800528c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6852      	ldr	r2, [r2, #4]
 8005296:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d103      	bne.n	80052aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10b      	bne.n	80052f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052f8:	f001 fb76 	bl	80069e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	3b01      	subs	r3, #1
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	441a      	add	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	22ff      	movs	r2, #255	@ 0xff
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	22ff      	movs	r2, #255	@ 0xff
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d114      	bne.n	8005378 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01a      	beq.n	800538c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3310      	adds	r3, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 feb2 	bl	80060c4 <xTaskRemoveFromEventList>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d012      	beq.n	800538c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <xQueueGenericReset+0xd0>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	e009      	b.n	800538c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3310      	adds	r3, #16
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fef0 	bl	8005162 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3324      	adds	r3, #36	@ 0x24
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff feeb 	bl	8005162 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800538c:	f001 fb5e 	bl	8006a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005390:	2301      	movs	r3, #1
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	@ 0x28
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xQueueGenericCreate+0x2c>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3348      	adds	r3, #72	@ 0x48
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fc26 	bl	8006c2c <pvPortMalloc>
 80053e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d011      	beq.n	800540c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3348      	adds	r3, #72	@ 0x48
 80053f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053fa:	79fa      	ldrb	r2, [r7, #7]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f805 	bl	8005416 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800540c:	69bb      	ldr	r3, [r7, #24]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e002      	b.n	8005438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005444:	2101      	movs	r1, #1
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f7ff ff40 	bl	80052cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	@ 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	61fb      	str	r3, [r7, #28]
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <xQueueGiveFromISR+0x5c>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <xQueueGiveFromISR+0x60>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <xQueueGiveFromISR+0x62>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	61bb      	str	r3, [r7, #24]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054d2:	f001 fb69 	bl	8006ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054d6:	f3ef 8211 	mrs	r2, BASEPRI
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	617a      	str	r2, [r7, #20]
 80054ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054fe:	429a      	cmp	r2, r3
 8005500:	d22b      	bcs.n	800555a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005514:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800551c:	d112      	bne.n	8005544 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	3324      	adds	r3, #36	@ 0x24
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fdca 	bl	80060c4 <xTaskRemoveFromEventList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e007      	b.n	8005554 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005548:	3301      	adds	r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	b25a      	sxtb	r2, r3
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005554:	2301      	movs	r3, #1
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
 8005558:	e001      	b.n	800555e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800555a:	2300      	movs	r3, #0
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005568:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800556c:	4618      	mov	r0, r3
 800556e:	3738      	adds	r7, #56	@ 0x38
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08e      	sub	sp, #56	@ 0x38
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61fb      	str	r3, [r7, #28]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c8:	f000 ff3c 	bl	8006444 <xTaskGetSchedulerState>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <xQueueSemaphoreTake+0x64>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <xQueueSemaphoreTake+0x68>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <xQueueSemaphoreTake+0x6a>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61bb      	str	r3, [r7, #24]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055fa:	f001 f9f5 	bl	80069e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d024      	beq.n	8005654 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800561a:	f001 f837 	bl	800668c <pvTaskIncrementMutexHeldCount>
 800561e:	4602      	mov	r2, r0
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00f      	beq.n	800564c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562e:	3310      	adds	r3, #16
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fd47 	bl	80060c4 <xTaskRemoveFromEventList>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800563c:	4b54      	ldr	r3, [pc, #336]	@ (8005790 <xQueueSemaphoreTake+0x21c>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800564c:	f001 f9fe 	bl	8006a4c <vPortExitCritical>
				return pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	e098      	b.n	8005786 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d112      	bne.n	8005680 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	617b      	str	r3, [r7, #20]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005678:	f001 f9e8 	bl	8006a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800567c:	2300      	movs	r3, #0
 800567e:	e082      	b.n	8005786 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd7e 	bl	800618c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005694:	f001 f9da 	bl	8006a4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005698:	f000 fb2c 	bl	8005cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800569c:	f001 f9a4 	bl	80069e8 <vPortEnterCritical>
 80056a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a6:	b25b      	sxtb	r3, r3
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ac:	d103      	bne.n	80056b6 <xQueueSemaphoreTake+0x142>
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c2:	d103      	bne.n	80056cc <xQueueSemaphoreTake+0x158>
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056cc:	f001 f9be 	bl	8006a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d0:	463a      	mov	r2, r7
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fd6d 	bl	80061b8 <xTaskCheckForTimeOut>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d132      	bne.n	800574a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056e6:	f000 f8bf 	bl	8005868 <prvIsQueueEmpty>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d026      	beq.n	800573e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80056f8:	f001 f976 	bl	80069e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 febd 	bl	8006480 <xTaskPriorityInherit>
 8005706:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005708:	f001 f9a0 	bl	8006a4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	3324      	adds	r3, #36	@ 0x24
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fcaf 	bl	8006078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800571a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800571c:	f000 f852 	bl	80057c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005720:	f000 faf6 	bl	8005d10 <xTaskResumeAll>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	f47f af67 	bne.w	80055fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800572c:	4b18      	ldr	r3, [pc, #96]	@ (8005790 <xQueueSemaphoreTake+0x21c>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	e75d      	b.n	80055fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800573e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005740:	f000 f840 	bl	80057c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005744:	f000 fae4 	bl	8005d10 <xTaskResumeAll>
 8005748:	e757      	b.n	80055fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800574a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800574c:	f000 f83a 	bl	80057c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005750:	f000 fade 	bl	8005d10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005756:	f000 f887 	bl	8005868 <prvIsQueueEmpty>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	f43f af4c 	beq.w	80055fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005768:	f001 f93e 	bl	80069e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800576c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800576e:	f000 f811 	bl	8005794 <prvGetDisinheritPriorityAfterTimeout>
 8005772:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fef6 	bl	800656c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005780:	f001 f964 	bl	8006a4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005786:	4618      	mov	r0, r3
 8005788:	3738      	adds	r7, #56	@ 0x38
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e001      	b.n	80057b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057b6:	68fb      	ldr	r3, [r7, #12]
	}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057cc:	f001 f90c 	bl	80069e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d8:	e011      	b.n	80057fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d012      	beq.n	8005808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3324      	adds	r3, #36	@ 0x24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fc6c 	bl	80060c4 <xTaskRemoveFromEventList>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057f2:	f000 fd45 	bl	8006280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	dce9      	bgt.n	80057da <prvUnlockQueue+0x16>
 8005806:	e000      	b.n	800580a <prvUnlockQueue+0x46>
					break;
 8005808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	22ff      	movs	r2, #255	@ 0xff
 800580e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005812:	f001 f91b 	bl	8006a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005816:	f001 f8e7 	bl	80069e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005822:	e011      	b.n	8005848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3310      	adds	r3, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fc47 	bl	80060c4 <xTaskRemoveFromEventList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800583c:	f000 fd20 	bl	8006280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	3b01      	subs	r3, #1
 8005844:	b2db      	uxtb	r3, r3
 8005846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800584c:	2b00      	cmp	r3, #0
 800584e:	dce9      	bgt.n	8005824 <prvUnlockQueue+0x60>
 8005850:	e000      	b.n	8005854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	22ff      	movs	r2, #255	@ 0xff
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800585c:	f001 f8f6 	bl	8006a4c <vPortExitCritical>
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005870:	f001 f8ba 	bl	80069e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e001      	b.n	8005886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005886:	f001 f8e1 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	@ 0x38
 8005898:	af04      	add	r7, sp, #16
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	623b      	str	r3, [r7, #32]
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <xTaskCreateStatic+0x4a>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	61fb      	str	r3, [r7, #28]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058de:	2354      	movs	r3, #84	@ 0x54
 80058e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b54      	cmp	r3, #84	@ 0x54
 80058e6:	d00b      	beq.n	8005900 <xTaskCreateStatic+0x6c>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	61bb      	str	r3, [r7, #24]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005900:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01e      	beq.n	8005946 <xTaskCreateStatic+0xb2>
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005920:	2300      	movs	r3, #0
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	f107 0314 	add.w	r3, r7, #20
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f850 	bl	80059de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800593e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005940:	f000 f8d6 	bl	8005af0 <prvAddNewTaskToReadyList>
 8005944:	e001      	b.n	800594a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800594a:	697b      	ldr	r3, [r7, #20]
	}
 800594c:	4618      	mov	r0, r3
 800594e:	3728      	adds	r7, #40	@ 0x28
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	@ 0x30
 8005958:	af04      	add	r7, sp, #16
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f95f 	bl	8006c2c <pvPortMalloc>
 800596e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005976:	2054      	movs	r0, #84	@ 0x54
 8005978:	f001 f958 	bl	8006c2c <pvPortMalloc>
 800597c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	631a      	str	r2, [r3, #48]	@ 0x30
 800598a:	e005      	b.n	8005998 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800598c:	6978      	ldr	r0, [r7, #20]
 800598e:	f001 fa1b 	bl	8006dc8 <vPortFree>
 8005992:	e001      	b.n	8005998 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d017      	beq.n	80059ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	2300      	movs	r3, #0
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f80e 	bl	80059de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059c2:	69f8      	ldr	r0, [r7, #28]
 80059c4:	f000 f894 	bl	8005af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059c8:	2301      	movs	r3, #1
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e002      	b.n	80059d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059d4:	69bb      	ldr	r3, [r7, #24]
	}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059f6:	3b01      	subs	r3, #1
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	617b      	str	r3, [r7, #20]
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01f      	beq.n	8005a6e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	e012      	b.n	8005a5a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	7819      	ldrb	r1, [r3, #0]
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	3334      	adds	r3, #52	@ 0x34
 8005a44:	460a      	mov	r2, r1
 8005a46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2b0f      	cmp	r3, #15
 8005a5e:	d9e9      	bls.n	8005a34 <prvInitialiseNewTask+0x56>
 8005a60:	e000      	b.n	8005a64 <prvInitialiseNewTask+0x86>
			{
				break;
 8005a62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a6c:	e003      	b.n	8005a76 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d901      	bls.n	8005a80 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a7c:	2306      	movs	r3, #6
 8005a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a84:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a8a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	3304      	adds	r3, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fb83 	bl	80051a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fb7e 	bl	80051a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	f1c3 0207 	rsb	r2, r3, #7
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	69b8      	ldr	r0, [r7, #24]
 8005ad0:	f000 fe56 	bl	8006780 <pxPortInitialiseStack>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005af8:	f000 ff76 	bl	80069e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005afc:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <prvAddNewTaskToReadyList+0xb8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	4a29      	ldr	r2, [pc, #164]	@ (8005ba8 <prvAddNewTaskToReadyList+0xb8>)
 8005b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b06:	4b29      	ldr	r3, [pc, #164]	@ (8005bac <prvAddNewTaskToReadyList+0xbc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b0e:	4a27      	ldr	r2, [pc, #156]	@ (8005bac <prvAddNewTaskToReadyList+0xbc>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b14:	4b24      	ldr	r3, [pc, #144]	@ (8005ba8 <prvAddNewTaskToReadyList+0xb8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d110      	bne.n	8005b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b1c:	f000 fbd4 	bl	80062c8 <prvInitialiseTaskLists>
 8005b20:	e00d      	b.n	8005b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b22:	4b23      	ldr	r3, [pc, #140]	@ (8005bb0 <prvAddNewTaskToReadyList+0xc0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b2a:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <prvAddNewTaskToReadyList+0xbc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d802      	bhi.n	8005b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b38:	4a1c      	ldr	r2, [pc, #112]	@ (8005bac <prvAddNewTaskToReadyList+0xbc>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc4>)
 8005b46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	4b19      	ldr	r3, [pc, #100]	@ (8005bb8 <prvAddNewTaskToReadyList+0xc8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	4a18      	ldr	r2, [pc, #96]	@ (8005bb8 <prvAddNewTaskToReadyList+0xc8>)
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <prvAddNewTaskToReadyList+0xcc>)
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f7ff fb23 	bl	80051bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b76:	f000 ff69 	bl	8006a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <prvAddNewTaskToReadyList+0xc0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <prvAddNewTaskToReadyList+0xbc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d207      	bcs.n	8005ba0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <prvAddNewTaskToReadyList+0xd0>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000940 	.word	0x20000940
 8005bac:	20000840 	.word	0x20000840
 8005bb0:	2000094c 	.word	0x2000094c
 8005bb4:	2000095c 	.word	0x2000095c
 8005bb8:	20000948 	.word	0x20000948
 8005bbc:	20000844 	.word	0x20000844
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d018      	beq.n	8005c08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bd6:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <vTaskDelay+0x64>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <vTaskDelay+0x32>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60bb      	str	r3, [r7, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bf6:	f000 f87d 	bl	8005cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fd59 	bl	80066b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c02:	f000 f885 	bl	8005d10 <xTaskResumeAll>
 8005c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c0e:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <vTaskDelay+0x68>)
 8005c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000968 	.word	0x20000968
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	@ 0x28
 8005c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c3e:	463a      	mov	r2, r7
 8005c40:	1d39      	adds	r1, r7, #4
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fb f9cc 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	9202      	str	r2, [sp, #8]
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	2300      	movs	r3, #0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	460a      	mov	r2, r1
 8005c5e:	491f      	ldr	r1, [pc, #124]	@ (8005cdc <vTaskStartScheduler+0xac>)
 8005c60:	481f      	ldr	r0, [pc, #124]	@ (8005ce0 <vTaskStartScheduler+0xb0>)
 8005c62:	f7ff fe17 	bl	8005894 <xTaskCreateStatic>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce4 <vTaskStartScheduler+0xb4>)
 8005c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <vTaskStartScheduler+0xb4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e001      	b.n	8005c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d116      	bne.n	8005cb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	613b      	str	r3, [r7, #16]
}
 8005c96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c98:	4b13      	ldr	r3, [pc, #76]	@ (8005ce8 <vTaskStartScheduler+0xb8>)
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ca0:	4b12      	ldr	r3, [pc, #72]	@ (8005cec <vTaskStartScheduler+0xbc>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ca6:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <vTaskStartScheduler+0xc0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cac:	f000 fdf8 	bl	80068a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cb0:	e00f      	b.n	8005cd2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cb8:	d10b      	bne.n	8005cd2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	60fb      	str	r3, [r7, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <vTaskStartScheduler+0x9e>
}
 8005cd2:	bf00      	nop
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	0800b8dc 	.word	0x0800b8dc
 8005ce0:	08006299 	.word	0x08006299
 8005ce4:	20000964 	.word	0x20000964
 8005ce8:	20000960 	.word	0x20000960
 8005cec:	2000094c 	.word	0x2000094c
 8005cf0:	20000944 	.word	0x20000944

08005cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	@ (8005d0c <vTaskSuspendAll+0x18>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4a03      	ldr	r2, [pc, #12]	@ (8005d0c <vTaskSuspendAll+0x18>)
 8005d00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000968 	.word	0x20000968

08005d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d1e:	4b42      	ldr	r3, [pc, #264]	@ (8005e28 <xTaskResumeAll+0x118>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <xTaskResumeAll+0x2e>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	603b      	str	r3, [r7, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d3e:	f000 fe53 	bl	80069e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d42:	4b39      	ldr	r3, [pc, #228]	@ (8005e28 <xTaskResumeAll+0x118>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a37      	ldr	r2, [pc, #220]	@ (8005e28 <xTaskResumeAll+0x118>)
 8005d4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4c:	4b36      	ldr	r3, [pc, #216]	@ (8005e28 <xTaskResumeAll+0x118>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d161      	bne.n	8005e18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d54:	4b35      	ldr	r3, [pc, #212]	@ (8005e2c <xTaskResumeAll+0x11c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d05d      	beq.n	8005e18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d5c:	e02e      	b.n	8005dbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d5e:	4b34      	ldr	r3, [pc, #208]	@ (8005e30 <xTaskResumeAll+0x120>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3318      	adds	r3, #24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fa83 	bl	8005276 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fa7e 	bl	8005276 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	2201      	movs	r2, #1
 8005d80:	409a      	lsls	r2, r3
 8005d82:	4b2c      	ldr	r3, [pc, #176]	@ (8005e34 <xTaskResumeAll+0x124>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	4a2a      	ldr	r2, [pc, #168]	@ (8005e34 <xTaskResumeAll+0x124>)
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4a27      	ldr	r2, [pc, #156]	@ (8005e38 <xTaskResumeAll+0x128>)
 8005d9a:	441a      	add	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f7ff fa0a 	bl	80051bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dac:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <xTaskResumeAll+0x12c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005db6:	4b22      	ldr	r3, [pc, #136]	@ (8005e40 <xTaskResumeAll+0x130>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005e30 <xTaskResumeAll+0x120>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1cc      	bne.n	8005d5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dca:	f000 fb1b 	bl	8006404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dce:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <xTaskResumeAll+0x134>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dda:	f000 f837 	bl	8005e4c <xTaskIncrementTick>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005de4:	4b16      	ldr	r3, [pc, #88]	@ (8005e40 <xTaskResumeAll+0x130>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f1      	bne.n	8005dda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005df6:	4b13      	ldr	r3, [pc, #76]	@ (8005e44 <xTaskResumeAll+0x134>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dfc:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <xTaskResumeAll+0x130>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e08:	4b0f      	ldr	r3, [pc, #60]	@ (8005e48 <xTaskResumeAll+0x138>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e18:	f000 fe18 	bl	8006a4c <vPortExitCritical>

	return xAlreadyYielded;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000968 	.word	0x20000968
 8005e2c:	20000940 	.word	0x20000940
 8005e30:	20000900 	.word	0x20000900
 8005e34:	20000948 	.word	0x20000948
 8005e38:	20000844 	.word	0x20000844
 8005e3c:	20000840 	.word	0x20000840
 8005e40:	20000954 	.word	0x20000954
 8005e44:	20000950 	.word	0x20000950
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e56:	4b4f      	ldr	r3, [pc, #316]	@ (8005f94 <xTaskIncrementTick+0x148>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 808f 	bne.w	8005f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e60:	4b4d      	ldr	r3, [pc, #308]	@ (8005f98 <xTaskIncrementTick+0x14c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e68:	4a4b      	ldr	r2, [pc, #300]	@ (8005f98 <xTaskIncrementTick+0x14c>)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d121      	bne.n	8005eb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e74:	4b49      	ldr	r3, [pc, #292]	@ (8005f9c <xTaskIncrementTick+0x150>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	603b      	str	r3, [r7, #0]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskIncrementTick+0x46>
 8005e96:	4b41      	ldr	r3, [pc, #260]	@ (8005f9c <xTaskIncrementTick+0x150>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	4b40      	ldr	r3, [pc, #256]	@ (8005fa0 <xTaskIncrementTick+0x154>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8005f9c <xTaskIncrementTick+0x150>)
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa0 <xTaskIncrementTick+0x154>)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa4 <xTaskIncrementTick+0x158>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa4 <xTaskIncrementTick+0x158>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	f000 faa6 	bl	8006404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <xTaskIncrementTick+0x15c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d348      	bcc.n	8005f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec2:	4b36      	ldr	r3, [pc, #216]	@ (8005f9c <xTaskIncrementTick+0x150>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d104      	bne.n	8005ed6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ecc:	4b36      	ldr	r3, [pc, #216]	@ (8005fa8 <xTaskIncrementTick+0x15c>)
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ed2:	601a      	str	r2, [r3, #0]
					break;
 8005ed4:	e03e      	b.n	8005f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed6:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d203      	bcs.n	8005ef6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eee:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa8 <xTaskIncrementTick+0x15c>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ef4:	e02e      	b.n	8005f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff f9bb 	bl	8005276 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff f9b2 	bl	8005276 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <xTaskIncrementTick+0x160>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	4a22      	ldr	r2, [pc, #136]	@ (8005fac <xTaskIncrementTick+0x160>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <xTaskIncrementTick+0x164>)
 8005f32:	441a      	add	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7ff f93e 	bl	80051bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f44:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <xTaskIncrementTick+0x168>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d3b9      	bcc.n	8005ec2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f52:	e7b6      	b.n	8005ec2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f54:	4b17      	ldr	r3, [pc, #92]	@ (8005fb4 <xTaskIncrementTick+0x168>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	4915      	ldr	r1, [pc, #84]	@ (8005fb0 <xTaskIncrementTick+0x164>)
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d901      	bls.n	8005f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f70:	4b11      	ldr	r3, [pc, #68]	@ (8005fb8 <xTaskIncrementTick+0x16c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e004      	b.n	8005f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fbc <xTaskIncrementTick+0x170>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	4a0d      	ldr	r2, [pc, #52]	@ (8005fbc <xTaskIncrementTick+0x170>)
 8005f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f88:	697b      	ldr	r3, [r7, #20]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000968 	.word	0x20000968
 8005f98:	20000944 	.word	0x20000944
 8005f9c:	200008f8 	.word	0x200008f8
 8005fa0:	200008fc 	.word	0x200008fc
 8005fa4:	20000958 	.word	0x20000958
 8005fa8:	20000960 	.word	0x20000960
 8005fac:	20000948 	.word	0x20000948
 8005fb0:	20000844 	.word	0x20000844
 8005fb4:	20000840 	.word	0x20000840
 8005fb8:	20000954 	.word	0x20000954
 8005fbc:	20000950 	.word	0x20000950

08005fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fc6:	4b27      	ldr	r3, [pc, #156]	@ (8006064 <vTaskSwitchContext+0xa4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fce:	4b26      	ldr	r3, [pc, #152]	@ (8006068 <vTaskSwitchContext+0xa8>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fd4:	e040      	b.n	8006058 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005fd6:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <vTaskSwitchContext+0xa8>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	4b23      	ldr	r3, [pc, #140]	@ (800606c <vTaskSwitchContext+0xac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	fab3 f383 	clz	r3, r3
 8005fe8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	f1c3 031f 	rsb	r3, r3, #31
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	491f      	ldr	r1, [pc, #124]	@ (8006070 <vTaskSwitchContext+0xb0>)
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	607b      	str	r3, [r7, #4]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <vTaskSwitchContext+0x5a>
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4a11      	ldr	r2, [pc, #68]	@ (8006070 <vTaskSwitchContext+0xb0>)
 800602a:	4413      	add	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3308      	adds	r3, #8
 8006040:	429a      	cmp	r2, r3
 8006042:	d104      	bne.n	800604e <vTaskSwitchContext+0x8e>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	605a      	str	r2, [r3, #4]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4a07      	ldr	r2, [pc, #28]	@ (8006074 <vTaskSwitchContext+0xb4>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000968 	.word	0x20000968
 8006068:	20000954 	.word	0x20000954
 800606c:	20000948 	.word	0x20000948
 8006070:	20000844 	.word	0x20000844
 8006074:	20000840 	.word	0x20000840

08006078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60fb      	str	r3, [r7, #12]
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	e7fd      	b.n	800609c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <vTaskPlaceOnEventList+0x48>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3318      	adds	r3, #24
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff f8ab 	bl	8005204 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060ae:	2101      	movs	r1, #1
 80060b0:	6838      	ldr	r0, [r7, #0]
 80060b2:	f000 faff 	bl	80066b4 <prvAddCurrentTaskToDelayedList>
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000840 	.word	0x20000840

080060c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	60fb      	str	r3, [r7, #12]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3318      	adds	r3, #24
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff f8bd 	bl	8005276 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <xTaskRemoveFromEventList+0xb0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11c      	bne.n	800613e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff f8b4 	bl	8005276 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	2201      	movs	r2, #1
 8006114:	409a      	lsls	r2, r3
 8006116:	4b18      	ldr	r3, [pc, #96]	@ (8006178 <xTaskRemoveFromEventList+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <xTaskRemoveFromEventList+0xb4>)
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4a13      	ldr	r2, [pc, #76]	@ (800617c <xTaskRemoveFromEventList+0xb8>)
 800612e:	441a      	add	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f7ff f840 	bl	80051bc <vListInsertEnd>
 800613c:	e005      	b.n	800614a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3318      	adds	r3, #24
 8006142:	4619      	mov	r1, r3
 8006144:	480e      	ldr	r0, [pc, #56]	@ (8006180 <xTaskRemoveFromEventList+0xbc>)
 8006146:	f7ff f839 	bl	80051bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <xTaskRemoveFromEventList+0xc0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d905      	bls.n	8006164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <xTaskRemoveFromEventList+0xc4>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e001      	b.n	8006168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006168:	697b      	ldr	r3, [r7, #20]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000968 	.word	0x20000968
 8006178:	20000948 	.word	0x20000948
 800617c:	20000844 	.word	0x20000844
 8006180:	20000900 	.word	0x20000900
 8006184:	20000840 	.word	0x20000840
 8006188:	20000954 	.word	0x20000954

0800618c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <vTaskInternalSetTimeOutState+0x24>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800619c:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <vTaskInternalSetTimeOutState+0x28>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000958 	.word	0x20000958
 80061b4:	20000944 	.word	0x20000944

080061b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	613b      	str	r3, [r7, #16]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60fb      	str	r3, [r7, #12]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061fe:	f000 fbf3 	bl	80069e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006202:	4b1d      	ldr	r3, [pc, #116]	@ (8006278 <xTaskCheckForTimeOut+0xc0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800621a:	d102      	bne.n	8006222 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e023      	b.n	800626a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b15      	ldr	r3, [pc, #84]	@ (800627c <xTaskCheckForTimeOut+0xc4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d007      	beq.n	800623e <xTaskCheckForTimeOut+0x86>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e015      	b.n	800626a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	429a      	cmp	r2, r3
 8006246:	d20b      	bcs.n	8006260 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff99 	bl	800618c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e004      	b.n	800626a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800626a:	f000 fbef 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 800626e:	69fb      	ldr	r3, [r7, #28]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000944 	.word	0x20000944
 800627c:	20000958 	.word	0x20000958

08006280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006284:	4b03      	ldr	r3, [pc, #12]	@ (8006294 <vTaskMissedYield+0x14>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
}
 800628a:	bf00      	nop
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	20000954 	.word	0x20000954

08006298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062a0:	f000 f852 	bl	8006348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <prvIdleTask+0x28>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d9f9      	bls.n	80062a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <prvIdleTask+0x2c>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062bc:	e7f0      	b.n	80062a0 <prvIdleTask+0x8>
 80062be:	bf00      	nop
 80062c0:	20000844 	.word	0x20000844
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ce:	2300      	movs	r3, #0
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	e00c      	b.n	80062ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4a12      	ldr	r2, [pc, #72]	@ (8006328 <prvInitialiseTaskLists+0x60>)
 80062e0:	4413      	add	r3, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe ff3d 	bl	8005162 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3301      	adds	r3, #1
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d9ef      	bls.n	80062d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062f4:	480d      	ldr	r0, [pc, #52]	@ (800632c <prvInitialiseTaskLists+0x64>)
 80062f6:	f7fe ff34 	bl	8005162 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062fa:	480d      	ldr	r0, [pc, #52]	@ (8006330 <prvInitialiseTaskLists+0x68>)
 80062fc:	f7fe ff31 	bl	8005162 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006300:	480c      	ldr	r0, [pc, #48]	@ (8006334 <prvInitialiseTaskLists+0x6c>)
 8006302:	f7fe ff2e 	bl	8005162 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006306:	480c      	ldr	r0, [pc, #48]	@ (8006338 <prvInitialiseTaskLists+0x70>)
 8006308:	f7fe ff2b 	bl	8005162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800630c:	480b      	ldr	r0, [pc, #44]	@ (800633c <prvInitialiseTaskLists+0x74>)
 800630e:	f7fe ff28 	bl	8005162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006312:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <prvInitialiseTaskLists+0x78>)
 8006314:	4a05      	ldr	r2, [pc, #20]	@ (800632c <prvInitialiseTaskLists+0x64>)
 8006316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006318:	4b0a      	ldr	r3, [pc, #40]	@ (8006344 <prvInitialiseTaskLists+0x7c>)
 800631a:	4a05      	ldr	r2, [pc, #20]	@ (8006330 <prvInitialiseTaskLists+0x68>)
 800631c:	601a      	str	r2, [r3, #0]
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000844 	.word	0x20000844
 800632c:	200008d0 	.word	0x200008d0
 8006330:	200008e4 	.word	0x200008e4
 8006334:	20000900 	.word	0x20000900
 8006338:	20000914 	.word	0x20000914
 800633c:	2000092c 	.word	0x2000092c
 8006340:	200008f8 	.word	0x200008f8
 8006344:	200008fc 	.word	0x200008fc

08006348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800634e:	e019      	b.n	8006384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006350:	f000 fb4a 	bl	80069e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006354:	4b10      	ldr	r3, [pc, #64]	@ (8006398 <prvCheckTasksWaitingTermination+0x50>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe ff88 	bl	8005276 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <prvCheckTasksWaitingTermination+0x54>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a0b      	ldr	r2, [pc, #44]	@ (800639c <prvCheckTasksWaitingTermination+0x54>)
 800636e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006370:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <prvCheckTasksWaitingTermination+0x58>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	4a0a      	ldr	r2, [pc, #40]	@ (80063a0 <prvCheckTasksWaitingTermination+0x58>)
 8006378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800637a:	f000 fb67 	bl	8006a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f810 	bl	80063a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006384:	4b06      	ldr	r3, [pc, #24]	@ (80063a0 <prvCheckTasksWaitingTermination+0x58>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e1      	bne.n	8006350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000914 	.word	0x20000914
 800639c:	20000940 	.word	0x20000940
 80063a0:	20000928 	.word	0x20000928

080063a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d108      	bne.n	80063c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fd04 	bl	8006dc8 <vPortFree>
				vPortFree( pxTCB );
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd01 	bl	8006dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063c6:	e019      	b.n	80063fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d103      	bne.n	80063da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fcf8 	bl	8006dc8 <vPortFree>
	}
 80063d8:	e010      	b.n	80063fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d00b      	beq.n	80063fc <prvDeleteTCB+0x58>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <prvDeleteTCB+0x54>
	}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640a:	4b0c      	ldr	r3, [pc, #48]	@ (800643c <prvResetNextTaskUnblockTime+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006414:	4b0a      	ldr	r3, [pc, #40]	@ (8006440 <prvResetNextTaskUnblockTime+0x3c>)
 8006416:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800641a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800641c:	e008      	b.n	8006430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641e:	4b07      	ldr	r3, [pc, #28]	@ (800643c <prvResetNextTaskUnblockTime+0x38>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4a04      	ldr	r2, [pc, #16]	@ (8006440 <prvResetNextTaskUnblockTime+0x3c>)
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	200008f8 	.word	0x200008f8
 8006440:	20000960 	.word	0x20000960

08006444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800644a:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <xTaskGetSchedulerState+0x34>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006452:	2301      	movs	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	e008      	b.n	800646a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006458:	4b08      	ldr	r3, [pc, #32]	@ (800647c <xTaskGetSchedulerState+0x38>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006460:	2302      	movs	r3, #2
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	e001      	b.n	800646a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006466:	2300      	movs	r3, #0
 8006468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800646a:	687b      	ldr	r3, [r7, #4]
	}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	2000094c 	.word	0x2000094c
 800647c:	20000968 	.word	0x20000968

08006480 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d05e      	beq.n	8006554 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649a:	4b31      	ldr	r3, [pc, #196]	@ (8006560 <xTaskPriorityInherit+0xe0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d24e      	bcs.n	8006542 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db06      	blt.n	80064ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006560 <xTaskPriorityInherit+0xe0>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	f1c3 0207 	rsb	r2, r3, #7
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6959      	ldr	r1, [r3, #20]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a26      	ldr	r2, [pc, #152]	@ (8006564 <xTaskPriorityInherit+0xe4>)
 80064cc:	4413      	add	r3, r2
 80064ce:	4299      	cmp	r1, r3
 80064d0:	d12f      	bne.n	8006532 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fecd 	bl	8005276 <uxListRemove>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	2201      	movs	r2, #1
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43da      	mvns	r2, r3
 80064ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006568 <xTaskPriorityInherit+0xe8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4013      	ands	r3, r2
 80064f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <xTaskPriorityInherit+0xe8>)
 80064f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064f8:	4b19      	ldr	r3, [pc, #100]	@ (8006560 <xTaskPriorityInherit+0xe0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	2201      	movs	r2, #1
 8006508:	409a      	lsls	r2, r3
 800650a:	4b17      	ldr	r3, [pc, #92]	@ (8006568 <xTaskPriorityInherit+0xe8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4313      	orrs	r3, r2
 8006510:	4a15      	ldr	r2, [pc, #84]	@ (8006568 <xTaskPriorityInherit+0xe8>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a10      	ldr	r2, [pc, #64]	@ (8006564 <xTaskPriorityInherit+0xe4>)
 8006522:	441a      	add	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fe fe46 	bl	80051bc <vListInsertEnd>
 8006530:	e004      	b.n	800653c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006532:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <xTaskPriorityInherit+0xe0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e008      	b.n	8006554 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <xTaskPriorityInherit+0xe0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	429a      	cmp	r2, r3
 800654e:	d201      	bcs.n	8006554 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006554:	68fb      	ldr	r3, [r7, #12]
	}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000840 	.word	0x20000840
 8006564:	20000844 	.word	0x20000844
 8006568:	20000948 	.word	0x20000948

0800656c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800657a:	2301      	movs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d079      	beq.n	8006678 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d902      	bls.n	80065b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e002      	b.n	80065ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d059      	beq.n	8006678 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d154      	bne.n	8006678 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006680 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d10b      	bne.n	80065f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60bb      	str	r3, [r7, #8]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db04      	blt.n	800660e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f1c3 0207 	rsb	r2, r3, #7
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a19      	ldr	r2, [pc, #100]	@ (8006684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800661e:	4413      	add	r3, r2
 8006620:	4299      	cmp	r1, r3
 8006622:	d129      	bne.n	8006678 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fe24 	bl	8005276 <uxListRemove>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	2201      	movs	r2, #1
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43da      	mvns	r2, r3
 8006640:	4b11      	ldr	r3, [pc, #68]	@ (8006688 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4013      	ands	r3, r2
 8006646:	4a10      	ldr	r2, [pc, #64]	@ (8006688 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006648:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	4b0d      	ldr	r3, [pc, #52]	@ (8006688 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4313      	orrs	r3, r2
 8006658:	4a0b      	ldr	r2, [pc, #44]	@ (8006688 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4a06      	ldr	r2, [pc, #24]	@ (8006684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800666a:	441a      	add	r2, r3
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe fda2 	bl	80051bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006678:	bf00      	nop
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000840 	.word	0x20000840
 8006684:	20000844 	.word	0x20000844
 8006688:	20000948 	.word	0x20000948

0800668c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006690:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800669e:	3201      	adds	r2, #1
 80066a0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80066a2:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80066a4:	681b      	ldr	r3, [r3, #0]
	}
 80066a6:	4618      	mov	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000840 	.word	0x20000840

080066b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066be:	4b29      	ldr	r3, [pc, #164]	@ (8006764 <prvAddCurrentTaskToDelayedList+0xb0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c4:	4b28      	ldr	r3, [pc, #160]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fdd3 	bl	8005276 <uxListRemove>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066d6:	4b24      	ldr	r3, [pc, #144]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	2201      	movs	r2, #1
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43da      	mvns	r2, r3
 80066e4:	4b21      	ldr	r3, [pc, #132]	@ (800676c <prvAddCurrentTaskToDelayedList+0xb8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4013      	ands	r3, r2
 80066ea:	4a20      	ldr	r2, [pc, #128]	@ (800676c <prvAddCurrentTaskToDelayedList+0xb8>)
 80066ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f4:	d10a      	bne.n	800670c <prvAddCurrentTaskToDelayedList+0x58>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	481a      	ldr	r0, [pc, #104]	@ (8006770 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006706:	f7fe fd59 	bl	80051bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800670a:	e026      	b.n	800675a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006714:	4b14      	ldr	r3, [pc, #80]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	429a      	cmp	r2, r3
 8006722:	d209      	bcs.n	8006738 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006724:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b0f      	ldr	r3, [pc, #60]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3304      	adds	r3, #4
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fe fd67 	bl	8005204 <vListInsert>
}
 8006736:	e010      	b.n	800675a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006738:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <prvAddCurrentTaskToDelayedList+0xc4>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <prvAddCurrentTaskToDelayedList+0xb4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe fd5d 	bl	8005204 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <prvAddCurrentTaskToDelayedList+0xc8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d202      	bcs.n	800675a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006754:	4a09      	ldr	r2, [pc, #36]	@ (800677c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6013      	str	r3, [r2, #0]
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000944 	.word	0x20000944
 8006768:	20000840 	.word	0x20000840
 800676c:	20000948 	.word	0x20000948
 8006770:	2000092c 	.word	0x2000092c
 8006774:	200008fc 	.word	0x200008fc
 8006778:	200008f8 	.word	0x200008f8
 800677c:	20000960 	.word	0x20000960

08006780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b04      	subs	r3, #4
 8006790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067b0:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <pxPortInitialiseStack+0x64>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b14      	subs	r3, #20
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f06f 0202 	mvn.w	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b20      	subs	r3, #32
 80067d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	080067e9 	.word	0x080067e9

080067e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067f2:	4b13      	ldr	r3, [pc, #76]	@ (8006840 <prvTaskExitError+0x58>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067fa:	d00b      	beq.n	8006814 <prvTaskExitError+0x2c>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <prvTaskExitError+0x28>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60bb      	str	r3, [r7, #8]
}
 8006826:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006828:	bf00      	nop
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0fc      	beq.n	800682a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	2000000c 	.word	0x2000000c
	...

08006850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006850:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <pxCurrentTCBConst2>)
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f380 8809 	msr	PSP, r0
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	4770      	bx	lr
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst2>:
 8006870:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006878:	4808      	ldr	r0, [pc, #32]	@ (800689c <prvPortStartFirstTask+0x24>)
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f380 8808 	msr	MSP, r0
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8814 	msr	CONTROL, r0
 800688a:	b662      	cpsie	i
 800688c:	b661      	cpsie	f
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	df00      	svc	0
 8006898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800689a:	bf00      	nop
 800689c:	e000ed08 	.word	0xe000ed08

080068a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068a6:	4b47      	ldr	r3, [pc, #284]	@ (80069c4 <xPortStartScheduler+0x124>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a47      	ldr	r2, [pc, #284]	@ (80069c8 <xPortStartScheduler+0x128>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10b      	bne.n	80068c8 <xPortStartScheduler+0x28>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068c8:	4b3e      	ldr	r3, [pc, #248]	@ (80069c4 <xPortStartScheduler+0x124>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a3f      	ldr	r2, [pc, #252]	@ (80069cc <xPortStartScheduler+0x12c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10b      	bne.n	80068ea <xPortStartScheduler+0x4a>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068ea:	4b39      	ldr	r3, [pc, #228]	@ (80069d0 <xPortStartScheduler+0x130>)
 80068ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	22ff      	movs	r2, #255	@ 0xff
 80068fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800690c:	b2da      	uxtb	r2, r3
 800690e:	4b31      	ldr	r3, [pc, #196]	@ (80069d4 <xPortStartScheduler+0x134>)
 8006910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006912:	4b31      	ldr	r3, [pc, #196]	@ (80069d8 <xPortStartScheduler+0x138>)
 8006914:	2207      	movs	r2, #7
 8006916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006918:	e009      	b.n	800692e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800691a:	4b2f      	ldr	r3, [pc, #188]	@ (80069d8 <xPortStartScheduler+0x138>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3b01      	subs	r3, #1
 8006920:	4a2d      	ldr	r2, [pc, #180]	@ (80069d8 <xPortStartScheduler+0x138>)
 8006922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006936:	2b80      	cmp	r3, #128	@ 0x80
 8006938:	d0ef      	beq.n	800691a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800693a:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <xPortStartScheduler+0x138>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f1c3 0307 	rsb	r3, r3, #7
 8006942:	2b04      	cmp	r3, #4
 8006944:	d00b      	beq.n	800695e <xPortStartScheduler+0xbe>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60bb      	str	r3, [r7, #8]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800695e:	4b1e      	ldr	r3, [pc, #120]	@ (80069d8 <xPortStartScheduler+0x138>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <xPortStartScheduler+0x138>)
 8006966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006968:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <xPortStartScheduler+0x138>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006970:	4a19      	ldr	r2, [pc, #100]	@ (80069d8 <xPortStartScheduler+0x138>)
 8006972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800697c:	4b17      	ldr	r3, [pc, #92]	@ (80069dc <xPortStartScheduler+0x13c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <xPortStartScheduler+0x13c>)
 8006982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006988:	4b14      	ldr	r3, [pc, #80]	@ (80069dc <xPortStartScheduler+0x13c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a13      	ldr	r2, [pc, #76]	@ (80069dc <xPortStartScheduler+0x13c>)
 800698e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006994:	f000 f8da 	bl	8006b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006998:	4b11      	ldr	r3, [pc, #68]	@ (80069e0 <xPortStartScheduler+0x140>)
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800699e:	f000 f8f9 	bl	8006b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <xPortStartScheduler+0x144>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a0f      	ldr	r2, [pc, #60]	@ (80069e4 <xPortStartScheduler+0x144>)
 80069a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ae:	f7ff ff63 	bl	8006878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069b2:	f7ff fb05 	bl	8005fc0 <vTaskSwitchContext>
	prvTaskExitError();
 80069b6:	f7ff ff17 	bl	80067e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	e000ed00 	.word	0xe000ed00
 80069c8:	410fc271 	.word	0x410fc271
 80069cc:	410fc270 	.word	0x410fc270
 80069d0:	e000e400 	.word	0xe000e400
 80069d4:	2000096c 	.word	0x2000096c
 80069d8:	20000970 	.word	0x20000970
 80069dc:	e000ed20 	.word	0xe000ed20
 80069e0:	2000000c 	.word	0x2000000c
 80069e4:	e000ef34 	.word	0xe000ef34

080069e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a02:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <vPortEnterCritical+0x5c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	4a0e      	ldr	r2, [pc, #56]	@ (8006a44 <vPortEnterCritical+0x5c>)
 8006a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <vPortEnterCritical+0x5c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d110      	bne.n	8006a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a14:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <vPortEnterCritical+0x60>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	603b      	str	r3, [r7, #0]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <vPortEnterCritical+0x4a>
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a52:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <vPortExitCritical+0x50>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <vPortExitCritical+0x26>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <vPortExitCritical+0x50>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <vPortExitCritical+0x50>)
 8006a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a7c:	4b07      	ldr	r3, [pc, #28]	@ (8006a9c <vPortExitCritical+0x50>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <vPortExitCritical+0x44>
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f01e 0f10 	tst.w	lr, #16
 8006ab0:	bf08      	it	eq
 8006ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ac4:	f380 8811 	msr	BASEPRI, r0
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f7ff fa76 	bl	8005fc0 <vTaskSwitchContext>
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f380 8811 	msr	BASEPRI, r0
 8006adc:	bc09      	pop	{r0, r3}
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	6808      	ldr	r0, [r1, #0]
 8006ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae6:	f01e 0f10 	tst.w	lr, #16
 8006aea:	bf08      	it	eq
 8006aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006af0:	f380 8809 	msr	PSP, r0
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst>:
 8006b00:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f7ff f993 	bl	8005e4c <xTaskIncrementTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <xPortSysTickHandler+0x40>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
}
 8006b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b56:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <vPortSetupTimerInterrupt+0x38>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <vPortSetupTimerInterrupt+0x3c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	@ (8006b8c <vPortSetupTimerInterrupt+0x40>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	4a09      	ldr	r2, [pc, #36]	@ (8006b90 <vPortSetupTimerInterrupt+0x44>)
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b6e:	4b04      	ldr	r3, [pc, #16]	@ (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	e000e010 	.word	0xe000e010
 8006b84:	e000e018 	.word	0xe000e018
 8006b88:	20000000 	.word	0x20000000
 8006b8c:	10624dd3 	.word	0x10624dd3
 8006b90:	e000e014 	.word	0xe000e014

08006b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ba4 <vPortEnableVFP+0x10>
 8006b98:	6801      	ldr	r1, [r0, #0]
 8006b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b9e:	6001      	str	r1, [r0, #0]
 8006ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed88 	.word	0xe000ed88

08006ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bae:	f3ef 8305 	mrs	r3, IPSR
 8006bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d915      	bls.n	8006be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bba:	4a18      	ldr	r2, [pc, #96]	@ (8006c1c <vPortValidateInterruptPriority+0x74>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bc4:	4b16      	ldr	r3, [pc, #88]	@ (8006c20 <vPortValidateInterruptPriority+0x78>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	7afa      	ldrb	r2, [r7, #11]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d20b      	bcs.n	8006be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006be6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <vPortValidateInterruptPriority+0x7c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bee:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <vPortValidateInterruptPriority+0x80>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d90b      	bls.n	8006c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	603b      	str	r3, [r7, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <vPortValidateInterruptPriority+0x62>
	}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	e000e3f0 	.word	0xe000e3f0
 8006c20:	2000096c 	.word	0x2000096c
 8006c24:	e000ed0c 	.word	0xe000ed0c
 8006c28:	20000970 	.word	0x20000970

08006c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c38:	f7ff f85c 	bl	8005cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006db0 <pvPortMalloc+0x184>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c44:	f000 f924 	bl	8006e90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c48:	4b5a      	ldr	r3, [pc, #360]	@ (8006db4 <pvPortMalloc+0x188>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f040 8095 	bne.w	8006d80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01e      	beq.n	8006c9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d015      	beq.n	8006c9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f023 0307 	bic.w	r3, r3, #7
 8006c74:	3308      	adds	r3, #8
 8006c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <pvPortMalloc+0x6e>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	617b      	str	r3, [r7, #20]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d06f      	beq.n	8006d80 <pvPortMalloc+0x154>
 8006ca0:	4b45      	ldr	r3, [pc, #276]	@ (8006db8 <pvPortMalloc+0x18c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d86a      	bhi.n	8006d80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006caa:	4b44      	ldr	r3, [pc, #272]	@ (8006dbc <pvPortMalloc+0x190>)
 8006cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cae:	4b43      	ldr	r3, [pc, #268]	@ (8006dbc <pvPortMalloc+0x190>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cb4:	e004      	b.n	8006cc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <pvPortMalloc+0xa6>
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f1      	bne.n	8006cb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cd2:	4b37      	ldr	r3, [pc, #220]	@ (8006db0 <pvPortMalloc+0x184>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d051      	beq.n	8006d80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	1ad2      	subs	r2, r2, r3
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d920      	bls.n	8006d40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <pvPortMalloc+0xfc>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	613b      	str	r3, [r7, #16]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d3a:	69b8      	ldr	r0, [r7, #24]
 8006d3c:	f000 f90a 	bl	8006f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d40:	4b1d      	ldr	r3, [pc, #116]	@ (8006db8 <pvPortMalloc+0x18c>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <pvPortMalloc+0x18c>)
 8006d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <pvPortMalloc+0x18c>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc0 <pvPortMalloc+0x194>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d203      	bcs.n	8006d62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d5a:	4b17      	ldr	r3, [pc, #92]	@ (8006db8 <pvPortMalloc+0x18c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <pvPortMalloc+0x194>)
 8006d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4b13      	ldr	r3, [pc, #76]	@ (8006db4 <pvPortMalloc+0x188>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d76:	4b13      	ldr	r3, [pc, #76]	@ (8006dc4 <pvPortMalloc+0x198>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a11      	ldr	r2, [pc, #68]	@ (8006dc4 <pvPortMalloc+0x198>)
 8006d7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d80:	f7fe ffc6 	bl	8005d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <pvPortMalloc+0x17a>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60fb      	str	r3, [r7, #12]
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <pvPortMalloc+0x176>
	return pvReturn;
 8006da6:	69fb      	ldr	r3, [r7, #28]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3728      	adds	r7, #40	@ 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20001534 	.word	0x20001534
 8006db4:	20001548 	.word	0x20001548
 8006db8:	20001538 	.word	0x20001538
 8006dbc:	2000152c 	.word	0x2000152c
 8006dc0:	2000153c 	.word	0x2000153c
 8006dc4:	20001540 	.word	0x20001540

08006dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d04f      	beq.n	8006e7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dda:	2308      	movs	r3, #8
 8006ddc:	425b      	negs	r3, r3
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <vPortFree+0xbc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <vPortFree+0x46>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <vPortFree+0x66>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60bb      	str	r3, [r7, #8]
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	e7fd      	b.n	8006e2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <vPortFree+0xbc>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01e      	beq.n	8006e7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11a      	bne.n	8006e7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	4b0e      	ldr	r3, [pc, #56]	@ (8006e84 <vPortFree+0xbc>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	401a      	ands	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e54:	f7fe ff4e 	bl	8005cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e88 <vPortFree+0xc0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4413      	add	r3, r2
 8006e62:	4a09      	ldr	r2, [pc, #36]	@ (8006e88 <vPortFree+0xc0>)
 8006e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e66:	6938      	ldr	r0, [r7, #16]
 8006e68:	f000 f874 	bl	8006f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <vPortFree+0xc4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a06      	ldr	r2, [pc, #24]	@ (8006e8c <vPortFree+0xc4>)
 8006e74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e76:	f7fe ff4b 	bl	8005d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20001548 	.word	0x20001548
 8006e88:	20001538 	.word	0x20001538
 8006e8c:	20001544 	.word	0x20001544

08006e90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006e9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e9c:	4b27      	ldr	r3, [pc, #156]	@ (8006f3c <prvHeapInit+0xac>)
 8006e9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3307      	adds	r3, #7
 8006eae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0307 	bic.w	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8006f3c <prvHeapInit+0xac>)
 8006ec0:	4413      	add	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f40 <prvHeapInit+0xb0>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ece:	4b1c      	ldr	r3, [pc, #112]	@ (8006f40 <prvHeapInit+0xb0>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006edc:	2208      	movs	r2, #8
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <prvHeapInit+0xb4>)
 8006ef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef2:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <prvHeapInit+0xb4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efa:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <prvHeapInit+0xb4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f10:	4b0c      	ldr	r3, [pc, #48]	@ (8006f44 <prvHeapInit+0xb4>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f48 <prvHeapInit+0xb8>)
 8006f1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a09      	ldr	r2, [pc, #36]	@ (8006f4c <prvHeapInit+0xbc>)
 8006f26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f28:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <prvHeapInit+0xc0>)
 8006f2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f2e:	601a      	str	r2, [r3, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000974 	.word	0x20000974
 8006f40:	2000152c 	.word	0x2000152c
 8006f44:	20001534 	.word	0x20001534
 8006f48:	2000153c 	.word	0x2000153c
 8006f4c:	20001538 	.word	0x20001538
 8006f50:	20001548 	.word	0x20001548

08006f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f5c:	4b28      	ldr	r3, [pc, #160]	@ (8007000 <prvInsertBlockIntoFreeList+0xac>)
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e002      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x14>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d8f7      	bhi.n	8006f62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d108      	bne.n	8006f96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	441a      	add	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d118      	bne.n	8006fdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d00d      	beq.n	8006fd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e008      	b.n	8006fe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e003      	b.n	8006fe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d002      	beq.n	8006ff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000152c 	.word	0x2000152c
 8007004:	20001534 	.word	0x20001534

08007008 <__cvt>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	ec57 6b10 	vmov	r6, r7, d0
 8007010:	2f00      	cmp	r7, #0
 8007012:	460c      	mov	r4, r1
 8007014:	4619      	mov	r1, r3
 8007016:	463b      	mov	r3, r7
 8007018:	bfbb      	ittet	lt
 800701a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800701e:	461f      	movlt	r7, r3
 8007020:	2300      	movge	r3, #0
 8007022:	232d      	movlt	r3, #45	@ 0x2d
 8007024:	700b      	strb	r3, [r1, #0]
 8007026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800702c:	4691      	mov	r9, r2
 800702e:	f023 0820 	bic.w	r8, r3, #32
 8007032:	bfbc      	itt	lt
 8007034:	4632      	movlt	r2, r6
 8007036:	4616      	movlt	r6, r2
 8007038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800703c:	d005      	beq.n	800704a <__cvt+0x42>
 800703e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007042:	d100      	bne.n	8007046 <__cvt+0x3e>
 8007044:	3401      	adds	r4, #1
 8007046:	2102      	movs	r1, #2
 8007048:	e000      	b.n	800704c <__cvt+0x44>
 800704a:	2103      	movs	r1, #3
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	ab02      	add	r3, sp, #8
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	ec47 6b10 	vmov	d0, r6, r7
 8007058:	4653      	mov	r3, sl
 800705a:	4622      	mov	r2, r4
 800705c:	f001 f9a8 	bl	80083b0 <_dtoa_r>
 8007060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007064:	4605      	mov	r5, r0
 8007066:	d119      	bne.n	800709c <__cvt+0x94>
 8007068:	f019 0f01 	tst.w	r9, #1
 800706c:	d00e      	beq.n	800708c <__cvt+0x84>
 800706e:	eb00 0904 	add.w	r9, r0, r4
 8007072:	2200      	movs	r2, #0
 8007074:	2300      	movs	r3, #0
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7f9 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800707e:	b108      	cbz	r0, 8007084 <__cvt+0x7c>
 8007080:	f8cd 900c 	str.w	r9, [sp, #12]
 8007084:	2230      	movs	r2, #48	@ 0x30
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	454b      	cmp	r3, r9
 800708a:	d31e      	bcc.n	80070ca <__cvt+0xc2>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007090:	1b5b      	subs	r3, r3, r5
 8007092:	4628      	mov	r0, r5
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	b004      	add	sp, #16
 8007098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070a0:	eb00 0904 	add.w	r9, r0, r4
 80070a4:	d1e5      	bne.n	8007072 <__cvt+0x6a>
 80070a6:	7803      	ldrb	r3, [r0, #0]
 80070a8:	2b30      	cmp	r3, #48	@ 0x30
 80070aa:	d10a      	bne.n	80070c2 <__cvt+0xba>
 80070ac:	2200      	movs	r2, #0
 80070ae:	2300      	movs	r3, #0
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80070b8:	b918      	cbnz	r0, 80070c2 <__cvt+0xba>
 80070ba:	f1c4 0401 	rsb	r4, r4, #1
 80070be:	f8ca 4000 	str.w	r4, [sl]
 80070c2:	f8da 3000 	ldr.w	r3, [sl]
 80070c6:	4499      	add	r9, r3
 80070c8:	e7d3      	b.n	8007072 <__cvt+0x6a>
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	9103      	str	r1, [sp, #12]
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	e7d9      	b.n	8007086 <__cvt+0x7e>

080070d2 <__exponent>:
 80070d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d4:	2900      	cmp	r1, #0
 80070d6:	bfba      	itte	lt
 80070d8:	4249      	neglt	r1, r1
 80070da:	232d      	movlt	r3, #45	@ 0x2d
 80070dc:	232b      	movge	r3, #43	@ 0x2b
 80070de:	2909      	cmp	r1, #9
 80070e0:	7002      	strb	r2, [r0, #0]
 80070e2:	7043      	strb	r3, [r0, #1]
 80070e4:	dd29      	ble.n	800713a <__exponent+0x68>
 80070e6:	f10d 0307 	add.w	r3, sp, #7
 80070ea:	461d      	mov	r5, r3
 80070ec:	270a      	movs	r7, #10
 80070ee:	461a      	mov	r2, r3
 80070f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80070f4:	fb07 1416 	mls	r4, r7, r6, r1
 80070f8:	3430      	adds	r4, #48	@ 0x30
 80070fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070fe:	460c      	mov	r4, r1
 8007100:	2c63      	cmp	r4, #99	@ 0x63
 8007102:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007106:	4631      	mov	r1, r6
 8007108:	dcf1      	bgt.n	80070ee <__exponent+0x1c>
 800710a:	3130      	adds	r1, #48	@ 0x30
 800710c:	1e94      	subs	r4, r2, #2
 800710e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007112:	1c41      	adds	r1, r0, #1
 8007114:	4623      	mov	r3, r4
 8007116:	42ab      	cmp	r3, r5
 8007118:	d30a      	bcc.n	8007130 <__exponent+0x5e>
 800711a:	f10d 0309 	add.w	r3, sp, #9
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	42ac      	cmp	r4, r5
 8007122:	bf88      	it	hi
 8007124:	2300      	movhi	r3, #0
 8007126:	3302      	adds	r3, #2
 8007128:	4403      	add	r3, r0
 800712a:	1a18      	subs	r0, r3, r0
 800712c:	b003      	add	sp, #12
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007130:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007134:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007138:	e7ed      	b.n	8007116 <__exponent+0x44>
 800713a:	2330      	movs	r3, #48	@ 0x30
 800713c:	3130      	adds	r1, #48	@ 0x30
 800713e:	7083      	strb	r3, [r0, #2]
 8007140:	70c1      	strb	r1, [r0, #3]
 8007142:	1d03      	adds	r3, r0, #4
 8007144:	e7f1      	b.n	800712a <__exponent+0x58>
	...

08007148 <_printf_float>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	b08d      	sub	sp, #52	@ 0x34
 800714e:	460c      	mov	r4, r1
 8007150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007154:	4616      	mov	r6, r2
 8007156:	461f      	mov	r7, r3
 8007158:	4605      	mov	r5, r0
 800715a:	f001 f815 	bl	8008188 <_localeconv_r>
 800715e:	6803      	ldr	r3, [r0, #0]
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	4618      	mov	r0, r3
 8007164:	f7f9 f884 	bl	8000270 <strlen>
 8007168:	2300      	movs	r3, #0
 800716a:	930a      	str	r3, [sp, #40]	@ 0x28
 800716c:	f8d8 3000 	ldr.w	r3, [r8]
 8007170:	9005      	str	r0, [sp, #20]
 8007172:	3307      	adds	r3, #7
 8007174:	f023 0307 	bic.w	r3, r3, #7
 8007178:	f103 0208 	add.w	r2, r3, #8
 800717c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007180:	f8d4 b000 	ldr.w	fp, [r4]
 8007184:	f8c8 2000 	str.w	r2, [r8]
 8007188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800718c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007190:	9307      	str	r3, [sp, #28]
 8007192:	f8cd 8018 	str.w	r8, [sp, #24]
 8007196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800719a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719e:	4b9c      	ldr	r3, [pc, #624]	@ (8007410 <_printf_float+0x2c8>)
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071a4:	f7f9 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80071a8:	bb70      	cbnz	r0, 8007208 <_printf_float+0xc0>
 80071aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ae:	4b98      	ldr	r3, [pc, #608]	@ (8007410 <_printf_float+0x2c8>)
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071b4:	f7f9 fc9c 	bl	8000af0 <__aeabi_dcmple>
 80071b8:	bb30      	cbnz	r0, 8007208 <_printf_float+0xc0>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80071c6:	b110      	cbz	r0, 80071ce <_printf_float+0x86>
 80071c8:	232d      	movs	r3, #45	@ 0x2d
 80071ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ce:	4a91      	ldr	r2, [pc, #580]	@ (8007414 <_printf_float+0x2cc>)
 80071d0:	4b91      	ldr	r3, [pc, #580]	@ (8007418 <_printf_float+0x2d0>)
 80071d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071d6:	bf94      	ite	ls
 80071d8:	4690      	movls	r8, r2
 80071da:	4698      	movhi	r8, r3
 80071dc:	2303      	movs	r3, #3
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	f02b 0304 	bic.w	r3, fp, #4
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	f04f 0900 	mov.w	r9, #0
 80071ea:	9700      	str	r7, [sp, #0]
 80071ec:	4633      	mov	r3, r6
 80071ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f9d2 	bl	800759c <_printf_common>
 80071f8:	3001      	adds	r0, #1
 80071fa:	f040 808d 	bne.w	8007318 <_printf_float+0x1d0>
 80071fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007202:	b00d      	add	sp, #52	@ 0x34
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	4640      	mov	r0, r8
 800720e:	4649      	mov	r1, r9
 8007210:	f7f9 fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8007214:	b140      	cbz	r0, 8007228 <_printf_float+0xe0>
 8007216:	464b      	mov	r3, r9
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfbc      	itt	lt
 800721c:	232d      	movlt	r3, #45	@ 0x2d
 800721e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007222:	4a7e      	ldr	r2, [pc, #504]	@ (800741c <_printf_float+0x2d4>)
 8007224:	4b7e      	ldr	r3, [pc, #504]	@ (8007420 <_printf_float+0x2d8>)
 8007226:	e7d4      	b.n	80071d2 <_printf_float+0x8a>
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800722e:	9206      	str	r2, [sp, #24]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	d13b      	bne.n	80072ac <_printf_float+0x164>
 8007234:	2306      	movs	r3, #6
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800723c:	2300      	movs	r3, #0
 800723e:	6022      	str	r2, [r4, #0]
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	ab0a      	add	r3, sp, #40	@ 0x28
 8007244:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007248:	ab09      	add	r3, sp, #36	@ 0x24
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	6861      	ldr	r1, [r4, #4]
 800724e:	ec49 8b10 	vmov	d0, r8, r9
 8007252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007256:	4628      	mov	r0, r5
 8007258:	f7ff fed6 	bl	8007008 <__cvt>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007260:	2b47      	cmp	r3, #71	@ 0x47
 8007262:	4680      	mov	r8, r0
 8007264:	d129      	bne.n	80072ba <_printf_float+0x172>
 8007266:	1cc8      	adds	r0, r1, #3
 8007268:	db02      	blt.n	8007270 <_printf_float+0x128>
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	4299      	cmp	r1, r3
 800726e:	dd41      	ble.n	80072f4 <_printf_float+0x1ac>
 8007270:	f1aa 0a02 	sub.w	sl, sl, #2
 8007274:	fa5f fa8a 	uxtb.w	sl, sl
 8007278:	3901      	subs	r1, #1
 800727a:	4652      	mov	r2, sl
 800727c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007280:	9109      	str	r1, [sp, #36]	@ 0x24
 8007282:	f7ff ff26 	bl	80070d2 <__exponent>
 8007286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007288:	1813      	adds	r3, r2, r0
 800728a:	2a01      	cmp	r2, #1
 800728c:	4681      	mov	r9, r0
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	dc02      	bgt.n	8007298 <_printf_float+0x150>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	07d2      	lsls	r2, r2, #31
 8007296:	d501      	bpl.n	800729c <_printf_float+0x154>
 8007298:	3301      	adds	r3, #1
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0a2      	beq.n	80071ea <_printf_float+0xa2>
 80072a4:	232d      	movs	r3, #45	@ 0x2d
 80072a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072aa:	e79e      	b.n	80071ea <_printf_float+0xa2>
 80072ac:	9a06      	ldr	r2, [sp, #24]
 80072ae:	2a47      	cmp	r2, #71	@ 0x47
 80072b0:	d1c2      	bne.n	8007238 <_printf_float+0xf0>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1c0      	bne.n	8007238 <_printf_float+0xf0>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7bd      	b.n	8007236 <_printf_float+0xee>
 80072ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072be:	d9db      	bls.n	8007278 <_printf_float+0x130>
 80072c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072c4:	d118      	bne.n	80072f8 <_printf_float+0x1b0>
 80072c6:	2900      	cmp	r1, #0
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	dd0b      	ble.n	80072e4 <_printf_float+0x19c>
 80072cc:	6121      	str	r1, [r4, #16]
 80072ce:	b913      	cbnz	r3, 80072d6 <_printf_float+0x18e>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	07d0      	lsls	r0, r2, #31
 80072d4:	d502      	bpl.n	80072dc <_printf_float+0x194>
 80072d6:	3301      	adds	r3, #1
 80072d8:	440b      	add	r3, r1
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	e7db      	b.n	800729c <_printf_float+0x154>
 80072e4:	b913      	cbnz	r3, 80072ec <_printf_float+0x1a4>
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	07d2      	lsls	r2, r2, #31
 80072ea:	d501      	bpl.n	80072f0 <_printf_float+0x1a8>
 80072ec:	3302      	adds	r3, #2
 80072ee:	e7f4      	b.n	80072da <_printf_float+0x192>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f2      	b.n	80072da <_printf_float+0x192>
 80072f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fa:	4299      	cmp	r1, r3
 80072fc:	db05      	blt.n	800730a <_printf_float+0x1c2>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	6121      	str	r1, [r4, #16]
 8007302:	07d8      	lsls	r0, r3, #31
 8007304:	d5ea      	bpl.n	80072dc <_printf_float+0x194>
 8007306:	1c4b      	adds	r3, r1, #1
 8007308:	e7e7      	b.n	80072da <_printf_float+0x192>
 800730a:	2900      	cmp	r1, #0
 800730c:	bfd4      	ite	le
 800730e:	f1c1 0202 	rsble	r2, r1, #2
 8007312:	2201      	movgt	r2, #1
 8007314:	4413      	add	r3, r2
 8007316:	e7e0      	b.n	80072da <_printf_float+0x192>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	055a      	lsls	r2, r3, #21
 800731c:	d407      	bmi.n	800732e <_printf_float+0x1e6>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	d12b      	bne.n	8007384 <_printf_float+0x23c>
 800732c:	e767      	b.n	80071fe <_printf_float+0xb6>
 800732e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007332:	f240 80dd 	bls.w	80074f0 <_printf_float+0x3a8>
 8007336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	f7f9 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007342:	2800      	cmp	r0, #0
 8007344:	d033      	beq.n	80073ae <_printf_float+0x266>
 8007346:	4a37      	ldr	r2, [pc, #220]	@ (8007424 <_printf_float+0x2dc>)
 8007348:	2301      	movs	r3, #1
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f af54 	beq.w	80071fe <_printf_float+0xb6>
 8007356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800735a:	4543      	cmp	r3, r8
 800735c:	db02      	blt.n	8007364 <_printf_float+0x21c>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d50f      	bpl.n	8007384 <_printf_float+0x23c>
 8007364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f af45 	beq.w	80071fe <_printf_float+0xb6>
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800737c:	f104 0a1a 	add.w	sl, r4, #26
 8007380:	45c8      	cmp	r8, r9
 8007382:	dc09      	bgt.n	8007398 <_printf_float+0x250>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	079b      	lsls	r3, r3, #30
 8007388:	f100 8103 	bmi.w	8007592 <_printf_float+0x44a>
 800738c:	68e0      	ldr	r0, [r4, #12]
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	4298      	cmp	r0, r3
 8007392:	bfb8      	it	lt
 8007394:	4618      	movlt	r0, r3
 8007396:	e734      	b.n	8007202 <_printf_float+0xba>
 8007398:	2301      	movs	r3, #1
 800739a:	4652      	mov	r2, sl
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	f43f af2b 	beq.w	80071fe <_printf_float+0xb6>
 80073a8:	f109 0901 	add.w	r9, r9, #1
 80073ac:	e7e8      	b.n	8007380 <_printf_float+0x238>
 80073ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc39      	bgt.n	8007428 <_printf_float+0x2e0>
 80073b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <_printf_float+0x2dc>)
 80073b6:	2301      	movs	r3, #1
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af1d 	beq.w	80071fe <_printf_float+0xb6>
 80073c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073c8:	ea59 0303 	orrs.w	r3, r9, r3
 80073cc:	d102      	bne.n	80073d4 <_printf_float+0x28c>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	07d9      	lsls	r1, r3, #31
 80073d2:	d5d7      	bpl.n	8007384 <_printf_float+0x23c>
 80073d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f af0d 	beq.w	80071fe <_printf_float+0xb6>
 80073e4:	f04f 0a00 	mov.w	sl, #0
 80073e8:	f104 0b1a 	add.w	fp, r4, #26
 80073ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ee:	425b      	negs	r3, r3
 80073f0:	4553      	cmp	r3, sl
 80073f2:	dc01      	bgt.n	80073f8 <_printf_float+0x2b0>
 80073f4:	464b      	mov	r3, r9
 80073f6:	e793      	b.n	8007320 <_printf_float+0x1d8>
 80073f8:	2301      	movs	r3, #1
 80073fa:	465a      	mov	r2, fp
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f aefb 	beq.w	80071fe <_printf_float+0xb6>
 8007408:	f10a 0a01 	add.w	sl, sl, #1
 800740c:	e7ee      	b.n	80073ec <_printf_float+0x2a4>
 800740e:	bf00      	nop
 8007410:	7fefffff 	.word	0x7fefffff
 8007414:	0800b933 	.word	0x0800b933
 8007418:	0800b937 	.word	0x0800b937
 800741c:	0800b93b 	.word	0x0800b93b
 8007420:	0800b93f 	.word	0x0800b93f
 8007424:	0800b943 	.word	0x0800b943
 8007428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800742a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800742e:	4553      	cmp	r3, sl
 8007430:	bfa8      	it	ge
 8007432:	4653      	movge	r3, sl
 8007434:	2b00      	cmp	r3, #0
 8007436:	4699      	mov	r9, r3
 8007438:	dc36      	bgt.n	80074a8 <_printf_float+0x360>
 800743a:	f04f 0b00 	mov.w	fp, #0
 800743e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007442:	f104 021a 	add.w	r2, r4, #26
 8007446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007448:	9306      	str	r3, [sp, #24]
 800744a:	eba3 0309 	sub.w	r3, r3, r9
 800744e:	455b      	cmp	r3, fp
 8007450:	dc31      	bgt.n	80074b6 <_printf_float+0x36e>
 8007452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007454:	459a      	cmp	sl, r3
 8007456:	dc3a      	bgt.n	80074ce <_printf_float+0x386>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07da      	lsls	r2, r3, #31
 800745c:	d437      	bmi.n	80074ce <_printf_float+0x386>
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	ebaa 0903 	sub.w	r9, sl, r3
 8007464:	9b06      	ldr	r3, [sp, #24]
 8007466:	ebaa 0303 	sub.w	r3, sl, r3
 800746a:	4599      	cmp	r9, r3
 800746c:	bfa8      	it	ge
 800746e:	4699      	movge	r9, r3
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	dc33      	bgt.n	80074de <_printf_float+0x396>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747e:	f104 0b1a 	add.w	fp, r4, #26
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	ebaa 0303 	sub.w	r3, sl, r3
 8007488:	eba3 0309 	sub.w	r3, r3, r9
 800748c:	4543      	cmp	r3, r8
 800748e:	f77f af79 	ble.w	8007384 <_printf_float+0x23c>
 8007492:	2301      	movs	r3, #1
 8007494:	465a      	mov	r2, fp
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f aeae 	beq.w	80071fe <_printf_float+0xb6>
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	e7ec      	b.n	8007482 <_printf_float+0x33a>
 80074a8:	4642      	mov	r2, r8
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	d1c2      	bne.n	800743a <_printf_float+0x2f2>
 80074b4:	e6a3      	b.n	80071fe <_printf_float+0xb6>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	9206      	str	r2, [sp, #24]
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	f43f ae9c 	beq.w	80071fe <_printf_float+0xb6>
 80074c6:	9a06      	ldr	r2, [sp, #24]
 80074c8:	f10b 0b01 	add.w	fp, fp, #1
 80074cc:	e7bb      	b.n	8007446 <_printf_float+0x2fe>
 80074ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d1c0      	bne.n	800745e <_printf_float+0x316>
 80074dc:	e68f      	b.n	80071fe <_printf_float+0xb6>
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	464b      	mov	r3, r9
 80074e2:	4442      	add	r2, r8
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	d1c3      	bne.n	8007476 <_printf_float+0x32e>
 80074ee:	e686      	b.n	80071fe <_printf_float+0xb6>
 80074f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074f4:	f1ba 0f01 	cmp.w	sl, #1
 80074f8:	dc01      	bgt.n	80074fe <_printf_float+0x3b6>
 80074fa:	07db      	lsls	r3, r3, #31
 80074fc:	d536      	bpl.n	800756c <_printf_float+0x424>
 80074fe:	2301      	movs	r3, #1
 8007500:	4642      	mov	r2, r8
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f ae78 	beq.w	80071fe <_printf_float+0xb6>
 800750e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	f43f ae70 	beq.w	80071fe <_printf_float+0xb6>
 800751e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800752a:	f7f9 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800752e:	b9c0      	cbnz	r0, 8007562 <_printf_float+0x41a>
 8007530:	4653      	mov	r3, sl
 8007532:	f108 0201 	add.w	r2, r8, #1
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	d10c      	bne.n	800755a <_printf_float+0x412>
 8007540:	e65d      	b.n	80071fe <_printf_float+0xb6>
 8007542:	2301      	movs	r3, #1
 8007544:	465a      	mov	r2, fp
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	f43f ae56 	beq.w	80071fe <_printf_float+0xb6>
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	45d0      	cmp	r8, sl
 8007558:	dbf3      	blt.n	8007542 <_printf_float+0x3fa>
 800755a:	464b      	mov	r3, r9
 800755c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007560:	e6df      	b.n	8007322 <_printf_float+0x1da>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	f104 0b1a 	add.w	fp, r4, #26
 800756a:	e7f4      	b.n	8007556 <_printf_float+0x40e>
 800756c:	2301      	movs	r3, #1
 800756e:	4642      	mov	r2, r8
 8007570:	e7e1      	b.n	8007536 <_printf_float+0x3ee>
 8007572:	2301      	movs	r3, #1
 8007574:	464a      	mov	r2, r9
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae3e 	beq.w	80071fe <_printf_float+0xb6>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800758a:	1a5b      	subs	r3, r3, r1
 800758c:	4543      	cmp	r3, r8
 800758e:	dcf0      	bgt.n	8007572 <_printf_float+0x42a>
 8007590:	e6fc      	b.n	800738c <_printf_float+0x244>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f104 0919 	add.w	r9, r4, #25
 800759a:	e7f4      	b.n	8007586 <_printf_float+0x43e>

0800759c <_printf_common>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	4616      	mov	r6, r2
 80075a2:	4698      	mov	r8, r3
 80075a4:	688a      	ldr	r2, [r1, #8]
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfb8      	it	lt
 80075b0:	4613      	movlt	r3, r2
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b8:	4607      	mov	r7, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b10a      	cbz	r2, 80075c2 <_printf_common+0x26>
 80075be:	3301      	adds	r3, #1
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0699      	lsls	r1, r3, #26
 80075c6:	bf42      	ittt	mi
 80075c8:	6833      	ldrmi	r3, [r6, #0]
 80075ca:	3302      	addmi	r3, #2
 80075cc:	6033      	strmi	r3, [r6, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	f015 0506 	ands.w	r5, r5, #6
 80075d4:	d106      	bne.n	80075e4 <_printf_common+0x48>
 80075d6:	f104 0a19 	add.w	sl, r4, #25
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	6832      	ldr	r2, [r6, #0]
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dc26      	bgt.n	8007632 <_printf_common+0x96>
 80075e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	3b00      	subs	r3, #0
 80075ec:	bf18      	it	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	0692      	lsls	r2, r2, #26
 80075f2:	d42b      	bmi.n	800764c <_printf_common+0xb0>
 80075f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f8:	4641      	mov	r1, r8
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c8      	blx	r9
 80075fe:	3001      	adds	r0, #1
 8007600:	d01e      	beq.n	8007640 <_printf_common+0xa4>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	6922      	ldr	r2, [r4, #16]
 8007606:	f003 0306 	and.w	r3, r3, #6
 800760a:	2b04      	cmp	r3, #4
 800760c:	bf02      	ittt	eq
 800760e:	68e5      	ldreq	r5, [r4, #12]
 8007610:	6833      	ldreq	r3, [r6, #0]
 8007612:	1aed      	subeq	r5, r5, r3
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	bf0c      	ite	eq
 8007618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800761c:	2500      	movne	r5, #0
 800761e:	4293      	cmp	r3, r2
 8007620:	bfc4      	itt	gt
 8007622:	1a9b      	subgt	r3, r3, r2
 8007624:	18ed      	addgt	r5, r5, r3
 8007626:	2600      	movs	r6, #0
 8007628:	341a      	adds	r4, #26
 800762a:	42b5      	cmp	r5, r6
 800762c:	d11a      	bne.n	8007664 <_printf_common+0xc8>
 800762e:	2000      	movs	r0, #0
 8007630:	e008      	b.n	8007644 <_printf_common+0xa8>
 8007632:	2301      	movs	r3, #1
 8007634:	4652      	mov	r2, sl
 8007636:	4641      	mov	r1, r8
 8007638:	4638      	mov	r0, r7
 800763a:	47c8      	blx	r9
 800763c:	3001      	adds	r0, #1
 800763e:	d103      	bne.n	8007648 <_printf_common+0xac>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	3501      	adds	r5, #1
 800764a:	e7c6      	b.n	80075da <_printf_common+0x3e>
 800764c:	18e1      	adds	r1, r4, r3
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	2030      	movs	r0, #48	@ 0x30
 8007652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007656:	4422      	add	r2, r4
 8007658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800765c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007660:	3302      	adds	r3, #2
 8007662:	e7c7      	b.n	80075f4 <_printf_common+0x58>
 8007664:	2301      	movs	r3, #1
 8007666:	4622      	mov	r2, r4
 8007668:	4641      	mov	r1, r8
 800766a:	4638      	mov	r0, r7
 800766c:	47c8      	blx	r9
 800766e:	3001      	adds	r0, #1
 8007670:	d0e6      	beq.n	8007640 <_printf_common+0xa4>
 8007672:	3601      	adds	r6, #1
 8007674:	e7d9      	b.n	800762a <_printf_common+0x8e>
	...

08007678 <_printf_i>:
 8007678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	7e0f      	ldrb	r7, [r1, #24]
 800767e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007680:	2f78      	cmp	r7, #120	@ 0x78
 8007682:	4691      	mov	r9, r2
 8007684:	4680      	mov	r8, r0
 8007686:	460c      	mov	r4, r1
 8007688:	469a      	mov	sl, r3
 800768a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800768e:	d807      	bhi.n	80076a0 <_printf_i+0x28>
 8007690:	2f62      	cmp	r7, #98	@ 0x62
 8007692:	d80a      	bhi.n	80076aa <_printf_i+0x32>
 8007694:	2f00      	cmp	r7, #0
 8007696:	f000 80d2 	beq.w	800783e <_printf_i+0x1c6>
 800769a:	2f58      	cmp	r7, #88	@ 0x58
 800769c:	f000 80b9 	beq.w	8007812 <_printf_i+0x19a>
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a8:	e03a      	b.n	8007720 <_printf_i+0xa8>
 80076aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ae:	2b15      	cmp	r3, #21
 80076b0:	d8f6      	bhi.n	80076a0 <_printf_i+0x28>
 80076b2:	a101      	add	r1, pc, #4	@ (adr r1, 80076b8 <_printf_i+0x40>)
 80076b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007725 	.word	0x08007725
 80076c0:	080076a1 	.word	0x080076a1
 80076c4:	080076a1 	.word	0x080076a1
 80076c8:	080076a1 	.word	0x080076a1
 80076cc:	080076a1 	.word	0x080076a1
 80076d0:	08007725 	.word	0x08007725
 80076d4:	080076a1 	.word	0x080076a1
 80076d8:	080076a1 	.word	0x080076a1
 80076dc:	080076a1 	.word	0x080076a1
 80076e0:	080076a1 	.word	0x080076a1
 80076e4:	08007825 	.word	0x08007825
 80076e8:	0800774f 	.word	0x0800774f
 80076ec:	080077df 	.word	0x080077df
 80076f0:	080076a1 	.word	0x080076a1
 80076f4:	080076a1 	.word	0x080076a1
 80076f8:	08007847 	.word	0x08007847
 80076fc:	080076a1 	.word	0x080076a1
 8007700:	0800774f 	.word	0x0800774f
 8007704:	080076a1 	.word	0x080076a1
 8007708:	080076a1 	.word	0x080076a1
 800770c:	080077e7 	.word	0x080077e7
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6032      	str	r2, [r6, #0]
 8007718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800771c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007720:	2301      	movs	r3, #1
 8007722:	e09d      	b.n	8007860 <_printf_i+0x1e8>
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	0606      	lsls	r6, r0, #24
 800772e:	d501      	bpl.n	8007734 <_printf_i+0xbc>
 8007730:	681d      	ldr	r5, [r3, #0]
 8007732:	e003      	b.n	800773c <_printf_i+0xc4>
 8007734:	0645      	lsls	r5, r0, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0xb8>
 8007738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800773c:	2d00      	cmp	r5, #0
 800773e:	da03      	bge.n	8007748 <_printf_i+0xd0>
 8007740:	232d      	movs	r3, #45	@ 0x2d
 8007742:	426d      	negs	r5, r5
 8007744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007748:	4859      	ldr	r0, [pc, #356]	@ (80078b0 <_printf_i+0x238>)
 800774a:	230a      	movs	r3, #10
 800774c:	e011      	b.n	8007772 <_printf_i+0xfa>
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	0608      	lsls	r0, r1, #24
 8007754:	f853 5b04 	ldr.w	r5, [r3], #4
 8007758:	d402      	bmi.n	8007760 <_printf_i+0xe8>
 800775a:	0649      	lsls	r1, r1, #25
 800775c:	bf48      	it	mi
 800775e:	b2ad      	uxthmi	r5, r5
 8007760:	2f6f      	cmp	r7, #111	@ 0x6f
 8007762:	4853      	ldr	r0, [pc, #332]	@ (80078b0 <_printf_i+0x238>)
 8007764:	6033      	str	r3, [r6, #0]
 8007766:	bf14      	ite	ne
 8007768:	230a      	movne	r3, #10
 800776a:	2308      	moveq	r3, #8
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007772:	6866      	ldr	r6, [r4, #4]
 8007774:	60a6      	str	r6, [r4, #8]
 8007776:	2e00      	cmp	r6, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90d      	cbnz	r5, 8007788 <_printf_i+0x110>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d04b      	beq.n	8007820 <_printf_i+0x1a8>
 8007788:	4616      	mov	r6, r2
 800778a:	fbb5 f1f3 	udiv	r1, r5, r3
 800778e:	fb03 5711 	mls	r7, r3, r1, r5
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007798:	462f      	mov	r7, r5
 800779a:	42bb      	cmp	r3, r7
 800779c:	460d      	mov	r5, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x112>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x144>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x144>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	@ 0x30
 80077b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80077bc:	1b92      	subs	r2, r2, r6
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee6 	bl	800759c <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14a      	bne.n	800786a <_printf_i+0x1f2>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	4833      	ldr	r0, [pc, #204]	@ (80078b4 <_printf_i+0x23c>)
 80077e8:	2778      	movs	r7, #120	@ 0x78
 80077ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6831      	ldr	r1, [r6, #0]
 80077f2:	061f      	lsls	r7, r3, #24
 80077f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f8:	d402      	bmi.n	8007800 <_printf_i+0x188>
 80077fa:	065f      	lsls	r7, r3, #25
 80077fc:	bf48      	it	mi
 80077fe:	b2ad      	uxthmi	r5, r5
 8007800:	6031      	str	r1, [r6, #0]
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	bf44      	itt	mi
 8007806:	f043 0320 	orrmi.w	r3, r3, #32
 800780a:	6023      	strmi	r3, [r4, #0]
 800780c:	b11d      	cbz	r5, 8007816 <_printf_i+0x19e>
 800780e:	2310      	movs	r3, #16
 8007810:	e7ac      	b.n	800776c <_printf_i+0xf4>
 8007812:	4827      	ldr	r0, [pc, #156]	@ (80078b0 <_printf_i+0x238>)
 8007814:	e7e9      	b.n	80077ea <_printf_i+0x172>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f023 0320 	bic.w	r3, r3, #32
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	e7f6      	b.n	800780e <_printf_i+0x196>
 8007820:	4616      	mov	r6, r2
 8007822:	e7bd      	b.n	80077a0 <_printf_i+0x128>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	6825      	ldr	r5, [r4, #0]
 8007828:	6961      	ldr	r1, [r4, #20]
 800782a:	1d18      	adds	r0, r3, #4
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	062e      	lsls	r6, r5, #24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	d501      	bpl.n	8007838 <_printf_i+0x1c0>
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0x1c6>
 8007838:	0668      	lsls	r0, r5, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0x1bc>
 800783c:	8019      	strh	r1, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	4616      	mov	r6, r2
 8007844:	e7bc      	b.n	80077c0 <_printf_i+0x148>
 8007846:	6833      	ldr	r3, [r6, #0]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	6032      	str	r2, [r6, #0]
 800784c:	681e      	ldr	r6, [r3, #0]
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	2100      	movs	r1, #0
 8007852:	4630      	mov	r0, r6
 8007854:	f7f8 fcbc 	bl	80001d0 <memchr>
 8007858:	b108      	cbz	r0, 800785e <_printf_i+0x1e6>
 800785a:	1b80      	subs	r0, r0, r6
 800785c:	6060      	str	r0, [r4, #4]
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007868:	e7aa      	b.n	80077c0 <_printf_i+0x148>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	4632      	mov	r2, r6
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	47d0      	blx	sl
 8007874:	3001      	adds	r0, #1
 8007876:	d0ad      	beq.n	80077d4 <_printf_i+0x15c>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	d413      	bmi.n	80078a6 <_printf_i+0x22e>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	4298      	cmp	r0, r3
 8007884:	bfb8      	it	lt
 8007886:	4618      	movlt	r0, r3
 8007888:	e7a6      	b.n	80077d8 <_printf_i+0x160>
 800788a:	2301      	movs	r3, #1
 800788c:	4632      	mov	r2, r6
 800788e:	4649      	mov	r1, r9
 8007890:	4640      	mov	r0, r8
 8007892:	47d0      	blx	sl
 8007894:	3001      	adds	r0, #1
 8007896:	d09d      	beq.n	80077d4 <_printf_i+0x15c>
 8007898:	3501      	adds	r5, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	9903      	ldr	r1, [sp, #12]
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dcf2      	bgt.n	800788a <_printf_i+0x212>
 80078a4:	e7eb      	b.n	800787e <_printf_i+0x206>
 80078a6:	2500      	movs	r5, #0
 80078a8:	f104 0619 	add.w	r6, r4, #25
 80078ac:	e7f5      	b.n	800789a <_printf_i+0x222>
 80078ae:	bf00      	nop
 80078b0:	0800b945 	.word	0x0800b945
 80078b4:	0800b956 	.word	0x0800b956

080078b8 <_scanf_float>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	b087      	sub	sp, #28
 80078be:	4617      	mov	r7, r2
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	688b      	ldr	r3, [r1, #8]
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078ca:	bf81      	itttt	hi
 80078cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80078d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80078d8:	608b      	strhi	r3, [r1, #8]
 80078da:	680b      	ldr	r3, [r1, #0]
 80078dc:	460a      	mov	r2, r1
 80078de:	f04f 0500 	mov.w	r5, #0
 80078e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80078e6:	f842 3b1c 	str.w	r3, [r2], #28
 80078ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078ee:	4680      	mov	r8, r0
 80078f0:	460c      	mov	r4, r1
 80078f2:	bf98      	it	ls
 80078f4:	f04f 0b00 	movls.w	fp, #0
 80078f8:	9201      	str	r2, [sp, #4]
 80078fa:	4616      	mov	r6, r2
 80078fc:	46aa      	mov	sl, r5
 80078fe:	46a9      	mov	r9, r5
 8007900:	9502      	str	r5, [sp, #8]
 8007902:	68a2      	ldr	r2, [r4, #8]
 8007904:	b152      	cbz	r2, 800791c <_scanf_float+0x64>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b4e      	cmp	r3, #78	@ 0x4e
 800790c:	d864      	bhi.n	80079d8 <_scanf_float+0x120>
 800790e:	2b40      	cmp	r3, #64	@ 0x40
 8007910:	d83c      	bhi.n	800798c <_scanf_float+0xd4>
 8007912:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007916:	b2c8      	uxtb	r0, r1
 8007918:	280e      	cmp	r0, #14
 800791a:	d93a      	bls.n	8007992 <_scanf_float+0xda>
 800791c:	f1b9 0f00 	cmp.w	r9, #0
 8007920:	d003      	beq.n	800792a <_scanf_float+0x72>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800792e:	f1ba 0f01 	cmp.w	sl, #1
 8007932:	f200 8117 	bhi.w	8007b64 <_scanf_float+0x2ac>
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	429e      	cmp	r6, r3
 800793a:	f200 8108 	bhi.w	8007b4e <_scanf_float+0x296>
 800793e:	2001      	movs	r0, #1
 8007940:	b007      	add	sp, #28
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800794a:	2a0d      	cmp	r2, #13
 800794c:	d8e6      	bhi.n	800791c <_scanf_float+0x64>
 800794e:	a101      	add	r1, pc, #4	@ (adr r1, 8007954 <_scanf_float+0x9c>)
 8007950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007954:	08007a9b 	.word	0x08007a9b
 8007958:	0800791d 	.word	0x0800791d
 800795c:	0800791d 	.word	0x0800791d
 8007960:	0800791d 	.word	0x0800791d
 8007964:	08007afb 	.word	0x08007afb
 8007968:	08007ad3 	.word	0x08007ad3
 800796c:	0800791d 	.word	0x0800791d
 8007970:	0800791d 	.word	0x0800791d
 8007974:	08007aa9 	.word	0x08007aa9
 8007978:	0800791d 	.word	0x0800791d
 800797c:	0800791d 	.word	0x0800791d
 8007980:	0800791d 	.word	0x0800791d
 8007984:	0800791d 	.word	0x0800791d
 8007988:	08007a61 	.word	0x08007a61
 800798c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007990:	e7db      	b.n	800794a <_scanf_float+0x92>
 8007992:	290e      	cmp	r1, #14
 8007994:	d8c2      	bhi.n	800791c <_scanf_float+0x64>
 8007996:	a001      	add	r0, pc, #4	@ (adr r0, 800799c <_scanf_float+0xe4>)
 8007998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800799c:	08007a51 	.word	0x08007a51
 80079a0:	0800791d 	.word	0x0800791d
 80079a4:	08007a51 	.word	0x08007a51
 80079a8:	08007ae7 	.word	0x08007ae7
 80079ac:	0800791d 	.word	0x0800791d
 80079b0:	080079f9 	.word	0x080079f9
 80079b4:	08007a37 	.word	0x08007a37
 80079b8:	08007a37 	.word	0x08007a37
 80079bc:	08007a37 	.word	0x08007a37
 80079c0:	08007a37 	.word	0x08007a37
 80079c4:	08007a37 	.word	0x08007a37
 80079c8:	08007a37 	.word	0x08007a37
 80079cc:	08007a37 	.word	0x08007a37
 80079d0:	08007a37 	.word	0x08007a37
 80079d4:	08007a37 	.word	0x08007a37
 80079d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80079da:	d809      	bhi.n	80079f0 <_scanf_float+0x138>
 80079dc:	2b60      	cmp	r3, #96	@ 0x60
 80079de:	d8b2      	bhi.n	8007946 <_scanf_float+0x8e>
 80079e0:	2b54      	cmp	r3, #84	@ 0x54
 80079e2:	d07b      	beq.n	8007adc <_scanf_float+0x224>
 80079e4:	2b59      	cmp	r3, #89	@ 0x59
 80079e6:	d199      	bne.n	800791c <_scanf_float+0x64>
 80079e8:	2d07      	cmp	r5, #7
 80079ea:	d197      	bne.n	800791c <_scanf_float+0x64>
 80079ec:	2508      	movs	r5, #8
 80079ee:	e02c      	b.n	8007a4a <_scanf_float+0x192>
 80079f0:	2b74      	cmp	r3, #116	@ 0x74
 80079f2:	d073      	beq.n	8007adc <_scanf_float+0x224>
 80079f4:	2b79      	cmp	r3, #121	@ 0x79
 80079f6:	e7f6      	b.n	80079e6 <_scanf_float+0x12e>
 80079f8:	6821      	ldr	r1, [r4, #0]
 80079fa:	05c8      	lsls	r0, r1, #23
 80079fc:	d51b      	bpl.n	8007a36 <_scanf_float+0x17e>
 80079fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007a02:	6021      	str	r1, [r4, #0]
 8007a04:	f109 0901 	add.w	r9, r9, #1
 8007a08:	f1bb 0f00 	cmp.w	fp, #0
 8007a0c:	d003      	beq.n	8007a16 <_scanf_float+0x15e>
 8007a0e:	3201      	adds	r2, #1
 8007a10:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007a14:	60a2      	str	r2, [r4, #8]
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	60a3      	str	r3, [r4, #8]
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
 8007a2a:	f340 8087 	ble.w	8007b3c <_scanf_float+0x284>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	e765      	b.n	8007902 <_scanf_float+0x4a>
 8007a36:	eb1a 0105 	adds.w	r1, sl, r5
 8007a3a:	f47f af6f 	bne.w	800791c <_scanf_float+0x64>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	460d      	mov	r5, r1
 8007a48:	468a      	mov	sl, r1
 8007a4a:	f806 3b01 	strb.w	r3, [r6], #1
 8007a4e:	e7e2      	b.n	8007a16 <_scanf_float+0x15e>
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	0610      	lsls	r0, r2, #24
 8007a54:	f57f af62 	bpl.w	800791c <_scanf_float+0x64>
 8007a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	e7f4      	b.n	8007a4a <_scanf_float+0x192>
 8007a60:	f1ba 0f00 	cmp.w	sl, #0
 8007a64:	d10e      	bne.n	8007a84 <_scanf_float+0x1cc>
 8007a66:	f1b9 0f00 	cmp.w	r9, #0
 8007a6a:	d10e      	bne.n	8007a8a <_scanf_float+0x1d2>
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a76:	d108      	bne.n	8007a8a <_scanf_float+0x1d2>
 8007a78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	f04f 0a01 	mov.w	sl, #1
 8007a82:	e7e2      	b.n	8007a4a <_scanf_float+0x192>
 8007a84:	f1ba 0f02 	cmp.w	sl, #2
 8007a88:	d055      	beq.n	8007b36 <_scanf_float+0x27e>
 8007a8a:	2d01      	cmp	r5, #1
 8007a8c:	d002      	beq.n	8007a94 <_scanf_float+0x1dc>
 8007a8e:	2d04      	cmp	r5, #4
 8007a90:	f47f af44 	bne.w	800791c <_scanf_float+0x64>
 8007a94:	3501      	adds	r5, #1
 8007a96:	b2ed      	uxtb	r5, r5
 8007a98:	e7d7      	b.n	8007a4a <_scanf_float+0x192>
 8007a9a:	f1ba 0f01 	cmp.w	sl, #1
 8007a9e:	f47f af3d 	bne.w	800791c <_scanf_float+0x64>
 8007aa2:	f04f 0a02 	mov.w	sl, #2
 8007aa6:	e7d0      	b.n	8007a4a <_scanf_float+0x192>
 8007aa8:	b97d      	cbnz	r5, 8007aca <_scanf_float+0x212>
 8007aaa:	f1b9 0f00 	cmp.w	r9, #0
 8007aae:	f47f af38 	bne.w	8007922 <_scanf_float+0x6a>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ab8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007abc:	f040 8108 	bne.w	8007cd0 <_scanf_float+0x418>
 8007ac0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	2501      	movs	r5, #1
 8007ac8:	e7bf      	b.n	8007a4a <_scanf_float+0x192>
 8007aca:	2d03      	cmp	r5, #3
 8007acc:	d0e2      	beq.n	8007a94 <_scanf_float+0x1dc>
 8007ace:	2d05      	cmp	r5, #5
 8007ad0:	e7de      	b.n	8007a90 <_scanf_float+0x1d8>
 8007ad2:	2d02      	cmp	r5, #2
 8007ad4:	f47f af22 	bne.w	800791c <_scanf_float+0x64>
 8007ad8:	2503      	movs	r5, #3
 8007ada:	e7b6      	b.n	8007a4a <_scanf_float+0x192>
 8007adc:	2d06      	cmp	r5, #6
 8007ade:	f47f af1d 	bne.w	800791c <_scanf_float+0x64>
 8007ae2:	2507      	movs	r5, #7
 8007ae4:	e7b1      	b.n	8007a4a <_scanf_float+0x192>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	0591      	lsls	r1, r2, #22
 8007aea:	f57f af17 	bpl.w	800791c <_scanf_float+0x64>
 8007aee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007af8:	e7a7      	b.n	8007a4a <_scanf_float+0x192>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007b00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007b04:	d006      	beq.n	8007b14 <_scanf_float+0x25c>
 8007b06:	0550      	lsls	r0, r2, #21
 8007b08:	f57f af08 	bpl.w	800791c <_scanf_float+0x64>
 8007b0c:	f1b9 0f00 	cmp.w	r9, #0
 8007b10:	f000 80de 	beq.w	8007cd0 <_scanf_float+0x418>
 8007b14:	0591      	lsls	r1, r2, #22
 8007b16:	bf58      	it	pl
 8007b18:	9902      	ldrpl	r1, [sp, #8]
 8007b1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b1e:	bf58      	it	pl
 8007b20:	eba9 0101 	subpl.w	r1, r9, r1
 8007b24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b28:	bf58      	it	pl
 8007b2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	f04f 0900 	mov.w	r9, #0
 8007b34:	e789      	b.n	8007a4a <_scanf_float+0x192>
 8007b36:	f04f 0a03 	mov.w	sl, #3
 8007b3a:	e786      	b.n	8007a4a <_scanf_float+0x192>
 8007b3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b40:	4639      	mov	r1, r7
 8007b42:	4640      	mov	r0, r8
 8007b44:	4798      	blx	r3
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aedb 	beq.w	8007902 <_scanf_float+0x4a>
 8007b4c:	e6e6      	b.n	800791c <_scanf_float+0x64>
 8007b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b56:	463a      	mov	r2, r7
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4798      	blx	r3
 8007b5c:	6923      	ldr	r3, [r4, #16]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	6123      	str	r3, [r4, #16]
 8007b62:	e6e8      	b.n	8007936 <_scanf_float+0x7e>
 8007b64:	1e6b      	subs	r3, r5, #1
 8007b66:	2b06      	cmp	r3, #6
 8007b68:	d824      	bhi.n	8007bb4 <_scanf_float+0x2fc>
 8007b6a:	2d02      	cmp	r5, #2
 8007b6c:	d836      	bhi.n	8007bdc <_scanf_float+0x324>
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	429e      	cmp	r6, r3
 8007b72:	f67f aee4 	bls.w	800793e <_scanf_float+0x86>
 8007b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b7e:	463a      	mov	r2, r7
 8007b80:	4640      	mov	r0, r8
 8007b82:	4798      	blx	r3
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	e7f0      	b.n	8007b6e <_scanf_float+0x2b6>
 8007b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b94:	463a      	mov	r2, r7
 8007b96:	4640      	mov	r0, r8
 8007b98:	4798      	blx	r3
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ba8:	f1ba 0f02 	cmp.w	sl, #2
 8007bac:	d1ee      	bne.n	8007b8c <_scanf_float+0x2d4>
 8007bae:	3d03      	subs	r5, #3
 8007bb0:	b2ed      	uxtb	r5, r5
 8007bb2:	1b76      	subs	r6, r6, r5
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	05da      	lsls	r2, r3, #23
 8007bb8:	d530      	bpl.n	8007c1c <_scanf_float+0x364>
 8007bba:	055b      	lsls	r3, r3, #21
 8007bbc:	d511      	bpl.n	8007be2 <_scanf_float+0x32a>
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	429e      	cmp	r6, r3
 8007bc2:	f67f aebc 	bls.w	800793e <_scanf_float+0x86>
 8007bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bce:	463a      	mov	r2, r7
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4798      	blx	r3
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	e7f0      	b.n	8007bbe <_scanf_float+0x306>
 8007bdc:	46aa      	mov	sl, r5
 8007bde:	46b3      	mov	fp, r6
 8007be0:	e7de      	b.n	8007ba0 <_scanf_float+0x2e8>
 8007be2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	2965      	cmp	r1, #101	@ 0x65
 8007bea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007bee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	d00c      	beq.n	8007c10 <_scanf_float+0x358>
 8007bf6:	2945      	cmp	r1, #69	@ 0x45
 8007bf8:	d00a      	beq.n	8007c10 <_scanf_float+0x358>
 8007bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bfe:	463a      	mov	r2, r7
 8007c00:	4640      	mov	r0, r8
 8007c02:	4798      	blx	r3
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	1eb5      	subs	r5, r6, #2
 8007c0e:	6123      	str	r3, [r4, #16]
 8007c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c14:	463a      	mov	r2, r7
 8007c16:	4640      	mov	r0, r8
 8007c18:	4798      	blx	r3
 8007c1a:	462e      	mov	r6, r5
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	f012 0210 	ands.w	r2, r2, #16
 8007c22:	d001      	beq.n	8007c28 <_scanf_float+0x370>
 8007c24:	2000      	movs	r0, #0
 8007c26:	e68b      	b.n	8007940 <_scanf_float+0x88>
 8007c28:	7032      	strb	r2, [r6, #0]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c34:	d11c      	bne.n	8007c70 <_scanf_float+0x3b8>
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	454b      	cmp	r3, r9
 8007c3a:	eba3 0209 	sub.w	r2, r3, r9
 8007c3e:	d123      	bne.n	8007c88 <_scanf_float+0x3d0>
 8007c40:	9901      	ldr	r1, [sp, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	4640      	mov	r0, r8
 8007c46:	f002 fd2b 	bl	800a6a0 <_strtod_r>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	6821      	ldr	r1, [r4, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f011 0f02 	tst.w	r1, #2
 8007c54:	ec57 6b10 	vmov	r6, r7, d0
 8007c58:	f103 0204 	add.w	r2, r3, #4
 8007c5c:	d01f      	beq.n	8007c9e <_scanf_float+0x3e6>
 8007c5e:	9903      	ldr	r1, [sp, #12]
 8007c60:	600a      	str	r2, [r1, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	e9c3 6700 	strd	r6, r7, [r3]
 8007c68:	68e3      	ldr	r3, [r4, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60e3      	str	r3, [r4, #12]
 8007c6e:	e7d9      	b.n	8007c24 <_scanf_float+0x36c>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0e4      	beq.n	8007c40 <_scanf_float+0x388>
 8007c76:	9905      	ldr	r1, [sp, #20]
 8007c78:	230a      	movs	r3, #10
 8007c7a:	3101      	adds	r1, #1
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	f002 fd8f 	bl	800a7a0 <_strtol_r>
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	9e05      	ldr	r6, [sp, #20]
 8007c86:	1ac2      	subs	r2, r0, r3
 8007c88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c8c:	429e      	cmp	r6, r3
 8007c8e:	bf28      	it	cs
 8007c90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c94:	4910      	ldr	r1, [pc, #64]	@ (8007cd8 <_scanf_float+0x420>)
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f976 	bl	8007f88 <siprintf>
 8007c9c:	e7d0      	b.n	8007c40 <_scanf_float+0x388>
 8007c9e:	f011 0f04 	tst.w	r1, #4
 8007ca2:	9903      	ldr	r1, [sp, #12]
 8007ca4:	600a      	str	r2, [r1, #0]
 8007ca6:	d1dc      	bne.n	8007c62 <_scanf_float+0x3aa>
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	f7f8 ff3b 	bl	8000b2c <__aeabi_dcmpun>
 8007cb6:	b128      	cbz	r0, 8007cc4 <_scanf_float+0x40c>
 8007cb8:	4808      	ldr	r0, [pc, #32]	@ (8007cdc <_scanf_float+0x424>)
 8007cba:	f000 faeb 	bl	8008294 <nanf>
 8007cbe:	ed85 0a00 	vstr	s0, [r5]
 8007cc2:	e7d1      	b.n	8007c68 <_scanf_float+0x3b0>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	f7f8 ff8e 	bl	8000be8 <__aeabi_d2f>
 8007ccc:	6028      	str	r0, [r5, #0]
 8007cce:	e7cb      	b.n	8007c68 <_scanf_float+0x3b0>
 8007cd0:	f04f 0900 	mov.w	r9, #0
 8007cd4:	e629      	b.n	800792a <_scanf_float+0x72>
 8007cd6:	bf00      	nop
 8007cd8:	0800b967 	.word	0x0800b967
 8007cdc:	0800bcfd 	.word	0x0800bcfd

08007ce0 <std>:
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cee:	6083      	str	r3, [r0, #8]
 8007cf0:	8181      	strh	r1, [r0, #12]
 8007cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cf4:	81c2      	strh	r2, [r0, #14]
 8007cf6:	6183      	str	r3, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	305c      	adds	r0, #92	@ 0x5c
 8007cfe:	f000 fa3b 	bl	8008178 <memset>
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x58>)
 8007d04:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x5c>)
 8007d08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x60>)
 8007d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x64>)
 8007d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <std+0x68>)
 8007d14:	6224      	str	r4, [r4, #32]
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d006      	beq.n	8007d28 <std+0x48>
 8007d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d1e:	4294      	cmp	r4, r2
 8007d20:	d002      	beq.n	8007d28 <std+0x48>
 8007d22:	33d0      	adds	r3, #208	@ 0xd0
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d105      	bne.n	8007d34 <std+0x54>
 8007d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f000 ba9e 	b.w	8008270 <__retarget_lock_init_recursive>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	08007fc9 	.word	0x08007fc9
 8007d3c:	08007feb 	.word	0x08007feb
 8007d40:	08008023 	.word	0x08008023
 8007d44:	08008047 	.word	0x08008047
 8007d48:	2000154c 	.word	0x2000154c

08007d4c <stdio_exit_handler>:
 8007d4c:	4a02      	ldr	r2, [pc, #8]	@ (8007d58 <stdio_exit_handler+0xc>)
 8007d4e:	4903      	ldr	r1, [pc, #12]	@ (8007d5c <stdio_exit_handler+0x10>)
 8007d50:	4803      	ldr	r0, [pc, #12]	@ (8007d60 <stdio_exit_handler+0x14>)
 8007d52:	f000 b869 	b.w	8007e28 <_fwalk_sglue>
 8007d56:	bf00      	nop
 8007d58:	20000010 	.word	0x20000010
 8007d5c:	0800ab5d 	.word	0x0800ab5d
 8007d60:	20000020 	.word	0x20000020

08007d64 <cleanup_stdio>:
 8007d64:	6841      	ldr	r1, [r0, #4]
 8007d66:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <cleanup_stdio+0x34>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	d001      	beq.n	8007d74 <cleanup_stdio+0x10>
 8007d70:	f002 fef4 	bl	800ab5c <_fflush_r>
 8007d74:	68a1      	ldr	r1, [r4, #8]
 8007d76:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <cleanup_stdio+0x38>)
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d002      	beq.n	8007d82 <cleanup_stdio+0x1e>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f002 feed 	bl	800ab5c <_fflush_r>
 8007d82:	68e1      	ldr	r1, [r4, #12]
 8007d84:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <cleanup_stdio+0x3c>)
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d004      	beq.n	8007d94 <cleanup_stdio+0x30>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f002 bee4 	b.w	800ab5c <_fflush_r>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	2000154c 	.word	0x2000154c
 8007d9c:	200015b4 	.word	0x200015b4
 8007da0:	2000161c 	.word	0x2000161c

08007da4 <global_stdio_init.part.0>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <global_stdio_init.part.0+0x30>)
 8007da8:	4c0b      	ldr	r4, [pc, #44]	@ (8007dd8 <global_stdio_init.part.0+0x34>)
 8007daa:	4a0c      	ldr	r2, [pc, #48]	@ (8007ddc <global_stdio_init.part.0+0x38>)
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	4620      	mov	r0, r4
 8007db0:	2200      	movs	r2, #0
 8007db2:	2104      	movs	r1, #4
 8007db4:	f7ff ff94 	bl	8007ce0 <std>
 8007db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	2109      	movs	r1, #9
 8007dc0:	f7ff ff8e 	bl	8007ce0 <std>
 8007dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dc8:	2202      	movs	r2, #2
 8007dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dce:	2112      	movs	r1, #18
 8007dd0:	f7ff bf86 	b.w	8007ce0 <std>
 8007dd4:	20001684 	.word	0x20001684
 8007dd8:	2000154c 	.word	0x2000154c
 8007ddc:	08007d4d 	.word	0x08007d4d

08007de0 <__sfp_lock_acquire>:
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <__sfp_lock_acquire+0x8>)
 8007de2:	f000 ba46 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	2000168d 	.word	0x2000168d

08007dec <__sfp_lock_release>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__sfp_lock_release+0x8>)
 8007dee:	f000 ba41 	b.w	8008274 <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	2000168d 	.word	0x2000168d

08007df8 <__sinit>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	f7ff fff0 	bl	8007de0 <__sfp_lock_acquire>
 8007e00:	6a23      	ldr	r3, [r4, #32]
 8007e02:	b11b      	cbz	r3, 8007e0c <__sinit+0x14>
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f7ff bff0 	b.w	8007dec <__sfp_lock_release>
 8007e0c:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <__sinit+0x28>)
 8007e0e:	6223      	str	r3, [r4, #32]
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <__sinit+0x2c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f5      	bne.n	8007e04 <__sinit+0xc>
 8007e18:	f7ff ffc4 	bl	8007da4 <global_stdio_init.part.0>
 8007e1c:	e7f2      	b.n	8007e04 <__sinit+0xc>
 8007e1e:	bf00      	nop
 8007e20:	08007d65 	.word	0x08007d65
 8007e24:	20001684 	.word	0x20001684

08007e28 <_fwalk_sglue>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4688      	mov	r8, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	2600      	movs	r6, #0
 8007e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e38:	f1b9 0901 	subs.w	r9, r9, #1
 8007e3c:	d505      	bpl.n	8007e4a <_fwalk_sglue+0x22>
 8007e3e:	6824      	ldr	r4, [r4, #0]
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	d1f7      	bne.n	8007e34 <_fwalk_sglue+0xc>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d907      	bls.n	8007e60 <_fwalk_sglue+0x38>
 8007e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e54:	3301      	adds	r3, #1
 8007e56:	d003      	beq.n	8007e60 <_fwalk_sglue+0x38>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	47c0      	blx	r8
 8007e5e:	4306      	orrs	r6, r0
 8007e60:	3568      	adds	r5, #104	@ 0x68
 8007e62:	e7e9      	b.n	8007e38 <_fwalk_sglue+0x10>

08007e64 <_puts_r>:
 8007e64:	6a03      	ldr	r3, [r0, #32]
 8007e66:	b570      	push	{r4, r5, r6, lr}
 8007e68:	6884      	ldr	r4, [r0, #8]
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	460e      	mov	r6, r1
 8007e6e:	b90b      	cbnz	r3, 8007e74 <_puts_r+0x10>
 8007e70:	f7ff ffc2 	bl	8007df8 <__sinit>
 8007e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d405      	bmi.n	8007e86 <_puts_r+0x22>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	0598      	lsls	r0, r3, #22
 8007e7e:	d402      	bmi.n	8007e86 <_puts_r+0x22>
 8007e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e82:	f000 f9f6 	bl	8008272 <__retarget_lock_acquire_recursive>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	0719      	lsls	r1, r3, #28
 8007e8a:	d502      	bpl.n	8007e92 <_puts_r+0x2e>
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d135      	bne.n	8007efe <_puts_r+0x9a>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 f919 	bl	80080cc <__swsetup_r>
 8007e9a:	b380      	cbz	r0, 8007efe <_puts_r+0x9a>
 8007e9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d405      	bmi.n	8007eb2 <_puts_r+0x4e>
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	059b      	lsls	r3, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_puts_r+0x4e>
 8007eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eae:	f000 f9e1 	bl	8008274 <__retarget_lock_release_recursive>
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da04      	bge.n	8007ec4 <_puts_r+0x60>
 8007eba:	69a2      	ldr	r2, [r4, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	dc17      	bgt.n	8007ef0 <_puts_r+0x8c>
 8007ec0:	290a      	cmp	r1, #10
 8007ec2:	d015      	beq.n	8007ef0 <_puts_r+0x8c>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	6022      	str	r2, [r4, #0]
 8007eca:	7019      	strb	r1, [r3, #0]
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	60a3      	str	r3, [r4, #8]
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	d1ed      	bne.n	8007eb6 <_puts_r+0x52>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da11      	bge.n	8007f02 <_puts_r+0x9e>
 8007ede:	4622      	mov	r2, r4
 8007ee0:	210a      	movs	r1, #10
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 f8b3 	bl	800804e <__swbuf_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d0d7      	beq.n	8007e9c <_puts_r+0x38>
 8007eec:	250a      	movs	r5, #10
 8007eee:	e7d7      	b.n	8007ea0 <_puts_r+0x3c>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f8ab 	bl	800804e <__swbuf_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d1e7      	bne.n	8007ecc <_puts_r+0x68>
 8007efc:	e7ce      	b.n	8007e9c <_puts_r+0x38>
 8007efe:	3e01      	subs	r6, #1
 8007f00:	e7e4      	b.n	8007ecc <_puts_r+0x68>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	220a      	movs	r2, #10
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e7ee      	b.n	8007eec <_puts_r+0x88>
	...

08007f10 <puts>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	@ (8007f1c <puts+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f7ff bfa5 	b.w	8007e64 <_puts_r>
 8007f1a:	bf00      	nop
 8007f1c:	2000001c 	.word	0x2000001c

08007f20 <sniprintf>:
 8007f20:	b40c      	push	{r2, r3}
 8007f22:	b530      	push	{r4, r5, lr}
 8007f24:	4b17      	ldr	r3, [pc, #92]	@ (8007f84 <sniprintf+0x64>)
 8007f26:	1e0c      	subs	r4, r1, #0
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	b09d      	sub	sp, #116	@ 0x74
 8007f2c:	da08      	bge.n	8007f40 <sniprintf+0x20>
 8007f2e:	238b      	movs	r3, #139	@ 0x8b
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f36:	b01d      	add	sp, #116	@ 0x74
 8007f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f3c:	b002      	add	sp, #8
 8007f3e:	4770      	bx	lr
 8007f40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f48:	bf14      	ite	ne
 8007f4a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007f4e:	4623      	moveq	r3, r4
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	9307      	str	r3, [sp, #28]
 8007f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f58:	9002      	str	r0, [sp, #8]
 8007f5a:	9006      	str	r0, [sp, #24]
 8007f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f62:	ab21      	add	r3, sp, #132	@ 0x84
 8007f64:	a902      	add	r1, sp, #8
 8007f66:	4628      	mov	r0, r5
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	f002 fc77 	bl	800a85c <_svfiprintf_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	bfbc      	itt	lt
 8007f72:	238b      	movlt	r3, #139	@ 0x8b
 8007f74:	602b      	strlt	r3, [r5, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d0dd      	beq.n	8007f36 <sniprintf+0x16>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e7d9      	b.n	8007f36 <sniprintf+0x16>
 8007f82:	bf00      	nop
 8007f84:	2000001c 	.word	0x2000001c

08007f88 <siprintf>:
 8007f88:	b40e      	push	{r1, r2, r3}
 8007f8a:	b500      	push	{lr}
 8007f8c:	b09c      	sub	sp, #112	@ 0x70
 8007f8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f90:	9002      	str	r0, [sp, #8]
 8007f92:	9006      	str	r0, [sp, #24]
 8007f94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f98:	4809      	ldr	r0, [pc, #36]	@ (8007fc0 <siprintf+0x38>)
 8007f9a:	9107      	str	r1, [sp, #28]
 8007f9c:	9104      	str	r1, [sp, #16]
 8007f9e:	4909      	ldr	r1, [pc, #36]	@ (8007fc4 <siprintf+0x3c>)
 8007fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa4:	9105      	str	r1, [sp, #20]
 8007fa6:	6800      	ldr	r0, [r0, #0]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	a902      	add	r1, sp, #8
 8007fac:	f002 fc56 	bl	800a85c <_svfiprintf_r>
 8007fb0:	9b02      	ldr	r3, [sp, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	b01c      	add	sp, #112	@ 0x70
 8007fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fbc:	b003      	add	sp, #12
 8007fbe:	4770      	bx	lr
 8007fc0:	2000001c 	.word	0x2000001c
 8007fc4:	ffff0208 	.word	0xffff0208

08007fc8 <__sread>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	f000 f900 	bl	80081d4 <_read_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	bfab      	itete	ge
 8007fd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fda:	89a3      	ldrhlt	r3, [r4, #12]
 8007fdc:	181b      	addge	r3, r3, r0
 8007fde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fe2:	bfac      	ite	ge
 8007fe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fe6:	81a3      	strhlt	r3, [r4, #12]
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__swrite>:
 8007fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	461f      	mov	r7, r3
 8007ff0:	898b      	ldrh	r3, [r1, #12]
 8007ff2:	05db      	lsls	r3, r3, #23
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	d505      	bpl.n	8008008 <__swrite+0x1e>
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	2302      	movs	r3, #2
 8008002:	2200      	movs	r2, #0
 8008004:	f000 f8d4 	bl	80081b0 <_lseek_r>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800800e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4628      	mov	r0, r5
 800801a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	f000 b8eb 	b.w	80081f8 <_write_r>

08008022 <__sseek>:
 8008022:	b510      	push	{r4, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802a:	f000 f8c1 	bl	80081b0 <_lseek_r>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	bf15      	itete	ne
 8008034:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800803a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800803e:	81a3      	strheq	r3, [r4, #12]
 8008040:	bf18      	it	ne
 8008042:	81a3      	strhne	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__sclose>:
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 b8a1 	b.w	8008190 <_close_r>

0800804e <__swbuf_r>:
 800804e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008050:	460e      	mov	r6, r1
 8008052:	4614      	mov	r4, r2
 8008054:	4605      	mov	r5, r0
 8008056:	b118      	cbz	r0, 8008060 <__swbuf_r+0x12>
 8008058:	6a03      	ldr	r3, [r0, #32]
 800805a:	b90b      	cbnz	r3, 8008060 <__swbuf_r+0x12>
 800805c:	f7ff fecc 	bl	8007df8 <__sinit>
 8008060:	69a3      	ldr	r3, [r4, #24]
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	071a      	lsls	r2, r3, #28
 8008068:	d501      	bpl.n	800806e <__swbuf_r+0x20>
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	b943      	cbnz	r3, 8008080 <__swbuf_r+0x32>
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f000 f82b 	bl	80080cc <__swsetup_r>
 8008076:	b118      	cbz	r0, 8008080 <__swbuf_r+0x32>
 8008078:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800807c:	4638      	mov	r0, r7
 800807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	6922      	ldr	r2, [r4, #16]
 8008084:	1a98      	subs	r0, r3, r2
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	b2f6      	uxtb	r6, r6
 800808a:	4283      	cmp	r3, r0
 800808c:	4637      	mov	r7, r6
 800808e:	dc05      	bgt.n	800809c <__swbuf_r+0x4e>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f002 fd62 	bl	800ab5c <_fflush_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	d1ed      	bne.n	8008078 <__swbuf_r+0x2a>
 800809c:	68a3      	ldr	r3, [r4, #8]
 800809e:	3b01      	subs	r3, #1
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	6022      	str	r2, [r4, #0]
 80080a8:	701e      	strb	r6, [r3, #0]
 80080aa:	6962      	ldr	r2, [r4, #20]
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d004      	beq.n	80080bc <__swbuf_r+0x6e>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	07db      	lsls	r3, r3, #31
 80080b6:	d5e1      	bpl.n	800807c <__swbuf_r+0x2e>
 80080b8:	2e0a      	cmp	r6, #10
 80080ba:	d1df      	bne.n	800807c <__swbuf_r+0x2e>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f002 fd4c 	bl	800ab5c <_fflush_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0d9      	beq.n	800807c <__swbuf_r+0x2e>
 80080c8:	e7d6      	b.n	8008078 <__swbuf_r+0x2a>
	...

080080cc <__swsetup_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <__swsetup_r+0xa8>)
 80080d0:	4605      	mov	r5, r0
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	460c      	mov	r4, r1
 80080d6:	b118      	cbz	r0, 80080e0 <__swsetup_r+0x14>
 80080d8:	6a03      	ldr	r3, [r0, #32]
 80080da:	b90b      	cbnz	r3, 80080e0 <__swsetup_r+0x14>
 80080dc:	f7ff fe8c 	bl	8007df8 <__sinit>
 80080e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e4:	0719      	lsls	r1, r3, #28
 80080e6:	d422      	bmi.n	800812e <__swsetup_r+0x62>
 80080e8:	06da      	lsls	r2, r3, #27
 80080ea:	d407      	bmi.n	80080fc <__swsetup_r+0x30>
 80080ec:	2209      	movs	r2, #9
 80080ee:	602a      	str	r2, [r5, #0]
 80080f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080fa:	e033      	b.n	8008164 <__swsetup_r+0x98>
 80080fc:	0758      	lsls	r0, r3, #29
 80080fe:	d512      	bpl.n	8008126 <__swsetup_r+0x5a>
 8008100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008102:	b141      	cbz	r1, 8008116 <__swsetup_r+0x4a>
 8008104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008108:	4299      	cmp	r1, r3
 800810a:	d002      	beq.n	8008112 <__swsetup_r+0x46>
 800810c:	4628      	mov	r0, r5
 800810e:	f000 ff13 	bl	8008f38 <_free_r>
 8008112:	2300      	movs	r3, #0
 8008114:	6363      	str	r3, [r4, #52]	@ 0x34
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	2300      	movs	r3, #0
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0308 	orr.w	r3, r3, #8
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	b94b      	cbnz	r3, 8008146 <__swsetup_r+0x7a>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800813c:	d003      	beq.n	8008146 <__swsetup_r+0x7a>
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f002 fd59 	bl	800abf8 <__smakebuf_r>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	f013 0201 	ands.w	r2, r3, #1
 800814e:	d00a      	beq.n	8008166 <__swsetup_r+0x9a>
 8008150:	2200      	movs	r2, #0
 8008152:	60a2      	str	r2, [r4, #8]
 8008154:	6962      	ldr	r2, [r4, #20]
 8008156:	4252      	negs	r2, r2
 8008158:	61a2      	str	r2, [r4, #24]
 800815a:	6922      	ldr	r2, [r4, #16]
 800815c:	b942      	cbnz	r2, 8008170 <__swsetup_r+0xa4>
 800815e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008162:	d1c5      	bne.n	80080f0 <__swsetup_r+0x24>
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	0799      	lsls	r1, r3, #30
 8008168:	bf58      	it	pl
 800816a:	6962      	ldrpl	r2, [r4, #20]
 800816c:	60a2      	str	r2, [r4, #8]
 800816e:	e7f4      	b.n	800815a <__swsetup_r+0x8e>
 8008170:	2000      	movs	r0, #0
 8008172:	e7f7      	b.n	8008164 <__swsetup_r+0x98>
 8008174:	2000001c 	.word	0x2000001c

08008178 <memset>:
 8008178:	4402      	add	r2, r0
 800817a:	4603      	mov	r3, r0
 800817c:	4293      	cmp	r3, r2
 800817e:	d100      	bne.n	8008182 <memset+0xa>
 8008180:	4770      	bx	lr
 8008182:	f803 1b01 	strb.w	r1, [r3], #1
 8008186:	e7f9      	b.n	800817c <memset+0x4>

08008188 <_localeconv_r>:
 8008188:	4800      	ldr	r0, [pc, #0]	@ (800818c <_localeconv_r+0x4>)
 800818a:	4770      	bx	lr
 800818c:	2000015c 	.word	0x2000015c

08008190 <_close_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d06      	ldr	r5, [pc, #24]	@ (80081ac <_close_r+0x1c>)
 8008194:	2300      	movs	r3, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	f7f9 f92c 	bl	80013f8 <_close>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_close_r+0x1a>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_close_r+0x1a>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	20001688 	.word	0x20001688

080081b0 <_lseek_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	@ (80081d0 <_lseek_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f9 f941 	bl	8001446 <_lseek>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_lseek_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_lseek_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	20001688 	.word	0x20001688

080081d4 <_read_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d07      	ldr	r5, [pc, #28]	@ (80081f4 <_read_r+0x20>)
 80081d8:	4604      	mov	r4, r0
 80081da:	4608      	mov	r0, r1
 80081dc:	4611      	mov	r1, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7f9 f8cf 	bl	8001386 <_read>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_read_r+0x1e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_read_r+0x1e>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20001688 	.word	0x20001688

080081f8 <_write_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_write_r+0x20>)
 80081fc:	4604      	mov	r4, r0
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	2200      	movs	r2, #0
 8008204:	602a      	str	r2, [r5, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f7f9 f8da 	bl	80013c0 <_write>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_write_r+0x1e>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_write_r+0x1e>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	20001688 	.word	0x20001688

0800821c <__errno>:
 800821c:	4b01      	ldr	r3, [pc, #4]	@ (8008224 <__errno+0x8>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000001c 	.word	0x2000001c

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	@ (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	@ (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	@ (800826c <__libc_init_array+0x44>)
 800823c:	f003 fade 	bl	800b7fc <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	0800bd68 	.word	0x0800bd68
 8008264:	0800bd68 	.word	0x0800bd68
 8008268:	0800bd68 	.word	0x0800bd68
 800826c:	0800bd6c 	.word	0x0800bd6c

08008270 <__retarget_lock_init_recursive>:
 8008270:	4770      	bx	lr

08008272 <__retarget_lock_acquire_recursive>:
 8008272:	4770      	bx	lr

08008274 <__retarget_lock_release_recursive>:
 8008274:	4770      	bx	lr

08008276 <memcpy>:
 8008276:	440a      	add	r2, r1
 8008278:	4291      	cmp	r1, r2
 800827a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800827e:	d100      	bne.n	8008282 <memcpy+0xc>
 8008280:	4770      	bx	lr
 8008282:	b510      	push	{r4, lr}
 8008284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828c:	4291      	cmp	r1, r2
 800828e:	d1f9      	bne.n	8008284 <memcpy+0xe>
 8008290:	bd10      	pop	{r4, pc}
	...

08008294 <nanf>:
 8008294:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800829c <nanf+0x8>
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	7fc00000 	.word	0x7fc00000

080082a0 <quorem>:
 80082a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	6903      	ldr	r3, [r0, #16]
 80082a6:	690c      	ldr	r4, [r1, #16]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	4607      	mov	r7, r0
 80082ac:	db7e      	blt.n	80083ac <quorem+0x10c>
 80082ae:	3c01      	subs	r4, #1
 80082b0:	f101 0814 	add.w	r8, r1, #20
 80082b4:	00a3      	lsls	r3, r4, #2
 80082b6:	f100 0514 	add.w	r5, r0, #20
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ca:	3301      	adds	r3, #1
 80082cc:	429a      	cmp	r2, r3
 80082ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80082d6:	d32e      	bcc.n	8008336 <quorem+0x96>
 80082d8:	f04f 0a00 	mov.w	sl, #0
 80082dc:	46c4      	mov	ip, r8
 80082de:	46ae      	mov	lr, r5
 80082e0:	46d3      	mov	fp, sl
 80082e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082e6:	b298      	uxth	r0, r3
 80082e8:	fb06 a000 	mla	r0, r6, r0, sl
 80082ec:	0c02      	lsrs	r2, r0, #16
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	fb06 2303 	mla	r3, r6, r3, r2
 80082f4:	f8de 2000 	ldr.w	r2, [lr]
 80082f8:	b280      	uxth	r0, r0
 80082fa:	b292      	uxth	r2, r2
 80082fc:	1a12      	subs	r2, r2, r0
 80082fe:	445a      	add	r2, fp
 8008300:	f8de 0000 	ldr.w	r0, [lr]
 8008304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008308:	b29b      	uxth	r3, r3
 800830a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800830e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008312:	b292      	uxth	r2, r2
 8008314:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008318:	45e1      	cmp	r9, ip
 800831a:	f84e 2b04 	str.w	r2, [lr], #4
 800831e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008322:	d2de      	bcs.n	80082e2 <quorem+0x42>
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	58eb      	ldr	r3, [r5, r3]
 8008328:	b92b      	cbnz	r3, 8008336 <quorem+0x96>
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	3b04      	subs	r3, #4
 800832e:	429d      	cmp	r5, r3
 8008330:	461a      	mov	r2, r3
 8008332:	d32f      	bcc.n	8008394 <quorem+0xf4>
 8008334:	613c      	str	r4, [r7, #16]
 8008336:	4638      	mov	r0, r7
 8008338:	f001 f9c2 	bl	80096c0 <__mcmp>
 800833c:	2800      	cmp	r0, #0
 800833e:	db25      	blt.n	800838c <quorem+0xec>
 8008340:	4629      	mov	r1, r5
 8008342:	2000      	movs	r0, #0
 8008344:	f858 2b04 	ldr.w	r2, [r8], #4
 8008348:	f8d1 c000 	ldr.w	ip, [r1]
 800834c:	fa1f fe82 	uxth.w	lr, r2
 8008350:	fa1f f38c 	uxth.w	r3, ip
 8008354:	eba3 030e 	sub.w	r3, r3, lr
 8008358:	4403      	add	r3, r0
 800835a:	0c12      	lsrs	r2, r2, #16
 800835c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008360:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008364:	b29b      	uxth	r3, r3
 8008366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800836a:	45c1      	cmp	r9, r8
 800836c:	f841 3b04 	str.w	r3, [r1], #4
 8008370:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008374:	d2e6      	bcs.n	8008344 <quorem+0xa4>
 8008376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800837a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800837e:	b922      	cbnz	r2, 800838a <quorem+0xea>
 8008380:	3b04      	subs	r3, #4
 8008382:	429d      	cmp	r5, r3
 8008384:	461a      	mov	r2, r3
 8008386:	d30b      	bcc.n	80083a0 <quorem+0x100>
 8008388:	613c      	str	r4, [r7, #16]
 800838a:	3601      	adds	r6, #1
 800838c:	4630      	mov	r0, r6
 800838e:	b003      	add	sp, #12
 8008390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	3b04      	subs	r3, #4
 8008398:	2a00      	cmp	r2, #0
 800839a:	d1cb      	bne.n	8008334 <quorem+0x94>
 800839c:	3c01      	subs	r4, #1
 800839e:	e7c6      	b.n	800832e <quorem+0x8e>
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	3b04      	subs	r3, #4
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d1ef      	bne.n	8008388 <quorem+0xe8>
 80083a8:	3c01      	subs	r4, #1
 80083aa:	e7ea      	b.n	8008382 <quorem+0xe2>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7ee      	b.n	800838e <quorem+0xee>

080083b0 <_dtoa_r>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	69c7      	ldr	r7, [r0, #28]
 80083b6:	b099      	sub	sp, #100	@ 0x64
 80083b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80083bc:	ec55 4b10 	vmov	r4, r5, d0
 80083c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80083c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80083c4:	4683      	mov	fp, r0
 80083c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80083c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ca:	b97f      	cbnz	r7, 80083ec <_dtoa_r+0x3c>
 80083cc:	2010      	movs	r0, #16
 80083ce:	f000 fdfd 	bl	8008fcc <malloc>
 80083d2:	4602      	mov	r2, r0
 80083d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80083d8:	b920      	cbnz	r0, 80083e4 <_dtoa_r+0x34>
 80083da:	4ba7      	ldr	r3, [pc, #668]	@ (8008678 <_dtoa_r+0x2c8>)
 80083dc:	21ef      	movs	r1, #239	@ 0xef
 80083de:	48a7      	ldr	r0, [pc, #668]	@ (800867c <_dtoa_r+0x2cc>)
 80083e0:	f002 fcae 	bl	800ad40 <__assert_func>
 80083e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083e8:	6007      	str	r7, [r0, #0]
 80083ea:	60c7      	str	r7, [r0, #12]
 80083ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083f0:	6819      	ldr	r1, [r3, #0]
 80083f2:	b159      	cbz	r1, 800840c <_dtoa_r+0x5c>
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	604a      	str	r2, [r1, #4]
 80083f8:	2301      	movs	r3, #1
 80083fa:	4093      	lsls	r3, r2
 80083fc:	608b      	str	r3, [r1, #8]
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 feda 	bl	80091b8 <_Bfree>
 8008404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	1e2b      	subs	r3, r5, #0
 800840e:	bfb9      	ittee	lt
 8008410:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008414:	9303      	strlt	r3, [sp, #12]
 8008416:	2300      	movge	r3, #0
 8008418:	6033      	strge	r3, [r6, #0]
 800841a:	9f03      	ldr	r7, [sp, #12]
 800841c:	4b98      	ldr	r3, [pc, #608]	@ (8008680 <_dtoa_r+0x2d0>)
 800841e:	bfbc      	itt	lt
 8008420:	2201      	movlt	r2, #1
 8008422:	6032      	strlt	r2, [r6, #0]
 8008424:	43bb      	bics	r3, r7
 8008426:	d112      	bne.n	800844e <_dtoa_r+0x9e>
 8008428:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800842a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008434:	4323      	orrs	r3, r4
 8008436:	f000 854d 	beq.w	8008ed4 <_dtoa_r+0xb24>
 800843a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800843c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008694 <_dtoa_r+0x2e4>
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 854f 	beq.w	8008ee4 <_dtoa_r+0xb34>
 8008446:	f10a 0303 	add.w	r3, sl, #3
 800844a:	f000 bd49 	b.w	8008ee0 <_dtoa_r+0xb30>
 800844e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	ec51 0b17 	vmov	r0, r1, d7
 8008458:	2300      	movs	r3, #0
 800845a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800845e:	f7f8 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8008462:	4680      	mov	r8, r0
 8008464:	b158      	cbz	r0, 800847e <_dtoa_r+0xce>
 8008466:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008468:	2301      	movs	r3, #1
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800846e:	b113      	cbz	r3, 8008476 <_dtoa_r+0xc6>
 8008470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008472:	4b84      	ldr	r3, [pc, #528]	@ (8008684 <_dtoa_r+0x2d4>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008698 <_dtoa_r+0x2e8>
 800847a:	f000 bd33 	b.w	8008ee4 <_dtoa_r+0xb34>
 800847e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008482:	aa16      	add	r2, sp, #88	@ 0x58
 8008484:	a917      	add	r1, sp, #92	@ 0x5c
 8008486:	4658      	mov	r0, fp
 8008488:	f001 fa3a 	bl	8009900 <__d2b>
 800848c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008490:	4681      	mov	r9, r0
 8008492:	2e00      	cmp	r6, #0
 8008494:	d077      	beq.n	8008586 <_dtoa_r+0x1d6>
 8008496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008498:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800849c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80084a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80084ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80084b0:	4619      	mov	r1, r3
 80084b2:	2200      	movs	r2, #0
 80084b4:	4b74      	ldr	r3, [pc, #464]	@ (8008688 <_dtoa_r+0x2d8>)
 80084b6:	f7f7 fee7 	bl	8000288 <__aeabi_dsub>
 80084ba:	a369      	add	r3, pc, #420	@ (adr r3, 8008660 <_dtoa_r+0x2b0>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f89a 	bl	80005f8 <__aeabi_dmul>
 80084c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008668 <_dtoa_r+0x2b8>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fedf 	bl	800028c <__adddf3>
 80084ce:	4604      	mov	r4, r0
 80084d0:	4630      	mov	r0, r6
 80084d2:	460d      	mov	r5, r1
 80084d4:	f7f8 f826 	bl	8000524 <__aeabi_i2d>
 80084d8:	a365      	add	r3, pc, #404	@ (adr r3, 8008670 <_dtoa_r+0x2c0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f8 f88b 	bl	80005f8 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4620      	mov	r0, r4
 80084e8:	4629      	mov	r1, r5
 80084ea:	f7f7 fecf 	bl	800028c <__adddf3>
 80084ee:	4604      	mov	r4, r0
 80084f0:	460d      	mov	r5, r1
 80084f2:	f7f8 fb31 	bl	8000b58 <__aeabi_d2iz>
 80084f6:	2200      	movs	r2, #0
 80084f8:	4607      	mov	r7, r0
 80084fa:	2300      	movs	r3, #0
 80084fc:	4620      	mov	r0, r4
 80084fe:	4629      	mov	r1, r5
 8008500:	f7f8 faec 	bl	8000adc <__aeabi_dcmplt>
 8008504:	b140      	cbz	r0, 8008518 <_dtoa_r+0x168>
 8008506:	4638      	mov	r0, r7
 8008508:	f7f8 f80c 	bl	8000524 <__aeabi_i2d>
 800850c:	4622      	mov	r2, r4
 800850e:	462b      	mov	r3, r5
 8008510:	f7f8 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8008514:	b900      	cbnz	r0, 8008518 <_dtoa_r+0x168>
 8008516:	3f01      	subs	r7, #1
 8008518:	2f16      	cmp	r7, #22
 800851a:	d851      	bhi.n	80085c0 <_dtoa_r+0x210>
 800851c:	4b5b      	ldr	r3, [pc, #364]	@ (800868c <_dtoa_r+0x2dc>)
 800851e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852a:	f7f8 fad7 	bl	8000adc <__aeabi_dcmplt>
 800852e:	2800      	cmp	r0, #0
 8008530:	d048      	beq.n	80085c4 <_dtoa_r+0x214>
 8008532:	3f01      	subs	r7, #1
 8008534:	2300      	movs	r3, #0
 8008536:	9312      	str	r3, [sp, #72]	@ 0x48
 8008538:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800853a:	1b9b      	subs	r3, r3, r6
 800853c:	1e5a      	subs	r2, r3, #1
 800853e:	bf44      	itt	mi
 8008540:	f1c3 0801 	rsbmi	r8, r3, #1
 8008544:	2300      	movmi	r3, #0
 8008546:	9208      	str	r2, [sp, #32]
 8008548:	bf54      	ite	pl
 800854a:	f04f 0800 	movpl.w	r8, #0
 800854e:	9308      	strmi	r3, [sp, #32]
 8008550:	2f00      	cmp	r7, #0
 8008552:	db39      	blt.n	80085c8 <_dtoa_r+0x218>
 8008554:	9b08      	ldr	r3, [sp, #32]
 8008556:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008558:	443b      	add	r3, r7
 800855a:	9308      	str	r3, [sp, #32]
 800855c:	2300      	movs	r3, #0
 800855e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008562:	2b09      	cmp	r3, #9
 8008564:	d864      	bhi.n	8008630 <_dtoa_r+0x280>
 8008566:	2b05      	cmp	r3, #5
 8008568:	bfc4      	itt	gt
 800856a:	3b04      	subgt	r3, #4
 800856c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800856e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008570:	f1a3 0302 	sub.w	r3, r3, #2
 8008574:	bfcc      	ite	gt
 8008576:	2400      	movgt	r4, #0
 8008578:	2401      	movle	r4, #1
 800857a:	2b03      	cmp	r3, #3
 800857c:	d863      	bhi.n	8008646 <_dtoa_r+0x296>
 800857e:	e8df f003 	tbb	[pc, r3]
 8008582:	372a      	.short	0x372a
 8008584:	5535      	.short	0x5535
 8008586:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800858a:	441e      	add	r6, r3
 800858c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008590:	2b20      	cmp	r3, #32
 8008592:	bfc1      	itttt	gt
 8008594:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008598:	409f      	lslgt	r7, r3
 800859a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800859e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085a2:	bfd6      	itet	le
 80085a4:	f1c3 0320 	rsble	r3, r3, #32
 80085a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80085ac:	fa04 f003 	lslle.w	r0, r4, r3
 80085b0:	f7f7 ffa8 	bl	8000504 <__aeabi_ui2d>
 80085b4:	2201      	movs	r2, #1
 80085b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80085ba:	3e01      	subs	r6, #1
 80085bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80085be:	e777      	b.n	80084b0 <_dtoa_r+0x100>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7b8      	b.n	8008536 <_dtoa_r+0x186>
 80085c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80085c6:	e7b7      	b.n	8008538 <_dtoa_r+0x188>
 80085c8:	427b      	negs	r3, r7
 80085ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80085cc:	2300      	movs	r3, #0
 80085ce:	eba8 0807 	sub.w	r8, r8, r7
 80085d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085d4:	e7c4      	b.n	8008560 <_dtoa_r+0x1b0>
 80085d6:	2300      	movs	r3, #0
 80085d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dc35      	bgt.n	800864c <_dtoa_r+0x29c>
 80085e0:	2301      	movs	r3, #1
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	9307      	str	r3, [sp, #28]
 80085e6:	461a      	mov	r2, r3
 80085e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80085ea:	e00b      	b.n	8008604 <_dtoa_r+0x254>
 80085ec:	2301      	movs	r3, #1
 80085ee:	e7f3      	b.n	80085d8 <_dtoa_r+0x228>
 80085f0:	2300      	movs	r3, #0
 80085f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f6:	18fb      	adds	r3, r7, r3
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	bfb8      	it	lt
 8008602:	2301      	movlt	r3, #1
 8008604:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008608:	2100      	movs	r1, #0
 800860a:	2204      	movs	r2, #4
 800860c:	f102 0514 	add.w	r5, r2, #20
 8008610:	429d      	cmp	r5, r3
 8008612:	d91f      	bls.n	8008654 <_dtoa_r+0x2a4>
 8008614:	6041      	str	r1, [r0, #4]
 8008616:	4658      	mov	r0, fp
 8008618:	f000 fd8e 	bl	8009138 <_Balloc>
 800861c:	4682      	mov	sl, r0
 800861e:	2800      	cmp	r0, #0
 8008620:	d13c      	bne.n	800869c <_dtoa_r+0x2ec>
 8008622:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <_dtoa_r+0x2e0>)
 8008624:	4602      	mov	r2, r0
 8008626:	f240 11af 	movw	r1, #431	@ 0x1af
 800862a:	e6d8      	b.n	80083de <_dtoa_r+0x2e>
 800862c:	2301      	movs	r3, #1
 800862e:	e7e0      	b.n	80085f2 <_dtoa_r+0x242>
 8008630:	2401      	movs	r4, #1
 8008632:	2300      	movs	r3, #0
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	2200      	movs	r2, #0
 8008642:	2312      	movs	r3, #18
 8008644:	e7d0      	b.n	80085e8 <_dtoa_r+0x238>
 8008646:	2301      	movs	r3, #1
 8008648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800864a:	e7f5      	b.n	8008638 <_dtoa_r+0x288>
 800864c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	e7d7      	b.n	8008604 <_dtoa_r+0x254>
 8008654:	3101      	adds	r1, #1
 8008656:	0052      	lsls	r2, r2, #1
 8008658:	e7d8      	b.n	800860c <_dtoa_r+0x25c>
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	636f4361 	.word	0x636f4361
 8008664:	3fd287a7 	.word	0x3fd287a7
 8008668:	8b60c8b3 	.word	0x8b60c8b3
 800866c:	3fc68a28 	.word	0x3fc68a28
 8008670:	509f79fb 	.word	0x509f79fb
 8008674:	3fd34413 	.word	0x3fd34413
 8008678:	0800b979 	.word	0x0800b979
 800867c:	0800b990 	.word	0x0800b990
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800b944 	.word	0x0800b944
 8008688:	3ff80000 	.word	0x3ff80000
 800868c:	0800ba88 	.word	0x0800ba88
 8008690:	0800b9e8 	.word	0x0800b9e8
 8008694:	0800b975 	.word	0x0800b975
 8008698:	0800b943 	.word	0x0800b943
 800869c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086a0:	6018      	str	r0, [r3, #0]
 80086a2:	9b07      	ldr	r3, [sp, #28]
 80086a4:	2b0e      	cmp	r3, #14
 80086a6:	f200 80a4 	bhi.w	80087f2 <_dtoa_r+0x442>
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	f000 80a1 	beq.w	80087f2 <_dtoa_r+0x442>
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	dd33      	ble.n	800871c <_dtoa_r+0x36c>
 80086b4:	4bad      	ldr	r3, [pc, #692]	@ (800896c <_dtoa_r+0x5bc>)
 80086b6:	f007 020f 	and.w	r2, r7, #15
 80086ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086be:	ed93 7b00 	vldr	d7, [r3]
 80086c2:	05f8      	lsls	r0, r7, #23
 80086c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086cc:	d516      	bpl.n	80086fc <_dtoa_r+0x34c>
 80086ce:	4ba8      	ldr	r3, [pc, #672]	@ (8008970 <_dtoa_r+0x5c0>)
 80086d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086d8:	f7f8 f8b8 	bl	800084c <__aeabi_ddiv>
 80086dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e0:	f004 040f 	and.w	r4, r4, #15
 80086e4:	2603      	movs	r6, #3
 80086e6:	4da2      	ldr	r5, [pc, #648]	@ (8008970 <_dtoa_r+0x5c0>)
 80086e8:	b954      	cbnz	r4, 8008700 <_dtoa_r+0x350>
 80086ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f2:	f7f8 f8ab 	bl	800084c <__aeabi_ddiv>
 80086f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086fa:	e028      	b.n	800874e <_dtoa_r+0x39e>
 80086fc:	2602      	movs	r6, #2
 80086fe:	e7f2      	b.n	80086e6 <_dtoa_r+0x336>
 8008700:	07e1      	lsls	r1, r4, #31
 8008702:	d508      	bpl.n	8008716 <_dtoa_r+0x366>
 8008704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008714:	3601      	adds	r6, #1
 8008716:	1064      	asrs	r4, r4, #1
 8008718:	3508      	adds	r5, #8
 800871a:	e7e5      	b.n	80086e8 <_dtoa_r+0x338>
 800871c:	f000 80d2 	beq.w	80088c4 <_dtoa_r+0x514>
 8008720:	427c      	negs	r4, r7
 8008722:	4b92      	ldr	r3, [pc, #584]	@ (800896c <_dtoa_r+0x5bc>)
 8008724:	4d92      	ldr	r5, [pc, #584]	@ (8008970 <_dtoa_r+0x5c0>)
 8008726:	f004 020f 	and.w	r2, r4, #15
 800872a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800873e:	1124      	asrs	r4, r4, #4
 8008740:	2300      	movs	r3, #0
 8008742:	2602      	movs	r6, #2
 8008744:	2c00      	cmp	r4, #0
 8008746:	f040 80b2 	bne.w	80088ae <_dtoa_r+0x4fe>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1d3      	bne.n	80086f6 <_dtoa_r+0x346>
 800874e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008750:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80b7 	beq.w	80088c8 <_dtoa_r+0x518>
 800875a:	4b86      	ldr	r3, [pc, #536]	@ (8008974 <_dtoa_r+0x5c4>)
 800875c:	2200      	movs	r2, #0
 800875e:	4620      	mov	r0, r4
 8008760:	4629      	mov	r1, r5
 8008762:	f7f8 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	f000 80ae 	beq.w	80088c8 <_dtoa_r+0x518>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 80aa 	beq.w	80088c8 <_dtoa_r+0x518>
 8008774:	9b00      	ldr	r3, [sp, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	dd37      	ble.n	80087ea <_dtoa_r+0x43a>
 800877a:	1e7b      	subs	r3, r7, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	4620      	mov	r0, r4
 8008780:	4b7d      	ldr	r3, [pc, #500]	@ (8008978 <_dtoa_r+0x5c8>)
 8008782:	2200      	movs	r2, #0
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800878e:	9c00      	ldr	r4, [sp, #0]
 8008790:	3601      	adds	r6, #1
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fec6 	bl	8000524 <__aeabi_i2d>
 8008798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800879c:	f7f7 ff2c 	bl	80005f8 <__aeabi_dmul>
 80087a0:	4b76      	ldr	r3, [pc, #472]	@ (800897c <_dtoa_r+0x5cc>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	f7f7 fd72 	bl	800028c <__adddf3>
 80087a8:	4605      	mov	r5, r0
 80087aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80087ae:	2c00      	cmp	r4, #0
 80087b0:	f040 808d 	bne.w	80088ce <_dtoa_r+0x51e>
 80087b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b8:	4b71      	ldr	r3, [pc, #452]	@ (8008980 <_dtoa_r+0x5d0>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	f7f7 fd64 	bl	8000288 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087c8:	462a      	mov	r2, r5
 80087ca:	4633      	mov	r3, r6
 80087cc:	f7f8 f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	f040 828b 	bne.w	8008cec <_dtoa_r+0x93c>
 80087d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087da:	462a      	mov	r2, r5
 80087dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087e0:	f7f8 f97c 	bl	8000adc <__aeabi_dcmplt>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	f040 8128 	bne.w	8008a3a <_dtoa_r+0x68a>
 80087ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f2c0 815a 	blt.w	8008aae <_dtoa_r+0x6fe>
 80087fa:	2f0e      	cmp	r7, #14
 80087fc:	f300 8157 	bgt.w	8008aae <_dtoa_r+0x6fe>
 8008800:	4b5a      	ldr	r3, [pc, #360]	@ (800896c <_dtoa_r+0x5bc>)
 8008802:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008806:	ed93 7b00 	vldr	d7, [r3]
 800880a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	ed8d 7b00 	vstr	d7, [sp]
 8008812:	da03      	bge.n	800881c <_dtoa_r+0x46c>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f340 8101 	ble.w	8008a1e <_dtoa_r+0x66e>
 800881c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008820:	4656      	mov	r6, sl
 8008822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f8 f80f 	bl	800084c <__aeabi_ddiv>
 800882e:	f7f8 f993 	bl	8000b58 <__aeabi_d2iz>
 8008832:	4680      	mov	r8, r0
 8008834:	f7f7 fe76 	bl	8000524 <__aeabi_i2d>
 8008838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800883c:	f7f7 fedc 	bl	80005f8 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800884c:	f7f7 fd1c 	bl	8000288 <__aeabi_dsub>
 8008850:	f806 4b01 	strb.w	r4, [r6], #1
 8008854:	9d07      	ldr	r5, [sp, #28]
 8008856:	eba6 040a 	sub.w	r4, r6, sl
 800885a:	42a5      	cmp	r5, r4
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	f040 8117 	bne.w	8008a92 <_dtoa_r+0x6e2>
 8008864:	f7f7 fd12 	bl	800028c <__adddf3>
 8008868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	f7f8 f952 	bl	8000b18 <__aeabi_dcmpgt>
 8008874:	2800      	cmp	r0, #0
 8008876:	f040 80f9 	bne.w	8008a6c <_dtoa_r+0x6bc>
 800887a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f8 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8008886:	b118      	cbz	r0, 8008890 <_dtoa_r+0x4e0>
 8008888:	f018 0f01 	tst.w	r8, #1
 800888c:	f040 80ee 	bne.w	8008a6c <_dtoa_r+0x6bc>
 8008890:	4649      	mov	r1, r9
 8008892:	4658      	mov	r0, fp
 8008894:	f000 fc90 	bl	80091b8 <_Bfree>
 8008898:	2300      	movs	r3, #0
 800889a:	7033      	strb	r3, [r6, #0]
 800889c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800889e:	3701      	adds	r7, #1
 80088a0:	601f      	str	r7, [r3, #0]
 80088a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 831d 	beq.w	8008ee4 <_dtoa_r+0xb34>
 80088aa:	601e      	str	r6, [r3, #0]
 80088ac:	e31a      	b.n	8008ee4 <_dtoa_r+0xb34>
 80088ae:	07e2      	lsls	r2, r4, #31
 80088b0:	d505      	bpl.n	80088be <_dtoa_r+0x50e>
 80088b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088b6:	f7f7 fe9f 	bl	80005f8 <__aeabi_dmul>
 80088ba:	3601      	adds	r6, #1
 80088bc:	2301      	movs	r3, #1
 80088be:	1064      	asrs	r4, r4, #1
 80088c0:	3508      	adds	r5, #8
 80088c2:	e73f      	b.n	8008744 <_dtoa_r+0x394>
 80088c4:	2602      	movs	r6, #2
 80088c6:	e742      	b.n	800874e <_dtoa_r+0x39e>
 80088c8:	9c07      	ldr	r4, [sp, #28]
 80088ca:	9704      	str	r7, [sp, #16]
 80088cc:	e761      	b.n	8008792 <_dtoa_r+0x3e2>
 80088ce:	4b27      	ldr	r3, [pc, #156]	@ (800896c <_dtoa_r+0x5bc>)
 80088d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088da:	4454      	add	r4, sl
 80088dc:	2900      	cmp	r1, #0
 80088de:	d053      	beq.n	8008988 <_dtoa_r+0x5d8>
 80088e0:	4928      	ldr	r1, [pc, #160]	@ (8008984 <_dtoa_r+0x5d4>)
 80088e2:	2000      	movs	r0, #0
 80088e4:	f7f7 ffb2 	bl	800084c <__aeabi_ddiv>
 80088e8:	4633      	mov	r3, r6
 80088ea:	462a      	mov	r2, r5
 80088ec:	f7f7 fccc 	bl	8000288 <__aeabi_dsub>
 80088f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088f4:	4656      	mov	r6, sl
 80088f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088fa:	f7f8 f92d 	bl	8000b58 <__aeabi_d2iz>
 80088fe:	4605      	mov	r5, r0
 8008900:	f7f7 fe10 	bl	8000524 <__aeabi_i2d>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890c:	f7f7 fcbc 	bl	8000288 <__aeabi_dsub>
 8008910:	3530      	adds	r5, #48	@ 0x30
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800891a:	f806 5b01 	strb.w	r5, [r6], #1
 800891e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008922:	f7f8 f8db 	bl	8000adc <__aeabi_dcmplt>
 8008926:	2800      	cmp	r0, #0
 8008928:	d171      	bne.n	8008a0e <_dtoa_r+0x65e>
 800892a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800892e:	4911      	ldr	r1, [pc, #68]	@ (8008974 <_dtoa_r+0x5c4>)
 8008930:	2000      	movs	r0, #0
 8008932:	f7f7 fca9 	bl	8000288 <__aeabi_dsub>
 8008936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800893a:	f7f8 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800893e:	2800      	cmp	r0, #0
 8008940:	f040 8095 	bne.w	8008a6e <_dtoa_r+0x6be>
 8008944:	42a6      	cmp	r6, r4
 8008946:	f43f af50 	beq.w	80087ea <_dtoa_r+0x43a>
 800894a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800894e:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <_dtoa_r+0x5c8>)
 8008950:	2200      	movs	r2, #0
 8008952:	f7f7 fe51 	bl	80005f8 <__aeabi_dmul>
 8008956:	4b08      	ldr	r3, [pc, #32]	@ (8008978 <_dtoa_r+0x5c8>)
 8008958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800895c:	2200      	movs	r2, #0
 800895e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008962:	f7f7 fe49 	bl	80005f8 <__aeabi_dmul>
 8008966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896a:	e7c4      	b.n	80088f6 <_dtoa_r+0x546>
 800896c:	0800ba88 	.word	0x0800ba88
 8008970:	0800ba60 	.word	0x0800ba60
 8008974:	3ff00000 	.word	0x3ff00000
 8008978:	40240000 	.word	0x40240000
 800897c:	401c0000 	.word	0x401c0000
 8008980:	40140000 	.word	0x40140000
 8008984:	3fe00000 	.word	0x3fe00000
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008994:	9415      	str	r4, [sp, #84]	@ 0x54
 8008996:	4656      	mov	r6, sl
 8008998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800899c:	f7f8 f8dc 	bl	8000b58 <__aeabi_d2iz>
 80089a0:	4605      	mov	r5, r0
 80089a2:	f7f7 fdbf 	bl	8000524 <__aeabi_i2d>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ae:	f7f7 fc6b 	bl	8000288 <__aeabi_dsub>
 80089b2:	3530      	adds	r5, #48	@ 0x30
 80089b4:	f806 5b01 	strb.w	r5, [r6], #1
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	42a6      	cmp	r6, r4
 80089be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	d124      	bne.n	8008a12 <_dtoa_r+0x662>
 80089c8:	4bac      	ldr	r3, [pc, #688]	@ (8008c7c <_dtoa_r+0x8cc>)
 80089ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089ce:	f7f7 fc5d 	bl	800028c <__adddf3>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089da:	f7f8 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d145      	bne.n	8008a6e <_dtoa_r+0x6be>
 80089e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089e6:	49a5      	ldr	r1, [pc, #660]	@ (8008c7c <_dtoa_r+0x8cc>)
 80089e8:	2000      	movs	r0, #0
 80089ea:	f7f7 fc4d 	bl	8000288 <__aeabi_dsub>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f6:	f7f8 f871 	bl	8000adc <__aeabi_dcmplt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f43f aef5 	beq.w	80087ea <_dtoa_r+0x43a>
 8008a00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a02:	1e73      	subs	r3, r6, #1
 8008a04:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a0a:	2b30      	cmp	r3, #48	@ 0x30
 8008a0c:	d0f8      	beq.n	8008a00 <_dtoa_r+0x650>
 8008a0e:	9f04      	ldr	r7, [sp, #16]
 8008a10:	e73e      	b.n	8008890 <_dtoa_r+0x4e0>
 8008a12:	4b9b      	ldr	r3, [pc, #620]	@ (8008c80 <_dtoa_r+0x8d0>)
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a1c:	e7bc      	b.n	8008998 <_dtoa_r+0x5e8>
 8008a1e:	d10c      	bne.n	8008a3a <_dtoa_r+0x68a>
 8008a20:	4b98      	ldr	r3, [pc, #608]	@ (8008c84 <_dtoa_r+0x8d4>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a28:	f7f7 fde6 	bl	80005f8 <__aeabi_dmul>
 8008a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a30:	f7f8 f868 	bl	8000b04 <__aeabi_dcmpge>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f000 8157 	beq.w	8008ce8 <_dtoa_r+0x938>
 8008a3a:	2400      	movs	r4, #0
 8008a3c:	4625      	mov	r5, r4
 8008a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a40:	43db      	mvns	r3, r3
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	4656      	mov	r6, sl
 8008a46:	2700      	movs	r7, #0
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4658      	mov	r0, fp
 8008a4c:	f000 fbb4 	bl	80091b8 <_Bfree>
 8008a50:	2d00      	cmp	r5, #0
 8008a52:	d0dc      	beq.n	8008a0e <_dtoa_r+0x65e>
 8008a54:	b12f      	cbz	r7, 8008a62 <_dtoa_r+0x6b2>
 8008a56:	42af      	cmp	r7, r5
 8008a58:	d003      	beq.n	8008a62 <_dtoa_r+0x6b2>
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	f000 fbab 	bl	80091b8 <_Bfree>
 8008a62:	4629      	mov	r1, r5
 8008a64:	4658      	mov	r0, fp
 8008a66:	f000 fba7 	bl	80091b8 <_Bfree>
 8008a6a:	e7d0      	b.n	8008a0e <_dtoa_r+0x65e>
 8008a6c:	9704      	str	r7, [sp, #16]
 8008a6e:	4633      	mov	r3, r6
 8008a70:	461e      	mov	r6, r3
 8008a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a76:	2a39      	cmp	r2, #57	@ 0x39
 8008a78:	d107      	bne.n	8008a8a <_dtoa_r+0x6da>
 8008a7a:	459a      	cmp	sl, r3
 8008a7c:	d1f8      	bne.n	8008a70 <_dtoa_r+0x6c0>
 8008a7e:	9a04      	ldr	r2, [sp, #16]
 8008a80:	3201      	adds	r2, #1
 8008a82:	9204      	str	r2, [sp, #16]
 8008a84:	2230      	movs	r2, #48	@ 0x30
 8008a86:	f88a 2000 	strb.w	r2, [sl]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e7bd      	b.n	8008a0e <_dtoa_r+0x65e>
 8008a92:	4b7b      	ldr	r3, [pc, #492]	@ (8008c80 <_dtoa_r+0x8d0>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7f7 fdaf 	bl	80005f8 <__aeabi_dmul>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	f7f8 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f aebb 	beq.w	8008822 <_dtoa_r+0x472>
 8008aac:	e6f0      	b.n	8008890 <_dtoa_r+0x4e0>
 8008aae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	f000 80db 	beq.w	8008c6c <_dtoa_r+0x8bc>
 8008ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ab8:	2a01      	cmp	r2, #1
 8008aba:	f300 80bf 	bgt.w	8008c3c <_dtoa_r+0x88c>
 8008abe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	f000 80b7 	beq.w	8008c34 <_dtoa_r+0x884>
 8008ac6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008aca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008acc:	4646      	mov	r6, r8
 8008ace:	9a08      	ldr	r2, [sp, #32]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	441a      	add	r2, r3
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	4498      	add	r8, r3
 8008ad8:	9208      	str	r2, [sp, #32]
 8008ada:	f000 fc6b 	bl	80093b4 <__i2b>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b15e      	cbz	r6, 8008afa <_dtoa_r+0x74a>
 8008ae2:	9b08      	ldr	r3, [sp, #32]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd08      	ble.n	8008afa <_dtoa_r+0x74a>
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	9a08      	ldr	r2, [sp, #32]
 8008aec:	bfa8      	it	ge
 8008aee:	4633      	movge	r3, r6
 8008af0:	eba8 0803 	sub.w	r8, r8, r3
 8008af4:	1af6      	subs	r6, r6, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	9308      	str	r3, [sp, #32]
 8008afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008afc:	b1f3      	cbz	r3, 8008b3c <_dtoa_r+0x78c>
 8008afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 80b7 	beq.w	8008c74 <_dtoa_r+0x8c4>
 8008b06:	b18c      	cbz	r4, 8008b2c <_dtoa_r+0x77c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fd11 	bl	8009534 <__pow5mult>
 8008b12:	464a      	mov	r2, r9
 8008b14:	4601      	mov	r1, r0
 8008b16:	4605      	mov	r5, r0
 8008b18:	4658      	mov	r0, fp
 8008b1a:	f000 fc61 	bl	80093e0 <__multiply>
 8008b1e:	4649      	mov	r1, r9
 8008b20:	9004      	str	r0, [sp, #16]
 8008b22:	4658      	mov	r0, fp
 8008b24:	f000 fb48 	bl	80091b8 <_Bfree>
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	4699      	mov	r9, r3
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2e:	1b1a      	subs	r2, r3, r4
 8008b30:	d004      	beq.n	8008b3c <_dtoa_r+0x78c>
 8008b32:	4649      	mov	r1, r9
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fcfd 	bl	8009534 <__pow5mult>
 8008b3a:	4681      	mov	r9, r0
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4658      	mov	r0, fp
 8008b40:	f000 fc38 	bl	80093b4 <__i2b>
 8008b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b46:	4604      	mov	r4, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 81cf 	beq.w	8008eec <_dtoa_r+0xb3c>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4601      	mov	r1, r0
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fcee 	bl	8009534 <__pow5mult>
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	f300 8095 	bgt.w	8008c8c <_dtoa_r+0x8dc>
 8008b62:	9b02      	ldr	r3, [sp, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f040 8087 	bne.w	8008c78 <_dtoa_r+0x8c8>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f040 8089 	bne.w	8008c88 <_dtoa_r+0x8d8>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b7c:	0d1b      	lsrs	r3, r3, #20
 8008b7e:	051b      	lsls	r3, r3, #20
 8008b80:	b12b      	cbz	r3, 8008b8e <_dtoa_r+0x7de>
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	3301      	adds	r3, #1
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	f108 0801 	add.w	r8, r8, #1
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 81b0 	beq.w	8008ef8 <_dtoa_r+0xb48>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b9e:	6918      	ldr	r0, [r3, #16]
 8008ba0:	f000 fbbc 	bl	800931c <__hi0bits>
 8008ba4:	f1c0 0020 	rsb	r0, r0, #32
 8008ba8:	9b08      	ldr	r3, [sp, #32]
 8008baa:	4418      	add	r0, r3
 8008bac:	f010 001f 	ands.w	r0, r0, #31
 8008bb0:	d077      	beq.n	8008ca2 <_dtoa_r+0x8f2>
 8008bb2:	f1c0 0320 	rsb	r3, r0, #32
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	dd6b      	ble.n	8008c92 <_dtoa_r+0x8e2>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	f1c0 001c 	rsb	r0, r0, #28
 8008bc0:	4403      	add	r3, r0
 8008bc2:	4480      	add	r8, r0
 8008bc4:	4406      	add	r6, r0
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	f1b8 0f00 	cmp.w	r8, #0
 8008bcc:	dd05      	ble.n	8008bda <_dtoa_r+0x82a>
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	f000 fd08 	bl	80095e8 <__lshift>
 8008bd8:	4681      	mov	r9, r0
 8008bda:	9b08      	ldr	r3, [sp, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd05      	ble.n	8008bec <_dtoa_r+0x83c>
 8008be0:	4621      	mov	r1, r4
 8008be2:	461a      	mov	r2, r3
 8008be4:	4658      	mov	r0, fp
 8008be6:	f000 fcff 	bl	80095e8 <__lshift>
 8008bea:	4604      	mov	r4, r0
 8008bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d059      	beq.n	8008ca6 <_dtoa_r+0x8f6>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4648      	mov	r0, r9
 8008bf6:	f000 fd63 	bl	80096c0 <__mcmp>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	da53      	bge.n	8008ca6 <_dtoa_r+0x8f6>
 8008bfe:	1e7b      	subs	r3, r7, #1
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	4649      	mov	r1, r9
 8008c04:	2300      	movs	r3, #0
 8008c06:	220a      	movs	r2, #10
 8008c08:	4658      	mov	r0, fp
 8008c0a:	f000 faf7 	bl	80091fc <__multadd>
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c10:	4681      	mov	r9, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8172 	beq.w	8008efc <_dtoa_r+0xb4c>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4658      	mov	r0, fp
 8008c20:	f000 faec 	bl	80091fc <__multadd>
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	4605      	mov	r5, r0
 8008c2a:	dc67      	bgt.n	8008cfc <_dtoa_r+0x94c>
 8008c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	dc41      	bgt.n	8008cb6 <_dtoa_r+0x906>
 8008c32:	e063      	b.n	8008cfc <_dtoa_r+0x94c>
 8008c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c3a:	e746      	b.n	8008aca <_dtoa_r+0x71a>
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	1e5c      	subs	r4, r3, #1
 8008c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	bfbf      	itttt	lt
 8008c46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c4c:	1ae3      	sublt	r3, r4, r3
 8008c4e:	bfb4      	ite	lt
 8008c50:	18d2      	addlt	r2, r2, r3
 8008c52:	1b1c      	subge	r4, r3, r4
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	bfbc      	itt	lt
 8008c58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c5a:	2400      	movlt	r4, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bfb5      	itete	lt
 8008c60:	eba8 0603 	sublt.w	r6, r8, r3
 8008c64:	9b07      	ldrge	r3, [sp, #28]
 8008c66:	2300      	movlt	r3, #0
 8008c68:	4646      	movge	r6, r8
 8008c6a:	e730      	b.n	8008ace <_dtoa_r+0x71e>
 8008c6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c70:	4646      	mov	r6, r8
 8008c72:	e735      	b.n	8008ae0 <_dtoa_r+0x730>
 8008c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c76:	e75c      	b.n	8008b32 <_dtoa_r+0x782>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e788      	b.n	8008b8e <_dtoa_r+0x7de>
 8008c7c:	3fe00000 	.word	0x3fe00000
 8008c80:	40240000 	.word	0x40240000
 8008c84:	40140000 	.word	0x40140000
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	e780      	b.n	8008b8e <_dtoa_r+0x7de>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c90:	e782      	b.n	8008b98 <_dtoa_r+0x7e8>
 8008c92:	d099      	beq.n	8008bc8 <_dtoa_r+0x818>
 8008c94:	9a08      	ldr	r2, [sp, #32]
 8008c96:	331c      	adds	r3, #28
 8008c98:	441a      	add	r2, r3
 8008c9a:	4498      	add	r8, r3
 8008c9c:	441e      	add	r6, r3
 8008c9e:	9208      	str	r2, [sp, #32]
 8008ca0:	e792      	b.n	8008bc8 <_dtoa_r+0x818>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	e7f6      	b.n	8008c94 <_dtoa_r+0x8e4>
 8008ca6:	9b07      	ldr	r3, [sp, #28]
 8008ca8:	9704      	str	r7, [sp, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dc20      	bgt.n	8008cf0 <_dtoa_r+0x940>
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	dd1e      	ble.n	8008cf4 <_dtoa_r+0x944>
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f aec0 	bne.w	8008a3e <_dtoa_r+0x68e>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	4658      	mov	r0, fp
 8008cc4:	f000 fa9a 	bl	80091fc <__multadd>
 8008cc8:	4601      	mov	r1, r0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4648      	mov	r0, r9
 8008cce:	f000 fcf7 	bl	80096c0 <__mcmp>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f77f aeb3 	ble.w	8008a3e <_dtoa_r+0x68e>
 8008cd8:	4656      	mov	r6, sl
 8008cda:	2331      	movs	r3, #49	@ 0x31
 8008cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ce0:	9b04      	ldr	r3, [sp, #16]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	e6ae      	b.n	8008a46 <_dtoa_r+0x696>
 8008ce8:	9c07      	ldr	r4, [sp, #28]
 8008cea:	9704      	str	r7, [sp, #16]
 8008cec:	4625      	mov	r5, r4
 8008cee:	e7f3      	b.n	8008cd8 <_dtoa_r+0x928>
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 8104 	beq.w	8008f04 <_dtoa_r+0xb54>
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	dd05      	ble.n	8008d0c <_dtoa_r+0x95c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4632      	mov	r2, r6
 8008d04:	4658      	mov	r0, fp
 8008d06:	f000 fc6f 	bl	80095e8 <__lshift>
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d05a      	beq.n	8008dc8 <_dtoa_r+0xa18>
 8008d12:	6869      	ldr	r1, [r5, #4]
 8008d14:	4658      	mov	r0, fp
 8008d16:	f000 fa0f 	bl	8009138 <_Balloc>
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	b928      	cbnz	r0, 8008d2a <_dtoa_r+0x97a>
 8008d1e:	4b84      	ldr	r3, [pc, #528]	@ (8008f30 <_dtoa_r+0xb80>)
 8008d20:	4602      	mov	r2, r0
 8008d22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d26:	f7ff bb5a 	b.w	80083de <_dtoa_r+0x2e>
 8008d2a:	692a      	ldr	r2, [r5, #16]
 8008d2c:	3202      	adds	r2, #2
 8008d2e:	0092      	lsls	r2, r2, #2
 8008d30:	f105 010c 	add.w	r1, r5, #12
 8008d34:	300c      	adds	r0, #12
 8008d36:	f7ff fa9e 	bl	8008276 <memcpy>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4658      	mov	r0, fp
 8008d40:	f000 fc52 	bl	80095e8 <__lshift>
 8008d44:	f10a 0301 	add.w	r3, sl, #1
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	4453      	add	r3, sl
 8008d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	462f      	mov	r7, r5
 8008d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4648      	mov	r0, r9
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	f7ff fa9b 	bl	80082a0 <quorem>
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	9002      	str	r0, [sp, #8]
 8008d6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d72:	4648      	mov	r0, r9
 8008d74:	f000 fca4 	bl	80096c0 <__mcmp>
 8008d78:	462a      	mov	r2, r5
 8008d7a:	9008      	str	r0, [sp, #32]
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4658      	mov	r0, fp
 8008d80:	f000 fcba 	bl	80096f8 <__mdiff>
 8008d84:	68c2      	ldr	r2, [r0, #12]
 8008d86:	4606      	mov	r6, r0
 8008d88:	bb02      	cbnz	r2, 8008dcc <_dtoa_r+0xa1c>
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4648      	mov	r0, r9
 8008d8e:	f000 fc97 	bl	80096c0 <__mcmp>
 8008d92:	4602      	mov	r2, r0
 8008d94:	4631      	mov	r1, r6
 8008d96:	4658      	mov	r0, fp
 8008d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d9a:	f000 fa0d 	bl	80091b8 <_Bfree>
 8008d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008da2:	9e07      	ldr	r6, [sp, #28]
 8008da4:	ea43 0102 	orr.w	r1, r3, r2
 8008da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008daa:	4319      	orrs	r1, r3
 8008dac:	d110      	bne.n	8008dd0 <_dtoa_r+0xa20>
 8008dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008db2:	d029      	beq.n	8008e08 <_dtoa_r+0xa58>
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	dd02      	ble.n	8008dc0 <_dtoa_r+0xa10>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008dc0:	9b00      	ldr	r3, [sp, #0]
 8008dc2:	f883 8000 	strb.w	r8, [r3]
 8008dc6:	e63f      	b.n	8008a48 <_dtoa_r+0x698>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e7bb      	b.n	8008d44 <_dtoa_r+0x994>
 8008dcc:	2201      	movs	r2, #1
 8008dce:	e7e1      	b.n	8008d94 <_dtoa_r+0x9e4>
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	db04      	blt.n	8008de0 <_dtoa_r+0xa30>
 8008dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	d120      	bne.n	8008e22 <_dtoa_r+0xa72>
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	dded      	ble.n	8008dc0 <_dtoa_r+0xa10>
 8008de4:	4649      	mov	r1, r9
 8008de6:	2201      	movs	r2, #1
 8008de8:	4658      	mov	r0, fp
 8008dea:	f000 fbfd 	bl	80095e8 <__lshift>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4681      	mov	r9, r0
 8008df2:	f000 fc65 	bl	80096c0 <__mcmp>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	dc03      	bgt.n	8008e02 <_dtoa_r+0xa52>
 8008dfa:	d1e1      	bne.n	8008dc0 <_dtoa_r+0xa10>
 8008dfc:	f018 0f01 	tst.w	r8, #1
 8008e00:	d0de      	beq.n	8008dc0 <_dtoa_r+0xa10>
 8008e02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e06:	d1d8      	bne.n	8008dba <_dtoa_r+0xa0a>
 8008e08:	9a00      	ldr	r2, [sp, #0]
 8008e0a:	2339      	movs	r3, #57	@ 0x39
 8008e0c:	7013      	strb	r3, [r2, #0]
 8008e0e:	4633      	mov	r3, r6
 8008e10:	461e      	mov	r6, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e18:	2a39      	cmp	r2, #57	@ 0x39
 8008e1a:	d052      	beq.n	8008ec2 <_dtoa_r+0xb12>
 8008e1c:	3201      	adds	r2, #1
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e612      	b.n	8008a48 <_dtoa_r+0x698>
 8008e22:	2a00      	cmp	r2, #0
 8008e24:	dd07      	ble.n	8008e36 <_dtoa_r+0xa86>
 8008e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e2a:	d0ed      	beq.n	8008e08 <_dtoa_r+0xa58>
 8008e2c:	9a00      	ldr	r2, [sp, #0]
 8008e2e:	f108 0301 	add.w	r3, r8, #1
 8008e32:	7013      	strb	r3, [r2, #0]
 8008e34:	e608      	b.n	8008a48 <_dtoa_r+0x698>
 8008e36:	9b07      	ldr	r3, [sp, #28]
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d028      	beq.n	8008e96 <_dtoa_r+0xae6>
 8008e44:	4649      	mov	r1, r9
 8008e46:	2300      	movs	r3, #0
 8008e48:	220a      	movs	r2, #10
 8008e4a:	4658      	mov	r0, fp
 8008e4c:	f000 f9d6 	bl	80091fc <__multadd>
 8008e50:	42af      	cmp	r7, r5
 8008e52:	4681      	mov	r9, r0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	f04f 020a 	mov.w	r2, #10
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	4658      	mov	r0, fp
 8008e60:	d107      	bne.n	8008e72 <_dtoa_r+0xac2>
 8008e62:	f000 f9cb 	bl	80091fc <__multadd>
 8008e66:	4607      	mov	r7, r0
 8008e68:	4605      	mov	r5, r0
 8008e6a:	9b07      	ldr	r3, [sp, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	e774      	b.n	8008d5c <_dtoa_r+0x9ac>
 8008e72:	f000 f9c3 	bl	80091fc <__multadd>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4607      	mov	r7, r0
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	4658      	mov	r0, fp
 8008e80:	f000 f9bc 	bl	80091fc <__multadd>
 8008e84:	4605      	mov	r5, r0
 8008e86:	e7f0      	b.n	8008e6a <_dtoa_r+0xaba>
 8008e88:	9b00      	ldr	r3, [sp, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bfcc      	ite	gt
 8008e8e:	461e      	movgt	r6, r3
 8008e90:	2601      	movle	r6, #1
 8008e92:	4456      	add	r6, sl
 8008e94:	2700      	movs	r7, #0
 8008e96:	4649      	mov	r1, r9
 8008e98:	2201      	movs	r2, #1
 8008e9a:	4658      	mov	r0, fp
 8008e9c:	f000 fba4 	bl	80095e8 <__lshift>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4681      	mov	r9, r0
 8008ea4:	f000 fc0c 	bl	80096c0 <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	dcb0      	bgt.n	8008e0e <_dtoa_r+0xa5e>
 8008eac:	d102      	bne.n	8008eb4 <_dtoa_r+0xb04>
 8008eae:	f018 0f01 	tst.w	r8, #1
 8008eb2:	d1ac      	bne.n	8008e0e <_dtoa_r+0xa5e>
 8008eb4:	4633      	mov	r3, r6
 8008eb6:	461e      	mov	r6, r3
 8008eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ebc:	2a30      	cmp	r2, #48	@ 0x30
 8008ebe:	d0fa      	beq.n	8008eb6 <_dtoa_r+0xb06>
 8008ec0:	e5c2      	b.n	8008a48 <_dtoa_r+0x698>
 8008ec2:	459a      	cmp	sl, r3
 8008ec4:	d1a4      	bne.n	8008e10 <_dtoa_r+0xa60>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	2331      	movs	r3, #49	@ 0x31
 8008ece:	f88a 3000 	strb.w	r3, [sl]
 8008ed2:	e5b9      	b.n	8008a48 <_dtoa_r+0x698>
 8008ed4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ed6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f34 <_dtoa_r+0xb84>
 8008eda:	b11b      	cbz	r3, 8008ee4 <_dtoa_r+0xb34>
 8008edc:	f10a 0308 	add.w	r3, sl, #8
 8008ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	b019      	add	sp, #100	@ 0x64
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	f77f ae37 	ble.w	8008b62 <_dtoa_r+0x7b2>
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ef8:	2001      	movs	r0, #1
 8008efa:	e655      	b.n	8008ba8 <_dtoa_r+0x7f8>
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f77f aed6 	ble.w	8008cb0 <_dtoa_r+0x900>
 8008f04:	4656      	mov	r6, sl
 8008f06:	4621      	mov	r1, r4
 8008f08:	4648      	mov	r0, r9
 8008f0a:	f7ff f9c9 	bl	80082a0 <quorem>
 8008f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f12:	f806 8b01 	strb.w	r8, [r6], #1
 8008f16:	9b00      	ldr	r3, [sp, #0]
 8008f18:	eba6 020a 	sub.w	r2, r6, sl
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	ddb3      	ble.n	8008e88 <_dtoa_r+0xad8>
 8008f20:	4649      	mov	r1, r9
 8008f22:	2300      	movs	r3, #0
 8008f24:	220a      	movs	r2, #10
 8008f26:	4658      	mov	r0, fp
 8008f28:	f000 f968 	bl	80091fc <__multadd>
 8008f2c:	4681      	mov	r9, r0
 8008f2e:	e7ea      	b.n	8008f06 <_dtoa_r+0xb56>
 8008f30:	0800b9e8 	.word	0x0800b9e8
 8008f34:	0800b96c 	.word	0x0800b96c

08008f38 <_free_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d041      	beq.n	8008fc4 <_free_r+0x8c>
 8008f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f44:	1f0c      	subs	r4, r1, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	18e4      	addlt	r4, r4, r3
 8008f4c:	f000 f8e8 	bl	8009120 <__malloc_lock>
 8008f50:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc8 <_free_r+0x90>)
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	b933      	cbnz	r3, 8008f64 <_free_r+0x2c>
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	6014      	str	r4, [r2, #0]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f60:	f000 b8e4 	b.w	800912c <__malloc_unlock>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d908      	bls.n	8008f7a <_free_r+0x42>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	1821      	adds	r1, r4, r0
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf01      	itttt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	1809      	addeq	r1, r1, r0
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	e7ed      	b.n	8008f56 <_free_r+0x1e>
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b10b      	cbz	r3, 8008f84 <_free_r+0x4c>
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	d9fa      	bls.n	8008f7a <_free_r+0x42>
 8008f84:	6811      	ldr	r1, [r2, #0]
 8008f86:	1850      	adds	r0, r2, r1
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d10b      	bne.n	8008fa4 <_free_r+0x6c>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	4401      	add	r1, r0
 8008f90:	1850      	adds	r0, r2, r1
 8008f92:	4283      	cmp	r3, r0
 8008f94:	6011      	str	r1, [r2, #0]
 8008f96:	d1e0      	bne.n	8008f5a <_free_r+0x22>
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	6053      	str	r3, [r2, #4]
 8008f9e:	4408      	add	r0, r1
 8008fa0:	6010      	str	r0, [r2, #0]
 8008fa2:	e7da      	b.n	8008f5a <_free_r+0x22>
 8008fa4:	d902      	bls.n	8008fac <_free_r+0x74>
 8008fa6:	230c      	movs	r3, #12
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	e7d6      	b.n	8008f5a <_free_r+0x22>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	1821      	adds	r1, r4, r0
 8008fb0:	428b      	cmp	r3, r1
 8008fb2:	bf04      	itt	eq
 8008fb4:	6819      	ldreq	r1, [r3, #0]
 8008fb6:	685b      	ldreq	r3, [r3, #4]
 8008fb8:	6063      	str	r3, [r4, #4]
 8008fba:	bf04      	itt	eq
 8008fbc:	1809      	addeq	r1, r1, r0
 8008fbe:	6021      	streq	r1, [r4, #0]
 8008fc0:	6054      	str	r4, [r2, #4]
 8008fc2:	e7ca      	b.n	8008f5a <_free_r+0x22>
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20001694 	.word	0x20001694

08008fcc <malloc>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	@ (8008fd8 <malloc+0xc>)
 8008fce:	4601      	mov	r1, r0
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f000 b825 	b.w	8009020 <_malloc_r>
 8008fd6:	bf00      	nop
 8008fd8:	2000001c 	.word	0x2000001c

08008fdc <sbrk_aligned>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4e0f      	ldr	r6, [pc, #60]	@ (800901c <sbrk_aligned+0x40>)
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	6831      	ldr	r1, [r6, #0]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	b911      	cbnz	r1, 8008fee <sbrk_aligned+0x12>
 8008fe8:	f001 fe90 	bl	800ad0c <_sbrk_r>
 8008fec:	6030      	str	r0, [r6, #0]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f001 fe8b 	bl	800ad0c <_sbrk_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d103      	bne.n	8009002 <sbrk_aligned+0x26>
 8008ffa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ffe:	4620      	mov	r0, r4
 8009000:	bd70      	pop	{r4, r5, r6, pc}
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d0f8      	beq.n	8008ffe <sbrk_aligned+0x22>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4628      	mov	r0, r5
 8009010:	f001 fe7c 	bl	800ad0c <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d1f2      	bne.n	8008ffe <sbrk_aligned+0x22>
 8009018:	e7ef      	b.n	8008ffa <sbrk_aligned+0x1e>
 800901a:	bf00      	nop
 800901c:	20001690 	.word	0x20001690

08009020 <_malloc_r>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	1ccd      	adds	r5, r1, #3
 8009026:	f025 0503 	bic.w	r5, r5, #3
 800902a:	3508      	adds	r5, #8
 800902c:	2d0c      	cmp	r5, #12
 800902e:	bf38      	it	cc
 8009030:	250c      	movcc	r5, #12
 8009032:	2d00      	cmp	r5, #0
 8009034:	4606      	mov	r6, r0
 8009036:	db01      	blt.n	800903c <_malloc_r+0x1c>
 8009038:	42a9      	cmp	r1, r5
 800903a:	d904      	bls.n	8009046 <_malloc_r+0x26>
 800903c:	230c      	movs	r3, #12
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	2000      	movs	r0, #0
 8009042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800911c <_malloc_r+0xfc>
 800904a:	f000 f869 	bl	8009120 <__malloc_lock>
 800904e:	f8d8 3000 	ldr.w	r3, [r8]
 8009052:	461c      	mov	r4, r3
 8009054:	bb44      	cbnz	r4, 80090a8 <_malloc_r+0x88>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ffbf 	bl	8008fdc <sbrk_aligned>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	4604      	mov	r4, r0
 8009062:	d158      	bne.n	8009116 <_malloc_r+0xf6>
 8009064:	f8d8 4000 	ldr.w	r4, [r8]
 8009068:	4627      	mov	r7, r4
 800906a:	2f00      	cmp	r7, #0
 800906c:	d143      	bne.n	80090f6 <_malloc_r+0xd6>
 800906e:	2c00      	cmp	r4, #0
 8009070:	d04b      	beq.n	800910a <_malloc_r+0xea>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	eb04 0903 	add.w	r9, r4, r3
 800907c:	f001 fe46 	bl	800ad0c <_sbrk_r>
 8009080:	4581      	cmp	r9, r0
 8009082:	d142      	bne.n	800910a <_malloc_r+0xea>
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	1a6d      	subs	r5, r5, r1
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffa6 	bl	8008fdc <sbrk_aligned>
 8009090:	3001      	adds	r0, #1
 8009092:	d03a      	beq.n	800910a <_malloc_r+0xea>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	442b      	add	r3, r5
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	f8d8 3000 	ldr.w	r3, [r8]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	bb62      	cbnz	r2, 80090fc <_malloc_r+0xdc>
 80090a2:	f8c8 7000 	str.w	r7, [r8]
 80090a6:	e00f      	b.n	80090c8 <_malloc_r+0xa8>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	1b52      	subs	r2, r2, r5
 80090ac:	d420      	bmi.n	80090f0 <_malloc_r+0xd0>
 80090ae:	2a0b      	cmp	r2, #11
 80090b0:	d917      	bls.n	80090e2 <_malloc_r+0xc2>
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	6059      	strne	r1, [r3, #4]
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	bf08      	it	eq
 80090c0:	f8c8 1000 	streq.w	r1, [r8]
 80090c4:	5162      	str	r2, [r4, r5]
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 f82f 	bl	800912c <__malloc_unlock>
 80090ce:	f104 000b 	add.w	r0, r4, #11
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	f020 0007 	bic.w	r0, r0, #7
 80090d8:	1ac2      	subs	r2, r0, r3
 80090da:	bf1c      	itt	ne
 80090dc:	1a1b      	subne	r3, r3, r0
 80090de:	50a3      	strne	r3, [r4, r2]
 80090e0:	e7af      	b.n	8009042 <_malloc_r+0x22>
 80090e2:	6862      	ldr	r2, [r4, #4]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	bf0c      	ite	eq
 80090e8:	f8c8 2000 	streq.w	r2, [r8]
 80090ec:	605a      	strne	r2, [r3, #4]
 80090ee:	e7eb      	b.n	80090c8 <_malloc_r+0xa8>
 80090f0:	4623      	mov	r3, r4
 80090f2:	6864      	ldr	r4, [r4, #4]
 80090f4:	e7ae      	b.n	8009054 <_malloc_r+0x34>
 80090f6:	463c      	mov	r4, r7
 80090f8:	687f      	ldr	r7, [r7, #4]
 80090fa:	e7b6      	b.n	800906a <_malloc_r+0x4a>
 80090fc:	461a      	mov	r2, r3
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	42a3      	cmp	r3, r4
 8009102:	d1fb      	bne.n	80090fc <_malloc_r+0xdc>
 8009104:	2300      	movs	r3, #0
 8009106:	6053      	str	r3, [r2, #4]
 8009108:	e7de      	b.n	80090c8 <_malloc_r+0xa8>
 800910a:	230c      	movs	r3, #12
 800910c:	6033      	str	r3, [r6, #0]
 800910e:	4630      	mov	r0, r6
 8009110:	f000 f80c 	bl	800912c <__malloc_unlock>
 8009114:	e794      	b.n	8009040 <_malloc_r+0x20>
 8009116:	6005      	str	r5, [r0, #0]
 8009118:	e7d6      	b.n	80090c8 <_malloc_r+0xa8>
 800911a:	bf00      	nop
 800911c:	20001694 	.word	0x20001694

08009120 <__malloc_lock>:
 8009120:	4801      	ldr	r0, [pc, #4]	@ (8009128 <__malloc_lock+0x8>)
 8009122:	f7ff b8a6 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	2000168c 	.word	0x2000168c

0800912c <__malloc_unlock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_unlock+0x8>)
 800912e:	f7ff b8a1 	b.w	8008274 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	2000168c 	.word	0x2000168c

08009138 <_Balloc>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	69c6      	ldr	r6, [r0, #28]
 800913c:	4604      	mov	r4, r0
 800913e:	460d      	mov	r5, r1
 8009140:	b976      	cbnz	r6, 8009160 <_Balloc+0x28>
 8009142:	2010      	movs	r0, #16
 8009144:	f7ff ff42 	bl	8008fcc <malloc>
 8009148:	4602      	mov	r2, r0
 800914a:	61e0      	str	r0, [r4, #28]
 800914c:	b920      	cbnz	r0, 8009158 <_Balloc+0x20>
 800914e:	4b18      	ldr	r3, [pc, #96]	@ (80091b0 <_Balloc+0x78>)
 8009150:	4818      	ldr	r0, [pc, #96]	@ (80091b4 <_Balloc+0x7c>)
 8009152:	216b      	movs	r1, #107	@ 0x6b
 8009154:	f001 fdf4 	bl	800ad40 <__assert_func>
 8009158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800915c:	6006      	str	r6, [r0, #0]
 800915e:	60c6      	str	r6, [r0, #12]
 8009160:	69e6      	ldr	r6, [r4, #28]
 8009162:	68f3      	ldr	r3, [r6, #12]
 8009164:	b183      	cbz	r3, 8009188 <_Balloc+0x50>
 8009166:	69e3      	ldr	r3, [r4, #28]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800916e:	b9b8      	cbnz	r0, 80091a0 <_Balloc+0x68>
 8009170:	2101      	movs	r1, #1
 8009172:	fa01 f605 	lsl.w	r6, r1, r5
 8009176:	1d72      	adds	r2, r6, #5
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	4620      	mov	r0, r4
 800917c:	f001 fdfe 	bl	800ad7c <_calloc_r>
 8009180:	b160      	cbz	r0, 800919c <_Balloc+0x64>
 8009182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009186:	e00e      	b.n	80091a6 <_Balloc+0x6e>
 8009188:	2221      	movs	r2, #33	@ 0x21
 800918a:	2104      	movs	r1, #4
 800918c:	4620      	mov	r0, r4
 800918e:	f001 fdf5 	bl	800ad7c <_calloc_r>
 8009192:	69e3      	ldr	r3, [r4, #28]
 8009194:	60f0      	str	r0, [r6, #12]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e4      	bne.n	8009166 <_Balloc+0x2e>
 800919c:	2000      	movs	r0, #0
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	6802      	ldr	r2, [r0, #0]
 80091a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091a6:	2300      	movs	r3, #0
 80091a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091ac:	e7f7      	b.n	800919e <_Balloc+0x66>
 80091ae:	bf00      	nop
 80091b0:	0800b979 	.word	0x0800b979
 80091b4:	0800b9f9 	.word	0x0800b9f9

080091b8 <_Bfree>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	69c6      	ldr	r6, [r0, #28]
 80091bc:	4605      	mov	r5, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	b976      	cbnz	r6, 80091e0 <_Bfree+0x28>
 80091c2:	2010      	movs	r0, #16
 80091c4:	f7ff ff02 	bl	8008fcc <malloc>
 80091c8:	4602      	mov	r2, r0
 80091ca:	61e8      	str	r0, [r5, #28]
 80091cc:	b920      	cbnz	r0, 80091d8 <_Bfree+0x20>
 80091ce:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <_Bfree+0x3c>)
 80091d0:	4809      	ldr	r0, [pc, #36]	@ (80091f8 <_Bfree+0x40>)
 80091d2:	218f      	movs	r1, #143	@ 0x8f
 80091d4:	f001 fdb4 	bl	800ad40 <__assert_func>
 80091d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091dc:	6006      	str	r6, [r0, #0]
 80091de:	60c6      	str	r6, [r0, #12]
 80091e0:	b13c      	cbz	r4, 80091f2 <_Bfree+0x3a>
 80091e2:	69eb      	ldr	r3, [r5, #28]
 80091e4:	6862      	ldr	r2, [r4, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091ec:	6021      	str	r1, [r4, #0]
 80091ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	0800b979 	.word	0x0800b979
 80091f8:	0800b9f9 	.word	0x0800b9f9

080091fc <__multadd>:
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	690d      	ldr	r5, [r1, #16]
 8009202:	4607      	mov	r7, r0
 8009204:	460c      	mov	r4, r1
 8009206:	461e      	mov	r6, r3
 8009208:	f101 0c14 	add.w	ip, r1, #20
 800920c:	2000      	movs	r0, #0
 800920e:	f8dc 3000 	ldr.w	r3, [ip]
 8009212:	b299      	uxth	r1, r3
 8009214:	fb02 6101 	mla	r1, r2, r1, r6
 8009218:	0c1e      	lsrs	r6, r3, #16
 800921a:	0c0b      	lsrs	r3, r1, #16
 800921c:	fb02 3306 	mla	r3, r2, r6, r3
 8009220:	b289      	uxth	r1, r1
 8009222:	3001      	adds	r0, #1
 8009224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009228:	4285      	cmp	r5, r0
 800922a:	f84c 1b04 	str.w	r1, [ip], #4
 800922e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009232:	dcec      	bgt.n	800920e <__multadd+0x12>
 8009234:	b30e      	cbz	r6, 800927a <__multadd+0x7e>
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	42ab      	cmp	r3, r5
 800923a:	dc19      	bgt.n	8009270 <__multadd+0x74>
 800923c:	6861      	ldr	r1, [r4, #4]
 800923e:	4638      	mov	r0, r7
 8009240:	3101      	adds	r1, #1
 8009242:	f7ff ff79 	bl	8009138 <_Balloc>
 8009246:	4680      	mov	r8, r0
 8009248:	b928      	cbnz	r0, 8009256 <__multadd+0x5a>
 800924a:	4602      	mov	r2, r0
 800924c:	4b0c      	ldr	r3, [pc, #48]	@ (8009280 <__multadd+0x84>)
 800924e:	480d      	ldr	r0, [pc, #52]	@ (8009284 <__multadd+0x88>)
 8009250:	21ba      	movs	r1, #186	@ 0xba
 8009252:	f001 fd75 	bl	800ad40 <__assert_func>
 8009256:	6922      	ldr	r2, [r4, #16]
 8009258:	3202      	adds	r2, #2
 800925a:	f104 010c 	add.w	r1, r4, #12
 800925e:	0092      	lsls	r2, r2, #2
 8009260:	300c      	adds	r0, #12
 8009262:	f7ff f808 	bl	8008276 <memcpy>
 8009266:	4621      	mov	r1, r4
 8009268:	4638      	mov	r0, r7
 800926a:	f7ff ffa5 	bl	80091b8 <_Bfree>
 800926e:	4644      	mov	r4, r8
 8009270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009274:	3501      	adds	r5, #1
 8009276:	615e      	str	r6, [r3, #20]
 8009278:	6125      	str	r5, [r4, #16]
 800927a:	4620      	mov	r0, r4
 800927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009280:	0800b9e8 	.word	0x0800b9e8
 8009284:	0800b9f9 	.word	0x0800b9f9

08009288 <__s2b>:
 8009288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800928c:	460c      	mov	r4, r1
 800928e:	4615      	mov	r5, r2
 8009290:	461f      	mov	r7, r3
 8009292:	2209      	movs	r2, #9
 8009294:	3308      	adds	r3, #8
 8009296:	4606      	mov	r6, r0
 8009298:	fb93 f3f2 	sdiv	r3, r3, r2
 800929c:	2100      	movs	r1, #0
 800929e:	2201      	movs	r2, #1
 80092a0:	429a      	cmp	r2, r3
 80092a2:	db09      	blt.n	80092b8 <__s2b+0x30>
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ff47 	bl	8009138 <_Balloc>
 80092aa:	b940      	cbnz	r0, 80092be <__s2b+0x36>
 80092ac:	4602      	mov	r2, r0
 80092ae:	4b19      	ldr	r3, [pc, #100]	@ (8009314 <__s2b+0x8c>)
 80092b0:	4819      	ldr	r0, [pc, #100]	@ (8009318 <__s2b+0x90>)
 80092b2:	21d3      	movs	r1, #211	@ 0xd3
 80092b4:	f001 fd44 	bl	800ad40 <__assert_func>
 80092b8:	0052      	lsls	r2, r2, #1
 80092ba:	3101      	adds	r1, #1
 80092bc:	e7f0      	b.n	80092a0 <__s2b+0x18>
 80092be:	9b08      	ldr	r3, [sp, #32]
 80092c0:	6143      	str	r3, [r0, #20]
 80092c2:	2d09      	cmp	r5, #9
 80092c4:	f04f 0301 	mov.w	r3, #1
 80092c8:	6103      	str	r3, [r0, #16]
 80092ca:	dd16      	ble.n	80092fa <__s2b+0x72>
 80092cc:	f104 0909 	add.w	r9, r4, #9
 80092d0:	46c8      	mov	r8, r9
 80092d2:	442c      	add	r4, r5
 80092d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80092d8:	4601      	mov	r1, r0
 80092da:	3b30      	subs	r3, #48	@ 0x30
 80092dc:	220a      	movs	r2, #10
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff ff8c 	bl	80091fc <__multadd>
 80092e4:	45a0      	cmp	r8, r4
 80092e6:	d1f5      	bne.n	80092d4 <__s2b+0x4c>
 80092e8:	f1a5 0408 	sub.w	r4, r5, #8
 80092ec:	444c      	add	r4, r9
 80092ee:	1b2d      	subs	r5, r5, r4
 80092f0:	1963      	adds	r3, r4, r5
 80092f2:	42bb      	cmp	r3, r7
 80092f4:	db04      	blt.n	8009300 <__s2b+0x78>
 80092f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fa:	340a      	adds	r4, #10
 80092fc:	2509      	movs	r5, #9
 80092fe:	e7f6      	b.n	80092ee <__s2b+0x66>
 8009300:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009304:	4601      	mov	r1, r0
 8009306:	3b30      	subs	r3, #48	@ 0x30
 8009308:	220a      	movs	r2, #10
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff ff76 	bl	80091fc <__multadd>
 8009310:	e7ee      	b.n	80092f0 <__s2b+0x68>
 8009312:	bf00      	nop
 8009314:	0800b9e8 	.word	0x0800b9e8
 8009318:	0800b9f9 	.word	0x0800b9f9

0800931c <__hi0bits>:
 800931c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009320:	4603      	mov	r3, r0
 8009322:	bf36      	itet	cc
 8009324:	0403      	lslcc	r3, r0, #16
 8009326:	2000      	movcs	r0, #0
 8009328:	2010      	movcc	r0, #16
 800932a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800932e:	bf3c      	itt	cc
 8009330:	021b      	lslcc	r3, r3, #8
 8009332:	3008      	addcc	r0, #8
 8009334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009338:	bf3c      	itt	cc
 800933a:	011b      	lslcc	r3, r3, #4
 800933c:	3004      	addcc	r0, #4
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009342:	bf3c      	itt	cc
 8009344:	009b      	lslcc	r3, r3, #2
 8009346:	3002      	addcc	r0, #2
 8009348:	2b00      	cmp	r3, #0
 800934a:	db05      	blt.n	8009358 <__hi0bits+0x3c>
 800934c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009350:	f100 0001 	add.w	r0, r0, #1
 8009354:	bf08      	it	eq
 8009356:	2020      	moveq	r0, #32
 8009358:	4770      	bx	lr

0800935a <__lo0bits>:
 800935a:	6803      	ldr	r3, [r0, #0]
 800935c:	4602      	mov	r2, r0
 800935e:	f013 0007 	ands.w	r0, r3, #7
 8009362:	d00b      	beq.n	800937c <__lo0bits+0x22>
 8009364:	07d9      	lsls	r1, r3, #31
 8009366:	d421      	bmi.n	80093ac <__lo0bits+0x52>
 8009368:	0798      	lsls	r0, r3, #30
 800936a:	bf49      	itett	mi
 800936c:	085b      	lsrmi	r3, r3, #1
 800936e:	089b      	lsrpl	r3, r3, #2
 8009370:	2001      	movmi	r0, #1
 8009372:	6013      	strmi	r3, [r2, #0]
 8009374:	bf5c      	itt	pl
 8009376:	6013      	strpl	r3, [r2, #0]
 8009378:	2002      	movpl	r0, #2
 800937a:	4770      	bx	lr
 800937c:	b299      	uxth	r1, r3
 800937e:	b909      	cbnz	r1, 8009384 <__lo0bits+0x2a>
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	2010      	movs	r0, #16
 8009384:	b2d9      	uxtb	r1, r3
 8009386:	b909      	cbnz	r1, 800938c <__lo0bits+0x32>
 8009388:	3008      	adds	r0, #8
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	0719      	lsls	r1, r3, #28
 800938e:	bf04      	itt	eq
 8009390:	091b      	lsreq	r3, r3, #4
 8009392:	3004      	addeq	r0, #4
 8009394:	0799      	lsls	r1, r3, #30
 8009396:	bf04      	itt	eq
 8009398:	089b      	lsreq	r3, r3, #2
 800939a:	3002      	addeq	r0, #2
 800939c:	07d9      	lsls	r1, r3, #31
 800939e:	d403      	bmi.n	80093a8 <__lo0bits+0x4e>
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	f100 0001 	add.w	r0, r0, #1
 80093a6:	d003      	beq.n	80093b0 <__lo0bits+0x56>
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	4770      	bx	lr
 80093ac:	2000      	movs	r0, #0
 80093ae:	4770      	bx	lr
 80093b0:	2020      	movs	r0, #32
 80093b2:	4770      	bx	lr

080093b4 <__i2b>:
 80093b4:	b510      	push	{r4, lr}
 80093b6:	460c      	mov	r4, r1
 80093b8:	2101      	movs	r1, #1
 80093ba:	f7ff febd 	bl	8009138 <_Balloc>
 80093be:	4602      	mov	r2, r0
 80093c0:	b928      	cbnz	r0, 80093ce <__i2b+0x1a>
 80093c2:	4b05      	ldr	r3, [pc, #20]	@ (80093d8 <__i2b+0x24>)
 80093c4:	4805      	ldr	r0, [pc, #20]	@ (80093dc <__i2b+0x28>)
 80093c6:	f240 1145 	movw	r1, #325	@ 0x145
 80093ca:	f001 fcb9 	bl	800ad40 <__assert_func>
 80093ce:	2301      	movs	r3, #1
 80093d0:	6144      	str	r4, [r0, #20]
 80093d2:	6103      	str	r3, [r0, #16]
 80093d4:	bd10      	pop	{r4, pc}
 80093d6:	bf00      	nop
 80093d8:	0800b9e8 	.word	0x0800b9e8
 80093dc:	0800b9f9 	.word	0x0800b9f9

080093e0 <__multiply>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4614      	mov	r4, r2
 80093e6:	690a      	ldr	r2, [r1, #16]
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	bfa8      	it	ge
 80093ee:	4623      	movge	r3, r4
 80093f0:	460f      	mov	r7, r1
 80093f2:	bfa4      	itt	ge
 80093f4:	460c      	movge	r4, r1
 80093f6:	461f      	movge	r7, r3
 80093f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80093fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	6861      	ldr	r1, [r4, #4]
 8009404:	eb0a 0609 	add.w	r6, sl, r9
 8009408:	42b3      	cmp	r3, r6
 800940a:	b085      	sub	sp, #20
 800940c:	bfb8      	it	lt
 800940e:	3101      	addlt	r1, #1
 8009410:	f7ff fe92 	bl	8009138 <_Balloc>
 8009414:	b930      	cbnz	r0, 8009424 <__multiply+0x44>
 8009416:	4602      	mov	r2, r0
 8009418:	4b44      	ldr	r3, [pc, #272]	@ (800952c <__multiply+0x14c>)
 800941a:	4845      	ldr	r0, [pc, #276]	@ (8009530 <__multiply+0x150>)
 800941c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009420:	f001 fc8e 	bl	800ad40 <__assert_func>
 8009424:	f100 0514 	add.w	r5, r0, #20
 8009428:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800942c:	462b      	mov	r3, r5
 800942e:	2200      	movs	r2, #0
 8009430:	4543      	cmp	r3, r8
 8009432:	d321      	bcc.n	8009478 <__multiply+0x98>
 8009434:	f107 0114 	add.w	r1, r7, #20
 8009438:	f104 0214 	add.w	r2, r4, #20
 800943c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009440:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	1b13      	subs	r3, r2, r4
 8009448:	3b15      	subs	r3, #21
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	3304      	adds	r3, #4
 8009450:	f104 0715 	add.w	r7, r4, #21
 8009454:	42ba      	cmp	r2, r7
 8009456:	bf38      	it	cc
 8009458:	2304      	movcc	r3, #4
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	9103      	str	r1, [sp, #12]
 8009460:	428b      	cmp	r3, r1
 8009462:	d80c      	bhi.n	800947e <__multiply+0x9e>
 8009464:	2e00      	cmp	r6, #0
 8009466:	dd03      	ble.n	8009470 <__multiply+0x90>
 8009468:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800946c:	2b00      	cmp	r3, #0
 800946e:	d05b      	beq.n	8009528 <__multiply+0x148>
 8009470:	6106      	str	r6, [r0, #16]
 8009472:	b005      	add	sp, #20
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	f843 2b04 	str.w	r2, [r3], #4
 800947c:	e7d8      	b.n	8009430 <__multiply+0x50>
 800947e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009482:	f1ba 0f00 	cmp.w	sl, #0
 8009486:	d024      	beq.n	80094d2 <__multiply+0xf2>
 8009488:	f104 0e14 	add.w	lr, r4, #20
 800948c:	46a9      	mov	r9, r5
 800948e:	f04f 0c00 	mov.w	ip, #0
 8009492:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009496:	f8d9 3000 	ldr.w	r3, [r9]
 800949a:	fa1f fb87 	uxth.w	fp, r7
 800949e:	b29b      	uxth	r3, r3
 80094a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80094a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80094a8:	f8d9 7000 	ldr.w	r7, [r9]
 80094ac:	4463      	add	r3, ip
 80094ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80094b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80094c0:	4572      	cmp	r2, lr
 80094c2:	f849 3b04 	str.w	r3, [r9], #4
 80094c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094ca:	d8e2      	bhi.n	8009492 <__multiply+0xb2>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	f845 c003 	str.w	ip, [r5, r3]
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094d8:	3104      	adds	r1, #4
 80094da:	f1b9 0f00 	cmp.w	r9, #0
 80094de:	d021      	beq.n	8009524 <__multiply+0x144>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	f104 0c14 	add.w	ip, r4, #20
 80094e6:	46ae      	mov	lr, r5
 80094e8:	f04f 0a00 	mov.w	sl, #0
 80094ec:	f8bc b000 	ldrh.w	fp, [ip]
 80094f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80094f4:	fb09 770b 	mla	r7, r9, fp, r7
 80094f8:	4457      	add	r7, sl
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009500:	f84e 3b04 	str.w	r3, [lr], #4
 8009504:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800950c:	f8be 3000 	ldrh.w	r3, [lr]
 8009510:	fb09 330a 	mla	r3, r9, sl, r3
 8009514:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009518:	4562      	cmp	r2, ip
 800951a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800951e:	d8e5      	bhi.n	80094ec <__multiply+0x10c>
 8009520:	9f01      	ldr	r7, [sp, #4]
 8009522:	51eb      	str	r3, [r5, r7]
 8009524:	3504      	adds	r5, #4
 8009526:	e799      	b.n	800945c <__multiply+0x7c>
 8009528:	3e01      	subs	r6, #1
 800952a:	e79b      	b.n	8009464 <__multiply+0x84>
 800952c:	0800b9e8 	.word	0x0800b9e8
 8009530:	0800b9f9 	.word	0x0800b9f9

08009534 <__pow5mult>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4615      	mov	r5, r2
 800953a:	f012 0203 	ands.w	r2, r2, #3
 800953e:	4607      	mov	r7, r0
 8009540:	460e      	mov	r6, r1
 8009542:	d007      	beq.n	8009554 <__pow5mult+0x20>
 8009544:	4c25      	ldr	r4, [pc, #148]	@ (80095dc <__pow5mult+0xa8>)
 8009546:	3a01      	subs	r2, #1
 8009548:	2300      	movs	r3, #0
 800954a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800954e:	f7ff fe55 	bl	80091fc <__multadd>
 8009552:	4606      	mov	r6, r0
 8009554:	10ad      	asrs	r5, r5, #2
 8009556:	d03d      	beq.n	80095d4 <__pow5mult+0xa0>
 8009558:	69fc      	ldr	r4, [r7, #28]
 800955a:	b97c      	cbnz	r4, 800957c <__pow5mult+0x48>
 800955c:	2010      	movs	r0, #16
 800955e:	f7ff fd35 	bl	8008fcc <malloc>
 8009562:	4602      	mov	r2, r0
 8009564:	61f8      	str	r0, [r7, #28]
 8009566:	b928      	cbnz	r0, 8009574 <__pow5mult+0x40>
 8009568:	4b1d      	ldr	r3, [pc, #116]	@ (80095e0 <__pow5mult+0xac>)
 800956a:	481e      	ldr	r0, [pc, #120]	@ (80095e4 <__pow5mult+0xb0>)
 800956c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009570:	f001 fbe6 	bl	800ad40 <__assert_func>
 8009574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009578:	6004      	str	r4, [r0, #0]
 800957a:	60c4      	str	r4, [r0, #12]
 800957c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009584:	b94c      	cbnz	r4, 800959a <__pow5mult+0x66>
 8009586:	f240 2171 	movw	r1, #625	@ 0x271
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff ff12 	bl	80093b4 <__i2b>
 8009590:	2300      	movs	r3, #0
 8009592:	f8c8 0008 	str.w	r0, [r8, #8]
 8009596:	4604      	mov	r4, r0
 8009598:	6003      	str	r3, [r0, #0]
 800959a:	f04f 0900 	mov.w	r9, #0
 800959e:	07eb      	lsls	r3, r5, #31
 80095a0:	d50a      	bpl.n	80095b8 <__pow5mult+0x84>
 80095a2:	4631      	mov	r1, r6
 80095a4:	4622      	mov	r2, r4
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ff1a 	bl	80093e0 <__multiply>
 80095ac:	4631      	mov	r1, r6
 80095ae:	4680      	mov	r8, r0
 80095b0:	4638      	mov	r0, r7
 80095b2:	f7ff fe01 	bl	80091b8 <_Bfree>
 80095b6:	4646      	mov	r6, r8
 80095b8:	106d      	asrs	r5, r5, #1
 80095ba:	d00b      	beq.n	80095d4 <__pow5mult+0xa0>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	b938      	cbnz	r0, 80095d0 <__pow5mult+0x9c>
 80095c0:	4622      	mov	r2, r4
 80095c2:	4621      	mov	r1, r4
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ff0b 	bl	80093e0 <__multiply>
 80095ca:	6020      	str	r0, [r4, #0]
 80095cc:	f8c0 9000 	str.w	r9, [r0]
 80095d0:	4604      	mov	r4, r0
 80095d2:	e7e4      	b.n	800959e <__pow5mult+0x6a>
 80095d4:	4630      	mov	r0, r6
 80095d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095da:	bf00      	nop
 80095dc:	0800ba54 	.word	0x0800ba54
 80095e0:	0800b979 	.word	0x0800b979
 80095e4:	0800b9f9 	.word	0x0800b9f9

080095e8 <__lshift>:
 80095e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ec:	460c      	mov	r4, r1
 80095ee:	6849      	ldr	r1, [r1, #4]
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	4607      	mov	r7, r0
 80095fa:	4691      	mov	r9, r2
 80095fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009600:	f108 0601 	add.w	r6, r8, #1
 8009604:	42b3      	cmp	r3, r6
 8009606:	db0b      	blt.n	8009620 <__lshift+0x38>
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff fd95 	bl	8009138 <_Balloc>
 800960e:	4605      	mov	r5, r0
 8009610:	b948      	cbnz	r0, 8009626 <__lshift+0x3e>
 8009612:	4602      	mov	r2, r0
 8009614:	4b28      	ldr	r3, [pc, #160]	@ (80096b8 <__lshift+0xd0>)
 8009616:	4829      	ldr	r0, [pc, #164]	@ (80096bc <__lshift+0xd4>)
 8009618:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800961c:	f001 fb90 	bl	800ad40 <__assert_func>
 8009620:	3101      	adds	r1, #1
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	e7ee      	b.n	8009604 <__lshift+0x1c>
 8009626:	2300      	movs	r3, #0
 8009628:	f100 0114 	add.w	r1, r0, #20
 800962c:	f100 0210 	add.w	r2, r0, #16
 8009630:	4618      	mov	r0, r3
 8009632:	4553      	cmp	r3, sl
 8009634:	db33      	blt.n	800969e <__lshift+0xb6>
 8009636:	6920      	ldr	r0, [r4, #16]
 8009638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800963c:	f104 0314 	add.w	r3, r4, #20
 8009640:	f019 091f 	ands.w	r9, r9, #31
 8009644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800964c:	d02b      	beq.n	80096a6 <__lshift+0xbe>
 800964e:	f1c9 0e20 	rsb	lr, r9, #32
 8009652:	468a      	mov	sl, r1
 8009654:	2200      	movs	r2, #0
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	fa00 f009 	lsl.w	r0, r0, r9
 800965c:	4310      	orrs	r0, r2
 800965e:	f84a 0b04 	str.w	r0, [sl], #4
 8009662:	f853 2b04 	ldr.w	r2, [r3], #4
 8009666:	459c      	cmp	ip, r3
 8009668:	fa22 f20e 	lsr.w	r2, r2, lr
 800966c:	d8f3      	bhi.n	8009656 <__lshift+0x6e>
 800966e:	ebac 0304 	sub.w	r3, ip, r4
 8009672:	3b15      	subs	r3, #21
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	3304      	adds	r3, #4
 800967a:	f104 0015 	add.w	r0, r4, #21
 800967e:	4584      	cmp	ip, r0
 8009680:	bf38      	it	cc
 8009682:	2304      	movcc	r3, #4
 8009684:	50ca      	str	r2, [r1, r3]
 8009686:	b10a      	cbz	r2, 800968c <__lshift+0xa4>
 8009688:	f108 0602 	add.w	r6, r8, #2
 800968c:	3e01      	subs	r6, #1
 800968e:	4638      	mov	r0, r7
 8009690:	612e      	str	r6, [r5, #16]
 8009692:	4621      	mov	r1, r4
 8009694:	f7ff fd90 	bl	80091b8 <_Bfree>
 8009698:	4628      	mov	r0, r5
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	f842 0f04 	str.w	r0, [r2, #4]!
 80096a2:	3301      	adds	r3, #1
 80096a4:	e7c5      	b.n	8009632 <__lshift+0x4a>
 80096a6:	3904      	subs	r1, #4
 80096a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80096b0:	459c      	cmp	ip, r3
 80096b2:	d8f9      	bhi.n	80096a8 <__lshift+0xc0>
 80096b4:	e7ea      	b.n	800968c <__lshift+0xa4>
 80096b6:	bf00      	nop
 80096b8:	0800b9e8 	.word	0x0800b9e8
 80096bc:	0800b9f9 	.word	0x0800b9f9

080096c0 <__mcmp>:
 80096c0:	690a      	ldr	r2, [r1, #16]
 80096c2:	4603      	mov	r3, r0
 80096c4:	6900      	ldr	r0, [r0, #16]
 80096c6:	1a80      	subs	r0, r0, r2
 80096c8:	b530      	push	{r4, r5, lr}
 80096ca:	d10e      	bne.n	80096ea <__mcmp+0x2a>
 80096cc:	3314      	adds	r3, #20
 80096ce:	3114      	adds	r1, #20
 80096d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096e0:	4295      	cmp	r5, r2
 80096e2:	d003      	beq.n	80096ec <__mcmp+0x2c>
 80096e4:	d205      	bcs.n	80096f2 <__mcmp+0x32>
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096ea:	bd30      	pop	{r4, r5, pc}
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d3f3      	bcc.n	80096d8 <__mcmp+0x18>
 80096f0:	e7fb      	b.n	80096ea <__mcmp+0x2a>
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7f9      	b.n	80096ea <__mcmp+0x2a>
	...

080096f8 <__mdiff>:
 80096f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	4689      	mov	r9, r1
 80096fe:	4606      	mov	r6, r0
 8009700:	4611      	mov	r1, r2
 8009702:	4648      	mov	r0, r9
 8009704:	4614      	mov	r4, r2
 8009706:	f7ff ffdb 	bl	80096c0 <__mcmp>
 800970a:	1e05      	subs	r5, r0, #0
 800970c:	d112      	bne.n	8009734 <__mdiff+0x3c>
 800970e:	4629      	mov	r1, r5
 8009710:	4630      	mov	r0, r6
 8009712:	f7ff fd11 	bl	8009138 <_Balloc>
 8009716:	4602      	mov	r2, r0
 8009718:	b928      	cbnz	r0, 8009726 <__mdiff+0x2e>
 800971a:	4b3f      	ldr	r3, [pc, #252]	@ (8009818 <__mdiff+0x120>)
 800971c:	f240 2137 	movw	r1, #567	@ 0x237
 8009720:	483e      	ldr	r0, [pc, #248]	@ (800981c <__mdiff+0x124>)
 8009722:	f001 fb0d 	bl	800ad40 <__assert_func>
 8009726:	2301      	movs	r3, #1
 8009728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800972c:	4610      	mov	r0, r2
 800972e:	b003      	add	sp, #12
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	bfbc      	itt	lt
 8009736:	464b      	movlt	r3, r9
 8009738:	46a1      	movlt	r9, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009740:	bfba      	itte	lt
 8009742:	461c      	movlt	r4, r3
 8009744:	2501      	movlt	r5, #1
 8009746:	2500      	movge	r5, #0
 8009748:	f7ff fcf6 	bl	8009138 <_Balloc>
 800974c:	4602      	mov	r2, r0
 800974e:	b918      	cbnz	r0, 8009758 <__mdiff+0x60>
 8009750:	4b31      	ldr	r3, [pc, #196]	@ (8009818 <__mdiff+0x120>)
 8009752:	f240 2145 	movw	r1, #581	@ 0x245
 8009756:	e7e3      	b.n	8009720 <__mdiff+0x28>
 8009758:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800975c:	6926      	ldr	r6, [r4, #16]
 800975e:	60c5      	str	r5, [r0, #12]
 8009760:	f109 0310 	add.w	r3, r9, #16
 8009764:	f109 0514 	add.w	r5, r9, #20
 8009768:	f104 0e14 	add.w	lr, r4, #20
 800976c:	f100 0b14 	add.w	fp, r0, #20
 8009770:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009774:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	46d9      	mov	r9, fp
 800977c:	f04f 0c00 	mov.w	ip, #0
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009786:	f853 af04 	ldr.w	sl, [r3, #4]!
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	fa1f f38a 	uxth.w	r3, sl
 8009790:	4619      	mov	r1, r3
 8009792:	b283      	uxth	r3, r0
 8009794:	1acb      	subs	r3, r1, r3
 8009796:	0c00      	lsrs	r0, r0, #16
 8009798:	4463      	add	r3, ip
 800979a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800979e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80097a8:	4576      	cmp	r6, lr
 80097aa:	f849 3b04 	str.w	r3, [r9], #4
 80097ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097b2:	d8e5      	bhi.n	8009780 <__mdiff+0x88>
 80097b4:	1b33      	subs	r3, r6, r4
 80097b6:	3b15      	subs	r3, #21
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	3415      	adds	r4, #21
 80097be:	3304      	adds	r3, #4
 80097c0:	42a6      	cmp	r6, r4
 80097c2:	bf38      	it	cc
 80097c4:	2304      	movcc	r3, #4
 80097c6:	441d      	add	r5, r3
 80097c8:	445b      	add	r3, fp
 80097ca:	461e      	mov	r6, r3
 80097cc:	462c      	mov	r4, r5
 80097ce:	4544      	cmp	r4, r8
 80097d0:	d30e      	bcc.n	80097f0 <__mdiff+0xf8>
 80097d2:	f108 0103 	add.w	r1, r8, #3
 80097d6:	1b49      	subs	r1, r1, r5
 80097d8:	f021 0103 	bic.w	r1, r1, #3
 80097dc:	3d03      	subs	r5, #3
 80097de:	45a8      	cmp	r8, r5
 80097e0:	bf38      	it	cc
 80097e2:	2100      	movcc	r1, #0
 80097e4:	440b      	add	r3, r1
 80097e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ea:	b191      	cbz	r1, 8009812 <__mdiff+0x11a>
 80097ec:	6117      	str	r7, [r2, #16]
 80097ee:	e79d      	b.n	800972c <__mdiff+0x34>
 80097f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80097f4:	46e6      	mov	lr, ip
 80097f6:	0c08      	lsrs	r0, r1, #16
 80097f8:	fa1c fc81 	uxtah	ip, ip, r1
 80097fc:	4471      	add	r1, lr
 80097fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009802:	b289      	uxth	r1, r1
 8009804:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009808:	f846 1b04 	str.w	r1, [r6], #4
 800980c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009810:	e7dd      	b.n	80097ce <__mdiff+0xd6>
 8009812:	3f01      	subs	r7, #1
 8009814:	e7e7      	b.n	80097e6 <__mdiff+0xee>
 8009816:	bf00      	nop
 8009818:	0800b9e8 	.word	0x0800b9e8
 800981c:	0800b9f9 	.word	0x0800b9f9

08009820 <__ulp>:
 8009820:	b082      	sub	sp, #8
 8009822:	ed8d 0b00 	vstr	d0, [sp]
 8009826:	9a01      	ldr	r2, [sp, #4]
 8009828:	4b0f      	ldr	r3, [pc, #60]	@ (8009868 <__ulp+0x48>)
 800982a:	4013      	ands	r3, r2
 800982c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc08      	bgt.n	8009846 <__ulp+0x26>
 8009834:	425b      	negs	r3, r3
 8009836:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800983a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800983e:	da04      	bge.n	800984a <__ulp+0x2a>
 8009840:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009844:	4113      	asrs	r3, r2
 8009846:	2200      	movs	r2, #0
 8009848:	e008      	b.n	800985c <__ulp+0x3c>
 800984a:	f1a2 0314 	sub.w	r3, r2, #20
 800984e:	2b1e      	cmp	r3, #30
 8009850:	bfda      	itte	le
 8009852:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009856:	40da      	lsrle	r2, r3
 8009858:	2201      	movgt	r2, #1
 800985a:	2300      	movs	r3, #0
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	ec41 0b10 	vmov	d0, r0, r1
 8009864:	b002      	add	sp, #8
 8009866:	4770      	bx	lr
 8009868:	7ff00000 	.word	0x7ff00000

0800986c <__b2d>:
 800986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009870:	6906      	ldr	r6, [r0, #16]
 8009872:	f100 0814 	add.w	r8, r0, #20
 8009876:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800987a:	1f37      	subs	r7, r6, #4
 800987c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009880:	4610      	mov	r0, r2
 8009882:	f7ff fd4b 	bl	800931c <__hi0bits>
 8009886:	f1c0 0320 	rsb	r3, r0, #32
 800988a:	280a      	cmp	r0, #10
 800988c:	600b      	str	r3, [r1, #0]
 800988e:	491b      	ldr	r1, [pc, #108]	@ (80098fc <__b2d+0x90>)
 8009890:	dc15      	bgt.n	80098be <__b2d+0x52>
 8009892:	f1c0 0c0b 	rsb	ip, r0, #11
 8009896:	fa22 f30c 	lsr.w	r3, r2, ip
 800989a:	45b8      	cmp	r8, r7
 800989c:	ea43 0501 	orr.w	r5, r3, r1
 80098a0:	bf34      	ite	cc
 80098a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80098a6:	2300      	movcs	r3, #0
 80098a8:	3015      	adds	r0, #21
 80098aa:	fa02 f000 	lsl.w	r0, r2, r0
 80098ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80098b2:	4303      	orrs	r3, r0
 80098b4:	461c      	mov	r4, r3
 80098b6:	ec45 4b10 	vmov	d0, r4, r5
 80098ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098be:	45b8      	cmp	r8, r7
 80098c0:	bf3a      	itte	cc
 80098c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80098c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80098ca:	2300      	movcs	r3, #0
 80098cc:	380b      	subs	r0, #11
 80098ce:	d012      	beq.n	80098f6 <__b2d+0x8a>
 80098d0:	f1c0 0120 	rsb	r1, r0, #32
 80098d4:	fa23 f401 	lsr.w	r4, r3, r1
 80098d8:	4082      	lsls	r2, r0
 80098da:	4322      	orrs	r2, r4
 80098dc:	4547      	cmp	r7, r8
 80098de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80098e2:	bf8c      	ite	hi
 80098e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80098e8:	2200      	movls	r2, #0
 80098ea:	4083      	lsls	r3, r0
 80098ec:	40ca      	lsrs	r2, r1
 80098ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80098f2:	4313      	orrs	r3, r2
 80098f4:	e7de      	b.n	80098b4 <__b2d+0x48>
 80098f6:	ea42 0501 	orr.w	r5, r2, r1
 80098fa:	e7db      	b.n	80098b4 <__b2d+0x48>
 80098fc:	3ff00000 	.word	0x3ff00000

08009900 <__d2b>:
 8009900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009904:	460f      	mov	r7, r1
 8009906:	2101      	movs	r1, #1
 8009908:	ec59 8b10 	vmov	r8, r9, d0
 800990c:	4616      	mov	r6, r2
 800990e:	f7ff fc13 	bl	8009138 <_Balloc>
 8009912:	4604      	mov	r4, r0
 8009914:	b930      	cbnz	r0, 8009924 <__d2b+0x24>
 8009916:	4602      	mov	r2, r0
 8009918:	4b23      	ldr	r3, [pc, #140]	@ (80099a8 <__d2b+0xa8>)
 800991a:	4824      	ldr	r0, [pc, #144]	@ (80099ac <__d2b+0xac>)
 800991c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009920:	f001 fa0e 	bl	800ad40 <__assert_func>
 8009924:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800992c:	b10d      	cbz	r5, 8009932 <__d2b+0x32>
 800992e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	f1b8 0300 	subs.w	r3, r8, #0
 8009938:	d023      	beq.n	8009982 <__d2b+0x82>
 800993a:	4668      	mov	r0, sp
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	f7ff fd0c 	bl	800935a <__lo0bits>
 8009942:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009946:	b1d0      	cbz	r0, 800997e <__d2b+0x7e>
 8009948:	f1c0 0320 	rsb	r3, r0, #32
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	430b      	orrs	r3, r1
 8009952:	40c2      	lsrs	r2, r0
 8009954:	6163      	str	r3, [r4, #20]
 8009956:	9201      	str	r2, [sp, #4]
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	61a3      	str	r3, [r4, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	bf0c      	ite	eq
 8009960:	2201      	moveq	r2, #1
 8009962:	2202      	movne	r2, #2
 8009964:	6122      	str	r2, [r4, #16]
 8009966:	b1a5      	cbz	r5, 8009992 <__d2b+0x92>
 8009968:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800996c:	4405      	add	r5, r0
 800996e:	603d      	str	r5, [r7, #0]
 8009970:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009974:	6030      	str	r0, [r6, #0]
 8009976:	4620      	mov	r0, r4
 8009978:	b003      	add	sp, #12
 800997a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800997e:	6161      	str	r1, [r4, #20]
 8009980:	e7ea      	b.n	8009958 <__d2b+0x58>
 8009982:	a801      	add	r0, sp, #4
 8009984:	f7ff fce9 	bl	800935a <__lo0bits>
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	6163      	str	r3, [r4, #20]
 800998c:	3020      	adds	r0, #32
 800998e:	2201      	movs	r2, #1
 8009990:	e7e8      	b.n	8009964 <__d2b+0x64>
 8009992:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009996:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800999a:	6038      	str	r0, [r7, #0]
 800999c:	6918      	ldr	r0, [r3, #16]
 800999e:	f7ff fcbd 	bl	800931c <__hi0bits>
 80099a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099a6:	e7e5      	b.n	8009974 <__d2b+0x74>
 80099a8:	0800b9e8 	.word	0x0800b9e8
 80099ac:	0800b9f9 	.word	0x0800b9f9

080099b0 <__ratio>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	b085      	sub	sp, #20
 80099b6:	e9cd 1000 	strd	r1, r0, [sp]
 80099ba:	a902      	add	r1, sp, #8
 80099bc:	f7ff ff56 	bl	800986c <__b2d>
 80099c0:	9800      	ldr	r0, [sp, #0]
 80099c2:	a903      	add	r1, sp, #12
 80099c4:	ec55 4b10 	vmov	r4, r5, d0
 80099c8:	f7ff ff50 	bl	800986c <__b2d>
 80099cc:	9b01      	ldr	r3, [sp, #4]
 80099ce:	6919      	ldr	r1, [r3, #16]
 80099d0:	9b00      	ldr	r3, [sp, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	1ac9      	subs	r1, r1, r3
 80099d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	ec5b ab10 	vmov	sl, fp, d0
 80099e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bfce      	itee	gt
 80099e8:	462a      	movgt	r2, r5
 80099ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099ee:	465a      	movle	r2, fp
 80099f0:	462f      	mov	r7, r5
 80099f2:	46d9      	mov	r9, fp
 80099f4:	bfcc      	ite	gt
 80099f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80099fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80099fe:	464b      	mov	r3, r9
 8009a00:	4652      	mov	r2, sl
 8009a02:	4620      	mov	r0, r4
 8009a04:	4639      	mov	r1, r7
 8009a06:	f7f6 ff21 	bl	800084c <__aeabi_ddiv>
 8009a0a:	ec41 0b10 	vmov	d0, r0, r1
 8009a0e:	b005      	add	sp, #20
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a14 <__copybits>:
 8009a14:	3901      	subs	r1, #1
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	1149      	asrs	r1, r1, #5
 8009a1a:	6914      	ldr	r4, [r2, #16]
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	f102 0314 	add.w	r3, r2, #20
 8009a22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a2a:	1f05      	subs	r5, r0, #4
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d30c      	bcc.n	8009a4a <__copybits+0x36>
 8009a30:	1aa3      	subs	r3, r4, r2
 8009a32:	3b11      	subs	r3, #17
 8009a34:	f023 0303 	bic.w	r3, r3, #3
 8009a38:	3211      	adds	r2, #17
 8009a3a:	42a2      	cmp	r2, r4
 8009a3c:	bf88      	it	hi
 8009a3e:	2300      	movhi	r3, #0
 8009a40:	4418      	add	r0, r3
 8009a42:	2300      	movs	r3, #0
 8009a44:	4288      	cmp	r0, r1
 8009a46:	d305      	bcc.n	8009a54 <__copybits+0x40>
 8009a48:	bd70      	pop	{r4, r5, r6, pc}
 8009a4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a52:	e7eb      	b.n	8009a2c <__copybits+0x18>
 8009a54:	f840 3b04 	str.w	r3, [r0], #4
 8009a58:	e7f4      	b.n	8009a44 <__copybits+0x30>

08009a5a <__any_on>:
 8009a5a:	f100 0214 	add.w	r2, r0, #20
 8009a5e:	6900      	ldr	r0, [r0, #16]
 8009a60:	114b      	asrs	r3, r1, #5
 8009a62:	4298      	cmp	r0, r3
 8009a64:	b510      	push	{r4, lr}
 8009a66:	db11      	blt.n	8009a8c <__any_on+0x32>
 8009a68:	dd0a      	ble.n	8009a80 <__any_on+0x26>
 8009a6a:	f011 011f 	ands.w	r1, r1, #31
 8009a6e:	d007      	beq.n	8009a80 <__any_on+0x26>
 8009a70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a74:	fa24 f001 	lsr.w	r0, r4, r1
 8009a78:	fa00 f101 	lsl.w	r1, r0, r1
 8009a7c:	428c      	cmp	r4, r1
 8009a7e:	d10b      	bne.n	8009a98 <__any_on+0x3e>
 8009a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d803      	bhi.n	8009a90 <__any_on+0x36>
 8009a88:	2000      	movs	r0, #0
 8009a8a:	bd10      	pop	{r4, pc}
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	e7f7      	b.n	8009a80 <__any_on+0x26>
 8009a90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a94:	2900      	cmp	r1, #0
 8009a96:	d0f5      	beq.n	8009a84 <__any_on+0x2a>
 8009a98:	2001      	movs	r0, #1
 8009a9a:	e7f6      	b.n	8009a8a <__any_on+0x30>

08009a9c <sulp>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	ec45 4b10 	vmov	d0, r4, r5
 8009aa6:	4616      	mov	r6, r2
 8009aa8:	f7ff feba 	bl	8009820 <__ulp>
 8009aac:	ec51 0b10 	vmov	r0, r1, d0
 8009ab0:	b17e      	cbz	r6, 8009ad2 <sulp+0x36>
 8009ab2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009ab6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	dd09      	ble.n	8009ad2 <sulp+0x36>
 8009abe:	051b      	lsls	r3, r3, #20
 8009ac0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009ac4:	2400      	movs	r4, #0
 8009ac6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009aca:	4622      	mov	r2, r4
 8009acc:	462b      	mov	r3, r5
 8009ace:	f7f6 fd93 	bl	80005f8 <__aeabi_dmul>
 8009ad2:	ec41 0b10 	vmov	d0, r0, r1
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}

08009ad8 <_strtod_l>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	b09f      	sub	sp, #124	@ 0x7c
 8009ade:	460c      	mov	r4, r1
 8009ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ae6:	9005      	str	r0, [sp, #20]
 8009ae8:	f04f 0a00 	mov.w	sl, #0
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	460a      	mov	r2, r1
 8009af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009af4:	7811      	ldrb	r1, [r2, #0]
 8009af6:	292b      	cmp	r1, #43	@ 0x2b
 8009af8:	d04a      	beq.n	8009b90 <_strtod_l+0xb8>
 8009afa:	d838      	bhi.n	8009b6e <_strtod_l+0x96>
 8009afc:	290d      	cmp	r1, #13
 8009afe:	d832      	bhi.n	8009b66 <_strtod_l+0x8e>
 8009b00:	2908      	cmp	r1, #8
 8009b02:	d832      	bhi.n	8009b6a <_strtod_l+0x92>
 8009b04:	2900      	cmp	r1, #0
 8009b06:	d03b      	beq.n	8009b80 <_strtod_l+0xa8>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b0e:	782a      	ldrb	r2, [r5, #0]
 8009b10:	2a30      	cmp	r2, #48	@ 0x30
 8009b12:	f040 80b3 	bne.w	8009c7c <_strtod_l+0x1a4>
 8009b16:	786a      	ldrb	r2, [r5, #1]
 8009b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b1c:	2a58      	cmp	r2, #88	@ 0x58
 8009b1e:	d16e      	bne.n	8009bfe <_strtod_l+0x126>
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8009d64 <_strtod_l+0x28c>)
 8009b2c:	9805      	ldr	r0, [sp, #20]
 8009b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b30:	a919      	add	r1, sp, #100	@ 0x64
 8009b32:	f001 f99f 	bl	800ae74 <__gethex>
 8009b36:	f010 060f 	ands.w	r6, r0, #15
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	d005      	beq.n	8009b4a <_strtod_l+0x72>
 8009b3e:	2e06      	cmp	r6, #6
 8009b40:	d128      	bne.n	8009b94 <_strtod_l+0xbc>
 8009b42:	3501      	adds	r5, #1
 8009b44:	2300      	movs	r3, #0
 8009b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f040 858e 	bne.w	800a66e <_strtod_l+0xb96>
 8009b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b54:	b1cb      	cbz	r3, 8009b8a <_strtod_l+0xb2>
 8009b56:	4652      	mov	r2, sl
 8009b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009b5c:	ec43 2b10 	vmov	d0, r2, r3
 8009b60:	b01f      	add	sp, #124	@ 0x7c
 8009b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b66:	2920      	cmp	r1, #32
 8009b68:	d1ce      	bne.n	8009b08 <_strtod_l+0x30>
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	e7c1      	b.n	8009af2 <_strtod_l+0x1a>
 8009b6e:	292d      	cmp	r1, #45	@ 0x2d
 8009b70:	d1ca      	bne.n	8009b08 <_strtod_l+0x30>
 8009b72:	2101      	movs	r1, #1
 8009b74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b76:	1c51      	adds	r1, r2, #1
 8009b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b7a:	7852      	ldrb	r2, [r2, #1]
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	d1c5      	bne.n	8009b0c <_strtod_l+0x34>
 8009b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 8570 	bne.w	800a66a <_strtod_l+0xb92>
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	e7e5      	b.n	8009b5c <_strtod_l+0x84>
 8009b90:	2100      	movs	r1, #0
 8009b92:	e7ef      	b.n	8009b74 <_strtod_l+0x9c>
 8009b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b96:	b13a      	cbz	r2, 8009ba8 <_strtod_l+0xd0>
 8009b98:	2135      	movs	r1, #53	@ 0x35
 8009b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8009b9c:	f7ff ff3a 	bl	8009a14 <__copybits>
 8009ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ba2:	9805      	ldr	r0, [sp, #20]
 8009ba4:	f7ff fb08 	bl	80091b8 <_Bfree>
 8009ba8:	3e01      	subs	r6, #1
 8009baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009bac:	2e04      	cmp	r6, #4
 8009bae:	d806      	bhi.n	8009bbe <_strtod_l+0xe6>
 8009bb0:	e8df f006 	tbb	[pc, r6]
 8009bb4:	201d0314 	.word	0x201d0314
 8009bb8:	14          	.byte	0x14
 8009bb9:	00          	.byte	0x00
 8009bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009bbe:	05e1      	lsls	r1, r4, #23
 8009bc0:	bf48      	it	mi
 8009bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bca:	0d1b      	lsrs	r3, r3, #20
 8009bcc:	051b      	lsls	r3, r3, #20
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1bb      	bne.n	8009b4a <_strtod_l+0x72>
 8009bd2:	f7fe fb23 	bl	800821c <__errno>
 8009bd6:	2322      	movs	r3, #34	@ 0x22
 8009bd8:	6003      	str	r3, [r0, #0]
 8009bda:	e7b6      	b.n	8009b4a <_strtod_l+0x72>
 8009bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bec:	e7e7      	b.n	8009bbe <_strtod_l+0xe6>
 8009bee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009d6c <_strtod_l+0x294>
 8009bf2:	e7e4      	b.n	8009bbe <_strtod_l+0xe6>
 8009bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009bf8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009bfc:	e7df      	b.n	8009bbe <_strtod_l+0xe6>
 8009bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	2b30      	cmp	r3, #48	@ 0x30
 8009c08:	d0f9      	beq.n	8009bfe <_strtod_l+0x126>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d09d      	beq.n	8009b4a <_strtod_l+0x72>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c16:	2300      	movs	r3, #0
 8009c18:	9308      	str	r3, [sp, #32]
 8009c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c1c:	461f      	mov	r7, r3
 8009c1e:	220a      	movs	r2, #10
 8009c20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c22:	7805      	ldrb	r5, [r0, #0]
 8009c24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c28:	b2d9      	uxtb	r1, r3
 8009c2a:	2909      	cmp	r1, #9
 8009c2c:	d928      	bls.n	8009c80 <_strtod_l+0x1a8>
 8009c2e:	494e      	ldr	r1, [pc, #312]	@ (8009d68 <_strtod_l+0x290>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	f001 f837 	bl	800aca4 <strncmp>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d032      	beq.n	8009ca0 <_strtod_l+0x1c8>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	4681      	mov	r9, r0
 8009c40:	463d      	mov	r5, r7
 8009c42:	4603      	mov	r3, r0
 8009c44:	2a65      	cmp	r2, #101	@ 0x65
 8009c46:	d001      	beq.n	8009c4c <_strtod_l+0x174>
 8009c48:	2a45      	cmp	r2, #69	@ 0x45
 8009c4a:	d114      	bne.n	8009c76 <_strtod_l+0x19e>
 8009c4c:	b91d      	cbnz	r5, 8009c56 <_strtod_l+0x17e>
 8009c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c50:	4302      	orrs	r2, r0
 8009c52:	d095      	beq.n	8009b80 <_strtod_l+0xa8>
 8009c54:	2500      	movs	r5, #0
 8009c56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c58:	1c62      	adds	r2, r4, #1
 8009c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c5c:	7862      	ldrb	r2, [r4, #1]
 8009c5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c60:	d077      	beq.n	8009d52 <_strtod_l+0x27a>
 8009c62:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c64:	d07b      	beq.n	8009d5e <_strtod_l+0x286>
 8009c66:	f04f 0c00 	mov.w	ip, #0
 8009c6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c6e:	2909      	cmp	r1, #9
 8009c70:	f240 8082 	bls.w	8009d78 <_strtod_l+0x2a0>
 8009c74:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	e0a2      	b.n	8009dc2 <_strtod_l+0x2ea>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e7c7      	b.n	8009c10 <_strtod_l+0x138>
 8009c80:	2f08      	cmp	r7, #8
 8009c82:	bfd5      	itete	le
 8009c84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009c86:	9908      	ldrgt	r1, [sp, #32]
 8009c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c90:	f100 0001 	add.w	r0, r0, #1
 8009c94:	bfd4      	ite	le
 8009c96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c98:	9308      	strgt	r3, [sp, #32]
 8009c9a:	3701      	adds	r7, #1
 8009c9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c9e:	e7bf      	b.n	8009c20 <_strtod_l+0x148>
 8009ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ca6:	785a      	ldrb	r2, [r3, #1]
 8009ca8:	b37f      	cbz	r7, 8009d0a <_strtod_l+0x232>
 8009caa:	4681      	mov	r9, r0
 8009cac:	463d      	mov	r5, r7
 8009cae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d912      	bls.n	8009cdc <_strtod_l+0x204>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e7c4      	b.n	8009c44 <_strtod_l+0x16c>
 8009cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cc0:	785a      	ldrb	r2, [r3, #1]
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	2a30      	cmp	r2, #48	@ 0x30
 8009cc6:	d0f8      	beq.n	8009cba <_strtod_l+0x1e2>
 8009cc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	f200 84d3 	bhi.w	800a678 <_strtod_l+0xba0>
 8009cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cd6:	4681      	mov	r9, r0
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4605      	mov	r5, r0
 8009cdc:	3a30      	subs	r2, #48	@ 0x30
 8009cde:	f100 0301 	add.w	r3, r0, #1
 8009ce2:	d02a      	beq.n	8009d3a <_strtod_l+0x262>
 8009ce4:	4499      	add	r9, r3
 8009ce6:	eb00 0c05 	add.w	ip, r0, r5
 8009cea:	462b      	mov	r3, r5
 8009cec:	210a      	movs	r1, #10
 8009cee:	4563      	cmp	r3, ip
 8009cf0:	d10d      	bne.n	8009d0e <_strtod_l+0x236>
 8009cf2:	1c69      	adds	r1, r5, #1
 8009cf4:	4401      	add	r1, r0
 8009cf6:	4428      	add	r0, r5
 8009cf8:	2808      	cmp	r0, #8
 8009cfa:	dc16      	bgt.n	8009d2a <_strtod_l+0x252>
 8009cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cfe:	230a      	movs	r3, #10
 8009d00:	fb03 2300 	mla	r3, r3, r0, r2
 8009d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d06:	2300      	movs	r3, #0
 8009d08:	e018      	b.n	8009d3c <_strtod_l+0x264>
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	e7da      	b.n	8009cc4 <_strtod_l+0x1ec>
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	f103 0301 	add.w	r3, r3, #1
 8009d14:	dc03      	bgt.n	8009d1e <_strtod_l+0x246>
 8009d16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009d18:	434e      	muls	r6, r1
 8009d1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009d1c:	e7e7      	b.n	8009cee <_strtod_l+0x216>
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	bfde      	ittt	le
 8009d22:	9e08      	ldrle	r6, [sp, #32]
 8009d24:	434e      	mulle	r6, r1
 8009d26:	9608      	strle	r6, [sp, #32]
 8009d28:	e7e1      	b.n	8009cee <_strtod_l+0x216>
 8009d2a:	280f      	cmp	r0, #15
 8009d2c:	dceb      	bgt.n	8009d06 <_strtod_l+0x22e>
 8009d2e:	9808      	ldr	r0, [sp, #32]
 8009d30:	230a      	movs	r3, #10
 8009d32:	fb03 2300 	mla	r3, r3, r0, r2
 8009d36:	9308      	str	r3, [sp, #32]
 8009d38:	e7e5      	b.n	8009d06 <_strtod_l+0x22e>
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d3e:	1c50      	adds	r0, r2, #1
 8009d40:	9019      	str	r0, [sp, #100]	@ 0x64
 8009d42:	7852      	ldrb	r2, [r2, #1]
 8009d44:	4618      	mov	r0, r3
 8009d46:	460d      	mov	r5, r1
 8009d48:	e7b1      	b.n	8009cae <_strtod_l+0x1d6>
 8009d4a:	f04f 0900 	mov.w	r9, #0
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e77d      	b.n	8009c4e <_strtod_l+0x176>
 8009d52:	f04f 0c00 	mov.w	ip, #0
 8009d56:	1ca2      	adds	r2, r4, #2
 8009d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d5a:	78a2      	ldrb	r2, [r4, #2]
 8009d5c:	e785      	b.n	8009c6a <_strtod_l+0x192>
 8009d5e:	f04f 0c01 	mov.w	ip, #1
 8009d62:	e7f8      	b.n	8009d56 <_strtod_l+0x27e>
 8009d64:	0800bb68 	.word	0x0800bb68
 8009d68:	0800bb50 	.word	0x0800bb50
 8009d6c:	7ff00000 	.word	0x7ff00000
 8009d70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d72:	1c51      	adds	r1, r2, #1
 8009d74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d76:	7852      	ldrb	r2, [r2, #1]
 8009d78:	2a30      	cmp	r2, #48	@ 0x30
 8009d7a:	d0f9      	beq.n	8009d70 <_strtod_l+0x298>
 8009d7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d80:	2908      	cmp	r1, #8
 8009d82:	f63f af78 	bhi.w	8009c76 <_strtod_l+0x19e>
 8009d86:	3a30      	subs	r2, #48	@ 0x30
 8009d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d8e:	f04f 080a 	mov.w	r8, #10
 8009d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d94:	1c56      	adds	r6, r2, #1
 8009d96:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d98:	7852      	ldrb	r2, [r2, #1]
 8009d9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d9e:	f1be 0f09 	cmp.w	lr, #9
 8009da2:	d939      	bls.n	8009e18 <_strtod_l+0x340>
 8009da4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009da6:	1a76      	subs	r6, r6, r1
 8009da8:	2e08      	cmp	r6, #8
 8009daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009dae:	dc03      	bgt.n	8009db8 <_strtod_l+0x2e0>
 8009db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009db2:	4588      	cmp	r8, r1
 8009db4:	bfa8      	it	ge
 8009db6:	4688      	movge	r8, r1
 8009db8:	f1bc 0f00 	cmp.w	ip, #0
 8009dbc:	d001      	beq.n	8009dc2 <_strtod_l+0x2ea>
 8009dbe:	f1c8 0800 	rsb	r8, r8, #0
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	d14e      	bne.n	8009e64 <_strtod_l+0x38c>
 8009dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dc8:	4308      	orrs	r0, r1
 8009dca:	f47f aebe 	bne.w	8009b4a <_strtod_l+0x72>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f aed6 	bne.w	8009b80 <_strtod_l+0xa8>
 8009dd4:	2a69      	cmp	r2, #105	@ 0x69
 8009dd6:	d028      	beq.n	8009e2a <_strtod_l+0x352>
 8009dd8:	dc25      	bgt.n	8009e26 <_strtod_l+0x34e>
 8009dda:	2a49      	cmp	r2, #73	@ 0x49
 8009ddc:	d025      	beq.n	8009e2a <_strtod_l+0x352>
 8009dde:	2a4e      	cmp	r2, #78	@ 0x4e
 8009de0:	f47f aece 	bne.w	8009b80 <_strtod_l+0xa8>
 8009de4:	499b      	ldr	r1, [pc, #620]	@ (800a054 <_strtod_l+0x57c>)
 8009de6:	a819      	add	r0, sp, #100	@ 0x64
 8009de8:	f001 fa66 	bl	800b2b8 <__match>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f aec7 	beq.w	8009b80 <_strtod_l+0xa8>
 8009df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b28      	cmp	r3, #40	@ 0x28
 8009df8:	d12e      	bne.n	8009e58 <_strtod_l+0x380>
 8009dfa:	4997      	ldr	r1, [pc, #604]	@ (800a058 <_strtod_l+0x580>)
 8009dfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8009dfe:	a819      	add	r0, sp, #100	@ 0x64
 8009e00:	f001 fa6e 	bl	800b2e0 <__hexnan>
 8009e04:	2805      	cmp	r0, #5
 8009e06:	d127      	bne.n	8009e58 <_strtod_l+0x380>
 8009e08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e16:	e698      	b.n	8009b4a <_strtod_l+0x72>
 8009e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e1a:	fb08 2101 	mla	r1, r8, r1, r2
 8009e1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e24:	e7b5      	b.n	8009d92 <_strtod_l+0x2ba>
 8009e26:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e28:	e7da      	b.n	8009de0 <_strtod_l+0x308>
 8009e2a:	498c      	ldr	r1, [pc, #560]	@ (800a05c <_strtod_l+0x584>)
 8009e2c:	a819      	add	r0, sp, #100	@ 0x64
 8009e2e:	f001 fa43 	bl	800b2b8 <__match>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	f43f aea4 	beq.w	8009b80 <_strtod_l+0xa8>
 8009e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e3a:	4989      	ldr	r1, [pc, #548]	@ (800a060 <_strtod_l+0x588>)
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	a819      	add	r0, sp, #100	@ 0x64
 8009e40:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e42:	f001 fa39 	bl	800b2b8 <__match>
 8009e46:	b910      	cbnz	r0, 8009e4e <_strtod_l+0x376>
 8009e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a070 <_strtod_l+0x598>
 8009e52:	f04f 0a00 	mov.w	sl, #0
 8009e56:	e678      	b.n	8009b4a <_strtod_l+0x72>
 8009e58:	4882      	ldr	r0, [pc, #520]	@ (800a064 <_strtod_l+0x58c>)
 8009e5a:	f000 ff69 	bl	800ad30 <nan>
 8009e5e:	ec5b ab10 	vmov	sl, fp, d0
 8009e62:	e672      	b.n	8009b4a <_strtod_l+0x72>
 8009e64:	eba8 0309 	sub.w	r3, r8, r9
 8009e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e6c:	2f00      	cmp	r7, #0
 8009e6e:	bf08      	it	eq
 8009e70:	462f      	moveq	r7, r5
 8009e72:	2d10      	cmp	r5, #16
 8009e74:	462c      	mov	r4, r5
 8009e76:	bfa8      	it	ge
 8009e78:	2410      	movge	r4, #16
 8009e7a:	f7f6 fb43 	bl	8000504 <__aeabi_ui2d>
 8009e7e:	2d09      	cmp	r5, #9
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	dc13      	bgt.n	8009eae <_strtod_l+0x3d6>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f43f ae5e 	beq.w	8009b4a <_strtod_l+0x72>
 8009e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e90:	dd78      	ble.n	8009f84 <_strtod_l+0x4ac>
 8009e92:	2b16      	cmp	r3, #22
 8009e94:	dc5f      	bgt.n	8009f56 <_strtod_l+0x47e>
 8009e96:	4974      	ldr	r1, [pc, #464]	@ (800a068 <_strtod_l+0x590>)
 8009e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	465b      	mov	r3, fp
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	4682      	mov	sl, r0
 8009eaa:	468b      	mov	fp, r1
 8009eac:	e64d      	b.n	8009b4a <_strtod_l+0x72>
 8009eae:	4b6e      	ldr	r3, [pc, #440]	@ (800a068 <_strtod_l+0x590>)
 8009eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	9808      	ldr	r0, [sp, #32]
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	f7f6 fb1f 	bl	8000504 <__aeabi_ui2d>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4650      	mov	r0, sl
 8009ecc:	4659      	mov	r1, fp
 8009ece:	f7f6 f9dd 	bl	800028c <__adddf3>
 8009ed2:	2d0f      	cmp	r5, #15
 8009ed4:	4682      	mov	sl, r0
 8009ed6:	468b      	mov	fp, r1
 8009ed8:	ddd5      	ble.n	8009e86 <_strtod_l+0x3ae>
 8009eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009edc:	1b2c      	subs	r4, r5, r4
 8009ede:	441c      	add	r4, r3
 8009ee0:	2c00      	cmp	r4, #0
 8009ee2:	f340 8096 	ble.w	800a012 <_strtod_l+0x53a>
 8009ee6:	f014 030f 	ands.w	r3, r4, #15
 8009eea:	d00a      	beq.n	8009f02 <_strtod_l+0x42a>
 8009eec:	495e      	ldr	r1, [pc, #376]	@ (800a068 <_strtod_l+0x590>)
 8009eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	465b      	mov	r3, fp
 8009ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	4682      	mov	sl, r0
 8009f00:	468b      	mov	fp, r1
 8009f02:	f034 040f 	bics.w	r4, r4, #15
 8009f06:	d073      	beq.n	8009ff0 <_strtod_l+0x518>
 8009f08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f0c:	dd48      	ble.n	8009fa0 <_strtod_l+0x4c8>
 8009f0e:	2400      	movs	r4, #0
 8009f10:	46a0      	mov	r8, r4
 8009f12:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f14:	46a1      	mov	r9, r4
 8009f16:	9a05      	ldr	r2, [sp, #20]
 8009f18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a070 <_strtod_l+0x598>
 8009f1c:	2322      	movs	r3, #34	@ 0x22
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	f04f 0a00 	mov.w	sl, #0
 8009f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f43f ae0f 	beq.w	8009b4a <_strtod_l+0x72>
 8009f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f2e:	9805      	ldr	r0, [sp, #20]
 8009f30:	f7ff f942 	bl	80091b8 <_Bfree>
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7ff f93e 	bl	80091b8 <_Bfree>
 8009f3c:	9805      	ldr	r0, [sp, #20]
 8009f3e:	4641      	mov	r1, r8
 8009f40:	f7ff f93a 	bl	80091b8 <_Bfree>
 8009f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f46:	9805      	ldr	r0, [sp, #20]
 8009f48:	f7ff f936 	bl	80091b8 <_Bfree>
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f7ff f932 	bl	80091b8 <_Bfree>
 8009f54:	e5f9      	b.n	8009b4a <_strtod_l+0x72>
 8009f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	dbbc      	blt.n	8009eda <_strtod_l+0x402>
 8009f60:	4c41      	ldr	r4, [pc, #260]	@ (800a068 <_strtod_l+0x590>)
 8009f62:	f1c5 050f 	rsb	r5, r5, #15
 8009f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f6a:	4652      	mov	r2, sl
 8009f6c:	465b      	mov	r3, fp
 8009f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f72:	f7f6 fb41 	bl	80005f8 <__aeabi_dmul>
 8009f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f78:	1b5d      	subs	r5, r3, r5
 8009f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f82:	e78f      	b.n	8009ea4 <_strtod_l+0x3cc>
 8009f84:	3316      	adds	r3, #22
 8009f86:	dba8      	blt.n	8009eda <_strtod_l+0x402>
 8009f88:	4b37      	ldr	r3, [pc, #220]	@ (800a068 <_strtod_l+0x590>)
 8009f8a:	eba9 0808 	sub.w	r8, r9, r8
 8009f8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f96:	4650      	mov	r0, sl
 8009f98:	4659      	mov	r1, fp
 8009f9a:	f7f6 fc57 	bl	800084c <__aeabi_ddiv>
 8009f9e:	e783      	b.n	8009ea8 <_strtod_l+0x3d0>
 8009fa0:	4b32      	ldr	r3, [pc, #200]	@ (800a06c <_strtod_l+0x594>)
 8009fa2:	9308      	str	r3, [sp, #32]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	1124      	asrs	r4, r4, #4
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4659      	mov	r1, fp
 8009fac:	461e      	mov	r6, r3
 8009fae:	2c01      	cmp	r4, #1
 8009fb0:	dc21      	bgt.n	8009ff6 <_strtod_l+0x51e>
 8009fb2:	b10b      	cbz	r3, 8009fb8 <_strtod_l+0x4e0>
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	468b      	mov	fp, r1
 8009fb8:	492c      	ldr	r1, [pc, #176]	@ (800a06c <_strtod_l+0x594>)
 8009fba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009fbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009fc2:	4652      	mov	r2, sl
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	4b28      	ldr	r3, [pc, #160]	@ (800a070 <_strtod_l+0x598>)
 8009fd0:	460a      	mov	r2, r1
 8009fd2:	400b      	ands	r3, r1
 8009fd4:	4927      	ldr	r1, [pc, #156]	@ (800a074 <_strtod_l+0x59c>)
 8009fd6:	428b      	cmp	r3, r1
 8009fd8:	4682      	mov	sl, r0
 8009fda:	d898      	bhi.n	8009f0e <_strtod_l+0x436>
 8009fdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009fe0:	428b      	cmp	r3, r1
 8009fe2:	bf86      	itte	hi
 8009fe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a078 <_strtod_l+0x5a0>
 8009fe8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009fec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9308      	str	r3, [sp, #32]
 8009ff4:	e07a      	b.n	800a0ec <_strtod_l+0x614>
 8009ff6:	07e2      	lsls	r2, r4, #31
 8009ff8:	d505      	bpl.n	800a006 <_strtod_l+0x52e>
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f7f6 fafa 	bl	80005f8 <__aeabi_dmul>
 800a004:	2301      	movs	r3, #1
 800a006:	9a08      	ldr	r2, [sp, #32]
 800a008:	3208      	adds	r2, #8
 800a00a:	3601      	adds	r6, #1
 800a00c:	1064      	asrs	r4, r4, #1
 800a00e:	9208      	str	r2, [sp, #32]
 800a010:	e7cd      	b.n	8009fae <_strtod_l+0x4d6>
 800a012:	d0ed      	beq.n	8009ff0 <_strtod_l+0x518>
 800a014:	4264      	negs	r4, r4
 800a016:	f014 020f 	ands.w	r2, r4, #15
 800a01a:	d00a      	beq.n	800a032 <_strtod_l+0x55a>
 800a01c:	4b12      	ldr	r3, [pc, #72]	@ (800a068 <_strtod_l+0x590>)
 800a01e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a022:	4650      	mov	r0, sl
 800a024:	4659      	mov	r1, fp
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 fc0f 	bl	800084c <__aeabi_ddiv>
 800a02e:	4682      	mov	sl, r0
 800a030:	468b      	mov	fp, r1
 800a032:	1124      	asrs	r4, r4, #4
 800a034:	d0dc      	beq.n	8009ff0 <_strtod_l+0x518>
 800a036:	2c1f      	cmp	r4, #31
 800a038:	dd20      	ble.n	800a07c <_strtod_l+0x5a4>
 800a03a:	2400      	movs	r4, #0
 800a03c:	46a0      	mov	r8, r4
 800a03e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a040:	46a1      	mov	r9, r4
 800a042:	9a05      	ldr	r2, [sp, #20]
 800a044:	2322      	movs	r3, #34	@ 0x22
 800a046:	f04f 0a00 	mov.w	sl, #0
 800a04a:	f04f 0b00 	mov.w	fp, #0
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e768      	b.n	8009f24 <_strtod_l+0x44c>
 800a052:	bf00      	nop
 800a054:	0800b940 	.word	0x0800b940
 800a058:	0800bb54 	.word	0x0800bb54
 800a05c:	0800b938 	.word	0x0800b938
 800a060:	0800b96f 	.word	0x0800b96f
 800a064:	0800bcfd 	.word	0x0800bcfd
 800a068:	0800ba88 	.word	0x0800ba88
 800a06c:	0800ba60 	.word	0x0800ba60
 800a070:	7ff00000 	.word	0x7ff00000
 800a074:	7ca00000 	.word	0x7ca00000
 800a078:	7fefffff 	.word	0x7fefffff
 800a07c:	f014 0310 	ands.w	r3, r4, #16
 800a080:	bf18      	it	ne
 800a082:	236a      	movne	r3, #106	@ 0x6a
 800a084:	4ea9      	ldr	r6, [pc, #676]	@ (800a32c <_strtod_l+0x854>)
 800a086:	9308      	str	r3, [sp, #32]
 800a088:	4650      	mov	r0, sl
 800a08a:	4659      	mov	r1, fp
 800a08c:	2300      	movs	r3, #0
 800a08e:	07e2      	lsls	r2, r4, #31
 800a090:	d504      	bpl.n	800a09c <_strtod_l+0x5c4>
 800a092:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	2301      	movs	r3, #1
 800a09c:	1064      	asrs	r4, r4, #1
 800a09e:	f106 0608 	add.w	r6, r6, #8
 800a0a2:	d1f4      	bne.n	800a08e <_strtod_l+0x5b6>
 800a0a4:	b10b      	cbz	r3, 800a0aa <_strtod_l+0x5d2>
 800a0a6:	4682      	mov	sl, r0
 800a0a8:	468b      	mov	fp, r1
 800a0aa:	9b08      	ldr	r3, [sp, #32]
 800a0ac:	b1b3      	cbz	r3, 800a0dc <_strtod_l+0x604>
 800a0ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	4659      	mov	r1, fp
 800a0ba:	dd0f      	ble.n	800a0dc <_strtod_l+0x604>
 800a0bc:	2b1f      	cmp	r3, #31
 800a0be:	dd55      	ble.n	800a16c <_strtod_l+0x694>
 800a0c0:	2b34      	cmp	r3, #52	@ 0x34
 800a0c2:	bfde      	ittt	le
 800a0c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a0c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a0cc:	4093      	lslle	r3, r2
 800a0ce:	f04f 0a00 	mov.w	sl, #0
 800a0d2:	bfcc      	ite	gt
 800a0d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a0d8:	ea03 0b01 	andle.w	fp, r3, r1
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	4659      	mov	r1, fp
 800a0e4:	f7f6 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1a6      	bne.n	800a03a <_strtod_l+0x562>
 800a0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0f2:	9805      	ldr	r0, [sp, #20]
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	463a      	mov	r2, r7
 800a0f8:	f7ff f8c6 	bl	8009288 <__s2b>
 800a0fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f af05 	beq.w	8009f0e <_strtod_l+0x436>
 800a104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a106:	2a00      	cmp	r2, #0
 800a108:	eba9 0308 	sub.w	r3, r9, r8
 800a10c:	bfa8      	it	ge
 800a10e:	2300      	movge	r3, #0
 800a110:	9312      	str	r3, [sp, #72]	@ 0x48
 800a112:	2400      	movs	r4, #0
 800a114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a118:	9316      	str	r3, [sp, #88]	@ 0x58
 800a11a:	46a0      	mov	r8, r4
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	9805      	ldr	r0, [sp, #20]
 800a120:	6859      	ldr	r1, [r3, #4]
 800a122:	f7ff f809 	bl	8009138 <_Balloc>
 800a126:	4681      	mov	r9, r0
 800a128:	2800      	cmp	r0, #0
 800a12a:	f43f aef4 	beq.w	8009f16 <_strtod_l+0x43e>
 800a12e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	3202      	adds	r2, #2
 800a134:	f103 010c 	add.w	r1, r3, #12
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	300c      	adds	r0, #12
 800a13c:	f7fe f89b 	bl	8008276 <memcpy>
 800a140:	ec4b ab10 	vmov	d0, sl, fp
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	aa1c      	add	r2, sp, #112	@ 0x70
 800a148:	a91b      	add	r1, sp, #108	@ 0x6c
 800a14a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a14e:	f7ff fbd7 	bl	8009900 <__d2b>
 800a152:	901a      	str	r0, [sp, #104]	@ 0x68
 800a154:	2800      	cmp	r0, #0
 800a156:	f43f aede 	beq.w	8009f16 <_strtod_l+0x43e>
 800a15a:	9805      	ldr	r0, [sp, #20]
 800a15c:	2101      	movs	r1, #1
 800a15e:	f7ff f929 	bl	80093b4 <__i2b>
 800a162:	4680      	mov	r8, r0
 800a164:	b948      	cbnz	r0, 800a17a <_strtod_l+0x6a2>
 800a166:	f04f 0800 	mov.w	r8, #0
 800a16a:	e6d4      	b.n	8009f16 <_strtod_l+0x43e>
 800a16c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a170:	fa02 f303 	lsl.w	r3, r2, r3
 800a174:	ea03 0a0a 	and.w	sl, r3, sl
 800a178:	e7b0      	b.n	800a0dc <_strtod_l+0x604>
 800a17a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a17c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a17e:	2d00      	cmp	r5, #0
 800a180:	bfab      	itete	ge
 800a182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a18a:	bfac      	ite	ge
 800a18c:	18ef      	addge	r7, r5, r3
 800a18e:	1b5e      	sublt	r6, r3, r5
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	1aed      	subs	r5, r5, r3
 800a194:	4415      	add	r5, r2
 800a196:	4b66      	ldr	r3, [pc, #408]	@ (800a330 <_strtod_l+0x858>)
 800a198:	3d01      	subs	r5, #1
 800a19a:	429d      	cmp	r5, r3
 800a19c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1a0:	da50      	bge.n	800a244 <_strtod_l+0x76c>
 800a1a2:	1b5b      	subs	r3, r3, r5
 800a1a4:	2b1f      	cmp	r3, #31
 800a1a6:	eba2 0203 	sub.w	r2, r2, r3
 800a1aa:	f04f 0101 	mov.w	r1, #1
 800a1ae:	dc3d      	bgt.n	800a22c <_strtod_l+0x754>
 800a1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1ba:	18bd      	adds	r5, r7, r2
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	42af      	cmp	r7, r5
 800a1c0:	4416      	add	r6, r2
 800a1c2:	441e      	add	r6, r3
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	bfa8      	it	ge
 800a1c8:	462b      	movge	r3, r5
 800a1ca:	42b3      	cmp	r3, r6
 800a1cc:	bfa8      	it	ge
 800a1ce:	4633      	movge	r3, r6
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bfc2      	ittt	gt
 800a1d4:	1aed      	subgt	r5, r5, r3
 800a1d6:	1af6      	subgt	r6, r6, r3
 800a1d8:	1aff      	subgt	r7, r7, r3
 800a1da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dd16      	ble.n	800a20e <_strtod_l+0x736>
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	9805      	ldr	r0, [sp, #20]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f7ff f9a5 	bl	8009534 <__pow5mult>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d0ba      	beq.n	800a166 <_strtod_l+0x68e>
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1f4:	9805      	ldr	r0, [sp, #20]
 800a1f6:	f7ff f8f3 	bl	80093e0 <__multiply>
 800a1fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f ae8a 	beq.w	8009f16 <_strtod_l+0x43e>
 800a202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a204:	9805      	ldr	r0, [sp, #20]
 800a206:	f7fe ffd7 	bl	80091b8 <_Bfree>
 800a20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a20e:	2d00      	cmp	r5, #0
 800a210:	dc1d      	bgt.n	800a24e <_strtod_l+0x776>
 800a212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd23      	ble.n	800a260 <_strtod_l+0x788>
 800a218:	4649      	mov	r1, r9
 800a21a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a21c:	9805      	ldr	r0, [sp, #20]
 800a21e:	f7ff f989 	bl	8009534 <__pow5mult>
 800a222:	4681      	mov	r9, r0
 800a224:	b9e0      	cbnz	r0, 800a260 <_strtod_l+0x788>
 800a226:	f04f 0900 	mov.w	r9, #0
 800a22a:	e674      	b.n	8009f16 <_strtod_l+0x43e>
 800a22c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a238:	35e2      	adds	r5, #226	@ 0xe2
 800a23a:	fa01 f305 	lsl.w	r3, r1, r5
 800a23e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a240:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a242:	e7ba      	b.n	800a1ba <_strtod_l+0x6e2>
 800a244:	2300      	movs	r3, #0
 800a246:	9310      	str	r3, [sp, #64]	@ 0x40
 800a248:	2301      	movs	r3, #1
 800a24a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a24c:	e7b5      	b.n	800a1ba <_strtod_l+0x6e2>
 800a24e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a250:	9805      	ldr	r0, [sp, #20]
 800a252:	462a      	mov	r2, r5
 800a254:	f7ff f9c8 	bl	80095e8 <__lshift>
 800a258:	901a      	str	r0, [sp, #104]	@ 0x68
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d1d9      	bne.n	800a212 <_strtod_l+0x73a>
 800a25e:	e65a      	b.n	8009f16 <_strtod_l+0x43e>
 800a260:	2e00      	cmp	r6, #0
 800a262:	dd07      	ble.n	800a274 <_strtod_l+0x79c>
 800a264:	4649      	mov	r1, r9
 800a266:	9805      	ldr	r0, [sp, #20]
 800a268:	4632      	mov	r2, r6
 800a26a:	f7ff f9bd 	bl	80095e8 <__lshift>
 800a26e:	4681      	mov	r9, r0
 800a270:	2800      	cmp	r0, #0
 800a272:	d0d8      	beq.n	800a226 <_strtod_l+0x74e>
 800a274:	2f00      	cmp	r7, #0
 800a276:	dd08      	ble.n	800a28a <_strtod_l+0x7b2>
 800a278:	4641      	mov	r1, r8
 800a27a:	9805      	ldr	r0, [sp, #20]
 800a27c:	463a      	mov	r2, r7
 800a27e:	f7ff f9b3 	bl	80095e8 <__lshift>
 800a282:	4680      	mov	r8, r0
 800a284:	2800      	cmp	r0, #0
 800a286:	f43f ae46 	beq.w	8009f16 <_strtod_l+0x43e>
 800a28a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a28c:	9805      	ldr	r0, [sp, #20]
 800a28e:	464a      	mov	r2, r9
 800a290:	f7ff fa32 	bl	80096f8 <__mdiff>
 800a294:	4604      	mov	r4, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f ae3d 	beq.w	8009f16 <_strtod_l+0x43e>
 800a29c:	68c3      	ldr	r3, [r0, #12]
 800a29e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60c3      	str	r3, [r0, #12]
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	f7ff fa0b 	bl	80096c0 <__mcmp>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	da46      	bge.n	800a33c <_strtod_l+0x864>
 800a2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b0:	ea53 030a 	orrs.w	r3, r3, sl
 800a2b4:	d16c      	bne.n	800a390 <_strtod_l+0x8b8>
 800a2b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d168      	bne.n	800a390 <_strtod_l+0x8b8>
 800a2be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2c2:	0d1b      	lsrs	r3, r3, #20
 800a2c4:	051b      	lsls	r3, r3, #20
 800a2c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2ca:	d961      	bls.n	800a390 <_strtod_l+0x8b8>
 800a2cc:	6963      	ldr	r3, [r4, #20]
 800a2ce:	b913      	cbnz	r3, 800a2d6 <_strtod_l+0x7fe>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	dd5c      	ble.n	800a390 <_strtod_l+0x8b8>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	2201      	movs	r2, #1
 800a2da:	9805      	ldr	r0, [sp, #20]
 800a2dc:	f7ff f984 	bl	80095e8 <__lshift>
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	f7ff f9ec 	bl	80096c0 <__mcmp>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	dd51      	ble.n	800a390 <_strtod_l+0x8b8>
 800a2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2f0:	9a08      	ldr	r2, [sp, #32]
 800a2f2:	0d1b      	lsrs	r3, r3, #20
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	d06b      	beq.n	800a3d2 <_strtod_l+0x8fa>
 800a2fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2fe:	d868      	bhi.n	800a3d2 <_strtod_l+0x8fa>
 800a300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a304:	f67f ae9d 	bls.w	800a042 <_strtod_l+0x56a>
 800a308:	4b0a      	ldr	r3, [pc, #40]	@ (800a334 <_strtod_l+0x85c>)
 800a30a:	4650      	mov	r0, sl
 800a30c:	4659      	mov	r1, fp
 800a30e:	2200      	movs	r2, #0
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	4b08      	ldr	r3, [pc, #32]	@ (800a338 <_strtod_l+0x860>)
 800a316:	400b      	ands	r3, r1
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f47f ae05 	bne.w	8009f2c <_strtod_l+0x454>
 800a322:	9a05      	ldr	r2, [sp, #20]
 800a324:	2322      	movs	r3, #34	@ 0x22
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e600      	b.n	8009f2c <_strtod_l+0x454>
 800a32a:	bf00      	nop
 800a32c:	0800bb80 	.word	0x0800bb80
 800a330:	fffffc02 	.word	0xfffffc02
 800a334:	39500000 	.word	0x39500000
 800a338:	7ff00000 	.word	0x7ff00000
 800a33c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a340:	d165      	bne.n	800a40e <_strtod_l+0x936>
 800a342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a348:	b35a      	cbz	r2, 800a3a2 <_strtod_l+0x8ca>
 800a34a:	4a9f      	ldr	r2, [pc, #636]	@ (800a5c8 <_strtod_l+0xaf0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d12b      	bne.n	800a3a8 <_strtod_l+0x8d0>
 800a350:	9b08      	ldr	r3, [sp, #32]
 800a352:	4651      	mov	r1, sl
 800a354:	b303      	cbz	r3, 800a398 <_strtod_l+0x8c0>
 800a356:	4b9d      	ldr	r3, [pc, #628]	@ (800a5cc <_strtod_l+0xaf4>)
 800a358:	465a      	mov	r2, fp
 800a35a:	4013      	ands	r3, r2
 800a35c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a364:	d81b      	bhi.n	800a39e <_strtod_l+0x8c6>
 800a366:	0d1b      	lsrs	r3, r3, #20
 800a368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a36c:	fa02 f303 	lsl.w	r3, r2, r3
 800a370:	4299      	cmp	r1, r3
 800a372:	d119      	bne.n	800a3a8 <_strtod_l+0x8d0>
 800a374:	4b96      	ldr	r3, [pc, #600]	@ (800a5d0 <_strtod_l+0xaf8>)
 800a376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a378:	429a      	cmp	r2, r3
 800a37a:	d102      	bne.n	800a382 <_strtod_l+0x8aa>
 800a37c:	3101      	adds	r1, #1
 800a37e:	f43f adca 	beq.w	8009f16 <_strtod_l+0x43e>
 800a382:	4b92      	ldr	r3, [pc, #584]	@ (800a5cc <_strtod_l+0xaf4>)
 800a384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a386:	401a      	ands	r2, r3
 800a388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a38c:	f04f 0a00 	mov.w	sl, #0
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1b8      	bne.n	800a308 <_strtod_l+0x830>
 800a396:	e5c9      	b.n	8009f2c <_strtod_l+0x454>
 800a398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a39c:	e7e8      	b.n	800a370 <_strtod_l+0x898>
 800a39e:	4613      	mov	r3, r2
 800a3a0:	e7e6      	b.n	800a370 <_strtod_l+0x898>
 800a3a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a3a6:	d0a1      	beq.n	800a2ec <_strtod_l+0x814>
 800a3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3aa:	b1db      	cbz	r3, 800a3e4 <_strtod_l+0x90c>
 800a3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ae:	4213      	tst	r3, r2
 800a3b0:	d0ee      	beq.n	800a390 <_strtod_l+0x8b8>
 800a3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b4:	9a08      	ldr	r2, [sp, #32]
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	4659      	mov	r1, fp
 800a3ba:	b1bb      	cbz	r3, 800a3ec <_strtod_l+0x914>
 800a3bc:	f7ff fb6e 	bl	8009a9c <sulp>
 800a3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c4:	ec53 2b10 	vmov	r2, r3, d0
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	e7de      	b.n	800a390 <_strtod_l+0x8b8>
 800a3d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a3d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a3e2:	e7d5      	b.n	800a390 <_strtod_l+0x8b8>
 800a3e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3e6:	ea13 0f0a 	tst.w	r3, sl
 800a3ea:	e7e1      	b.n	800a3b0 <_strtod_l+0x8d8>
 800a3ec:	f7ff fb56 	bl	8009a9c <sulp>
 800a3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f4:	ec53 2b10 	vmov	r2, r3, d0
 800a3f8:	f7f5 ff46 	bl	8000288 <__aeabi_dsub>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2300      	movs	r3, #0
 800a400:	4682      	mov	sl, r0
 800a402:	468b      	mov	fp, r1
 800a404:	f7f6 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0c1      	beq.n	800a390 <_strtod_l+0x8b8>
 800a40c:	e619      	b.n	800a042 <_strtod_l+0x56a>
 800a40e:	4641      	mov	r1, r8
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff facd 	bl	80099b0 <__ratio>
 800a416:	ec57 6b10 	vmov	r6, r7, d0
 800a41a:	2200      	movs	r2, #0
 800a41c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fb64 	bl	8000af0 <__aeabi_dcmple>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d06f      	beq.n	800a50c <_strtod_l+0xa34>
 800a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d17a      	bne.n	800a528 <_strtod_l+0xa50>
 800a432:	f1ba 0f00 	cmp.w	sl, #0
 800a436:	d158      	bne.n	800a4ea <_strtod_l+0xa12>
 800a438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a43a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d15a      	bne.n	800a4f8 <_strtod_l+0xa20>
 800a442:	4b64      	ldr	r3, [pc, #400]	@ (800a5d4 <_strtod_l+0xafc>)
 800a444:	2200      	movs	r2, #0
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 fb47 	bl	8000adc <__aeabi_dcmplt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d159      	bne.n	800a506 <_strtod_l+0xa2e>
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	4b60      	ldr	r3, [pc, #384]	@ (800a5d8 <_strtod_l+0xb00>)
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f6 f8cd 	bl	80005f8 <__aeabi_dmul>
 800a45e:	4606      	mov	r6, r0
 800a460:	460f      	mov	r7, r1
 800a462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a466:	9606      	str	r6, [sp, #24]
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a46e:	4d57      	ldr	r5, [pc, #348]	@ (800a5cc <_strtod_l+0xaf4>)
 800a470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a476:	401d      	ands	r5, r3
 800a478:	4b58      	ldr	r3, [pc, #352]	@ (800a5dc <_strtod_l+0xb04>)
 800a47a:	429d      	cmp	r5, r3
 800a47c:	f040 80b2 	bne.w	800a5e4 <_strtod_l+0xb0c>
 800a480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a486:	ec4b ab10 	vmov	d0, sl, fp
 800a48a:	f7ff f9c9 	bl	8009820 <__ulp>
 800a48e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a492:	ec51 0b10 	vmov	r0, r1, d0
 800a496:	f7f6 f8af 	bl	80005f8 <__aeabi_dmul>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f5 fef5 	bl	800028c <__adddf3>
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4949      	ldr	r1, [pc, #292]	@ (800a5cc <_strtod_l+0xaf4>)
 800a4a6:	4a4e      	ldr	r2, [pc, #312]	@ (800a5e0 <_strtod_l+0xb08>)
 800a4a8:	4019      	ands	r1, r3
 800a4aa:	4291      	cmp	r1, r2
 800a4ac:	4682      	mov	sl, r0
 800a4ae:	d942      	bls.n	800a536 <_strtod_l+0xa5e>
 800a4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4b2:	4b47      	ldr	r3, [pc, #284]	@ (800a5d0 <_strtod_l+0xaf8>)
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d103      	bne.n	800a4c0 <_strtod_l+0x9e8>
 800a4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	f43f ad2b 	beq.w	8009f16 <_strtod_l+0x43e>
 800a4c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a5d0 <_strtod_l+0xaf8>
 800a4c4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	f7fe fe74 	bl	80091b8 <_Bfree>
 800a4d0:	9805      	ldr	r0, [sp, #20]
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7fe fe70 	bl	80091b8 <_Bfree>
 800a4d8:	9805      	ldr	r0, [sp, #20]
 800a4da:	4641      	mov	r1, r8
 800a4dc:	f7fe fe6c 	bl	80091b8 <_Bfree>
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	f7fe fe68 	bl	80091b8 <_Bfree>
 800a4e8:	e618      	b.n	800a11c <_strtod_l+0x644>
 800a4ea:	f1ba 0f01 	cmp.w	sl, #1
 800a4ee:	d103      	bne.n	800a4f8 <_strtod_l+0xa20>
 800a4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f43f ada5 	beq.w	800a042 <_strtod_l+0x56a>
 800a4f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a5a8 <_strtod_l+0xad0>
 800a4fc:	4f35      	ldr	r7, [pc, #212]	@ (800a5d4 <_strtod_l+0xafc>)
 800a4fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a502:	2600      	movs	r6, #0
 800a504:	e7b1      	b.n	800a46a <_strtod_l+0x992>
 800a506:	4f34      	ldr	r7, [pc, #208]	@ (800a5d8 <_strtod_l+0xb00>)
 800a508:	2600      	movs	r6, #0
 800a50a:	e7aa      	b.n	800a462 <_strtod_l+0x98a>
 800a50c:	4b32      	ldr	r3, [pc, #200]	@ (800a5d8 <_strtod_l+0xb00>)
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	2200      	movs	r2, #0
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a51a:	4606      	mov	r6, r0
 800a51c:	460f      	mov	r7, r1
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d09f      	beq.n	800a462 <_strtod_l+0x98a>
 800a522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a526:	e7a0      	b.n	800a46a <_strtod_l+0x992>
 800a528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a5b0 <_strtod_l+0xad8>
 800a52c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a530:	ec57 6b17 	vmov	r6, r7, d7
 800a534:	e799      	b.n	800a46a <_strtod_l+0x992>
 800a536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1c1      	bne.n	800a4c8 <_strtod_l+0x9f0>
 800a544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a548:	0d1b      	lsrs	r3, r3, #20
 800a54a:	051b      	lsls	r3, r3, #20
 800a54c:	429d      	cmp	r5, r3
 800a54e:	d1bb      	bne.n	800a4c8 <_strtod_l+0x9f0>
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f6 fbb0 	bl	8000cb8 <__aeabi_d2lz>
 800a558:	f7f6 f820 	bl	800059c <__aeabi_l2d>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4630      	mov	r0, r6
 800a562:	4639      	mov	r1, r7
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	460b      	mov	r3, r1
 800a56a:	4602      	mov	r2, r0
 800a56c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a576:	ea46 060a 	orr.w	r6, r6, sl
 800a57a:	431e      	orrs	r6, r3
 800a57c:	d06f      	beq.n	800a65e <_strtod_l+0xb86>
 800a57e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5b8 <_strtod_l+0xae0>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f7f6 faaa 	bl	8000adc <__aeabi_dcmplt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	f47f accf 	bne.w	8009f2c <_strtod_l+0x454>
 800a58e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a5c0 <_strtod_l+0xae8>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a598:	f7f6 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d093      	beq.n	800a4c8 <_strtod_l+0x9f0>
 800a5a0:	e4c4      	b.n	8009f2c <_strtod_l+0x454>
 800a5a2:	bf00      	nop
 800a5a4:	f3af 8000 	nop.w
 800a5a8:	00000000 	.word	0x00000000
 800a5ac:	bff00000 	.word	0xbff00000
 800a5b0:	00000000 	.word	0x00000000
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	94a03595 	.word	0x94a03595
 800a5bc:	3fdfffff 	.word	0x3fdfffff
 800a5c0:	35afe535 	.word	0x35afe535
 800a5c4:	3fe00000 	.word	0x3fe00000
 800a5c8:	000fffff 	.word	0x000fffff
 800a5cc:	7ff00000 	.word	0x7ff00000
 800a5d0:	7fefffff 	.word	0x7fefffff
 800a5d4:	3ff00000 	.word	0x3ff00000
 800a5d8:	3fe00000 	.word	0x3fe00000
 800a5dc:	7fe00000 	.word	0x7fe00000
 800a5e0:	7c9fffff 	.word	0x7c9fffff
 800a5e4:	9b08      	ldr	r3, [sp, #32]
 800a5e6:	b323      	cbz	r3, 800a632 <_strtod_l+0xb5a>
 800a5e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a5ec:	d821      	bhi.n	800a632 <_strtod_l+0xb5a>
 800a5ee:	a328      	add	r3, pc, #160	@ (adr r3, 800a690 <_strtod_l+0xbb8>)
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f6 fa7a 	bl	8000af0 <__aeabi_dcmple>
 800a5fc:	b1a0      	cbz	r0, 800a628 <_strtod_l+0xb50>
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7f6 fad1 	bl	8000ba8 <__aeabi_d2uiz>
 800a606:	2801      	cmp	r0, #1
 800a608:	bf38      	it	cc
 800a60a:	2001      	movcc	r0, #1
 800a60c:	f7f5 ff7a 	bl	8000504 <__aeabi_ui2d>
 800a610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	b9fb      	cbnz	r3, 800a658 <_strtod_l+0xb80>
 800a618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a61c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a61e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a62a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a62e:	1b5b      	subs	r3, r3, r5
 800a630:	9311      	str	r3, [sp, #68]	@ 0x44
 800a632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a63a:	f7ff f8f1 	bl	8009820 <__ulp>
 800a63e:	4650      	mov	r0, sl
 800a640:	ec53 2b10 	vmov	r2, r3, d0
 800a644:	4659      	mov	r1, fp
 800a646:	f7f5 ffd7 	bl	80005f8 <__aeabi_dmul>
 800a64a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a64e:	f7f5 fe1d 	bl	800028c <__adddf3>
 800a652:	4682      	mov	sl, r0
 800a654:	468b      	mov	fp, r1
 800a656:	e770      	b.n	800a53a <_strtod_l+0xa62>
 800a658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a65c:	e7e0      	b.n	800a620 <_strtod_l+0xb48>
 800a65e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a698 <_strtod_l+0xbc0>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f7f6 fa3a 	bl	8000adc <__aeabi_dcmplt>
 800a668:	e798      	b.n	800a59c <_strtod_l+0xac4>
 800a66a:	2300      	movs	r3, #0
 800a66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a66e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	f7ff ba6d 	b.w	8009b52 <_strtod_l+0x7a>
 800a678:	2a65      	cmp	r2, #101	@ 0x65
 800a67a:	f43f ab66 	beq.w	8009d4a <_strtod_l+0x272>
 800a67e:	2a45      	cmp	r2, #69	@ 0x45
 800a680:	f43f ab63 	beq.w	8009d4a <_strtod_l+0x272>
 800a684:	2301      	movs	r3, #1
 800a686:	f7ff bb9e 	b.w	8009dc6 <_strtod_l+0x2ee>
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
 800a690:	ffc00000 	.word	0xffc00000
 800a694:	41dfffff 	.word	0x41dfffff
 800a698:	94a03595 	.word	0x94a03595
 800a69c:	3fcfffff 	.word	0x3fcfffff

0800a6a0 <_strtod_r>:
 800a6a0:	4b01      	ldr	r3, [pc, #4]	@ (800a6a8 <_strtod_r+0x8>)
 800a6a2:	f7ff ba19 	b.w	8009ad8 <_strtod_l>
 800a6a6:	bf00      	nop
 800a6a8:	2000006c 	.word	0x2000006c

0800a6ac <_strtol_l.constprop.0>:
 800a6ac:	2b24      	cmp	r3, #36	@ 0x24
 800a6ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b2:	4686      	mov	lr, r0
 800a6b4:	4690      	mov	r8, r2
 800a6b6:	d801      	bhi.n	800a6bc <_strtol_l.constprop.0+0x10>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d106      	bne.n	800a6ca <_strtol_l.constprop.0+0x1e>
 800a6bc:	f7fd fdae 	bl	800821c <__errno>
 800a6c0:	2316      	movs	r3, #22
 800a6c2:	6003      	str	r3, [r0, #0]
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ca:	4834      	ldr	r0, [pc, #208]	@ (800a79c <_strtol_l.constprop.0+0xf0>)
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6d4:	5d06      	ldrb	r6, [r0, r4]
 800a6d6:	f016 0608 	ands.w	r6, r6, #8
 800a6da:	d1f8      	bne.n	800a6ce <_strtol_l.constprop.0+0x22>
 800a6dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6de:	d12d      	bne.n	800a73c <_strtol_l.constprop.0+0x90>
 800a6e0:	782c      	ldrb	r4, [r5, #0]
 800a6e2:	2601      	movs	r6, #1
 800a6e4:	1c95      	adds	r5, r2, #2
 800a6e6:	f033 0210 	bics.w	r2, r3, #16
 800a6ea:	d109      	bne.n	800a700 <_strtol_l.constprop.0+0x54>
 800a6ec:	2c30      	cmp	r4, #48	@ 0x30
 800a6ee:	d12a      	bne.n	800a746 <_strtol_l.constprop.0+0x9a>
 800a6f0:	782a      	ldrb	r2, [r5, #0]
 800a6f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6f6:	2a58      	cmp	r2, #88	@ 0x58
 800a6f8:	d125      	bne.n	800a746 <_strtol_l.constprop.0+0x9a>
 800a6fa:	786c      	ldrb	r4, [r5, #1]
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	3502      	adds	r5, #2
 800a700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a704:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a708:	2200      	movs	r2, #0
 800a70a:	fbbc f9f3 	udiv	r9, ip, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	fb03 ca19 	mls	sl, r3, r9, ip
 800a714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a718:	2f09      	cmp	r7, #9
 800a71a:	d81b      	bhi.n	800a754 <_strtol_l.constprop.0+0xa8>
 800a71c:	463c      	mov	r4, r7
 800a71e:	42a3      	cmp	r3, r4
 800a720:	dd27      	ble.n	800a772 <_strtol_l.constprop.0+0xc6>
 800a722:	1c57      	adds	r7, r2, #1
 800a724:	d007      	beq.n	800a736 <_strtol_l.constprop.0+0x8a>
 800a726:	4581      	cmp	r9, r0
 800a728:	d320      	bcc.n	800a76c <_strtol_l.constprop.0+0xc0>
 800a72a:	d101      	bne.n	800a730 <_strtol_l.constprop.0+0x84>
 800a72c:	45a2      	cmp	sl, r4
 800a72e:	db1d      	blt.n	800a76c <_strtol_l.constprop.0+0xc0>
 800a730:	fb00 4003 	mla	r0, r0, r3, r4
 800a734:	2201      	movs	r2, #1
 800a736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a73a:	e7eb      	b.n	800a714 <_strtol_l.constprop.0+0x68>
 800a73c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a73e:	bf04      	itt	eq
 800a740:	782c      	ldrbeq	r4, [r5, #0]
 800a742:	1c95      	addeq	r5, r2, #2
 800a744:	e7cf      	b.n	800a6e6 <_strtol_l.constprop.0+0x3a>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1da      	bne.n	800a700 <_strtol_l.constprop.0+0x54>
 800a74a:	2c30      	cmp	r4, #48	@ 0x30
 800a74c:	bf0c      	ite	eq
 800a74e:	2308      	moveq	r3, #8
 800a750:	230a      	movne	r3, #10
 800a752:	e7d5      	b.n	800a700 <_strtol_l.constprop.0+0x54>
 800a754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a758:	2f19      	cmp	r7, #25
 800a75a:	d801      	bhi.n	800a760 <_strtol_l.constprop.0+0xb4>
 800a75c:	3c37      	subs	r4, #55	@ 0x37
 800a75e:	e7de      	b.n	800a71e <_strtol_l.constprop.0+0x72>
 800a760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a764:	2f19      	cmp	r7, #25
 800a766:	d804      	bhi.n	800a772 <_strtol_l.constprop.0+0xc6>
 800a768:	3c57      	subs	r4, #87	@ 0x57
 800a76a:	e7d8      	b.n	800a71e <_strtol_l.constprop.0+0x72>
 800a76c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a770:	e7e1      	b.n	800a736 <_strtol_l.constprop.0+0x8a>
 800a772:	1c53      	adds	r3, r2, #1
 800a774:	d108      	bne.n	800a788 <_strtol_l.constprop.0+0xdc>
 800a776:	2322      	movs	r3, #34	@ 0x22
 800a778:	f8ce 3000 	str.w	r3, [lr]
 800a77c:	4660      	mov	r0, ip
 800a77e:	f1b8 0f00 	cmp.w	r8, #0
 800a782:	d0a0      	beq.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a784:	1e69      	subs	r1, r5, #1
 800a786:	e006      	b.n	800a796 <_strtol_l.constprop.0+0xea>
 800a788:	b106      	cbz	r6, 800a78c <_strtol_l.constprop.0+0xe0>
 800a78a:	4240      	negs	r0, r0
 800a78c:	f1b8 0f00 	cmp.w	r8, #0
 800a790:	d099      	beq.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a792:	2a00      	cmp	r2, #0
 800a794:	d1f6      	bne.n	800a784 <_strtol_l.constprop.0+0xd8>
 800a796:	f8c8 1000 	str.w	r1, [r8]
 800a79a:	e794      	b.n	800a6c6 <_strtol_l.constprop.0+0x1a>
 800a79c:	0800bba9 	.word	0x0800bba9

0800a7a0 <_strtol_r>:
 800a7a0:	f7ff bf84 	b.w	800a6ac <_strtol_l.constprop.0>

0800a7a4 <__ssputs_r>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	688e      	ldr	r6, [r1, #8]
 800a7aa:	461f      	mov	r7, r3
 800a7ac:	42be      	cmp	r6, r7
 800a7ae:	680b      	ldr	r3, [r1, #0]
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	4690      	mov	r8, r2
 800a7b6:	d82d      	bhi.n	800a814 <__ssputs_r+0x70>
 800a7b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7c0:	d026      	beq.n	800a810 <__ssputs_r+0x6c>
 800a7c2:	6965      	ldr	r5, [r4, #20]
 800a7c4:	6909      	ldr	r1, [r1, #16]
 800a7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7ca:	eba3 0901 	sub.w	r9, r3, r1
 800a7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7d2:	1c7b      	adds	r3, r7, #1
 800a7d4:	444b      	add	r3, r9
 800a7d6:	106d      	asrs	r5, r5, #1
 800a7d8:	429d      	cmp	r5, r3
 800a7da:	bf38      	it	cc
 800a7dc:	461d      	movcc	r5, r3
 800a7de:	0553      	lsls	r3, r2, #21
 800a7e0:	d527      	bpl.n	800a832 <__ssputs_r+0x8e>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7fe fc1c 	bl	8009020 <_malloc_r>
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	b360      	cbz	r0, 800a846 <__ssputs_r+0xa2>
 800a7ec:	6921      	ldr	r1, [r4, #16]
 800a7ee:	464a      	mov	r2, r9
 800a7f0:	f7fd fd41 	bl	8008276 <memcpy>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	6126      	str	r6, [r4, #16]
 800a802:	6165      	str	r5, [r4, #20]
 800a804:	444e      	add	r6, r9
 800a806:	eba5 0509 	sub.w	r5, r5, r9
 800a80a:	6026      	str	r6, [r4, #0]
 800a80c:	60a5      	str	r5, [r4, #8]
 800a80e:	463e      	mov	r6, r7
 800a810:	42be      	cmp	r6, r7
 800a812:	d900      	bls.n	800a816 <__ssputs_r+0x72>
 800a814:	463e      	mov	r6, r7
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	4632      	mov	r2, r6
 800a81a:	4641      	mov	r1, r8
 800a81c:	f000 fa28 	bl	800ac70 <memmove>
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	1b9b      	subs	r3, r3, r6
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	4433      	add	r3, r6
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	2000      	movs	r0, #0
 800a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a832:	462a      	mov	r2, r5
 800a834:	f000 fe01 	bl	800b43a <_realloc_r>
 800a838:	4606      	mov	r6, r0
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d1e0      	bne.n	800a800 <__ssputs_r+0x5c>
 800a83e:	6921      	ldr	r1, [r4, #16]
 800a840:	4650      	mov	r0, sl
 800a842:	f7fe fb79 	bl	8008f38 <_free_r>
 800a846:	230c      	movs	r3, #12
 800a848:	f8ca 3000 	str.w	r3, [sl]
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a858:	e7e9      	b.n	800a82e <__ssputs_r+0x8a>
	...

0800a85c <_svfiprintf_r>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	4698      	mov	r8, r3
 800a862:	898b      	ldrh	r3, [r1, #12]
 800a864:	061b      	lsls	r3, r3, #24
 800a866:	b09d      	sub	sp, #116	@ 0x74
 800a868:	4607      	mov	r7, r0
 800a86a:	460d      	mov	r5, r1
 800a86c:	4614      	mov	r4, r2
 800a86e:	d510      	bpl.n	800a892 <_svfiprintf_r+0x36>
 800a870:	690b      	ldr	r3, [r1, #16]
 800a872:	b973      	cbnz	r3, 800a892 <_svfiprintf_r+0x36>
 800a874:	2140      	movs	r1, #64	@ 0x40
 800a876:	f7fe fbd3 	bl	8009020 <_malloc_r>
 800a87a:	6028      	str	r0, [r5, #0]
 800a87c:	6128      	str	r0, [r5, #16]
 800a87e:	b930      	cbnz	r0, 800a88e <_svfiprintf_r+0x32>
 800a880:	230c      	movs	r3, #12
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a888:	b01d      	add	sp, #116	@ 0x74
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	2340      	movs	r3, #64	@ 0x40
 800a890:	616b      	str	r3, [r5, #20]
 800a892:	2300      	movs	r3, #0
 800a894:	9309      	str	r3, [sp, #36]	@ 0x24
 800a896:	2320      	movs	r3, #32
 800a898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8a0:	2330      	movs	r3, #48	@ 0x30
 800a8a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa40 <_svfiprintf_r+0x1e4>
 800a8a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8aa:	f04f 0901 	mov.w	r9, #1
 800a8ae:	4623      	mov	r3, r4
 800a8b0:	469a      	mov	sl, r3
 800a8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b6:	b10a      	cbz	r2, 800a8bc <_svfiprintf_r+0x60>
 800a8b8:	2a25      	cmp	r2, #37	@ 0x25
 800a8ba:	d1f9      	bne.n	800a8b0 <_svfiprintf_r+0x54>
 800a8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a8c0:	d00b      	beq.n	800a8da <_svfiprintf_r+0x7e>
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7ff ff6b 	bl	800a7a4 <__ssputs_r>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f000 80a7 	beq.w	800aa22 <_svfiprintf_r+0x1c6>
 800a8d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8d6:	445a      	add	r2, fp
 800a8d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8da:	f89a 3000 	ldrb.w	r3, [sl]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 809f 	beq.w	800aa22 <_svfiprintf_r+0x1c6>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ee:	f10a 0a01 	add.w	sl, sl, #1
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	9307      	str	r3, [sp, #28]
 800a8f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8fc:	4654      	mov	r4, sl
 800a8fe:	2205      	movs	r2, #5
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	484e      	ldr	r0, [pc, #312]	@ (800aa40 <_svfiprintf_r+0x1e4>)
 800a906:	f7f5 fc63 	bl	80001d0 <memchr>
 800a90a:	9a04      	ldr	r2, [sp, #16]
 800a90c:	b9d8      	cbnz	r0, 800a946 <_svfiprintf_r+0xea>
 800a90e:	06d0      	lsls	r0, r2, #27
 800a910:	bf44      	itt	mi
 800a912:	2320      	movmi	r3, #32
 800a914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a918:	0711      	lsls	r1, r2, #28
 800a91a:	bf44      	itt	mi
 800a91c:	232b      	movmi	r3, #43	@ 0x2b
 800a91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a922:	f89a 3000 	ldrb.w	r3, [sl]
 800a926:	2b2a      	cmp	r3, #42	@ 0x2a
 800a928:	d015      	beq.n	800a956 <_svfiprintf_r+0xfa>
 800a92a:	9a07      	ldr	r2, [sp, #28]
 800a92c:	4654      	mov	r4, sl
 800a92e:	2000      	movs	r0, #0
 800a930:	f04f 0c0a 	mov.w	ip, #10
 800a934:	4621      	mov	r1, r4
 800a936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a93a:	3b30      	subs	r3, #48	@ 0x30
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d94b      	bls.n	800a9d8 <_svfiprintf_r+0x17c>
 800a940:	b1b0      	cbz	r0, 800a970 <_svfiprintf_r+0x114>
 800a942:	9207      	str	r2, [sp, #28]
 800a944:	e014      	b.n	800a970 <_svfiprintf_r+0x114>
 800a946:	eba0 0308 	sub.w	r3, r0, r8
 800a94a:	fa09 f303 	lsl.w	r3, r9, r3
 800a94e:	4313      	orrs	r3, r2
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	46a2      	mov	sl, r4
 800a954:	e7d2      	b.n	800a8fc <_svfiprintf_r+0xa0>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	1d19      	adds	r1, r3, #4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	9103      	str	r1, [sp, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bfbb      	ittet	lt
 800a962:	425b      	neglt	r3, r3
 800a964:	f042 0202 	orrlt.w	r2, r2, #2
 800a968:	9307      	strge	r3, [sp, #28]
 800a96a:	9307      	strlt	r3, [sp, #28]
 800a96c:	bfb8      	it	lt
 800a96e:	9204      	strlt	r2, [sp, #16]
 800a970:	7823      	ldrb	r3, [r4, #0]
 800a972:	2b2e      	cmp	r3, #46	@ 0x2e
 800a974:	d10a      	bne.n	800a98c <_svfiprintf_r+0x130>
 800a976:	7863      	ldrb	r3, [r4, #1]
 800a978:	2b2a      	cmp	r3, #42	@ 0x2a
 800a97a:	d132      	bne.n	800a9e2 <_svfiprintf_r+0x186>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	9203      	str	r2, [sp, #12]
 800a984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a988:	3402      	adds	r4, #2
 800a98a:	9305      	str	r3, [sp, #20]
 800a98c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa50 <_svfiprintf_r+0x1f4>
 800a990:	7821      	ldrb	r1, [r4, #0]
 800a992:	2203      	movs	r2, #3
 800a994:	4650      	mov	r0, sl
 800a996:	f7f5 fc1b 	bl	80001d0 <memchr>
 800a99a:	b138      	cbz	r0, 800a9ac <_svfiprintf_r+0x150>
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	eba0 000a 	sub.w	r0, r0, sl
 800a9a2:	2240      	movs	r2, #64	@ 0x40
 800a9a4:	4082      	lsls	r2, r0
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	3401      	adds	r4, #1
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b0:	4824      	ldr	r0, [pc, #144]	@ (800aa44 <_svfiprintf_r+0x1e8>)
 800a9b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9b6:	2206      	movs	r2, #6
 800a9b8:	f7f5 fc0a 	bl	80001d0 <memchr>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d036      	beq.n	800aa2e <_svfiprintf_r+0x1d2>
 800a9c0:	4b21      	ldr	r3, [pc, #132]	@ (800aa48 <_svfiprintf_r+0x1ec>)
 800a9c2:	bb1b      	cbnz	r3, 800aa0c <_svfiprintf_r+0x1b0>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	3307      	adds	r3, #7
 800a9c8:	f023 0307 	bic.w	r3, r3, #7
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d2:	4433      	add	r3, r6
 800a9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d6:	e76a      	b.n	800a8ae <_svfiprintf_r+0x52>
 800a9d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9dc:	460c      	mov	r4, r1
 800a9de:	2001      	movs	r0, #1
 800a9e0:	e7a8      	b.n	800a934 <_svfiprintf_r+0xd8>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	3401      	adds	r4, #1
 800a9e6:	9305      	str	r3, [sp, #20]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f04f 0c0a 	mov.w	ip, #10
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9f4:	3a30      	subs	r2, #48	@ 0x30
 800a9f6:	2a09      	cmp	r2, #9
 800a9f8:	d903      	bls.n	800aa02 <_svfiprintf_r+0x1a6>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0c6      	beq.n	800a98c <_svfiprintf_r+0x130>
 800a9fe:	9105      	str	r1, [sp, #20]
 800aa00:	e7c4      	b.n	800a98c <_svfiprintf_r+0x130>
 800aa02:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa06:	4604      	mov	r4, r0
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e7f0      	b.n	800a9ee <_svfiprintf_r+0x192>
 800aa0c:	ab03      	add	r3, sp, #12
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	462a      	mov	r2, r5
 800aa12:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <_svfiprintf_r+0x1f0>)
 800aa14:	a904      	add	r1, sp, #16
 800aa16:	4638      	mov	r0, r7
 800aa18:	f7fc fb96 	bl	8007148 <_printf_float>
 800aa1c:	1c42      	adds	r2, r0, #1
 800aa1e:	4606      	mov	r6, r0
 800aa20:	d1d6      	bne.n	800a9d0 <_svfiprintf_r+0x174>
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	065b      	lsls	r3, r3, #25
 800aa26:	f53f af2d 	bmi.w	800a884 <_svfiprintf_r+0x28>
 800aa2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa2c:	e72c      	b.n	800a888 <_svfiprintf_r+0x2c>
 800aa2e:	ab03      	add	r3, sp, #12
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	462a      	mov	r2, r5
 800aa34:	4b05      	ldr	r3, [pc, #20]	@ (800aa4c <_svfiprintf_r+0x1f0>)
 800aa36:	a904      	add	r1, sp, #16
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7fc fe1d 	bl	8007678 <_printf_i>
 800aa3e:	e7ed      	b.n	800aa1c <_svfiprintf_r+0x1c0>
 800aa40:	0800bca9 	.word	0x0800bca9
 800aa44:	0800bcb3 	.word	0x0800bcb3
 800aa48:	08007149 	.word	0x08007149
 800aa4c:	0800a7a5 	.word	0x0800a7a5
 800aa50:	0800bcaf 	.word	0x0800bcaf

0800aa54 <__sflush_r>:
 800aa54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	0716      	lsls	r6, r2, #28
 800aa5e:	4605      	mov	r5, r0
 800aa60:	460c      	mov	r4, r1
 800aa62:	d454      	bmi.n	800ab0e <__sflush_r+0xba>
 800aa64:	684b      	ldr	r3, [r1, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dc02      	bgt.n	800aa70 <__sflush_r+0x1c>
 800aa6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dd48      	ble.n	800ab02 <__sflush_r+0xae>
 800aa70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa72:	2e00      	cmp	r6, #0
 800aa74:	d045      	beq.n	800ab02 <__sflush_r+0xae>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa7c:	682f      	ldr	r7, [r5, #0]
 800aa7e:	6a21      	ldr	r1, [r4, #32]
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	d030      	beq.n	800aae6 <__sflush_r+0x92>
 800aa84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	0759      	lsls	r1, r3, #29
 800aa8a:	d505      	bpl.n	800aa98 <__sflush_r+0x44>
 800aa8c:	6863      	ldr	r3, [r4, #4]
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa92:	b10b      	cbz	r3, 800aa98 <__sflush_r+0x44>
 800aa94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa9c:	6a21      	ldr	r1, [r4, #32]
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	47b0      	blx	r6
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	d106      	bne.n	800aab6 <__sflush_r+0x62>
 800aaa8:	6829      	ldr	r1, [r5, #0]
 800aaaa:	291d      	cmp	r1, #29
 800aaac:	d82b      	bhi.n	800ab06 <__sflush_r+0xb2>
 800aaae:	4a2a      	ldr	r2, [pc, #168]	@ (800ab58 <__sflush_r+0x104>)
 800aab0:	410a      	asrs	r2, r1
 800aab2:	07d6      	lsls	r6, r2, #31
 800aab4:	d427      	bmi.n	800ab06 <__sflush_r+0xb2>
 800aab6:	2200      	movs	r2, #0
 800aab8:	6062      	str	r2, [r4, #4]
 800aaba:	04d9      	lsls	r1, r3, #19
 800aabc:	6922      	ldr	r2, [r4, #16]
 800aabe:	6022      	str	r2, [r4, #0]
 800aac0:	d504      	bpl.n	800aacc <__sflush_r+0x78>
 800aac2:	1c42      	adds	r2, r0, #1
 800aac4:	d101      	bne.n	800aaca <__sflush_r+0x76>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	b903      	cbnz	r3, 800aacc <__sflush_r+0x78>
 800aaca:	6560      	str	r0, [r4, #84]	@ 0x54
 800aacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aace:	602f      	str	r7, [r5, #0]
 800aad0:	b1b9      	cbz	r1, 800ab02 <__sflush_r+0xae>
 800aad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aad6:	4299      	cmp	r1, r3
 800aad8:	d002      	beq.n	800aae0 <__sflush_r+0x8c>
 800aada:	4628      	mov	r0, r5
 800aadc:	f7fe fa2c 	bl	8008f38 <_free_r>
 800aae0:	2300      	movs	r3, #0
 800aae2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aae4:	e00d      	b.n	800ab02 <__sflush_r+0xae>
 800aae6:	2301      	movs	r3, #1
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b0      	blx	r6
 800aaec:	4602      	mov	r2, r0
 800aaee:	1c50      	adds	r0, r2, #1
 800aaf0:	d1c9      	bne.n	800aa86 <__sflush_r+0x32>
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0c6      	beq.n	800aa86 <__sflush_r+0x32>
 800aaf8:	2b1d      	cmp	r3, #29
 800aafa:	d001      	beq.n	800ab00 <__sflush_r+0xac>
 800aafc:	2b16      	cmp	r3, #22
 800aafe:	d11e      	bne.n	800ab3e <__sflush_r+0xea>
 800ab00:	602f      	str	r7, [r5, #0]
 800ab02:	2000      	movs	r0, #0
 800ab04:	e022      	b.n	800ab4c <__sflush_r+0xf8>
 800ab06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab0a:	b21b      	sxth	r3, r3
 800ab0c:	e01b      	b.n	800ab46 <__sflush_r+0xf2>
 800ab0e:	690f      	ldr	r7, [r1, #16]
 800ab10:	2f00      	cmp	r7, #0
 800ab12:	d0f6      	beq.n	800ab02 <__sflush_r+0xae>
 800ab14:	0793      	lsls	r3, r2, #30
 800ab16:	680e      	ldr	r6, [r1, #0]
 800ab18:	bf08      	it	eq
 800ab1a:	694b      	ldreq	r3, [r1, #20]
 800ab1c:	600f      	str	r7, [r1, #0]
 800ab1e:	bf18      	it	ne
 800ab20:	2300      	movne	r3, #0
 800ab22:	eba6 0807 	sub.w	r8, r6, r7
 800ab26:	608b      	str	r3, [r1, #8]
 800ab28:	f1b8 0f00 	cmp.w	r8, #0
 800ab2c:	dde9      	ble.n	800ab02 <__sflush_r+0xae>
 800ab2e:	6a21      	ldr	r1, [r4, #32]
 800ab30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab32:	4643      	mov	r3, r8
 800ab34:	463a      	mov	r2, r7
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b0      	blx	r6
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	dc08      	bgt.n	800ab50 <__sflush_r+0xfc>
 800ab3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab50:	4407      	add	r7, r0
 800ab52:	eba8 0800 	sub.w	r8, r8, r0
 800ab56:	e7e7      	b.n	800ab28 <__sflush_r+0xd4>
 800ab58:	dfbffffe 	.word	0xdfbffffe

0800ab5c <_fflush_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	690b      	ldr	r3, [r1, #16]
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b913      	cbnz	r3, 800ab6c <_fflush_r+0x10>
 800ab66:	2500      	movs	r5, #0
 800ab68:	4628      	mov	r0, r5
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	b118      	cbz	r0, 800ab76 <_fflush_r+0x1a>
 800ab6e:	6a03      	ldr	r3, [r0, #32]
 800ab70:	b90b      	cbnz	r3, 800ab76 <_fflush_r+0x1a>
 800ab72:	f7fd f941 	bl	8007df8 <__sinit>
 800ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f3      	beq.n	800ab66 <_fflush_r+0xa>
 800ab7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab80:	07d0      	lsls	r0, r2, #31
 800ab82:	d404      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab84:	0599      	lsls	r1, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab8a:	f7fd fb72 	bl	8008272 <__retarget_lock_acquire_recursive>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7ff ff5f 	bl	800aa54 <__sflush_r>
 800ab96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab98:	07da      	lsls	r2, r3, #31
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	d4e4      	bmi.n	800ab68 <_fflush_r+0xc>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d4e1      	bmi.n	800ab68 <_fflush_r+0xc>
 800aba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba6:	f7fd fb65 	bl	8008274 <__retarget_lock_release_recursive>
 800abaa:	e7dd      	b.n	800ab68 <_fflush_r+0xc>

0800abac <__swhatbuf_r>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	460c      	mov	r4, r1
 800abb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb4:	2900      	cmp	r1, #0
 800abb6:	b096      	sub	sp, #88	@ 0x58
 800abb8:	4615      	mov	r5, r2
 800abba:	461e      	mov	r6, r3
 800abbc:	da0d      	bge.n	800abda <__swhatbuf_r+0x2e>
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abc4:	f04f 0100 	mov.w	r1, #0
 800abc8:	bf14      	ite	ne
 800abca:	2340      	movne	r3, #64	@ 0x40
 800abcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abd0:	2000      	movs	r0, #0
 800abd2:	6031      	str	r1, [r6, #0]
 800abd4:	602b      	str	r3, [r5, #0]
 800abd6:	b016      	add	sp, #88	@ 0x58
 800abd8:	bd70      	pop	{r4, r5, r6, pc}
 800abda:	466a      	mov	r2, sp
 800abdc:	f000 f874 	bl	800acc8 <_fstat_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	dbec      	blt.n	800abbe <__swhatbuf_r+0x12>
 800abe4:	9901      	ldr	r1, [sp, #4]
 800abe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abee:	4259      	negs	r1, r3
 800abf0:	4159      	adcs	r1, r3
 800abf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abf6:	e7eb      	b.n	800abd0 <__swhatbuf_r+0x24>

0800abf8 <__smakebuf_r>:
 800abf8:	898b      	ldrh	r3, [r1, #12]
 800abfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abfc:	079d      	lsls	r5, r3, #30
 800abfe:	4606      	mov	r6, r0
 800ac00:	460c      	mov	r4, r1
 800ac02:	d507      	bpl.n	800ac14 <__smakebuf_r+0x1c>
 800ac04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	6123      	str	r3, [r4, #16]
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	6163      	str	r3, [r4, #20]
 800ac10:	b003      	add	sp, #12
 800ac12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac14:	ab01      	add	r3, sp, #4
 800ac16:	466a      	mov	r2, sp
 800ac18:	f7ff ffc8 	bl	800abac <__swhatbuf_r>
 800ac1c:	9f00      	ldr	r7, [sp, #0]
 800ac1e:	4605      	mov	r5, r0
 800ac20:	4639      	mov	r1, r7
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7fe f9fc 	bl	8009020 <_malloc_r>
 800ac28:	b948      	cbnz	r0, 800ac3e <__smakebuf_r+0x46>
 800ac2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac2e:	059a      	lsls	r2, r3, #22
 800ac30:	d4ee      	bmi.n	800ac10 <__smakebuf_r+0x18>
 800ac32:	f023 0303 	bic.w	r3, r3, #3
 800ac36:	f043 0302 	orr.w	r3, r3, #2
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	e7e2      	b.n	800ac04 <__smakebuf_r+0xc>
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	6020      	str	r0, [r4, #0]
 800ac42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac4e:	b15b      	cbz	r3, 800ac68 <__smakebuf_r+0x70>
 800ac50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f849 	bl	800acec <_isatty_r>
 800ac5a:	b128      	cbz	r0, 800ac68 <__smakebuf_r+0x70>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f023 0303 	bic.w	r3, r3, #3
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	431d      	orrs	r5, r3
 800ac6c:	81a5      	strh	r5, [r4, #12]
 800ac6e:	e7cf      	b.n	800ac10 <__smakebuf_r+0x18>

0800ac70 <memmove>:
 800ac70:	4288      	cmp	r0, r1
 800ac72:	b510      	push	{r4, lr}
 800ac74:	eb01 0402 	add.w	r4, r1, r2
 800ac78:	d902      	bls.n	800ac80 <memmove+0x10>
 800ac7a:	4284      	cmp	r4, r0
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	d807      	bhi.n	800ac90 <memmove+0x20>
 800ac80:	1e43      	subs	r3, r0, #1
 800ac82:	42a1      	cmp	r1, r4
 800ac84:	d008      	beq.n	800ac98 <memmove+0x28>
 800ac86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac8e:	e7f8      	b.n	800ac82 <memmove+0x12>
 800ac90:	4402      	add	r2, r0
 800ac92:	4601      	mov	r1, r0
 800ac94:	428a      	cmp	r2, r1
 800ac96:	d100      	bne.n	800ac9a <memmove+0x2a>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aca2:	e7f7      	b.n	800ac94 <memmove+0x24>

0800aca4 <strncmp>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	b16a      	cbz	r2, 800acc4 <strncmp+0x20>
 800aca8:	3901      	subs	r1, #1
 800acaa:	1884      	adds	r4, r0, r2
 800acac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d103      	bne.n	800acc0 <strncmp+0x1c>
 800acb8:	42a0      	cmp	r0, r4
 800acba:	d001      	beq.n	800acc0 <strncmp+0x1c>
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	d1f5      	bne.n	800acac <strncmp+0x8>
 800acc0:	1ad0      	subs	r0, r2, r3
 800acc2:	bd10      	pop	{r4, pc}
 800acc4:	4610      	mov	r0, r2
 800acc6:	e7fc      	b.n	800acc2 <strncmp+0x1e>

0800acc8 <_fstat_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	@ (800ace8 <_fstat_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f6 fb9b 	bl	8001410 <_fstat>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_fstat_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_fstat_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20001688 	.word	0x20001688

0800acec <_isatty_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d06      	ldr	r5, [pc, #24]	@ (800ad08 <_isatty_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7f6 fb9a 	bl	8001430 <_isatty>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_isatty_r+0x1a>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_isatty_r+0x1a>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20001688 	.word	0x20001688

0800ad0c <_sbrk_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	@ (800ad28 <_sbrk_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f6 fba2 	bl	8001460 <_sbrk>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_sbrk_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_sbrk_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	20001688 	.word	0x20001688
 800ad2c:	00000000 	.word	0x00000000

0800ad30 <nan>:
 800ad30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad38 <nan+0x8>
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	00000000 	.word	0x00000000
 800ad3c:	7ff80000 	.word	0x7ff80000

0800ad40 <__assert_func>:
 800ad40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad42:	4614      	mov	r4, r2
 800ad44:	461a      	mov	r2, r3
 800ad46:	4b09      	ldr	r3, [pc, #36]	@ (800ad6c <__assert_func+0x2c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	68d8      	ldr	r0, [r3, #12]
 800ad4e:	b954      	cbnz	r4, 800ad66 <__assert_func+0x26>
 800ad50:	4b07      	ldr	r3, [pc, #28]	@ (800ad70 <__assert_func+0x30>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad58:	9100      	str	r1, [sp, #0]
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	4905      	ldr	r1, [pc, #20]	@ (800ad74 <__assert_func+0x34>)
 800ad5e:	f000 fba7 	bl	800b4b0 <fiprintf>
 800ad62:	f000 fbb7 	bl	800b4d4 <abort>
 800ad66:	4b04      	ldr	r3, [pc, #16]	@ (800ad78 <__assert_func+0x38>)
 800ad68:	e7f4      	b.n	800ad54 <__assert_func+0x14>
 800ad6a:	bf00      	nop
 800ad6c:	2000001c 	.word	0x2000001c
 800ad70:	0800bcfd 	.word	0x0800bcfd
 800ad74:	0800bccf 	.word	0x0800bccf
 800ad78:	0800bcc2 	.word	0x0800bcc2

0800ad7c <_calloc_r>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	fba1 5402 	umull	r5, r4, r1, r2
 800ad82:	b93c      	cbnz	r4, 800ad94 <_calloc_r+0x18>
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7fe f94b 	bl	8009020 <_malloc_r>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	b928      	cbnz	r0, 800ad9a <_calloc_r+0x1e>
 800ad8e:	2600      	movs	r6, #0
 800ad90:	4630      	mov	r0, r6
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	220c      	movs	r2, #12
 800ad96:	6002      	str	r2, [r0, #0]
 800ad98:	e7f9      	b.n	800ad8e <_calloc_r+0x12>
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f7fd f9eb 	bl	8008178 <memset>
 800ada2:	e7f5      	b.n	800ad90 <_calloc_r+0x14>

0800ada4 <rshift>:
 800ada4:	6903      	ldr	r3, [r0, #16]
 800ada6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800adaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800adb2:	f100 0414 	add.w	r4, r0, #20
 800adb6:	dd45      	ble.n	800ae44 <rshift+0xa0>
 800adb8:	f011 011f 	ands.w	r1, r1, #31
 800adbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800adc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800adc4:	d10c      	bne.n	800ade0 <rshift+0x3c>
 800adc6:	f100 0710 	add.w	r7, r0, #16
 800adca:	4629      	mov	r1, r5
 800adcc:	42b1      	cmp	r1, r6
 800adce:	d334      	bcc.n	800ae3a <rshift+0x96>
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	1eea      	subs	r2, r5, #3
 800add6:	4296      	cmp	r6, r2
 800add8:	bf38      	it	cc
 800adda:	2300      	movcc	r3, #0
 800addc:	4423      	add	r3, r4
 800adde:	e015      	b.n	800ae0c <rshift+0x68>
 800ade0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ade4:	f1c1 0820 	rsb	r8, r1, #32
 800ade8:	40cf      	lsrs	r7, r1
 800adea:	f105 0e04 	add.w	lr, r5, #4
 800adee:	46a1      	mov	r9, r4
 800adf0:	4576      	cmp	r6, lr
 800adf2:	46f4      	mov	ip, lr
 800adf4:	d815      	bhi.n	800ae22 <rshift+0x7e>
 800adf6:	1a9a      	subs	r2, r3, r2
 800adf8:	0092      	lsls	r2, r2, #2
 800adfa:	3a04      	subs	r2, #4
 800adfc:	3501      	adds	r5, #1
 800adfe:	42ae      	cmp	r6, r5
 800ae00:	bf38      	it	cc
 800ae02:	2200      	movcc	r2, #0
 800ae04:	18a3      	adds	r3, r4, r2
 800ae06:	50a7      	str	r7, [r4, r2]
 800ae08:	b107      	cbz	r7, 800ae0c <rshift+0x68>
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	1b1a      	subs	r2, r3, r4
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae14:	bf08      	it	eq
 800ae16:	2300      	moveq	r3, #0
 800ae18:	6102      	str	r2, [r0, #16]
 800ae1a:	bf08      	it	eq
 800ae1c:	6143      	streq	r3, [r0, #20]
 800ae1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae22:	f8dc c000 	ldr.w	ip, [ip]
 800ae26:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae2a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae2e:	f849 7b04 	str.w	r7, [r9], #4
 800ae32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae36:	40cf      	lsrs	r7, r1
 800ae38:	e7da      	b.n	800adf0 <rshift+0x4c>
 800ae3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae42:	e7c3      	b.n	800adcc <rshift+0x28>
 800ae44:	4623      	mov	r3, r4
 800ae46:	e7e1      	b.n	800ae0c <rshift+0x68>

0800ae48 <__hexdig_fun>:
 800ae48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	d802      	bhi.n	800ae56 <__hexdig_fun+0xe>
 800ae50:	3820      	subs	r0, #32
 800ae52:	b2c0      	uxtb	r0, r0
 800ae54:	4770      	bx	lr
 800ae56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae5a:	2b05      	cmp	r3, #5
 800ae5c:	d801      	bhi.n	800ae62 <__hexdig_fun+0x1a>
 800ae5e:	3847      	subs	r0, #71	@ 0x47
 800ae60:	e7f7      	b.n	800ae52 <__hexdig_fun+0xa>
 800ae62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	d801      	bhi.n	800ae6e <__hexdig_fun+0x26>
 800ae6a:	3827      	subs	r0, #39	@ 0x27
 800ae6c:	e7f1      	b.n	800ae52 <__hexdig_fun+0xa>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	4770      	bx	lr
	...

0800ae74 <__gethex>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	b085      	sub	sp, #20
 800ae7a:	468a      	mov	sl, r1
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	680b      	ldr	r3, [r1, #0]
 800ae80:	9001      	str	r0, [sp, #4]
 800ae82:	4690      	mov	r8, r2
 800ae84:	1c9c      	adds	r4, r3, #2
 800ae86:	46a1      	mov	r9, r4
 800ae88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae8c:	2830      	cmp	r0, #48	@ 0x30
 800ae8e:	d0fa      	beq.n	800ae86 <__gethex+0x12>
 800ae90:	eba9 0303 	sub.w	r3, r9, r3
 800ae94:	f1a3 0b02 	sub.w	fp, r3, #2
 800ae98:	f7ff ffd6 	bl	800ae48 <__hexdig_fun>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d168      	bne.n	800af74 <__gethex+0x100>
 800aea2:	49a0      	ldr	r1, [pc, #640]	@ (800b124 <__gethex+0x2b0>)
 800aea4:	2201      	movs	r2, #1
 800aea6:	4648      	mov	r0, r9
 800aea8:	f7ff fefc 	bl	800aca4 <strncmp>
 800aeac:	4607      	mov	r7, r0
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d167      	bne.n	800af82 <__gethex+0x10e>
 800aeb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aeb6:	4626      	mov	r6, r4
 800aeb8:	f7ff ffc6 	bl	800ae48 <__hexdig_fun>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d062      	beq.n	800af86 <__gethex+0x112>
 800aec0:	4623      	mov	r3, r4
 800aec2:	7818      	ldrb	r0, [r3, #0]
 800aec4:	2830      	cmp	r0, #48	@ 0x30
 800aec6:	4699      	mov	r9, r3
 800aec8:	f103 0301 	add.w	r3, r3, #1
 800aecc:	d0f9      	beq.n	800aec2 <__gethex+0x4e>
 800aece:	f7ff ffbb 	bl	800ae48 <__hexdig_fun>
 800aed2:	fab0 f580 	clz	r5, r0
 800aed6:	096d      	lsrs	r5, r5, #5
 800aed8:	f04f 0b01 	mov.w	fp, #1
 800aedc:	464a      	mov	r2, r9
 800aede:	4616      	mov	r6, r2
 800aee0:	3201      	adds	r2, #1
 800aee2:	7830      	ldrb	r0, [r6, #0]
 800aee4:	f7ff ffb0 	bl	800ae48 <__hexdig_fun>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d1f8      	bne.n	800aede <__gethex+0x6a>
 800aeec:	498d      	ldr	r1, [pc, #564]	@ (800b124 <__gethex+0x2b0>)
 800aeee:	2201      	movs	r2, #1
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff fed7 	bl	800aca4 <strncmp>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d13f      	bne.n	800af7a <__gethex+0x106>
 800aefa:	b944      	cbnz	r4, 800af0e <__gethex+0x9a>
 800aefc:	1c74      	adds	r4, r6, #1
 800aefe:	4622      	mov	r2, r4
 800af00:	4616      	mov	r6, r2
 800af02:	3201      	adds	r2, #1
 800af04:	7830      	ldrb	r0, [r6, #0]
 800af06:	f7ff ff9f 	bl	800ae48 <__hexdig_fun>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d1f8      	bne.n	800af00 <__gethex+0x8c>
 800af0e:	1ba4      	subs	r4, r4, r6
 800af10:	00a7      	lsls	r7, r4, #2
 800af12:	7833      	ldrb	r3, [r6, #0]
 800af14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af18:	2b50      	cmp	r3, #80	@ 0x50
 800af1a:	d13e      	bne.n	800af9a <__gethex+0x126>
 800af1c:	7873      	ldrb	r3, [r6, #1]
 800af1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af20:	d033      	beq.n	800af8a <__gethex+0x116>
 800af22:	2b2d      	cmp	r3, #45	@ 0x2d
 800af24:	d034      	beq.n	800af90 <__gethex+0x11c>
 800af26:	1c71      	adds	r1, r6, #1
 800af28:	2400      	movs	r4, #0
 800af2a:	7808      	ldrb	r0, [r1, #0]
 800af2c:	f7ff ff8c 	bl	800ae48 <__hexdig_fun>
 800af30:	1e43      	subs	r3, r0, #1
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b18      	cmp	r3, #24
 800af36:	d830      	bhi.n	800af9a <__gethex+0x126>
 800af38:	f1a0 0210 	sub.w	r2, r0, #16
 800af3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af40:	f7ff ff82 	bl	800ae48 <__hexdig_fun>
 800af44:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800af48:	fa5f fc8c 	uxtb.w	ip, ip
 800af4c:	f1bc 0f18 	cmp.w	ip, #24
 800af50:	f04f 030a 	mov.w	r3, #10
 800af54:	d91e      	bls.n	800af94 <__gethex+0x120>
 800af56:	b104      	cbz	r4, 800af5a <__gethex+0xe6>
 800af58:	4252      	negs	r2, r2
 800af5a:	4417      	add	r7, r2
 800af5c:	f8ca 1000 	str.w	r1, [sl]
 800af60:	b1ed      	cbz	r5, 800af9e <__gethex+0x12a>
 800af62:	f1bb 0f00 	cmp.w	fp, #0
 800af66:	bf0c      	ite	eq
 800af68:	2506      	moveq	r5, #6
 800af6a:	2500      	movne	r5, #0
 800af6c:	4628      	mov	r0, r5
 800af6e:	b005      	add	sp, #20
 800af70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af74:	2500      	movs	r5, #0
 800af76:	462c      	mov	r4, r5
 800af78:	e7b0      	b.n	800aedc <__gethex+0x68>
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	d1c7      	bne.n	800af0e <__gethex+0x9a>
 800af7e:	4627      	mov	r7, r4
 800af80:	e7c7      	b.n	800af12 <__gethex+0x9e>
 800af82:	464e      	mov	r6, r9
 800af84:	462f      	mov	r7, r5
 800af86:	2501      	movs	r5, #1
 800af88:	e7c3      	b.n	800af12 <__gethex+0x9e>
 800af8a:	2400      	movs	r4, #0
 800af8c:	1cb1      	adds	r1, r6, #2
 800af8e:	e7cc      	b.n	800af2a <__gethex+0xb6>
 800af90:	2401      	movs	r4, #1
 800af92:	e7fb      	b.n	800af8c <__gethex+0x118>
 800af94:	fb03 0002 	mla	r0, r3, r2, r0
 800af98:	e7ce      	b.n	800af38 <__gethex+0xc4>
 800af9a:	4631      	mov	r1, r6
 800af9c:	e7de      	b.n	800af5c <__gethex+0xe8>
 800af9e:	eba6 0309 	sub.w	r3, r6, r9
 800afa2:	3b01      	subs	r3, #1
 800afa4:	4629      	mov	r1, r5
 800afa6:	2b07      	cmp	r3, #7
 800afa8:	dc0a      	bgt.n	800afc0 <__gethex+0x14c>
 800afaa:	9801      	ldr	r0, [sp, #4]
 800afac:	f7fe f8c4 	bl	8009138 <_Balloc>
 800afb0:	4604      	mov	r4, r0
 800afb2:	b940      	cbnz	r0, 800afc6 <__gethex+0x152>
 800afb4:	4b5c      	ldr	r3, [pc, #368]	@ (800b128 <__gethex+0x2b4>)
 800afb6:	4602      	mov	r2, r0
 800afb8:	21e4      	movs	r1, #228	@ 0xe4
 800afba:	485c      	ldr	r0, [pc, #368]	@ (800b12c <__gethex+0x2b8>)
 800afbc:	f7ff fec0 	bl	800ad40 <__assert_func>
 800afc0:	3101      	adds	r1, #1
 800afc2:	105b      	asrs	r3, r3, #1
 800afc4:	e7ef      	b.n	800afa6 <__gethex+0x132>
 800afc6:	f100 0a14 	add.w	sl, r0, #20
 800afca:	2300      	movs	r3, #0
 800afcc:	4655      	mov	r5, sl
 800afce:	469b      	mov	fp, r3
 800afd0:	45b1      	cmp	r9, r6
 800afd2:	d337      	bcc.n	800b044 <__gethex+0x1d0>
 800afd4:	f845 bb04 	str.w	fp, [r5], #4
 800afd8:	eba5 050a 	sub.w	r5, r5, sl
 800afdc:	10ad      	asrs	r5, r5, #2
 800afde:	6125      	str	r5, [r4, #16]
 800afe0:	4658      	mov	r0, fp
 800afe2:	f7fe f99b 	bl	800931c <__hi0bits>
 800afe6:	016d      	lsls	r5, r5, #5
 800afe8:	f8d8 6000 	ldr.w	r6, [r8]
 800afec:	1a2d      	subs	r5, r5, r0
 800afee:	42b5      	cmp	r5, r6
 800aff0:	dd54      	ble.n	800b09c <__gethex+0x228>
 800aff2:	1bad      	subs	r5, r5, r6
 800aff4:	4629      	mov	r1, r5
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7fe fd2f 	bl	8009a5a <__any_on>
 800affc:	4681      	mov	r9, r0
 800affe:	b178      	cbz	r0, 800b020 <__gethex+0x1ac>
 800b000:	1e6b      	subs	r3, r5, #1
 800b002:	1159      	asrs	r1, r3, #5
 800b004:	f003 021f 	and.w	r2, r3, #31
 800b008:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b00c:	f04f 0901 	mov.w	r9, #1
 800b010:	fa09 f202 	lsl.w	r2, r9, r2
 800b014:	420a      	tst	r2, r1
 800b016:	d003      	beq.n	800b020 <__gethex+0x1ac>
 800b018:	454b      	cmp	r3, r9
 800b01a:	dc36      	bgt.n	800b08a <__gethex+0x216>
 800b01c:	f04f 0902 	mov.w	r9, #2
 800b020:	4629      	mov	r1, r5
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff febe 	bl	800ada4 <rshift>
 800b028:	442f      	add	r7, r5
 800b02a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b02e:	42bb      	cmp	r3, r7
 800b030:	da42      	bge.n	800b0b8 <__gethex+0x244>
 800b032:	9801      	ldr	r0, [sp, #4]
 800b034:	4621      	mov	r1, r4
 800b036:	f7fe f8bf 	bl	80091b8 <_Bfree>
 800b03a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b03c:	2300      	movs	r3, #0
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	25a3      	movs	r5, #163	@ 0xa3
 800b042:	e793      	b.n	800af6c <__gethex+0xf8>
 800b044:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b048:	2a2e      	cmp	r2, #46	@ 0x2e
 800b04a:	d012      	beq.n	800b072 <__gethex+0x1fe>
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d104      	bne.n	800b05a <__gethex+0x1e6>
 800b050:	f845 bb04 	str.w	fp, [r5], #4
 800b054:	f04f 0b00 	mov.w	fp, #0
 800b058:	465b      	mov	r3, fp
 800b05a:	7830      	ldrb	r0, [r6, #0]
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	f7ff fef3 	bl	800ae48 <__hexdig_fun>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	f000 000f 	and.w	r0, r0, #15
 800b068:	4098      	lsls	r0, r3
 800b06a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b06e:	3304      	adds	r3, #4
 800b070:	e7ae      	b.n	800afd0 <__gethex+0x15c>
 800b072:	45b1      	cmp	r9, r6
 800b074:	d8ea      	bhi.n	800b04c <__gethex+0x1d8>
 800b076:	492b      	ldr	r1, [pc, #172]	@ (800b124 <__gethex+0x2b0>)
 800b078:	9303      	str	r3, [sp, #12]
 800b07a:	2201      	movs	r2, #1
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff fe11 	bl	800aca4 <strncmp>
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	2800      	cmp	r0, #0
 800b086:	d1e1      	bne.n	800b04c <__gethex+0x1d8>
 800b088:	e7a2      	b.n	800afd0 <__gethex+0x15c>
 800b08a:	1ea9      	subs	r1, r5, #2
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7fe fce4 	bl	8009a5a <__any_on>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0c2      	beq.n	800b01c <__gethex+0x1a8>
 800b096:	f04f 0903 	mov.w	r9, #3
 800b09a:	e7c1      	b.n	800b020 <__gethex+0x1ac>
 800b09c:	da09      	bge.n	800b0b2 <__gethex+0x23e>
 800b09e:	1b75      	subs	r5, r6, r5
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	f7fe fa9f 	bl	80095e8 <__lshift>
 800b0aa:	1b7f      	subs	r7, r7, r5
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	f100 0a14 	add.w	sl, r0, #20
 800b0b2:	f04f 0900 	mov.w	r9, #0
 800b0b6:	e7b8      	b.n	800b02a <__gethex+0x1b6>
 800b0b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0bc:	42bd      	cmp	r5, r7
 800b0be:	dd6f      	ble.n	800b1a0 <__gethex+0x32c>
 800b0c0:	1bed      	subs	r5, r5, r7
 800b0c2:	42ae      	cmp	r6, r5
 800b0c4:	dc34      	bgt.n	800b130 <__gethex+0x2bc>
 800b0c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d022      	beq.n	800b114 <__gethex+0x2a0>
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d024      	beq.n	800b11c <__gethex+0x2a8>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d115      	bne.n	800b102 <__gethex+0x28e>
 800b0d6:	42ae      	cmp	r6, r5
 800b0d8:	d113      	bne.n	800b102 <__gethex+0x28e>
 800b0da:	2e01      	cmp	r6, #1
 800b0dc:	d10b      	bne.n	800b0f6 <__gethex+0x282>
 800b0de:	9a02      	ldr	r2, [sp, #8]
 800b0e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	f8ca 3000 	str.w	r3, [sl]
 800b0ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f0:	2562      	movs	r5, #98	@ 0x62
 800b0f2:	601c      	str	r4, [r3, #0]
 800b0f4:	e73a      	b.n	800af6c <__gethex+0xf8>
 800b0f6:	1e71      	subs	r1, r6, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7fe fcae 	bl	8009a5a <__any_on>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d1ed      	bne.n	800b0de <__gethex+0x26a>
 800b102:	9801      	ldr	r0, [sp, #4]
 800b104:	4621      	mov	r1, r4
 800b106:	f7fe f857 	bl	80091b8 <_Bfree>
 800b10a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b10c:	2300      	movs	r3, #0
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	2550      	movs	r5, #80	@ 0x50
 800b112:	e72b      	b.n	800af6c <__gethex+0xf8>
 800b114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f3      	bne.n	800b102 <__gethex+0x28e>
 800b11a:	e7e0      	b.n	800b0de <__gethex+0x26a>
 800b11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1dd      	bne.n	800b0de <__gethex+0x26a>
 800b122:	e7ee      	b.n	800b102 <__gethex+0x28e>
 800b124:	0800bb50 	.word	0x0800bb50
 800b128:	0800b9e8 	.word	0x0800b9e8
 800b12c:	0800bcfe 	.word	0x0800bcfe
 800b130:	1e6f      	subs	r7, r5, #1
 800b132:	f1b9 0f00 	cmp.w	r9, #0
 800b136:	d130      	bne.n	800b19a <__gethex+0x326>
 800b138:	b127      	cbz	r7, 800b144 <__gethex+0x2d0>
 800b13a:	4639      	mov	r1, r7
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7fe fc8c 	bl	8009a5a <__any_on>
 800b142:	4681      	mov	r9, r0
 800b144:	117a      	asrs	r2, r7, #5
 800b146:	2301      	movs	r3, #1
 800b148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b14c:	f007 071f 	and.w	r7, r7, #31
 800b150:	40bb      	lsls	r3, r7
 800b152:	4213      	tst	r3, r2
 800b154:	4629      	mov	r1, r5
 800b156:	4620      	mov	r0, r4
 800b158:	bf18      	it	ne
 800b15a:	f049 0902 	orrne.w	r9, r9, #2
 800b15e:	f7ff fe21 	bl	800ada4 <rshift>
 800b162:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b166:	1b76      	subs	r6, r6, r5
 800b168:	2502      	movs	r5, #2
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	d047      	beq.n	800b200 <__gethex+0x38c>
 800b170:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b174:	2b02      	cmp	r3, #2
 800b176:	d015      	beq.n	800b1a4 <__gethex+0x330>
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d017      	beq.n	800b1ac <__gethex+0x338>
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d109      	bne.n	800b194 <__gethex+0x320>
 800b180:	f019 0f02 	tst.w	r9, #2
 800b184:	d006      	beq.n	800b194 <__gethex+0x320>
 800b186:	f8da 3000 	ldr.w	r3, [sl]
 800b18a:	ea49 0903 	orr.w	r9, r9, r3
 800b18e:	f019 0f01 	tst.w	r9, #1
 800b192:	d10e      	bne.n	800b1b2 <__gethex+0x33e>
 800b194:	f045 0510 	orr.w	r5, r5, #16
 800b198:	e032      	b.n	800b200 <__gethex+0x38c>
 800b19a:	f04f 0901 	mov.w	r9, #1
 800b19e:	e7d1      	b.n	800b144 <__gethex+0x2d0>
 800b1a0:	2501      	movs	r5, #1
 800b1a2:	e7e2      	b.n	800b16a <__gethex+0x2f6>
 800b1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a6:	f1c3 0301 	rsb	r3, r3, #1
 800b1aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0f0      	beq.n	800b194 <__gethex+0x320>
 800b1b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1b6:	f104 0314 	add.w	r3, r4, #20
 800b1ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1c2:	f04f 0c00 	mov.w	ip, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1cc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b1d0:	d01b      	beq.n	800b20a <__gethex+0x396>
 800b1d2:	3201      	adds	r2, #1
 800b1d4:	6002      	str	r2, [r0, #0]
 800b1d6:	2d02      	cmp	r5, #2
 800b1d8:	f104 0314 	add.w	r3, r4, #20
 800b1dc:	d13c      	bne.n	800b258 <__gethex+0x3e4>
 800b1de:	f8d8 2000 	ldr.w	r2, [r8]
 800b1e2:	3a01      	subs	r2, #1
 800b1e4:	42b2      	cmp	r2, r6
 800b1e6:	d109      	bne.n	800b1fc <__gethex+0x388>
 800b1e8:	1171      	asrs	r1, r6, #5
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1f0:	f006 061f 	and.w	r6, r6, #31
 800b1f4:	fa02 f606 	lsl.w	r6, r2, r6
 800b1f8:	421e      	tst	r6, r3
 800b1fa:	d13a      	bne.n	800b272 <__gethex+0x3fe>
 800b1fc:	f045 0520 	orr.w	r5, r5, #32
 800b200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b202:	601c      	str	r4, [r3, #0]
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	601f      	str	r7, [r3, #0]
 800b208:	e6b0      	b.n	800af6c <__gethex+0xf8>
 800b20a:	4299      	cmp	r1, r3
 800b20c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b210:	d8d9      	bhi.n	800b1c6 <__gethex+0x352>
 800b212:	68a3      	ldr	r3, [r4, #8]
 800b214:	459b      	cmp	fp, r3
 800b216:	db17      	blt.n	800b248 <__gethex+0x3d4>
 800b218:	6861      	ldr	r1, [r4, #4]
 800b21a:	9801      	ldr	r0, [sp, #4]
 800b21c:	3101      	adds	r1, #1
 800b21e:	f7fd ff8b 	bl	8009138 <_Balloc>
 800b222:	4681      	mov	r9, r0
 800b224:	b918      	cbnz	r0, 800b22e <__gethex+0x3ba>
 800b226:	4b1a      	ldr	r3, [pc, #104]	@ (800b290 <__gethex+0x41c>)
 800b228:	4602      	mov	r2, r0
 800b22a:	2184      	movs	r1, #132	@ 0x84
 800b22c:	e6c5      	b.n	800afba <__gethex+0x146>
 800b22e:	6922      	ldr	r2, [r4, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	f104 010c 	add.w	r1, r4, #12
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	300c      	adds	r0, #12
 800b23a:	f7fd f81c 	bl	8008276 <memcpy>
 800b23e:	4621      	mov	r1, r4
 800b240:	9801      	ldr	r0, [sp, #4]
 800b242:	f7fd ffb9 	bl	80091b8 <_Bfree>
 800b246:	464c      	mov	r4, r9
 800b248:	6923      	ldr	r3, [r4, #16]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b250:	6122      	str	r2, [r4, #16]
 800b252:	2201      	movs	r2, #1
 800b254:	615a      	str	r2, [r3, #20]
 800b256:	e7be      	b.n	800b1d6 <__gethex+0x362>
 800b258:	6922      	ldr	r2, [r4, #16]
 800b25a:	455a      	cmp	r2, fp
 800b25c:	dd0b      	ble.n	800b276 <__gethex+0x402>
 800b25e:	2101      	movs	r1, #1
 800b260:	4620      	mov	r0, r4
 800b262:	f7ff fd9f 	bl	800ada4 <rshift>
 800b266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b26a:	3701      	adds	r7, #1
 800b26c:	42bb      	cmp	r3, r7
 800b26e:	f6ff aee0 	blt.w	800b032 <__gethex+0x1be>
 800b272:	2501      	movs	r5, #1
 800b274:	e7c2      	b.n	800b1fc <__gethex+0x388>
 800b276:	f016 061f 	ands.w	r6, r6, #31
 800b27a:	d0fa      	beq.n	800b272 <__gethex+0x3fe>
 800b27c:	4453      	add	r3, sl
 800b27e:	f1c6 0620 	rsb	r6, r6, #32
 800b282:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b286:	f7fe f849 	bl	800931c <__hi0bits>
 800b28a:	42b0      	cmp	r0, r6
 800b28c:	dbe7      	blt.n	800b25e <__gethex+0x3ea>
 800b28e:	e7f0      	b.n	800b272 <__gethex+0x3fe>
 800b290:	0800b9e8 	.word	0x0800b9e8

0800b294 <L_shift>:
 800b294:	f1c2 0208 	rsb	r2, r2, #8
 800b298:	0092      	lsls	r2, r2, #2
 800b29a:	b570      	push	{r4, r5, r6, lr}
 800b29c:	f1c2 0620 	rsb	r6, r2, #32
 800b2a0:	6843      	ldr	r3, [r0, #4]
 800b2a2:	6804      	ldr	r4, [r0, #0]
 800b2a4:	fa03 f506 	lsl.w	r5, r3, r6
 800b2a8:	432c      	orrs	r4, r5
 800b2aa:	40d3      	lsrs	r3, r2
 800b2ac:	6004      	str	r4, [r0, #0]
 800b2ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2b2:	4288      	cmp	r0, r1
 800b2b4:	d3f4      	bcc.n	800b2a0 <L_shift+0xc>
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}

0800b2b8 <__match>:
 800b2b8:	b530      	push	{r4, r5, lr}
 800b2ba:	6803      	ldr	r3, [r0, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2c2:	b914      	cbnz	r4, 800b2ca <__match+0x12>
 800b2c4:	6003      	str	r3, [r0, #0]
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	bd30      	pop	{r4, r5, pc}
 800b2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b2d2:	2d19      	cmp	r5, #25
 800b2d4:	bf98      	it	ls
 800b2d6:	3220      	addls	r2, #32
 800b2d8:	42a2      	cmp	r2, r4
 800b2da:	d0f0      	beq.n	800b2be <__match+0x6>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	e7f3      	b.n	800b2c8 <__match+0x10>

0800b2e0 <__hexnan>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	680b      	ldr	r3, [r1, #0]
 800b2e6:	6801      	ldr	r1, [r0, #0]
 800b2e8:	115e      	asrs	r6, r3, #5
 800b2ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2ee:	f013 031f 	ands.w	r3, r3, #31
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	bf18      	it	ne
 800b2f6:	3604      	addne	r6, #4
 800b2f8:	2500      	movs	r5, #0
 800b2fa:	1f37      	subs	r7, r6, #4
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	4690      	mov	r8, r2
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	f846 5c04 	str.w	r5, [r6, #-4]
 800b306:	46b9      	mov	r9, r7
 800b308:	463c      	mov	r4, r7
 800b30a:	9502      	str	r5, [sp, #8]
 800b30c:	46ab      	mov	fp, r5
 800b30e:	784a      	ldrb	r2, [r1, #1]
 800b310:	1c4b      	adds	r3, r1, #1
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	b342      	cbz	r2, 800b368 <__hexnan+0x88>
 800b316:	4610      	mov	r0, r2
 800b318:	9105      	str	r1, [sp, #20]
 800b31a:	9204      	str	r2, [sp, #16]
 800b31c:	f7ff fd94 	bl	800ae48 <__hexdig_fun>
 800b320:	2800      	cmp	r0, #0
 800b322:	d151      	bne.n	800b3c8 <__hexnan+0xe8>
 800b324:	9a04      	ldr	r2, [sp, #16]
 800b326:	9905      	ldr	r1, [sp, #20]
 800b328:	2a20      	cmp	r2, #32
 800b32a:	d818      	bhi.n	800b35e <__hexnan+0x7e>
 800b32c:	9b02      	ldr	r3, [sp, #8]
 800b32e:	459b      	cmp	fp, r3
 800b330:	dd13      	ble.n	800b35a <__hexnan+0x7a>
 800b332:	454c      	cmp	r4, r9
 800b334:	d206      	bcs.n	800b344 <__hexnan+0x64>
 800b336:	2d07      	cmp	r5, #7
 800b338:	dc04      	bgt.n	800b344 <__hexnan+0x64>
 800b33a:	462a      	mov	r2, r5
 800b33c:	4649      	mov	r1, r9
 800b33e:	4620      	mov	r0, r4
 800b340:	f7ff ffa8 	bl	800b294 <L_shift>
 800b344:	4544      	cmp	r4, r8
 800b346:	d952      	bls.n	800b3ee <__hexnan+0x10e>
 800b348:	2300      	movs	r3, #0
 800b34a:	f1a4 0904 	sub.w	r9, r4, #4
 800b34e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b352:	f8cd b008 	str.w	fp, [sp, #8]
 800b356:	464c      	mov	r4, r9
 800b358:	461d      	mov	r5, r3
 800b35a:	9903      	ldr	r1, [sp, #12]
 800b35c:	e7d7      	b.n	800b30e <__hexnan+0x2e>
 800b35e:	2a29      	cmp	r2, #41	@ 0x29
 800b360:	d157      	bne.n	800b412 <__hexnan+0x132>
 800b362:	3102      	adds	r1, #2
 800b364:	f8ca 1000 	str.w	r1, [sl]
 800b368:	f1bb 0f00 	cmp.w	fp, #0
 800b36c:	d051      	beq.n	800b412 <__hexnan+0x132>
 800b36e:	454c      	cmp	r4, r9
 800b370:	d206      	bcs.n	800b380 <__hexnan+0xa0>
 800b372:	2d07      	cmp	r5, #7
 800b374:	dc04      	bgt.n	800b380 <__hexnan+0xa0>
 800b376:	462a      	mov	r2, r5
 800b378:	4649      	mov	r1, r9
 800b37a:	4620      	mov	r0, r4
 800b37c:	f7ff ff8a 	bl	800b294 <L_shift>
 800b380:	4544      	cmp	r4, r8
 800b382:	d936      	bls.n	800b3f2 <__hexnan+0x112>
 800b384:	f1a8 0204 	sub.w	r2, r8, #4
 800b388:	4623      	mov	r3, r4
 800b38a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b38e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b392:	429f      	cmp	r7, r3
 800b394:	d2f9      	bcs.n	800b38a <__hexnan+0xaa>
 800b396:	1b3b      	subs	r3, r7, r4
 800b398:	f023 0303 	bic.w	r3, r3, #3
 800b39c:	3304      	adds	r3, #4
 800b39e:	3401      	adds	r4, #1
 800b3a0:	3e03      	subs	r6, #3
 800b3a2:	42b4      	cmp	r4, r6
 800b3a4:	bf88      	it	hi
 800b3a6:	2304      	movhi	r3, #4
 800b3a8:	4443      	add	r3, r8
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f843 2b04 	str.w	r2, [r3], #4
 800b3b0:	429f      	cmp	r7, r3
 800b3b2:	d2fb      	bcs.n	800b3ac <__hexnan+0xcc>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	b91b      	cbnz	r3, 800b3c0 <__hexnan+0xe0>
 800b3b8:	4547      	cmp	r7, r8
 800b3ba:	d128      	bne.n	800b40e <__hexnan+0x12e>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	603b      	str	r3, [r7, #0]
 800b3c0:	2005      	movs	r0, #5
 800b3c2:	b007      	add	sp, #28
 800b3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	2d08      	cmp	r5, #8
 800b3cc:	f10b 0b01 	add.w	fp, fp, #1
 800b3d0:	dd06      	ble.n	800b3e0 <__hexnan+0x100>
 800b3d2:	4544      	cmp	r4, r8
 800b3d4:	d9c1      	bls.n	800b35a <__hexnan+0x7a>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3dc:	2501      	movs	r5, #1
 800b3de:	3c04      	subs	r4, #4
 800b3e0:	6822      	ldr	r2, [r4, #0]
 800b3e2:	f000 000f 	and.w	r0, r0, #15
 800b3e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	e7b5      	b.n	800b35a <__hexnan+0x7a>
 800b3ee:	2508      	movs	r5, #8
 800b3f0:	e7b3      	b.n	800b35a <__hexnan+0x7a>
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d0dd      	beq.n	800b3b4 <__hexnan+0xd4>
 800b3f8:	f1c3 0320 	rsb	r3, r3, #32
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b400:	40da      	lsrs	r2, r3
 800b402:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b406:	4013      	ands	r3, r2
 800b408:	f846 3c04 	str.w	r3, [r6, #-4]
 800b40c:	e7d2      	b.n	800b3b4 <__hexnan+0xd4>
 800b40e:	3f04      	subs	r7, #4
 800b410:	e7d0      	b.n	800b3b4 <__hexnan+0xd4>
 800b412:	2004      	movs	r0, #4
 800b414:	e7d5      	b.n	800b3c2 <__hexnan+0xe2>

0800b416 <__ascii_mbtowc>:
 800b416:	b082      	sub	sp, #8
 800b418:	b901      	cbnz	r1, 800b41c <__ascii_mbtowc+0x6>
 800b41a:	a901      	add	r1, sp, #4
 800b41c:	b142      	cbz	r2, 800b430 <__ascii_mbtowc+0x1a>
 800b41e:	b14b      	cbz	r3, 800b434 <__ascii_mbtowc+0x1e>
 800b420:	7813      	ldrb	r3, [r2, #0]
 800b422:	600b      	str	r3, [r1, #0]
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	1e10      	subs	r0, r2, #0
 800b428:	bf18      	it	ne
 800b42a:	2001      	movne	r0, #1
 800b42c:	b002      	add	sp, #8
 800b42e:	4770      	bx	lr
 800b430:	4610      	mov	r0, r2
 800b432:	e7fb      	b.n	800b42c <__ascii_mbtowc+0x16>
 800b434:	f06f 0001 	mvn.w	r0, #1
 800b438:	e7f8      	b.n	800b42c <__ascii_mbtowc+0x16>

0800b43a <_realloc_r>:
 800b43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	4680      	mov	r8, r0
 800b440:	4615      	mov	r5, r2
 800b442:	460c      	mov	r4, r1
 800b444:	b921      	cbnz	r1, 800b450 <_realloc_r+0x16>
 800b446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b44a:	4611      	mov	r1, r2
 800b44c:	f7fd bde8 	b.w	8009020 <_malloc_r>
 800b450:	b92a      	cbnz	r2, 800b45e <_realloc_r+0x24>
 800b452:	f7fd fd71 	bl	8008f38 <_free_r>
 800b456:	2400      	movs	r4, #0
 800b458:	4620      	mov	r0, r4
 800b45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45e:	f000 f840 	bl	800b4e2 <_malloc_usable_size_r>
 800b462:	4285      	cmp	r5, r0
 800b464:	4606      	mov	r6, r0
 800b466:	d802      	bhi.n	800b46e <_realloc_r+0x34>
 800b468:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b46c:	d8f4      	bhi.n	800b458 <_realloc_r+0x1e>
 800b46e:	4629      	mov	r1, r5
 800b470:	4640      	mov	r0, r8
 800b472:	f7fd fdd5 	bl	8009020 <_malloc_r>
 800b476:	4607      	mov	r7, r0
 800b478:	2800      	cmp	r0, #0
 800b47a:	d0ec      	beq.n	800b456 <_realloc_r+0x1c>
 800b47c:	42b5      	cmp	r5, r6
 800b47e:	462a      	mov	r2, r5
 800b480:	4621      	mov	r1, r4
 800b482:	bf28      	it	cs
 800b484:	4632      	movcs	r2, r6
 800b486:	f7fc fef6 	bl	8008276 <memcpy>
 800b48a:	4621      	mov	r1, r4
 800b48c:	4640      	mov	r0, r8
 800b48e:	f7fd fd53 	bl	8008f38 <_free_r>
 800b492:	463c      	mov	r4, r7
 800b494:	e7e0      	b.n	800b458 <_realloc_r+0x1e>

0800b496 <__ascii_wctomb>:
 800b496:	4603      	mov	r3, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	b141      	cbz	r1, 800b4ae <__ascii_wctomb+0x18>
 800b49c:	2aff      	cmp	r2, #255	@ 0xff
 800b49e:	d904      	bls.n	800b4aa <__ascii_wctomb+0x14>
 800b4a0:	228a      	movs	r2, #138	@ 0x8a
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4a8:	4770      	bx	lr
 800b4aa:	700a      	strb	r2, [r1, #0]
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	4770      	bx	lr

0800b4b0 <fiprintf>:
 800b4b0:	b40e      	push	{r1, r2, r3}
 800b4b2:	b503      	push	{r0, r1, lr}
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	ab03      	add	r3, sp, #12
 800b4b8:	4805      	ldr	r0, [pc, #20]	@ (800b4d0 <fiprintf+0x20>)
 800b4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	f000 f83f 	bl	800b544 <_vfiprintf_r>
 800b4c6:	b002      	add	sp, #8
 800b4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4cc:	b003      	add	sp, #12
 800b4ce:	4770      	bx	lr
 800b4d0:	2000001c 	.word	0x2000001c

0800b4d4 <abort>:
 800b4d4:	b508      	push	{r3, lr}
 800b4d6:	2006      	movs	r0, #6
 800b4d8:	f000 f974 	bl	800b7c4 <raise>
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f7f5 ff47 	bl	8001370 <_exit>

0800b4e2 <_malloc_usable_size_r>:
 800b4e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4e6:	1f18      	subs	r0, r3, #4
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	bfbc      	itt	lt
 800b4ec:	580b      	ldrlt	r3, [r1, r0]
 800b4ee:	18c0      	addlt	r0, r0, r3
 800b4f0:	4770      	bx	lr

0800b4f2 <__sfputc_r>:
 800b4f2:	6893      	ldr	r3, [r2, #8]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	b410      	push	{r4}
 800b4fa:	6093      	str	r3, [r2, #8]
 800b4fc:	da08      	bge.n	800b510 <__sfputc_r+0x1e>
 800b4fe:	6994      	ldr	r4, [r2, #24]
 800b500:	42a3      	cmp	r3, r4
 800b502:	db01      	blt.n	800b508 <__sfputc_r+0x16>
 800b504:	290a      	cmp	r1, #10
 800b506:	d103      	bne.n	800b510 <__sfputc_r+0x1e>
 800b508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b50c:	f7fc bd9f 	b.w	800804e <__swbuf_r>
 800b510:	6813      	ldr	r3, [r2, #0]
 800b512:	1c58      	adds	r0, r3, #1
 800b514:	6010      	str	r0, [r2, #0]
 800b516:	7019      	strb	r1, [r3, #0]
 800b518:	4608      	mov	r0, r1
 800b51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <__sfputs_r>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	4614      	mov	r4, r2
 800b528:	18d5      	adds	r5, r2, r3
 800b52a:	42ac      	cmp	r4, r5
 800b52c:	d101      	bne.n	800b532 <__sfputs_r+0x12>
 800b52e:	2000      	movs	r0, #0
 800b530:	e007      	b.n	800b542 <__sfputs_r+0x22>
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	463a      	mov	r2, r7
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff ffda 	bl	800b4f2 <__sfputc_r>
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	d1f3      	bne.n	800b52a <__sfputs_r+0xa>
 800b542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b544 <_vfiprintf_r>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	460d      	mov	r5, r1
 800b54a:	b09d      	sub	sp, #116	@ 0x74
 800b54c:	4614      	mov	r4, r2
 800b54e:	4698      	mov	r8, r3
 800b550:	4606      	mov	r6, r0
 800b552:	b118      	cbz	r0, 800b55c <_vfiprintf_r+0x18>
 800b554:	6a03      	ldr	r3, [r0, #32]
 800b556:	b90b      	cbnz	r3, 800b55c <_vfiprintf_r+0x18>
 800b558:	f7fc fc4e 	bl	8007df8 <__sinit>
 800b55c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b55e:	07d9      	lsls	r1, r3, #31
 800b560:	d405      	bmi.n	800b56e <_vfiprintf_r+0x2a>
 800b562:	89ab      	ldrh	r3, [r5, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d402      	bmi.n	800b56e <_vfiprintf_r+0x2a>
 800b568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b56a:	f7fc fe82 	bl	8008272 <__retarget_lock_acquire_recursive>
 800b56e:	89ab      	ldrh	r3, [r5, #12]
 800b570:	071b      	lsls	r3, r3, #28
 800b572:	d501      	bpl.n	800b578 <_vfiprintf_r+0x34>
 800b574:	692b      	ldr	r3, [r5, #16]
 800b576:	b99b      	cbnz	r3, 800b5a0 <_vfiprintf_r+0x5c>
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7fc fda6 	bl	80080cc <__swsetup_r>
 800b580:	b170      	cbz	r0, 800b5a0 <_vfiprintf_r+0x5c>
 800b582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b584:	07dc      	lsls	r4, r3, #31
 800b586:	d504      	bpl.n	800b592 <_vfiprintf_r+0x4e>
 800b588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b58c:	b01d      	add	sp, #116	@ 0x74
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b592:	89ab      	ldrh	r3, [r5, #12]
 800b594:	0598      	lsls	r0, r3, #22
 800b596:	d4f7      	bmi.n	800b588 <_vfiprintf_r+0x44>
 800b598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b59a:	f7fc fe6b 	bl	8008274 <__retarget_lock_release_recursive>
 800b59e:	e7f3      	b.n	800b588 <_vfiprintf_r+0x44>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5a4:	2320      	movs	r3, #32
 800b5a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5ae:	2330      	movs	r3, #48	@ 0x30
 800b5b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b760 <_vfiprintf_r+0x21c>
 800b5b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5b8:	f04f 0901 	mov.w	r9, #1
 800b5bc:	4623      	mov	r3, r4
 800b5be:	469a      	mov	sl, r3
 800b5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5c4:	b10a      	cbz	r2, 800b5ca <_vfiprintf_r+0x86>
 800b5c6:	2a25      	cmp	r2, #37	@ 0x25
 800b5c8:	d1f9      	bne.n	800b5be <_vfiprintf_r+0x7a>
 800b5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ce:	d00b      	beq.n	800b5e8 <_vfiprintf_r+0xa4>
 800b5d0:	465b      	mov	r3, fp
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7ff ffa2 	bl	800b520 <__sfputs_r>
 800b5dc:	3001      	adds	r0, #1
 800b5de:	f000 80a7 	beq.w	800b730 <_vfiprintf_r+0x1ec>
 800b5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5e4:	445a      	add	r2, fp
 800b5e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 809f 	beq.w	800b730 <_vfiprintf_r+0x1ec>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5fc:	f10a 0a01 	add.w	sl, sl, #1
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	9307      	str	r3, [sp, #28]
 800b604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b608:	931a      	str	r3, [sp, #104]	@ 0x68
 800b60a:	4654      	mov	r4, sl
 800b60c:	2205      	movs	r2, #5
 800b60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b612:	4853      	ldr	r0, [pc, #332]	@ (800b760 <_vfiprintf_r+0x21c>)
 800b614:	f7f4 fddc 	bl	80001d0 <memchr>
 800b618:	9a04      	ldr	r2, [sp, #16]
 800b61a:	b9d8      	cbnz	r0, 800b654 <_vfiprintf_r+0x110>
 800b61c:	06d1      	lsls	r1, r2, #27
 800b61e:	bf44      	itt	mi
 800b620:	2320      	movmi	r3, #32
 800b622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b626:	0713      	lsls	r3, r2, #28
 800b628:	bf44      	itt	mi
 800b62a:	232b      	movmi	r3, #43	@ 0x2b
 800b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b630:	f89a 3000 	ldrb.w	r3, [sl]
 800b634:	2b2a      	cmp	r3, #42	@ 0x2a
 800b636:	d015      	beq.n	800b664 <_vfiprintf_r+0x120>
 800b638:	9a07      	ldr	r2, [sp, #28]
 800b63a:	4654      	mov	r4, sl
 800b63c:	2000      	movs	r0, #0
 800b63e:	f04f 0c0a 	mov.w	ip, #10
 800b642:	4621      	mov	r1, r4
 800b644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b648:	3b30      	subs	r3, #48	@ 0x30
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d94b      	bls.n	800b6e6 <_vfiprintf_r+0x1a2>
 800b64e:	b1b0      	cbz	r0, 800b67e <_vfiprintf_r+0x13a>
 800b650:	9207      	str	r2, [sp, #28]
 800b652:	e014      	b.n	800b67e <_vfiprintf_r+0x13a>
 800b654:	eba0 0308 	sub.w	r3, r0, r8
 800b658:	fa09 f303 	lsl.w	r3, r9, r3
 800b65c:	4313      	orrs	r3, r2
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	46a2      	mov	sl, r4
 800b662:	e7d2      	b.n	800b60a <_vfiprintf_r+0xc6>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	1d19      	adds	r1, r3, #4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	9103      	str	r1, [sp, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfbb      	ittet	lt
 800b670:	425b      	neglt	r3, r3
 800b672:	f042 0202 	orrlt.w	r2, r2, #2
 800b676:	9307      	strge	r3, [sp, #28]
 800b678:	9307      	strlt	r3, [sp, #28]
 800b67a:	bfb8      	it	lt
 800b67c:	9204      	strlt	r2, [sp, #16]
 800b67e:	7823      	ldrb	r3, [r4, #0]
 800b680:	2b2e      	cmp	r3, #46	@ 0x2e
 800b682:	d10a      	bne.n	800b69a <_vfiprintf_r+0x156>
 800b684:	7863      	ldrb	r3, [r4, #1]
 800b686:	2b2a      	cmp	r3, #42	@ 0x2a
 800b688:	d132      	bne.n	800b6f0 <_vfiprintf_r+0x1ac>
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	1d1a      	adds	r2, r3, #4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	9203      	str	r2, [sp, #12]
 800b692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b696:	3402      	adds	r4, #2
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b770 <_vfiprintf_r+0x22c>
 800b69e:	7821      	ldrb	r1, [r4, #0]
 800b6a0:	2203      	movs	r2, #3
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	f7f4 fd94 	bl	80001d0 <memchr>
 800b6a8:	b138      	cbz	r0, 800b6ba <_vfiprintf_r+0x176>
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	eba0 000a 	sub.w	r0, r0, sl
 800b6b0:	2240      	movs	r2, #64	@ 0x40
 800b6b2:	4082      	lsls	r2, r0
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6be:	4829      	ldr	r0, [pc, #164]	@ (800b764 <_vfiprintf_r+0x220>)
 800b6c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6c4:	2206      	movs	r2, #6
 800b6c6:	f7f4 fd83 	bl	80001d0 <memchr>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d03f      	beq.n	800b74e <_vfiprintf_r+0x20a>
 800b6ce:	4b26      	ldr	r3, [pc, #152]	@ (800b768 <_vfiprintf_r+0x224>)
 800b6d0:	bb1b      	cbnz	r3, 800b71a <_vfiprintf_r+0x1d6>
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	3307      	adds	r3, #7
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	3308      	adds	r3, #8
 800b6dc:	9303      	str	r3, [sp, #12]
 800b6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e0:	443b      	add	r3, r7
 800b6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e4:	e76a      	b.n	800b5bc <_vfiprintf_r+0x78>
 800b6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	e7a8      	b.n	800b642 <_vfiprintf_r+0xfe>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	3401      	adds	r4, #1
 800b6f4:	9305      	str	r3, [sp, #20]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f04f 0c0a 	mov.w	ip, #10
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b702:	3a30      	subs	r2, #48	@ 0x30
 800b704:	2a09      	cmp	r2, #9
 800b706:	d903      	bls.n	800b710 <_vfiprintf_r+0x1cc>
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0c6      	beq.n	800b69a <_vfiprintf_r+0x156>
 800b70c:	9105      	str	r1, [sp, #20]
 800b70e:	e7c4      	b.n	800b69a <_vfiprintf_r+0x156>
 800b710:	fb0c 2101 	mla	r1, ip, r1, r2
 800b714:	4604      	mov	r4, r0
 800b716:	2301      	movs	r3, #1
 800b718:	e7f0      	b.n	800b6fc <_vfiprintf_r+0x1b8>
 800b71a:	ab03      	add	r3, sp, #12
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	462a      	mov	r2, r5
 800b720:	4b12      	ldr	r3, [pc, #72]	@ (800b76c <_vfiprintf_r+0x228>)
 800b722:	a904      	add	r1, sp, #16
 800b724:	4630      	mov	r0, r6
 800b726:	f7fb fd0f 	bl	8007148 <_printf_float>
 800b72a:	4607      	mov	r7, r0
 800b72c:	1c78      	adds	r0, r7, #1
 800b72e:	d1d6      	bne.n	800b6de <_vfiprintf_r+0x19a>
 800b730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	d405      	bmi.n	800b742 <_vfiprintf_r+0x1fe>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	059a      	lsls	r2, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_vfiprintf_r+0x1fe>
 800b73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b73e:	f7fc fd99 	bl	8008274 <__retarget_lock_release_recursive>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	065b      	lsls	r3, r3, #25
 800b746:	f53f af1f 	bmi.w	800b588 <_vfiprintf_r+0x44>
 800b74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b74c:	e71e      	b.n	800b58c <_vfiprintf_r+0x48>
 800b74e:	ab03      	add	r3, sp, #12
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	462a      	mov	r2, r5
 800b754:	4b05      	ldr	r3, [pc, #20]	@ (800b76c <_vfiprintf_r+0x228>)
 800b756:	a904      	add	r1, sp, #16
 800b758:	4630      	mov	r0, r6
 800b75a:	f7fb ff8d 	bl	8007678 <_printf_i>
 800b75e:	e7e4      	b.n	800b72a <_vfiprintf_r+0x1e6>
 800b760:	0800bca9 	.word	0x0800bca9
 800b764:	0800bcb3 	.word	0x0800bcb3
 800b768:	08007149 	.word	0x08007149
 800b76c:	0800b521 	.word	0x0800b521
 800b770:	0800bcaf 	.word	0x0800bcaf

0800b774 <_raise_r>:
 800b774:	291f      	cmp	r1, #31
 800b776:	b538      	push	{r3, r4, r5, lr}
 800b778:	4605      	mov	r5, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	d904      	bls.n	800b788 <_raise_r+0x14>
 800b77e:	2316      	movs	r3, #22
 800b780:	6003      	str	r3, [r0, #0]
 800b782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b78a:	b112      	cbz	r2, 800b792 <_raise_r+0x1e>
 800b78c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b790:	b94b      	cbnz	r3, 800b7a6 <_raise_r+0x32>
 800b792:	4628      	mov	r0, r5
 800b794:	f000 f830 	bl	800b7f8 <_getpid_r>
 800b798:	4622      	mov	r2, r4
 800b79a:	4601      	mov	r1, r0
 800b79c:	4628      	mov	r0, r5
 800b79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7a2:	f000 b817 	b.w	800b7d4 <_kill_r>
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d00a      	beq.n	800b7c0 <_raise_r+0x4c>
 800b7aa:	1c59      	adds	r1, r3, #1
 800b7ac:	d103      	bne.n	800b7b6 <_raise_r+0x42>
 800b7ae:	2316      	movs	r3, #22
 800b7b0:	6003      	str	r3, [r0, #0]
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	e7e7      	b.n	800b786 <_raise_r+0x12>
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4798      	blx	r3
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e7e0      	b.n	800b786 <_raise_r+0x12>

0800b7c4 <raise>:
 800b7c4:	4b02      	ldr	r3, [pc, #8]	@ (800b7d0 <raise+0xc>)
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	f7ff bfd3 	b.w	800b774 <_raise_r>
 800b7ce:	bf00      	nop
 800b7d0:	2000001c 	.word	0x2000001c

0800b7d4 <_kill_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d07      	ldr	r5, [pc, #28]	@ (800b7f4 <_kill_r+0x20>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	4611      	mov	r1, r2
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	f7f5 fdb5 	bl	8001350 <_kill>
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	d102      	bne.n	800b7f0 <_kill_r+0x1c>
 800b7ea:	682b      	ldr	r3, [r5, #0]
 800b7ec:	b103      	cbz	r3, 800b7f0 <_kill_r+0x1c>
 800b7ee:	6023      	str	r3, [r4, #0]
 800b7f0:	bd38      	pop	{r3, r4, r5, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20001688 	.word	0x20001688

0800b7f8 <_getpid_r>:
 800b7f8:	f7f5 bda2 	b.w	8001340 <_getpid>

0800b7fc <_init>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr

0800b808 <_fini>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	bf00      	nop
 800b80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80e:	bc08      	pop	{r3}
 800b810:	469e      	mov	lr, r3
 800b812:	4770      	bx	lr
