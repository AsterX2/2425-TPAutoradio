
proj_autorad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800ba58  0800ba58  0000ca58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa0  0800bfa0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfa0  0800bfa0  0000cfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfa8  0800bfa8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfa8  0800bfa8  0000cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfac  0800bfac  0000cfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bfb0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  200001d8  0800c188  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016fc  0800c188  0000d6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162ad  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc4  00000000  00000000  000234b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00027180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e82  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002998a  00000000  00000000  00029312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001700d  00000000  00000000  00052c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4ddc  00000000  00000000  00069ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ea85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006210  00000000  00000000  0015eac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00164cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba3c 	.word	0x0800ba3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ba3c 	.word	0x0800ba3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001f8 	.word	0x200001f8
 8001014:	2000024c 	.word	0x2000024c

08001018 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_FREERTOS_Init+0x30>)
 8001020:	1d3c      	adds	r4, r7, #4
 8001022:	461d      	mov	r5, r3
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f95a 	bl	80052ee <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a03      	ldr	r2, [pc, #12]	@ (800104c <MX_FREERTOS_Init+0x34>)
 800103e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	0800ba64 	.word	0x0800ba64
 800104c:	200001f4 	.word	0x200001f4

08001050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f004 f994 	bl	8005386 <osDelay>
 800105e:	e7fb      	b.n	8001058 <StartDefaultTask+0x8>

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 f923 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0xc8>)
 80010fa:	f000 ff6b 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fe:	2320      	movs	r3, #32
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f000 ff5c 	bl	8001fd4 <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <__io_putchar+0x20>)
 800113e:	f002 fd1c 	bl	8003b7a <HAL_UART_Transmit>

	return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000814 	.word	0x20000814

08001150 <tache_shell>:



void tache_shell(void * unused)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	//xSemaphoreTake(sem1, portMAX_DELAY); artefact question a) pour prendre le semaphore sans interruption

	printf("tache Shell\r\n");
 8001158:	480a      	ldr	r0, [pc, #40]	@ (8001184 <tache_shell+0x34>)
 800115a:	f006 fff9 	bl	8008150 <puts>

	h_sh.drv.receive = drv_uart1_receive;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <tache_shell+0x38>)
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <tache_shell+0x3c>)
 8001162:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_sh.drv.transmit = drv_uart1_transmit;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <tache_shell+0x38>)
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <tache_shell+0x40>)
 800116a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
	shell_init(&h_sh);
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <tache_shell+0x38>)
 8001170:	f000 fba0 	bl	80018b4 <shell_init>


	shell_run(&h_sh);
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <tache_shell+0x38>)
 8001176:	f000 fc8d 	bl	8001a94 <shell_run>


}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800ba80 	.word	0x0800ba80
 8001188:	20000450 	.word	0x20000450
 800118c:	080017d5 	.word	0x080017d5
 8001190:	0800180d 	.word	0x0800180d

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fd0f 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f81f 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f7ff ff5d 	bl	8001060 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a6:	f000 fa27 	bl	80015f8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011aa:	f000 f871 	bl	8001290 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	//sem_init() déclarer dans drv_uart1.c


	xTaskCreate(tache_shell, "Shell", TASK_SHELL_STACK_SIZE, NULL, TASK_SHELL_PRIORITY, &h_task_shell);
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <main+0x40>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	4906      	ldr	r1, [pc, #24]	@ (80011d8 <main+0x44>)
 80011be:	4807      	ldr	r0, [pc, #28]	@ (80011dc <main+0x48>)
 80011c0:	f004 fcee 	bl	8005ba0 <xTaskCreate>


	//vTaskDelay(10);

	vTaskStartScheduler();
 80011c4:	f004 fe5a 	bl	8005e7c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011c8:	f7ff ff26 	bl	8001018 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011cc:	f004 f888 	bl	80052e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <main+0x3c>
 80011d4:	2000044c 	.word	0x2000044c
 80011d8:	0800ba90 	.word	0x0800ba90
 80011dc:	08001151 	.word	0x08001151

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	@ 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	@ 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 f8e2 	bl	80083b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001206:	f001 f8b5 	bl	8002374 <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001210:	f000 f837 	bl	8001282 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800122e:	230a      	movs	r3, #10
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001232:	2307      	movs	r3, #7
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f8ec 	bl	8002420 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800124e:	f000 f818 	bl	8001282 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2303      	movs	r3, #3
 8001258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fcb4 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001276:	f000 f804 	bl	8001282 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3758      	adds	r7, #88	@ 0x58
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001286:	b672      	cpsid	i
}
 8001288:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <Error_Handler+0x8>
	...

08001290 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_SPI3_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <MX_SPI3_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_SPI3_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_SPI3_Init+0x74>)
 80012f0:	f002 fb52 	bl	8003998 <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f7ff ffc2 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200007ac 	.word	0x200007ac
 8001308:	40003c00 	.word	0x40003c00

0800130c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_SPI_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d128      	bne.n	8001380 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_SPI_MspInit+0x80>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	4a16      	ldr	r2, [pc, #88]	@ (800138c <HAL_SPI_MspInit+0x80>)
 8001334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001338:	6593      	str	r3, [r2, #88]	@ 0x58
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_SPI_MspInit+0x80>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_SPI_MspInit+0x80>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a10      	ldr	r2, [pc, #64]	@ (800138c <HAL_SPI_MspInit+0x80>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_SPI_MspInit+0x80>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800135e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001370:	2306      	movs	r3, #6
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_SPI_MspInit+0x84>)
 800137c:	f000 fe2a 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40003c00 	.word	0x40003c00
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_MspInit+0x4c>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_MspInit+0x4c>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_MspInit+0x4c>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f000 fd4a 	bl	8001e6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <NMI_Handler+0x4>

080013ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <MemManage_Handler+0x4>

080013fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <UsageFault_Handler+0x4>

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141e:	f000 fc29 	bl	8001c74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001422:	f005 f935 	bl	8006690 <xTaskGetSchedulerState>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d001      	beq.n	8001430 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800142c:	f005 fc8c 	bl	8006d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <USART2_IRQHandler+0x10>)
 800143a:	f002 fc73 	bl	8003d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000814 	.word	0x20000814

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001462:	f006 fffb 	bl	800845c <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800148a:	bf00      	nop
 800148c:	e7fd      	b.n	800148a <_exit+0x12>

0800148e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e00a      	b.n	80014b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a0:	f3af 8000 	nop.w
 80014a4:	4601      	mov	r1, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	60ba      	str	r2, [r7, #8]
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbf0      	blt.n	80014a0 <_read+0x12>
  }

  return len;
 80014be:	687b      	ldr	r3, [r7, #4]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e009      	b.n	80014ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe22 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3301      	adds	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbf1      	blt.n	80014da <_write+0x12>
  }
  return len;
 80014f6:	687b      	ldr	r3, [r7, #4]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_close>:

int _close(int file)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001528:	605a      	str	r2, [r3, #4]
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_isatty>:

int _isatty(int file)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f006 ff60 	bl	800845c <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20018000 	.word	0x20018000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	20000810 	.word	0x20000810
 80015d0:	20001700 	.word	0x20001700

080015d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <MX_USART2_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_USART2_UART_Init+0x58>)
 800163c:	f002 fa4f 	bl	8003ade <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f7ff fe1c 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000814 	.word	0x20000814
 8001654:	40004400 	.word	0x40004400

08001658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0ac      	sub	sp, #176	@ 0xb0
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2288      	movs	r2, #136	@ 0x88
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fe9d 	bl	80083b8 <memset>
  if(uartHandle->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a25      	ldr	r2, [pc, #148]	@ (8001718 <HAL_UART_MspInit+0xc0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d143      	bne.n	8001710 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001688:	2302      	movs	r3, #2
 800168a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fcc3 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff fdef 	bl	8001282 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c0:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_UART_MspInit+0xc4>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d4:	230c      	movs	r3, #12
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f000 fc6a 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2105      	movs	r1, #5
 8001704:	2026      	movs	r0, #38	@ 0x26
 8001706:	f000 fbb0 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170a:	2026      	movs	r0, #38	@ 0x26
 800170c:	f000 fbc9 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	37b0      	adds	r7, #176	@ 0xb0
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000

08001720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ff56 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopForever+0x6>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopForever+0xe>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopForever+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f006 fe8b 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001752:	f7ff fd1f 	bl	8001194 <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001764:	0800bfb0 	.word	0x0800bfb0
  ldr r2, =_sbss
 8001768:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800176c:	200016fc 	.word	0x200016fc

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>
	...

08001774 <drv_sem_init>:
#include "semphr.h"

SemaphoreHandle_t semain;

//fonction pour créer le sémaphore
SemaphoreHandle_t drv_sem_init(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

	// Crée un sémaphore binaire
	semain = xSemaphoreCreateBinary();
 8001778:	2203      	movs	r2, #3
 800177a:	2100      	movs	r1, #0
 800177c:	2001      	movs	r0, #1
 800177e:	f003 ff35 	bl	80055ec <xQueueGenericCreate>
 8001782:	4603      	mov	r3, r0
 8001784:	4a02      	ldr	r2, [pc, #8]	@ (8001790 <drv_sem_init+0x1c>)
 8001786:	6013      	str	r3, [r2, #0]

	//pas de gestion d'erreur = c'est un choix
	//printf("init sema");
	return semain;
 8001788:	4b01      	ldr	r3, [pc, #4]	@ (8001790 <drv_sem_init+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000089c 	.word	0x2000089c

08001794 <give_sem_uart>:


void give_sem_uart(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

	BaseType_t higher_priority_task_woken = pdFALSE;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(semain, &higher_priority_task_woken);
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <give_sem_uart+0x38>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1d3a      	adds	r2, r7, #4
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 ff7a 	bl	80056a0 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(higher_priority_task_woken);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <give_sem_uart+0x2e>
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <give_sem_uart+0x3c>)
 80017b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	f3bf 8f6f 	isb	sy
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000089c 	.word	0x2000089c
 80017d0:	e000ed04 	.word	0xe000ed04

080017d4 <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	461a      	mov	r2, r3
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <drv_uart1_receive+0x30>)
 80017e8:	f002 fa50 	bl	8003c8c <HAL_UART_Receive_IT>

	xSemaphoreTake(semain, portMAX_DELAY); // prendre le sémaphore
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <drv_uart1_receive+0x34>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 ffe3 	bl	80057c0 <xQueueSemaphoreTake>

	return 0;	// Life's too short for error management
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000814 	.word	0x20000814
 8001808:	2000089c 	.word	0x2000089c

0800180c <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4803      	ldr	r0, [pc, #12]	@ (8001830 <drv_uart1_transmit+0x24>)
 8001822:	f002 f9aa 	bl	8003b7a <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000814 	.word	0x20000814

08001834 <sh_help>:
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"


static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e029      	b.n	800189a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3304      	adds	r3, #4
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461c      	mov	r4, r3
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	330c      	adds	r3, #12
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4623      	mov	r3, r4
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <sh_help+0x7c>)
 8001878:	2128      	movs	r1, #40	@ 0x28
 800187a:	f006 fc71 	bl	8008160 <sniprintf>
 800187e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	b289      	uxth	r1, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbd0      	blt.n	8001846 <sh_help+0x12>
	}

	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800ba98 	.word	0x0800ba98

080018b4 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	int size = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

	// création du sémaphore avec drv_sem_init --  sans handle
	drv_sem_init();
 80018c0:	f7ff ff58 	bl	8001774 <drv_sem_init>


	h_shell->func_list_size = 0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80018d0:	4a16      	ldr	r2, [pc, #88]	@ (800192c <shell_init+0x78>)
 80018d2:	2128      	movs	r1, #40	@ 0x28
 80018d4:	4618      	mov	r0, r3
 80018d6:	f006 fc43 	bl	8008160 <sniprintf>
 80018da:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	b289      	uxth	r1, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <shell_init+0x7c>)
 80018f8:	2128      	movs	r1, #40	@ 0x28
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 fc30 	bl	8008160 <sniprintf>
 8001900:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	b289      	uxth	r1, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <shell_init+0x80>)
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <shell_init+0x84>)
 800191a:	2168      	movs	r1, #104	@ 0x68
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f80d 	bl	800193c <shell_add>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	0800baa4 	.word	0x0800baa4
 8001930:	0800bacc 	.word	0x0800bacc
 8001934:	0800baf0 	.word	0x0800baf0
 8001938:	08001835 	.word	0x08001835

0800193c <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b3f      	cmp	r3, #63	@ 0x3f
 8001952:	dc27      	bgt.n	80019a4 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3304      	adds	r3, #4
 8001966:	7afa      	ldrb	r2, [r7, #11]
 8001968:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68f9      	ldr	r1, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3308      	adds	r3, #8
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	330c      	adds	r3, #12
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	601a      	str	r2, [r3, #0]
		return 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e001      	b.n	80019a8 <shell_add+0x6c>
	}

	return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ca:	e041      	b.n	8001a50 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3304      	adds	r3, #4
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d131      	bne.n	8001a4a <shell_exec+0x96>
			argc = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f2:	e013      	b.n	8001a1c <shell_exec+0x68>
				if(*p == ' ') {
 80019f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d10c      	bne.n	8001a16 <shell_exec+0x62>
					*p = '\0';
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a0a:	3201      	adds	r2, #1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3340      	adds	r3, #64	@ 0x40
 8001a10:	443b      	add	r3, r7
 8001a12:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a18:	3301      	adds	r3, #1
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <shell_exec+0x76>
 8001a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	dde4      	ble.n	80019f4 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3308      	adds	r3, #8
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f107 020c 	add.w	r2, r7, #12
 8001a40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	e01d      	b.n	8001a86 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbb8      	blt.n	80019cc <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <shell_exec+0xdc>)
 8001a66:	2128      	movs	r1, #40	@ 0x28
 8001a68:	f006 fb7a 	bl	8008160 <sniprintf>
 8001a6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a7c:	b289      	uxth	r1, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4798      	blx	r3
	return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3740      	adds	r7, #64	@ 0x40
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0800baf8 	.word	0x0800baf8

08001a94 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001aaa:	2102      	movs	r1, #2
 8001aac:	483a      	ldr	r0, [pc, #232]	@ (8001b98 <shell_run+0x104>)
 8001aae:	4798      	blx	r3
		reading = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]

		while(reading) {
 8001ab4:	e064      	b.n	8001b80 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8001abc:	f107 020b 	add.w	r2, r7, #11
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4798      	blx	r3
			int size;

			switch (c) {
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d036      	beq.n	8001b3a <shell_run+0xa6>
 8001acc:	2b0d      	cmp	r3, #13
 8001ace:	d141      	bne.n	8001b54 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001ad6:	4a31      	ldr	r2, [pc, #196]	@ (8001b9c <shell_run+0x108>)
 8001ad8:	2128      	movs	r1, #40	@ 0x28
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 fb40 	bl	8008160 <sniprintf>
 8001ae0:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	b289      	uxth	r1, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	613a      	str	r2, [r7, #16]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001b12:	4a23      	ldr	r2, [pc, #140]	@ (8001ba0 <shell_run+0x10c>)
 8001b14:	2128      	movs	r1, #40	@ 0x28
 8001b16:	f006 fb23 	bl	8008160 <sniprintf>
 8001b1a:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	b289      	uxth	r1, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4798      	blx	r3
				reading = 0;        //exit read loop
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
				break;
 8001b38:	e022      	b.n	8001b80 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dd1e      	ble.n	8001b7e <shell_run+0xea>
					pos--;          //remove it in buffer
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	4815      	ldr	r0, [pc, #84]	@ (8001ba4 <shell_run+0x110>)
 8001b50:	4798      	blx	r3
				}
				break;
 8001b52:	e014      	b.n	8001b7e <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b27      	cmp	r3, #39	@ 0x27
 8001b58:	dc12      	bgt.n	8001b80 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001b60:	f107 020b 	add.w	r2, r7, #11
 8001b64:	2101      	movs	r1, #1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	613a      	str	r2, [r7, #16]
 8001b70:	7af9      	ldrb	r1, [r7, #11]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	460a      	mov	r2, r1
 8001b78:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001b7c:	e000      	b.n	8001b80 <shell_run+0xec>
				break;
 8001b7e:	bf00      	nop
		while(reading) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d197      	bne.n	8001ab6 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff10 	bl	80019b4 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8001b94:	e786      	b.n	8001aa4 <shell_run+0x10>
 8001b96:	bf00      	nop
 8001b98:	0800bb70 	.word	0x0800bb70
 8001b9c:	0800bb10 	.word	0x0800bb10
 8001ba0:	0800bb14 	.word	0x0800bb14
 8001ba4:	0800bb6c 	.word	0x0800bb6c

08001ba8 <HAL_UART_RxCpltCallback>:
	}
	return 0;
}

// TODO a bouger dans le main
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	// on appelle simplement la fonction callback du drv_uart
	give_sem_uart();
 8001bb0:	f7ff fdf0 	bl	8001794 <give_sem_uart>

	//..
	// Relancer la réception pour le prochain octet <= pas la peine
	//HAL_UART_Receive_IT(&huart2, &rx_byte, 1);

}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <HAL_Init+0x3c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x3c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f93e 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd8:	200f      	movs	r0, #15
 8001bda:	f000 f80f 	bl	8001bfc <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	e001      	b.n	8001bee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bea:	f7ff fbd3 	bl	8001394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_InitTick+0x6c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_InitTick+0x70>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_InitTick+0x6c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f949 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d809      	bhi.n	8001c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c40:	f000 f913 	bl	8001e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_InitTick+0x74>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e007      	b.n	8001c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e001      	b.n	8001c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008
 8001c98:	200008a0 	.word	0x200008a0

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	200008a0 	.word	0x200008a0

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	@ (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff3e 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff31 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d008      	beq.n	8001f00 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e022      	b.n	8001f46 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020e 	bic.w	r2, r2, #14
 8001f0e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	f003 021c 	and.w	r2, r3, #28
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d005      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e029      	b.n	8001fca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f003 021c 	and.w	r2, r3, #28
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    }
  }
  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e17f      	b.n	80022e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8171 	beq.w	80022de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x40>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d118      	bne.n	80020b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	6939      	ldr	r1, [r7, #16]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80ac 	beq.w	80022de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	4b5f      	ldr	r3, [pc, #380]	@ (8002304 <HAL_GPIO_Init+0x330>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218a:	4a5e      	ldr	r2, [pc, #376]	@ (8002304 <HAL_GPIO_Init+0x330>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6613      	str	r3, [r2, #96]	@ 0x60
 8002192:	4b5c      	ldr	r3, [pc, #368]	@ (8002304 <HAL_GPIO_Init+0x330>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800219e:	4a5a      	ldr	r2, [pc, #360]	@ (8002308 <HAL_GPIO_Init+0x334>)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x242>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x338>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x23e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_GPIO_Init+0x33c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002314 <HAL_GPIO_Init+0x340>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x236>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002318 <HAL_GPIO_Init+0x344>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x232>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <HAL_GPIO_Init+0x348>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x22e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_GPIO_Init+0x34c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x22a>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00c      	b.n	8002218 <HAL_GPIO_Init+0x244>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00a      	b.n	8002218 <HAL_GPIO_Init+0x244>
 8002202:	2305      	movs	r3, #5
 8002204:	e008      	b.n	8002218 <HAL_GPIO_Init+0x244>
 8002206:	2304      	movs	r3, #4
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x244>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <HAL_GPIO_Init+0x244>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <HAL_GPIO_Init+0x244>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x244>
 8002216:	2300      	movs	r3, #0
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	f002 0203 	and.w	r2, r2, #3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4093      	lsls	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002228:	4937      	ldr	r1, [pc, #220]	@ (8002308 <HAL_GPIO_Init+0x334>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002236:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <HAL_GPIO_Init+0x350>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225a:	4a32      	ldr	r2, [pc, #200]	@ (8002324 <HAL_GPIO_Init+0x350>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002260:	4b30      	ldr	r3, [pc, #192]	@ (8002324 <HAL_GPIO_Init+0x350>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002284:	4a27      	ldr	r2, [pc, #156]	@ (8002324 <HAL_GPIO_Init+0x350>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <HAL_GPIO_Init+0x350>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <HAL_GPIO_Init+0x350>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_GPIO_Init+0x350>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022d8:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <HAL_GPIO_Init+0x350>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f47f ae78 	bne.w	8001fe4 <HAL_GPIO_Init+0x10>
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48001000 	.word	0x48001000
 800231c:	48001400 	.word	0x48001400
 8002320:	48001800 	.word	0x48001800
 8002324:	40010400 	.word	0x40010400

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002344:	e002      	b.n	800234c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <HAL_PWREx_GetVoltageRange+0x18>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002382:	d130      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002384:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800238c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002390:	d038      	beq.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800239a:	4a1e      	ldr	r2, [pc, #120]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2232      	movs	r2, #50	@ 0x32
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9b      	lsrs	r3, r3, #18
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b8:	e002      	b.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023cc:	d102      	bne.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f2      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e0:	d110      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e00f      	b.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	d007      	beq.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023f4:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023fc:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40007000 	.word	0x40007000
 8002418:	20000000 	.word	0x20000000
 800241c:	431bde83 	.word	0x431bde83

08002420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e3ca      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	4b97      	ldr	r3, [pc, #604]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80e4 	beq.w	800261c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_RCC_OscConfig+0x4a>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	f040 808b 	bne.w	8002578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 8087 	bne.w	8002578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x62>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e3a2      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_RCC_OscConfig+0x7c>
 8002492:	4b7f      	ldr	r3, [pc, #508]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800249a:	e005      	b.n	80024a8 <HAL_RCC_OscConfig+0x88>
 800249c:	4b7c      	ldr	r3, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d223      	bcs.n	80024f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd55 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e383      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c0:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a72      	ldr	r2, [pc, #456]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	496d      	ldr	r1, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024de:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	4968      	ldr	r1, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
 80024f2:	e025      	b.n	8002540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4960      	ldr	r1, [pc, #384]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	4b5f      	ldr	r3, [pc, #380]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	495b      	ldr	r1, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fd15 	bl	8002f60 <RCC_SetFlashLatencyFromMSIRange>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e343      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002540:	f000 fc4a 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	4950      	ldr	r1, [pc, #320]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	4a4e      	ldr	r2, [pc, #312]	@ (8002698 <HAL_RCC_OscConfig+0x278>)
 800255e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002560:	4b4e      	ldr	r3, [pc, #312]	@ (800269c <HAL_RCC_OscConfig+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb49 	bl	8001bfc <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d052      	beq.n	800261a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	e327      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002580:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a42      	ldr	r2, [pc, #264]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258c:	f7ff fb86 	bl	8001c9c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002594:	f7ff fb82 	bl	8001c9c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e310      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a36      	ldr	r2, [pc, #216]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4931      	ldr	r1, [pc, #196]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	492c      	ldr	r1, [pc, #176]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e01a      	b.n	800261c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fb53 	bl	8001c9c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025fa:	f7ff fb4f 	bl	8001c9c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e2dd      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x1da>
 8002618:	e000      	b.n	800261c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800261a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d074      	beq.n	8002712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x21a>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d10e      	bne.n	8002652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d064      	beq.n	8002710 <HAL_RCC_OscConfig+0x2f0>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d160      	bne.n	8002710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e2ba      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x24a>
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e026      	b.n	80026b8 <HAL_RCC_OscConfig+0x298>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002672:	d115      	bne.n	80026a0 <HAL_RCC_OscConfig+0x280>
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 800267a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a02      	ldr	r2, [pc, #8]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e014      	b.n	80026b8 <HAL_RCC_OscConfig+0x298>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	0800bb24 	.word	0x0800bb24
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004
 80026a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff faec 	bl	8001c9c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fae8 	bl	8001c9c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e276      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026da:	4b92      	ldr	r3, [pc, #584]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2a8>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff fad8 	bl	8001c9c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fad4 	bl	8001c9c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e262      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d0>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d060      	beq.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x310>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d119      	bne.n	800275e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d116      	bne.n	800275e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	4b7c      	ldr	r3, [pc, #496]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x328>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e23f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4973      	ldr	r1, [pc, #460]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275c:	e040      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002766:	4b6f      	ldr	r3, [pc, #444]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff fa93 	bl	8001c9c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff fa8f 	bl	8001c9c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e21d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278c:	4b65      	ldr	r3, [pc, #404]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	495f      	ldr	r1, [pc, #380]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	e018      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7ff fa6f 	bl	8001c9c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c2:	f7ff fa6b 	bl	8001c9c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1f9      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d03c      	beq.n	8002866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01c      	beq.n	800282e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff fa4a 	bl	8001c9c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff fa46 	bl	8001c9c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1d4      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <HAL_RCC_OscConfig+0x3ec>
 800282c:	e01b      	b.n	8002866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282e:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002834:	4a3b      	ldr	r2, [pc, #236]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283e:	f7ff fa2d 	bl	8001c9c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002846:	f7ff fa29 	bl	8001c9c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1b7      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800285a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1ef      	bne.n	8002846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80a6 	beq.w	80029c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002878:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10d      	bne.n	80028a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289c:	2301      	movs	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a0:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d118      	bne.n	80028de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b8:	f7ff f9f0 	bl	8001c9c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c0:	f7ff f9ec 	bl	8001c9c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e17a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_RCC_OscConfig+0x508>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4d8>
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028f6:	e029      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d115      	bne.n	800292c <HAL_RCC_OscConfig+0x50c>
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002906:	4a07      	ldr	r2, [pc, #28]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a03      	ldr	r2, [pc, #12]	@ (8002924 <HAL_RCC_OscConfig+0x504>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
 800292c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002932:	4a9b      	ldr	r2, [pc, #620]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293c:	4b98      	ldr	r3, [pc, #608]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	4a97      	ldr	r2, [pc, #604]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d016      	beq.n	8002982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7ff f9a2 	bl	8001c9c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7ff f99e 	bl	8001c9c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e12a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ed      	beq.n	800295c <HAL_RCC_OscConfig+0x53c>
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7ff f98b 	bl	8001c9c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7ff f987 	bl	8001c9c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e113      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ed      	bne.n	800298a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	4a79      	ldr	r2, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80fe 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	f040 80d0 	bne.w	8002b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029d4:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d130      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d127      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a14:	2a07      	cmp	r2, #7
 8002a16:	bf14      	ite	ne
 8002a18:	2201      	movne	r2, #1
 8002a1a:	2200      	moveq	r2, #0
 8002a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d06e      	beq.n	8002b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d069      	beq.n	8002b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a50:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ad      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a78:	f7ff f910 	bl	8001c9c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff f90c 	bl	8001c9c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e09a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b40      	ldr	r3, [pc, #256]	@ (8002ba4 <HAL_RCC_OscConfig+0x784>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ab8:	0212      	lsls	r2, r2, #8
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	0552      	lsls	r2, r2, #21
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002acc:	0852      	lsrs	r2, r2, #1
 8002ace:	3a01      	subs	r2, #1
 8002ad0:	0652      	lsls	r2, r2, #25
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ad8:	0912      	lsrs	r2, r2, #4
 8002ada:	0452      	lsls	r2, r2, #17
 8002adc:	430a      	orrs	r2, r1
 8002ade:	4930      	ldr	r1, [pc, #192]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002afc:	f7ff f8ce 	bl	8001c9c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7ff f8ca 	bl	8001c9c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e058      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b22:	e050      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d148      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4c:	f7ff f8a6 	bl	8001c9c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff f8a2 	bl	8001c9c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e030      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x734>
 8002b72:	e028      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d023      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCC_OscConfig+0x780>)
 8002b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7ff f889 	bl	8001c9c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	e00c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7ff f885 	bl	8001c9c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d905      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ec      	bne.n	8002b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bb4:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4905      	ldr	r1, [pc, #20]	@ (8002bd0 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_OscConfig+0x7b4>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60cb      	str	r3, [r1, #12]
 8002bc0:	e001      	b.n	8002bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	feeefffc 	.word	0xfeeefffc

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0e7      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b75      	ldr	r3, [pc, #468]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b72      	ldr	r3, [pc, #456]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4970      	ldr	r1, [pc, #448]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cf      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b66      	ldr	r3, [pc, #408]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d908      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b63      	ldr	r3, [pc, #396]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4960      	ldr	r1, [pc, #384]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04c      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d121      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0a6      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c76:	4b54      	ldr	r3, [pc, #336]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d115      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e09a      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e08e      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e086      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b46      	ldr	r3, [pc, #280]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4943      	ldr	r1, [pc, #268]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe ffec 	bl	8001c9c <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe ffe8 	bl	8001c9c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e06e      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	492b      	ldr	r1, [pc, #172]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1e:	4b29      	ldr	r3, [pc, #164]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d210      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2c:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 0207 	bic.w	r2, r3, #7
 8002d34:	4923      	ldr	r1, [pc, #140]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3c:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e036      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4918      	ldr	r1, [pc, #96]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4910      	ldr	r1, [pc, #64]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8c:	f000 f824 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	490b      	ldr	r1, [pc, #44]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f4>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a09      	ldr	r2, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe ff23 	bl	8001bfc <HAL_InitTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dba:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	0800bb24 	.word	0x0800bb24
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x34>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d11e      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e18:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e50:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e004      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e5c:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x114>)
 8002e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d134      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0xac>
 8002e7c:	e005      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e80:	617b      	str	r3, [r7, #20]
      break;
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x114>)
 8002e86:	617b      	str	r3, [r7, #20]
      break;
 8002e88:	e002      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	617b      	str	r3, [r7, #20]
      break;
 8002e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	fb03 f202 	mul.w	r2, r3, r2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	0e5b      	lsrs	r3, r3, #25
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800bb3c 	.word	0x0800bb3c
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	@ (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f0c:	f7ff fff0 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4904      	ldr	r1, [pc, #16]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	0800bb34 	.word	0x0800bb34

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f38:	f7ff ffda 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0adb      	lsrs	r3, r3, #11
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4904      	ldr	r1, [pc, #16]	@ (8002f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	0800bb34 	.word	0x0800bb34

08002f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f9ee 	bl	8002358 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
 8002f7e:	e014      	b.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f98:	f7ff f9de 	bl	8002358 <HAL_PWREx_GetVoltageRange>
 8002f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8003018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d10b      	bne.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	@ 0x80
 8002fb6:	d919      	bls.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fbc:	d902      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e013      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e010      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	d902      	bls.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e00a      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	d102      	bne.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fdc:	2302      	movs	r3, #2
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e004      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b70      	cmp	r3, #112	@ 0x70
 8002fe6:	d101      	bne.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 0207 	bic.w	r2, r3, #7
 8002ff4:	4909      	ldr	r1, [pc, #36]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ffc:	4b07      	ldr	r3, [pc, #28]	@ (800301c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40022000 	.word	0x40022000

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003028:	2300      	movs	r3, #0
 800302a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800302c:	2300      	movs	r3, #0
 800302e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d041      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003040:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003044:	d02a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003046:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800304a:	d824      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800304c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003056:	d81e      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800305c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003060:	d010      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003062:	e018      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003064:	4b86      	ldr	r3, [pc, #536]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a85      	ldr	r2, [pc, #532]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003070:	e015      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fabb 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003082:	e00c      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3320      	adds	r3, #32
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fba6 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	74fb      	strb	r3, [r7, #19]
      break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800309c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a4:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b2:	4973      	ldr	r1, [pc, #460]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d041      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030d4:	d02a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030da:	d824      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e6:	d81e      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d010      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030f2:	e018      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030f4:	4b62      	ldr	r3, [pc, #392]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003100:	e015      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa73 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003112:	e00c      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3320      	adds	r3, #32
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb5e 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	74fb      	strb	r3, [r7, #19]
      break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800312c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003134:	4b52      	ldr	r3, [pc, #328]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003142:	494f      	ldr	r1, [pc, #316]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800314a:	e001      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a0 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	@ 0x58
 8003184:	4b3e      	ldr	r3, [pc, #248]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003194:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3a      	ldr	r2, [pc, #232]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a0:	f7fe fd7c 	bl	8001c9c <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031a6:	e009      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fd78 	bl	8001c9c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031bc:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d019      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ec:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031f8:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003208:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003218:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fd37 	bl	8001c9c <HAL_GetTick>
 800322e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003230:	e00b      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fd33 	bl	8001c9c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d902      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	74fb      	strb	r3, [r7, #19]
            break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ec      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325e:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326e:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003276:	e009      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7c7b      	ldrb	r3, [r7, #17]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b9e      	ldr	r3, [pc, #632]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a9d      	ldr	r2, [pc, #628]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032aa:	4b98      	ldr	r3, [pc, #608]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	4994      	ldr	r1, [pc, #592]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032cc:	4b8f      	ldr	r3, [pc, #572]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d2:	f023 020c 	bic.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	498c      	ldr	r1, [pc, #560]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ee:	4b87      	ldr	r3, [pc, #540]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	4983      	ldr	r1, [pc, #524]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003310:	4b7e      	ldr	r3, [pc, #504]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	497b      	ldr	r1, [pc, #492]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003332:	4b76      	ldr	r3, [pc, #472]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	4972      	ldr	r1, [pc, #456]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003354:	4b6d      	ldr	r3, [pc, #436]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	496a      	ldr	r1, [pc, #424]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003376:	4b65      	ldr	r3, [pc, #404]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	4961      	ldr	r1, [pc, #388]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003398:	4b5c      	ldr	r3, [pc, #368]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	4959      	ldr	r1, [pc, #356]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ba:	4b54      	ldr	r3, [pc, #336]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	4950      	ldr	r1, [pc, #320]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033dc:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ea:	4948      	ldr	r1, [pc, #288]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033fe:	4b43      	ldr	r3, [pc, #268]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	493f      	ldr	r1, [pc, #252]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d028      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003420:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342e:	4937      	ldr	r1, [pc, #220]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343e:	d106      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b32      	ldr	r3, [pc, #200]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a31      	ldr	r2, [pc, #196]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
 800344c:	e011      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003456:	d10c      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f8c8 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800347e:	4b23      	ldr	r3, [pc, #140]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	491f      	ldr	r1, [pc, #124]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349c:	d106      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349e:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a1a      	ldr	r2, [pc, #104]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a8:	60d3      	str	r3, [r2, #12]
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f899 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02b      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a02      	ldr	r2, [pc, #8]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	e014      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003518:	d10c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f867 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354e:	4928      	ldr	r1, [pc, #160]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800355e:	d10d      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f844 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d014      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	74bb      	strb	r3, [r7, #18]
 800357a:	e011      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3320      	adds	r3, #32
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f925 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ba:	490d      	ldr	r1, [pc, #52]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035de:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000

080035f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003602:	4b75      	ldr	r3, [pc, #468]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d018      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800360e:	4b72      	ldr	r3, [pc, #456]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d10d      	bne.n	800363a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
       ||
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003626:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
       ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d047      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e044      	b.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d018      	beq.n	800367a <RCCEx_PLLSAI1_Config+0x86>
 8003648:	2b03      	cmp	r3, #3
 800364a:	d825      	bhi.n	8003698 <RCCEx_PLLSAI1_Config+0xa4>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d002      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x62>
 8003650:	2b02      	cmp	r3, #2
 8003652:	d009      	beq.n	8003668 <RCCEx_PLLSAI1_Config+0x74>
 8003654:	e020      	b.n	8003698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003656:	4b60      	ldr	r3, [pc, #384]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11d      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e01a      	b.n	800369e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003668:	4b5b      	ldr	r3, [pc, #364]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d116      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003678:	e013      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800367a:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003686:	4b54      	ldr	r3, [pc, #336]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003696:	e006      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e004      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ae:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	430b      	orrs	r3, r1
 80036c4:	4944      	ldr	r1, [pc, #272]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d17d      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036d0:	4b41      	ldr	r3, [pc, #260]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a40      	ldr	r2, [pc, #256]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7fe fade 	bl	8001c9c <HAL_GetTick>
 80036e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e2:	e009      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e4:	f7fe fada 	bl	8001c9c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	73fb      	strb	r3, [r7, #15]
        break;
 80036f6:	e005      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036f8:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ef      	bne.n	80036e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d160      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d111      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003710:	4b31      	ldr	r3, [pc, #196]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	0211      	lsls	r1, r2, #8
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68d2      	ldr	r2, [r2, #12]
 8003726:	0912      	lsrs	r2, r2, #4
 8003728:	0452      	lsls	r2, r2, #17
 800372a:	430a      	orrs	r2, r1
 800372c:	492a      	ldr	r1, [pc, #168]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]
 8003732:	e027      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d112      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373a:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003742:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	0211      	lsls	r1, r2, #8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6912      	ldr	r2, [r2, #16]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	3a01      	subs	r2, #1
 8003754:	0552      	lsls	r2, r2, #21
 8003756:	430a      	orrs	r2, r1
 8003758:	491f      	ldr	r1, [pc, #124]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
 800375e:	e011      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003760:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003768:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6952      	ldr	r2, [r2, #20]
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	430a      	orrs	r2, r1
 800377e:	4916      	ldr	r1, [pc, #88]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003784:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800378e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe fa84 	bl	8001c9c <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003796:	e009      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003798:	f7fe fa80 	bl	8001c9c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
          break;
 80037aa:	e005      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	4904      	ldr	r1, [pc, #16]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000

080037dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d10d      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
       ||
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800380e:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
       ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d047      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e044      	b.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d018      	beq.n	8003862 <RCCEx_PLLSAI2_Config+0x86>
 8003830:	2b03      	cmp	r3, #3
 8003832:	d825      	bhi.n	8003880 <RCCEx_PLLSAI2_Config+0xa4>
 8003834:	2b01      	cmp	r3, #1
 8003836:	d002      	beq.n	800383e <RCCEx_PLLSAI2_Config+0x62>
 8003838:	2b02      	cmp	r3, #2
 800383a:	d009      	beq.n	8003850 <RCCEx_PLLSAI2_Config+0x74>
 800383c:	e020      	b.n	8003880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800383e:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384e:	e01a      	b.n	8003886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003850:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d116      	bne.n	800388a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e013      	b.n	800388a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003862:	4b4c      	ldr	r3, [pc, #304]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386e:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800387e:	e006      	b.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e004      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800388e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003896:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	430b      	orrs	r3, r1
 80038ac:	4939      	ldr	r1, [pc, #228]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d167      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a35      	ldr	r2, [pc, #212]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fe f9ea 	bl	8001c9c <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ca:	e009      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038cc:	f7fe f9e6 	bl	8001c9c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
        break;
 80038de:	e005      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ef      	bne.n	80038cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14a      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d111      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f8:	4b26      	ldr	r3, [pc, #152]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	0211      	lsls	r1, r2, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	0912      	lsrs	r2, r2, #4
 8003910:	0452      	lsls	r2, r2, #17
 8003912:	430a      	orrs	r2, r1
 8003914:	491f      	ldr	r1, [pc, #124]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	614b      	str	r3, [r1, #20]
 800391a:	e011      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003924:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6912      	ldr	r2, [r2, #16]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	430a      	orrs	r2, r1
 800393a:	4916      	ldr	r1, [pc, #88]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f9a6 	bl	8001c9c <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003954:	f7fe f9a2 	bl	8001c9c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
          break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003968:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4904      	ldr	r1, [pc, #16]	@ (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e095      	b.n	8003ad6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ba:	d009      	beq.n	80039d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
 80039c2:	e005      	b.n	80039d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fc8e 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a10:	d902      	bls.n	8003a18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a26:	d007      	beq.n	8003a38 <HAL_SPI_Init+0xa0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	ea42 0103 	orr.w	r1, r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f003 0204 	and.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e040      	b.n	8003b72 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fd fda9 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	@ 0x24
 8003b0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fedb 	bl	80048e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fc20 	bl	8004370 <UART_SetConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e01b      	b.n	8003b72 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 ff5a 	bl	8004a24 <UART_CheckIdleState>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b08a      	sub	sp, #40	@ 0x28
 8003b7e:	af02      	add	r7, sp, #8
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d177      	bne.n	8003c82 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_Transmit+0x24>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e070      	b.n	8003c84 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2221      	movs	r2, #33	@ 0x21
 8003bae:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe f874 	bl	8001c9c <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bce:	d108      	bne.n	8003be2 <HAL_UART_Transmit+0x68>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e003      	b.n	8003bea <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bea:	e02f      	b.n	8003c4c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 ffbc 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e03b      	b.n	8003c84 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3302      	adds	r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e007      	b.n	8003c3a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1c9      	bne.n	8003bec <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	@ 0x40
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 ff86 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e005      	b.n	8003c84 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
  }
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d137      	bne.n	8003d14 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_UART_Receive_IT+0x24>
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e030      	b.n	8003d16 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <HAL_UART_Receive_IT+0x94>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01f      	beq.n	8003d04 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e6      	bne.n	8003cd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 ffa0 	bl	8004c50 <UART_Start_Receive_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	e000      	b.n	8003d16 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	@ 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40008000 	.word	0x40008000

08003d24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0ba      	sub	sp, #232	@ 0xe8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d52:	4013      	ands	r3, r2
 8003d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 82ca 	beq.w	8004316 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      }
      return;
 8003d8a:	e2c4      	b.n	8004316 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8117 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003da2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003da6:	4b85      	ldr	r3, [pc, #532]	@ (8003fbc <HAL_UART_IRQHandler+0x298>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 810a 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0xbc>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_UART_IRQHandler+0xec>
 8003dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <HAL_UART_IRQHandler+0x11c>
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <HAL_UART_IRQHandler+0x18a>
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00c      	beq.n	8003eae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8230 	beq.w	800431a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04f      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 ff68 	bl	8004ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d141      	bne.n	8003f9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d9      	bne.n	8003f1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f72:	4a13      	ldr	r2, [pc, #76]	@ (8003fc0 <HAL_UART_IRQHandler+0x29c>)
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd ffe9 	bl	8001f52 <HAL_DMA_Abort_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d017      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f90:	4610      	mov	r0, r2
 8003f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00f      	b.n	8003fb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9d4 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e00b      	b.n	8003fb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9d0 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e007      	b.n	8003fb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9cc 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003fb4:	e1b1      	b.n	800431a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb6:	bf00      	nop
    return;
 8003fb8:	e1af      	b.n	800431a <HAL_UART_IRQHandler+0x5f6>
 8003fba:	bf00      	nop
 8003fbc:	04000120 	.word	0x04000120
 8003fc0:	08004ea5 	.word	0x08004ea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 816a 	bne.w	80042a2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8163 	beq.w	80042a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 815c 	beq.w	80042a2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	f040 80d4 	bne.w	80041aa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800400e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80ad 	beq.w	8004172 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004022:	429a      	cmp	r2, r3
 8004024:	f080 80a5 	bcs.w	8004172 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 8086 	bne.w	8004150 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004072:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800407a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1da      	bne.n	8004044 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800409e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e1      	bne.n	800408e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	f023 0310 	bic.w	r3, r3, #16
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004132:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004134:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e4      	bne.n	8004110 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fec3 	bl	8001ed6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8f4 	bl	8004358 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004170:	e0d5      	b.n	800431e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417c:	429a      	cmp	r2, r3
 800417e:	f040 80ce 	bne.w	800431e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	f040 80c5 	bne.w	800431e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8d8 	bl	8004358 <HAL_UARTEx_RxEventCallback>
      return;
 80041a8:	e0b9      	b.n	800431e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80ab 	beq.w	8004322 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80041cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a6 	beq.w	8004322 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e4      	bne.n	80041d6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	623b      	str	r3, [r7, #32]
   return(result);
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004230:	633a      	str	r2, [r7, #48]	@ 0x30
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	60fb      	str	r3, [r7, #12]
   return(result);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	69b9      	ldr	r1, [r7, #24]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	617b      	str	r3, [r7, #20]
   return(result);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e4      	bne.n	8004258 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f85c 	bl	8004358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a0:	e03f      	b.n	8004322 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <HAL_UART_IRQHandler+0x5a8>
 80042ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80042c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 ffe9 	bl	800529c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042ca:	e02d      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01c      	beq.n	8004326 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
    }
    return;
 80042f4:	e017      	b.n	8004326 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d012      	beq.n	8004328 <HAL_UART_IRQHandler+0x604>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fdde 	bl	8004ed0 <UART_EndTransmit_IT>
    return;
 8004314:	e008      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
      return;
 8004316:	bf00      	nop
 8004318:	e006      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
    return;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
      return;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
      return;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_UART_IRQHandler+0x604>
    return;
 8004326:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004328:	37e8      	adds	r7, #232	@ 0xe8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b08a      	sub	sp, #40	@ 0x28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4313      	orrs	r3, r2
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4ba4      	ldr	r3, [pc, #656]	@ (8004630 <UART_SetConfig+0x2c0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a99      	ldr	r2, [pc, #612]	@ (8004634 <UART_SetConfig+0x2c4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d8:	4313      	orrs	r3, r2
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a90      	ldr	r2, [pc, #576]	@ (8004638 <UART_SetConfig+0x2c8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d126      	bne.n	8004448 <UART_SetConfig+0xd8>
 80043fa:	4b90      	ldr	r3, [pc, #576]	@ (800463c <UART_SetConfig+0x2cc>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b03      	cmp	r3, #3
 8004406:	d81b      	bhi.n	8004440 <UART_SetConfig+0xd0>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0xa0>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004421 	.word	0x08004421
 8004414:	08004431 	.word	0x08004431
 8004418:	08004429 	.word	0x08004429
 800441c:	08004439 	.word	0x08004439
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e116      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442e:	e112      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004436:	e10e      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443e:	e10a      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004446:	e106      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7c      	ldr	r2, [pc, #496]	@ (8004640 <UART_SetConfig+0x2d0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d138      	bne.n	80044c4 <UART_SetConfig+0x154>
 8004452:	4b7a      	ldr	r3, [pc, #488]	@ (800463c <UART_SetConfig+0x2cc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d82d      	bhi.n	80044bc <UART_SetConfig+0x14c>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <UART_SetConfig+0xf8>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800449d 	.word	0x0800449d
 800446c:	080044bd 	.word	0x080044bd
 8004470:	080044bd 	.word	0x080044bd
 8004474:	080044bd 	.word	0x080044bd
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044bd 	.word	0x080044bd
 8004480:	080044bd 	.word	0x080044bd
 8004484:	080044bd 	.word	0x080044bd
 8004488:	080044a5 	.word	0x080044a5
 800448c:	080044bd 	.word	0x080044bd
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044b5 	.word	0x080044b5
 800449c:	2300      	movs	r3, #0
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a2:	e0d8      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044a4:	2302      	movs	r3, #2
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e0d4      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044ac:	2304      	movs	r3, #4
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e0d0      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044b4:	2308      	movs	r3, #8
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ba:	e0cc      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044bc:	2310      	movs	r3, #16
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c2:	e0c8      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004644 <UART_SetConfig+0x2d4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d125      	bne.n	800451a <UART_SetConfig+0x1aa>
 80044ce:	4b5b      	ldr	r3, [pc, #364]	@ (800463c <UART_SetConfig+0x2cc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044d8:	2b30      	cmp	r3, #48	@ 0x30
 80044da:	d016      	beq.n	800450a <UART_SetConfig+0x19a>
 80044dc:	2b30      	cmp	r3, #48	@ 0x30
 80044de:	d818      	bhi.n	8004512 <UART_SetConfig+0x1a2>
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d00a      	beq.n	80044fa <UART_SetConfig+0x18a>
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d814      	bhi.n	8004512 <UART_SetConfig+0x1a2>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <UART_SetConfig+0x182>
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d008      	beq.n	8004502 <UART_SetConfig+0x192>
 80044f0:	e00f      	b.n	8004512 <UART_SetConfig+0x1a2>
 80044f2:	2300      	movs	r3, #0
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f8:	e0ad      	b.n	8004656 <UART_SetConfig+0x2e6>
 80044fa:	2302      	movs	r3, #2
 80044fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004500:	e0a9      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004502:	2304      	movs	r3, #4
 8004504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004508:	e0a5      	b.n	8004656 <UART_SetConfig+0x2e6>
 800450a:	2308      	movs	r3, #8
 800450c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004510:	e0a1      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004512:	2310      	movs	r3, #16
 8004514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004518:	e09d      	b.n	8004656 <UART_SetConfig+0x2e6>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a4a      	ldr	r2, [pc, #296]	@ (8004648 <UART_SetConfig+0x2d8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d125      	bne.n	8004570 <UART_SetConfig+0x200>
 8004524:	4b45      	ldr	r3, [pc, #276]	@ (800463c <UART_SetConfig+0x2cc>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800452e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004530:	d016      	beq.n	8004560 <UART_SetConfig+0x1f0>
 8004532:	2bc0      	cmp	r3, #192	@ 0xc0
 8004534:	d818      	bhi.n	8004568 <UART_SetConfig+0x1f8>
 8004536:	2b80      	cmp	r3, #128	@ 0x80
 8004538:	d00a      	beq.n	8004550 <UART_SetConfig+0x1e0>
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	d814      	bhi.n	8004568 <UART_SetConfig+0x1f8>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <UART_SetConfig+0x1d8>
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d008      	beq.n	8004558 <UART_SetConfig+0x1e8>
 8004546:	e00f      	b.n	8004568 <UART_SetConfig+0x1f8>
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e082      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004550:	2302      	movs	r3, #2
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e07e      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004558:	2304      	movs	r3, #4
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e07a      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004560:	2308      	movs	r3, #8
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004566:	e076      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004568:	2310      	movs	r3, #16
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456e:	e072      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a35      	ldr	r2, [pc, #212]	@ (800464c <UART_SetConfig+0x2dc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d12a      	bne.n	80045d0 <UART_SetConfig+0x260>
 800457a:	4b30      	ldr	r3, [pc, #192]	@ (800463c <UART_SetConfig+0x2cc>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004588:	d01a      	beq.n	80045c0 <UART_SetConfig+0x250>
 800458a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800458e:	d81b      	bhi.n	80045c8 <UART_SetConfig+0x258>
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d00c      	beq.n	80045b0 <UART_SetConfig+0x240>
 8004596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459a:	d815      	bhi.n	80045c8 <UART_SetConfig+0x258>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <UART_SetConfig+0x238>
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a4:	d008      	beq.n	80045b8 <UART_SetConfig+0x248>
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x258>
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e052      	b.n	8004656 <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e04e      	b.n	8004656 <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e04a      	b.n	8004656 <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e046      	b.n	8004656 <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e042      	b.n	8004656 <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a17      	ldr	r2, [pc, #92]	@ (8004634 <UART_SetConfig+0x2c4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d13a      	bne.n	8004650 <UART_SetConfig+0x2e0>
 80045da:	4b18      	ldr	r3, [pc, #96]	@ (800463c <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045e8:	d01a      	beq.n	8004620 <UART_SetConfig+0x2b0>
 80045ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045ee:	d81b      	bhi.n	8004628 <UART_SetConfig+0x2b8>
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f4:	d00c      	beq.n	8004610 <UART_SetConfig+0x2a0>
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045fa:	d815      	bhi.n	8004628 <UART_SetConfig+0x2b8>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <UART_SetConfig+0x298>
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004604:	d008      	beq.n	8004618 <UART_SetConfig+0x2a8>
 8004606:	e00f      	b.n	8004628 <UART_SetConfig+0x2b8>
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e022      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004610:	2302      	movs	r3, #2
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e01e      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e01a      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e016      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e012      	b.n	8004656 <UART_SetConfig+0x2e6>
 8004630:	efff69f3 	.word	0xefff69f3
 8004634:	40008000 	.word	0x40008000
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000
 8004640:	40004400 	.word	0x40004400
 8004644:	40004800 	.word	0x40004800
 8004648:	40004c00 	.word	0x40004c00
 800464c:	40005000 	.word	0x40005000
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a9f      	ldr	r2, [pc, #636]	@ (80048d8 <UART_SetConfig+0x568>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d17a      	bne.n	8004756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004664:	2b08      	cmp	r3, #8
 8004666:	d824      	bhi.n	80046b2 <UART_SetConfig+0x342>
 8004668:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <UART_SetConfig+0x300>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004695 	.word	0x08004695
 8004674:	080046b3 	.word	0x080046b3
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046a3 	.word	0x080046a3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046b3 	.word	0x080046b3
 800468c:	080046b3 	.word	0x080046b3
 8004690:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fe fc38 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b8f      	ldr	r3, [pc, #572]	@ (80048dc <UART_SetConfig+0x56c>)
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fb99 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 80046a6:	61f8      	str	r0, [r7, #28]
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80fb 	beq.w	80048bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d305      	bcc.n	80046e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d903      	bls.n	80046ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046e8:	e0e8      	b.n	80048bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2200      	movs	r2, #0
 80046ee:	461c      	mov	r4, r3
 80046f0:	4615      	mov	r5, r2
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	022b      	lsls	r3, r5, #8
 80046fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004700:	0222      	lsls	r2, r4, #8
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	6849      	ldr	r1, [r1, #4]
 8004706:	0849      	lsrs	r1, r1, #1
 8004708:	2000      	movs	r0, #0
 800470a:	4688      	mov	r8, r1
 800470c:	4681      	mov	r9, r0
 800470e:	eb12 0a08 	adds.w	sl, r2, r8
 8004712:	eb43 0b09 	adc.w	fp, r3, r9
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004724:	4650      	mov	r0, sl
 8004726:	4659      	mov	r1, fp
 8004728:	f7fc faae 	bl	8000c88 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473a:	d308      	bcc.n	800474e <UART_SetConfig+0x3de>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004742:	d204      	bcs.n	800474e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	e0b6      	b.n	80048bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004754:	e0b2      	b.n	80048bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800475e:	d15e      	bne.n	800481e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004764:	2b08      	cmp	r3, #8
 8004766:	d828      	bhi.n	80047ba <UART_SetConfig+0x44a>
 8004768:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <UART_SetConfig+0x400>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047bb 	.word	0x080047bb
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047bb 	.word	0x080047bb
 800478c:	080047bb 	.word	0x080047bb
 8004790:	080047b3 	.word	0x080047b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe fbb8 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8004798:	61f8      	str	r0, [r7, #28]
        break;
 800479a:	e014      	b.n	80047c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7fe fbca 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 80047a0:	61f8      	str	r0, [r7, #28]
        break;
 80047a2:	e010      	b.n	80047c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a4:	4b4d      	ldr	r3, [pc, #308]	@ (80048dc <UART_SetConfig+0x56c>)
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e00d      	b.n	80047c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047aa:	f7fe fb15 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 80047ae:	61f8      	str	r0, [r7, #28]
        break;
 80047b0:	e009      	b.n	80047c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b6:	61fb      	str	r3, [r7, #28]
        break;
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d077      	beq.n	80048bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	005a      	lsls	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d916      	bls.n	8004816 <UART_SetConfig+0x4a6>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ee:	d212      	bcs.n	8004816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f023 030f 	bic.w	r3, r3, #15
 80047f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	b29a      	uxth	r2, r3
 8004806:	8afb      	ldrh	r3, [r7, #22]
 8004808:	4313      	orrs	r3, r2
 800480a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	8afa      	ldrh	r2, [r7, #22]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e052      	b.n	80048bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800481c:	e04e      	b.n	80048bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800481e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004822:	2b08      	cmp	r3, #8
 8004824:	d827      	bhi.n	8004876 <UART_SetConfig+0x506>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <UART_SetConfig+0x4bc>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	08004877 	.word	0x08004877
 800483c:	08004867 	.word	0x08004867
 8004840:	08004877 	.word	0x08004877
 8004844:	08004877 	.word	0x08004877
 8004848:	08004877 	.word	0x08004877
 800484c:	0800486f 	.word	0x0800486f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004850:	f7fe fb5a 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8004854:	61f8      	str	r0, [r7, #28]
        break;
 8004856:	e014      	b.n	8004882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fb6c 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 800485c:	61f8      	str	r0, [r7, #28]
        break;
 800485e:	e010      	b.n	8004882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004860:	4b1e      	ldr	r3, [pc, #120]	@ (80048dc <UART_SetConfig+0x56c>)
 8004862:	61fb      	str	r3, [r7, #28]
        break;
 8004864:	e00d      	b.n	8004882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004866:	f7fe fab7 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 800486a:	61f8      	str	r0, [r7, #28]
        break;
 800486c:	e009      	b.n	8004882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	61fb      	str	r3, [r7, #28]
        break;
 8004874:	e005      	b.n	8004882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004880:	bf00      	nop
    }

    if (pclk != 0U)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d019      	beq.n	80048bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	085a      	lsrs	r2, r3, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	d909      	bls.n	80048b6 <UART_SetConfig+0x546>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d205      	bcs.n	80048b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60da      	str	r2, [r3, #12]
 80048b4:	e002      	b.n	80048bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3728      	adds	r7, #40	@ 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d6:	bf00      	nop
 80048d8:	40008000 	.word	0x40008000
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049de:	d10a      	bne.n	80049f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b098      	sub	sp, #96	@ 0x60
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a34:	f7fd f932 	bl	8001c9c <HAL_GetTick>
 8004a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d12e      	bne.n	8004aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f88c 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d021      	beq.n	8004aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e062      	b.n	8004b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d149      	bne.n	8004b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f856 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03c      	beq.n	8004b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	623b      	str	r3, [r7, #32]
   return(result);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e011      	b.n	8004b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3758      	adds	r7, #88	@ 0x58
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	e04f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b8c:	d04b      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fd f885 	bl	8001c9c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e04e      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d037      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b80      	cmp	r3, #128	@ 0x80
 8004bba:	d034      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b40      	cmp	r3, #64	@ 0x40
 8004bc0:	d031      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d110      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f8ff 	bl	8004ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2208      	movs	r2, #8
 8004be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e029      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c00:	d111      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f8e5 	bl	8004ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d0a0      	beq.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b097      	sub	sp, #92	@ 0x5c
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	d10e      	bne.n	8004ca2 <UART_Start_Receive_IT+0x52>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <UART_Start_Receive_IT+0x48>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c96:	e02d      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	22ff      	movs	r2, #255	@ 0xff
 8004c9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ca0:	e028      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <UART_Start_Receive_IT+0x76>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <UART_Start_Receive_IT+0x6c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	22ff      	movs	r2, #255	@ 0xff
 8004cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cba:	e01b      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	227f      	movs	r2, #127	@ 0x7f
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cc4:	e016      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cce:	d10d      	bne.n	8004cec <UART_Start_Receive_IT+0x9c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <UART_Start_Receive_IT+0x92>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	227f      	movs	r2, #127	@ 0x7f
 8004cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ce0:	e008      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	223f      	movs	r2, #63	@ 0x3f
 8004ce6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cea:	e003      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	@ 0x22
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d24:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004d26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d107      	bne.n	8004d52 <UART_Start_Receive_IT+0x102>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <UART_Start_Receive_IT+0x184>)
 8004d4e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004d50:	e002      	b.n	8004d58 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	@ (8004dd8 <UART_Start_Receive_IT+0x188>)
 8004d56:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d019      	beq.n	8004d94 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e6      	bne.n	8004d60 <UART_Start_Receive_IT+0x110>
 8004d92:	e018      	b.n	8004dc6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	613b      	str	r3, [r7, #16]
   return(result);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	69f9      	ldr	r1, [r7, #28]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e6      	bne.n	8004d94 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	375c      	adds	r7, #92	@ 0x5c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	080050e1 	.word	0x080050e1
 8004dd8:	08004f25 	.word	0x08004f25

08004ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b095      	sub	sp, #84	@ 0x54
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d118      	bne.n	8004e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0310 	bic.w	r3, r3, #16
 8004e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e98:	bf00      	nop
 8004e9a:	3754      	adds	r7, #84	@ 0x54
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff fa3e 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fa0a 	bl	8004330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1c:	bf00      	nop
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b09c      	sub	sp, #112	@ 0x70
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	2b22      	cmp	r3, #34	@ 0x22
 8004f3e:	f040 80be 	bne.w	80050be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f50:	b2d9      	uxtb	r1, r3
 8004f52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 80a3 	bne.w	80050d2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a34      	ldr	r2, [pc, #208]	@ (80050dc <UART_RxISR_8BIT+0x1b8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d01f      	beq.n	8005050 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	623b      	str	r3, [r7, #32]
   return(result);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005032:	663b      	str	r3, [r7, #96]	@ 0x60
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e6      	bne.n	800501e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005054:	2b01      	cmp	r3, #1
 8005056:	d12e      	bne.n	80050b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	60fb      	str	r3, [r7, #12]
   return(result);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0310 	bic.w	r3, r3, #16
 8005072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	617b      	str	r3, [r7, #20]
   return(result);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b10      	cmp	r3, #16
 800509c:	d103      	bne.n	80050a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2210      	movs	r2, #16
 80050a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff f952 	bl	8004358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050b4:	e00d      	b.n	80050d2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fd76 	bl	8001ba8 <HAL_UART_RxCpltCallback>
}
 80050bc:	e009      	b.n	80050d2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	8b1b      	ldrh	r3, [r3, #24]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0208 	orr.w	r2, r2, #8
 80050ce:	b292      	uxth	r2, r2
 80050d0:	831a      	strh	r2, [r3, #24]
}
 80050d2:	bf00      	nop
 80050d4:	3770      	adds	r7, #112	@ 0x70
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40008000 	.word	0x40008000

080050e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b09c      	sub	sp, #112	@ 0x70
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f8:	2b22      	cmp	r3, #34	@ 0x22
 80050fa:	f040 80be 	bne.w	800527a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005104:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800510e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005116:	4013      	ands	r3, r2
 8005118:	b29a      	uxth	r2, r3
 800511a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800511c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80a3 	bne.w	800528e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800515c:	667b      	str	r3, [r7, #100]	@ 0x64
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005166:	657b      	str	r3, [r7, #84]	@ 0x54
 8005168:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800516c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	663b      	str	r3, [r7, #96]	@ 0x60
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800519a:	643a      	str	r2, [r7, #64]	@ 0x40
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a34      	ldr	r2, [pc, #208]	@ (8005298 <UART_RxISR_16BIT+0x1b8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d01f      	beq.n	800520c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e6      	bne.n	80051da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005210:	2b01      	cmp	r3, #1
 8005212:	d12e      	bne.n	8005272 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	60bb      	str	r3, [r7, #8]
   return(result);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0310 	bic.w	r3, r3, #16
 800522e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6979      	ldr	r1, [r7, #20]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	613b      	str	r3, [r7, #16]
   return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d103      	bne.n	8005262 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2210      	movs	r2, #16
 8005260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff f874 	bl	8004358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005270:	e00d      	b.n	800528e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc fc98 	bl	8001ba8 <HAL_UART_RxCpltCallback>
}
 8005278:	e009      	b.n	800528e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	8b1b      	ldrh	r3, [r3, #24]
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0208 	orr.w	r2, r2, #8
 800528a:	b292      	uxth	r2, r2
 800528c:	831a      	strh	r2, [r3, #24]
}
 800528e:	bf00      	nop
 8005290:	3770      	adds	r7, #112	@ 0x70
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40008000 	.word	0x40008000

0800529c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c2:	2b84      	cmp	r3, #132	@ 0x84
 80052c4:	d005      	beq.n	80052d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	3303      	adds	r3, #3
 80052d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052e4:	f000 fdca 	bl	8005e7c <vTaskStartScheduler>
  
  return osOK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	bd80      	pop	{r7, pc}

080052ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f0:	b089      	sub	sp, #36	@ 0x24
 80052f2:	af04      	add	r7, sp, #16
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <osThreadCreate+0x54>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01c      	beq.n	8005342 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685c      	ldr	r4, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691e      	ldr	r6, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ffc8 	bl	80052b0 <makeFreeRtosPriority>
 8005320:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532a:	9202      	str	r2, [sp, #8]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	9100      	str	r1, [sp, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4632      	mov	r2, r6
 8005334:	4629      	mov	r1, r5
 8005336:	4620      	mov	r0, r4
 8005338:	f000 fbd2 	bl	8005ae0 <xTaskCreateStatic>
 800533c:	4603      	mov	r3, r0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e01c      	b.n	800537c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685c      	ldr	r4, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800534e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ffaa 	bl	80052b0 <makeFreeRtosPriority>
 800535c:	4602      	mov	r2, r0
 800535e:	f107 030c 	add.w	r3, r7, #12
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	9200      	str	r2, [sp, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	4632      	mov	r2, r6
 800536a:	4629      	mov	r1, r5
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fc17 	bl	8005ba0 <xTaskCreate>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800537c:	68fb      	ldr	r3, [r7, #12]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005386 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <osDelay+0x16>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	e000      	b.n	800539e <osDelay+0x18>
 800539c:	2301      	movs	r3, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fd36 	bl	8005e10 <vTaskDelay>
  
  return osOK;
 80053a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f103 0208 	add.w	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f103 0208 	add.w	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005466:	d103      	bne.n	8005470 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e00c      	b.n	800548a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3308      	adds	r3, #8
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e002      	b.n	800547e <vListInsert+0x2e>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d2f6      	bcs.n	8005478 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6892      	ldr	r2, [r2, #8]
 80054d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6852      	ldr	r2, [r2, #4]
 80054e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d103      	bne.n	80054f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005544:	f001 fb70 	bl	8006c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	68f9      	ldr	r1, [r7, #12]
 8005552:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005574:	3b01      	subs	r3, #1
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	441a      	add	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22ff      	movs	r2, #255	@ 0xff
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	@ 0xff
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d114      	bne.n	80055c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01a      	beq.n	80055d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3310      	adds	r3, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 feb2 	bl	8006310 <xTaskRemoveFromEventList>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055b2:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <xQueueGenericReset+0xd0>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	e009      	b.n	80055d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3310      	adds	r3, #16
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fef0 	bl	80053ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3324      	adds	r3, #36	@ 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff feeb 	bl	80053ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 fb58 	bl	8006c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055dc:	2301      	movs	r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3348      	adds	r3, #72	@ 0x48
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fc20 	bl	8006e6c <pvPortMalloc>
 800562c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d011      	beq.n	8005658 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3348      	adds	r3, #72	@ 0x48
 800563c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005646:	79fa      	ldrb	r2, [r7, #7]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f805 	bl	8005662 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005658:	69bb      	ldr	r3, [r7, #24]
	}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e002      	b.n	8005684 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005690:	2101      	movs	r1, #1
 8005692:	69b8      	ldr	r0, [r7, #24]
 8005694:	f7ff ff40 	bl	8005518 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	@ 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	623b      	str	r3, [r7, #32]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <xQueueGiveFromISR+0x4c>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61fb      	str	r3, [r7, #28]
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <xQueueGiveFromISR+0x5c>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <xQueueGiveFromISR+0x60>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <xQueueGiveFromISR+0x62>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61bb      	str	r3, [r7, #24]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800571e:	f001 fb63 	bl	8006de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005722:	f3ef 8211 	mrs	r2, BASEPRI
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	617a      	str	r2, [r7, #20]
 8005738:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800573a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574a:	429a      	cmp	r2, r3
 800574c:	d22b      	bcs.n	80057a6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005760:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005768:	d112      	bne.n	8005790 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	3324      	adds	r3, #36	@ 0x24
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fdca 	bl	8006310 <xTaskRemoveFromEventList>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e007      	b.n	80057a0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005794:	3301      	adds	r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	b25a      	sxtb	r2, r3
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057a0:	2301      	movs	r3, #1
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a4:	e001      	b.n	80057aa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3738      	adds	r7, #56	@ 0x38
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08e      	sub	sp, #56	@ 0x38
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	623b      	str	r3, [r7, #32]
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	61fb      	str	r3, [r7, #28]
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005814:	f000 ff3c 	bl	8006690 <xTaskGetSchedulerState>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <xQueueSemaphoreTake+0x64>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueSemaphoreTake+0x68>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <xQueueSemaphoreTake+0x6a>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	61bb      	str	r3, [r7, #24]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005846:	f001 f9ef 	bl	8006c28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d024      	beq.n	80058a0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005866:	f001 f837 	bl	80068d8 <pvTaskIncrementMutexHeldCount>
 800586a:	4602      	mov	r2, r0
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00f      	beq.n	8005898 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	3310      	adds	r3, #16
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fd47 	bl	8006310 <xTaskRemoveFromEventList>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005888:	4b54      	ldr	r3, [pc, #336]	@ (80059dc <xQueueSemaphoreTake+0x21c>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005898:	f001 f9f8 	bl	8006c8c <vPortExitCritical>
				return pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	e098      	b.n	80059d2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d112      	bne.n	80058cc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	617b      	str	r3, [r7, #20]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058c4:	f001 f9e2 	bl	8006c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e082      	b.n	80059d2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fd7e 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e0:	f001 f9d4 	bl	8006c8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e4:	f000 fb2c 	bl	8005f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e8:	f001 f99e 	bl	8006c28 <vPortEnterCritical>
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058f8:	d103      	bne.n	8005902 <xQueueSemaphoreTake+0x142>
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005908:	b25b      	sxtb	r3, r3
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800590e:	d103      	bne.n	8005918 <xQueueSemaphoreTake+0x158>
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005918:	f001 f9b8 	bl	8006c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800591c:	463a      	mov	r2, r7
 800591e:	f107 030c 	add.w	r3, r7, #12
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fd6d 	bl	8006404 <xTaskCheckForTimeOut>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d132      	bne.n	8005996 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005930:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005932:	f000 f8bf 	bl	8005ab4 <prvIsQueueEmpty>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d026      	beq.n	800598a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005944:	f001 f970 	bl	8006c28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 febd 	bl	80066cc <xTaskPriorityInherit>
 8005952:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005954:	f001 f99a 	bl	8006c8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	3324      	adds	r3, #36	@ 0x24
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fcaf 	bl	80062c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005966:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005968:	f000 f852 	bl	8005a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800596c:	f000 faf6 	bl	8005f5c <xTaskResumeAll>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f47f af67 	bne.w	8005846 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005978:	4b18      	ldr	r3, [pc, #96]	@ (80059dc <xQueueSemaphoreTake+0x21c>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	e75d      	b.n	8005846 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800598a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800598c:	f000 f840 	bl	8005a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005990:	f000 fae4 	bl	8005f5c <xTaskResumeAll>
 8005994:	e757      	b.n	8005846 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005996:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005998:	f000 f83a 	bl	8005a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800599c:	f000 fade 	bl	8005f5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059a2:	f000 f887 	bl	8005ab4 <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f af4c 	beq.w	8005846 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80059b4:	f001 f938 	bl	8006c28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059ba:	f000 f811 	bl	80059e0 <prvGetDisinheritPriorityAfterTimeout>
 80059be:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fef6 	bl	80067b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059cc:	f001 f95e 	bl	8006c8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3738      	adds	r7, #56	@ 0x38
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f1c3 0307 	rsb	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e001      	b.n	8005a02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a02:	68fb      	ldr	r3, [r7, #12]
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f001 f906 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a24:	e011      	b.n	8005a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3324      	adds	r3, #36	@ 0x24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fc6c 	bl	8006310 <xTaskRemoveFromEventList>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a3e:	f000 fd45 	bl	80064cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dce9      	bgt.n	8005a26 <prvUnlockQueue+0x16>
 8005a52:	e000      	b.n	8005a56 <prvUnlockQueue+0x46>
					break;
 8005a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	22ff      	movs	r2, #255	@ 0xff
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a5e:	f001 f915 	bl	8006c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a62:	f001 f8e1 	bl	8006c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a6e:	e011      	b.n	8005a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3310      	adds	r3, #16
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fc47 	bl	8006310 <xTaskRemoveFromEventList>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a88:	f000 fd20 	bl	80064cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dce9      	bgt.n	8005a70 <prvUnlockQueue+0x60>
 8005a9c:	e000      	b.n	8005aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	22ff      	movs	r2, #255	@ 0xff
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005aa8:	f001 f8f0 	bl	8006c8c <vPortExitCritical>
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005abc:	f001 f8b4 	bl	8006c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e001      	b.n	8005ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ad2:	f001 f8db 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08e      	sub	sp, #56	@ 0x38
 8005ae4:	af04      	add	r7, sp, #16
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	623b      	str	r3, [r7, #32]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	61fb      	str	r3, [r7, #28]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b2a:	2354      	movs	r3, #84	@ 0x54
 8005b2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b54      	cmp	r3, #84	@ 0x54
 8005b32:	d00b      	beq.n	8005b4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61bb      	str	r3, [r7, #24]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01e      	beq.n	8005b92 <xTaskCreateStatic+0xb2>
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01b      	beq.n	8005b92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	9302      	str	r3, [sp, #8]
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f850 	bl	8005c2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b8c:	f000 f8d6 	bl	8005d3c <prvAddNewTaskToReadyList>
 8005b90:	e001      	b.n	8005b96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b96:	697b      	ldr	r3, [r7, #20]
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3728      	adds	r7, #40	@ 0x28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	@ 0x30
 8005ba4:	af04      	add	r7, sp, #16
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 f959 	bl	8006e6c <pvPortMalloc>
 8005bba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00e      	beq.n	8005be0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bc2:	2054      	movs	r0, #84	@ 0x54
 8005bc4:	f001 f952 	bl	8006e6c <pvPortMalloc>
 8005bc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bd6:	e005      	b.n	8005be4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bd8:	6978      	ldr	r0, [r7, #20]
 8005bda:	f001 fa15 	bl	8007008 <vPortFree>
 8005bde:	e001      	b.n	8005be4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	9302      	str	r3, [sp, #8]
 8005bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f80e 	bl	8005c2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c0e:	69f8      	ldr	r0, [r7, #28]
 8005c10:	f000 f894 	bl	8005d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e002      	b.n	8005c20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c20:	69bb      	ldr	r3, [r7, #24]
	}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c42:	3b01      	subs	r3, #1
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f023 0307 	bic.w	r3, r3, #7
 8005c50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	617b      	str	r3, [r7, #20]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01f      	beq.n	8005cba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e012      	b.n	8005ca6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	7819      	ldrb	r1, [r3, #0]
 8005c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3334      	adds	r3, #52	@ 0x34
 8005c90:	460a      	mov	r2, r1
 8005c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d006      	beq.n	8005cae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	2b0f      	cmp	r3, #15
 8005caa:	d9e9      	bls.n	8005c80 <prvInitialiseNewTask+0x56>
 8005cac:	e000      	b.n	8005cb0 <prvInitialiseNewTask+0x86>
			{
				break;
 8005cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cb8:	e003      	b.n	8005cc2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	d901      	bls.n	8005ccc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cc8:	2306      	movs	r3, #6
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fb83 	bl	80053ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fb7e 	bl	80053ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	f1c3 0207 	rsb	r2, r3, #7
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	68f9      	ldr	r1, [r7, #12]
 8005d1a:	69b8      	ldr	r0, [r7, #24]
 8005d1c:	f000 fe56 	bl	80069cc <pxPortInitialiseStack>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d32:	bf00      	nop
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d44:	f000 ff70 	bl	8006c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d48:	4b2a      	ldr	r3, [pc, #168]	@ (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a29      	ldr	r2, [pc, #164]	@ (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d52:	4b29      	ldr	r3, [pc, #164]	@ (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d5a:	4a27      	ldr	r2, [pc, #156]	@ (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d60:	4b24      	ldr	r3, [pc, #144]	@ (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d110      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d68:	f000 fbd4 	bl	8006514 <prvInitialiseTaskLists>
 8005d6c:	e00d      	b.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d6e:	4b23      	ldr	r3, [pc, #140]	@ (8005dfc <prvAddNewTaskToReadyList+0xc0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d76:	4b20      	ldr	r3, [pc, #128]	@ (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d802      	bhi.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d84:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	4b19      	ldr	r3, [pc, #100]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a15      	ldr	r2, [pc, #84]	@ (8005e08 <prvAddNewTaskToReadyList+0xcc>)
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f7ff fb23 	bl	8005408 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dc2:	f000 ff63 	bl	8006c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dfc <prvAddNewTaskToReadyList+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dce:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d207      	bcs.n	8005dec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200009a4 	.word	0x200009a4
 8005df8:	200008a4 	.word	0x200008a4
 8005dfc:	200009b0 	.word	0x200009b0
 8005e00:	200009c0 	.word	0x200009c0
 8005e04:	200009ac 	.word	0x200009ac
 8005e08:	200008a8 	.word	0x200008a8
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d018      	beq.n	8005e54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <vTaskDelay+0x64>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <vTaskDelay+0x32>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60bb      	str	r3, [r7, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	e7fd      	b.n	8005e3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e42:	f000 f87d 	bl	8005f40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e46:	2100      	movs	r1, #0
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fd59 	bl	8006900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e4e:	f000 f885 	bl	8005f5c <xTaskResumeAll>
 8005e52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e5a:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <vTaskDelay+0x68>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200009cc 	.word	0x200009cc
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	@ 0x28
 8005e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e8a:	463a      	mov	r2, r7
 8005e8c:	1d39      	adds	r1, r7, #4
 8005e8e:	f107 0308 	add.w	r3, r7, #8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fb f8a6 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	9202      	str	r2, [sp, #8]
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	460a      	mov	r2, r1
 8005eaa:	491f      	ldr	r1, [pc, #124]	@ (8005f28 <vTaskStartScheduler+0xac>)
 8005eac:	481f      	ldr	r0, [pc, #124]	@ (8005f2c <vTaskStartScheduler+0xb0>)
 8005eae:	f7ff fe17 	bl	8005ae0 <xTaskCreateStatic>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f30 <vTaskStartScheduler+0xb4>)
 8005eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f30 <vTaskStartScheduler+0xb4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e001      	b.n	8005eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d116      	bne.n	8005efe <vTaskStartScheduler+0x82>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	613b      	str	r3, [r7, #16]
}
 8005ee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee4:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <vTaskStartScheduler+0xb8>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eec:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <vTaskStartScheduler+0xbc>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ef2:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <vTaskStartScheduler+0xc0>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ef8:	f000 fdf2 	bl	8006ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005efc:	e00f      	b.n	8005f1e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f04:	d10b      	bne.n	8005f1e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60fb      	str	r3, [r7, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <vTaskStartScheduler+0x9e>
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	0800bb1c 	.word	0x0800bb1c
 8005f2c:	080064e5 	.word	0x080064e5
 8005f30:	200009c8 	.word	0x200009c8
 8005f34:	200009c4 	.word	0x200009c4
 8005f38:	200009b0 	.word	0x200009b0
 8005f3c:	200009a8 	.word	0x200009a8

08005f40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f44:	4b04      	ldr	r3, [pc, #16]	@ (8005f58 <vTaskSuspendAll+0x18>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	4a03      	ldr	r2, [pc, #12]	@ (8005f58 <vTaskSuspendAll+0x18>)
 8005f4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	200009cc 	.word	0x200009cc

08005f5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f6a:	4b42      	ldr	r3, [pc, #264]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <xTaskResumeAll+0x2e>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	603b      	str	r3, [r7, #0]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f8a:	f000 fe4d 	bl	8006c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f8e:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4a37      	ldr	r2, [pc, #220]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f98:	4b36      	ldr	r3, [pc, #216]	@ (8006074 <xTaskResumeAll+0x118>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d161      	bne.n	8006064 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fa0:	4b35      	ldr	r3, [pc, #212]	@ (8006078 <xTaskResumeAll+0x11c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05d      	beq.n	8006064 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa8:	e02e      	b.n	8006008 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b34      	ldr	r3, [pc, #208]	@ (800607c <xTaskResumeAll+0x120>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3318      	adds	r3, #24
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fa83 	bl	80054c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fa7e 	bl	80054c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	4b2c      	ldr	r3, [pc, #176]	@ (8006080 <xTaskResumeAll+0x124>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <xTaskResumeAll+0x124>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a27      	ldr	r2, [pc, #156]	@ (8006084 <xTaskResumeAll+0x128>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7ff fa0a 	bl	8005408 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	4b23      	ldr	r3, [pc, #140]	@ (8006088 <xTaskResumeAll+0x12c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <xTaskResumeAll+0x130>)
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006008:	4b1c      	ldr	r3, [pc, #112]	@ (800607c <xTaskResumeAll+0x120>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1cc      	bne.n	8005faa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006016:	f000 fb1b 	bl	8006650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800601a:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <xTaskResumeAll+0x134>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d010      	beq.n	8006048 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006026:	f000 f837 	bl	8006098 <xTaskIncrementTick>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <xTaskResumeAll+0x130>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3b01      	subs	r3, #1
 800603a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f1      	bne.n	8006026 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <xTaskResumeAll+0x134>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006048:	4b10      	ldr	r3, [pc, #64]	@ (800608c <xTaskResumeAll+0x130>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <xTaskResumeAll+0x138>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006064:	f000 fe12 	bl	8006c8c <vPortExitCritical>

	return xAlreadyYielded;
 8006068:	68bb      	ldr	r3, [r7, #8]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200009cc 	.word	0x200009cc
 8006078:	200009a4 	.word	0x200009a4
 800607c:	20000964 	.word	0x20000964
 8006080:	200009ac 	.word	0x200009ac
 8006084:	200008a8 	.word	0x200008a8
 8006088:	200008a4 	.word	0x200008a4
 800608c:	200009b8 	.word	0x200009b8
 8006090:	200009b4 	.word	0x200009b4
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a2:	4b4f      	ldr	r3, [pc, #316]	@ (80061e0 <xTaskIncrementTick+0x148>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 808f 	bne.w	80061ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ac:	4b4d      	ldr	r3, [pc, #308]	@ (80061e4 <xTaskIncrementTick+0x14c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b4:	4a4b      	ldr	r2, [pc, #300]	@ (80061e4 <xTaskIncrementTick+0x14c>)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d121      	bne.n	8006104 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060c0:	4b49      	ldr	r3, [pc, #292]	@ (80061e8 <xTaskIncrementTick+0x150>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <xTaskIncrementTick+0x46>
 80060e2:	4b41      	ldr	r3, [pc, #260]	@ (80061e8 <xTaskIncrementTick+0x150>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	4b40      	ldr	r3, [pc, #256]	@ (80061ec <xTaskIncrementTick+0x154>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3e      	ldr	r2, [pc, #248]	@ (80061e8 <xTaskIncrementTick+0x150>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4a3e      	ldr	r2, [pc, #248]	@ (80061ec <xTaskIncrementTick+0x154>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b3e      	ldr	r3, [pc, #248]	@ (80061f0 <xTaskIncrementTick+0x158>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a3c      	ldr	r2, [pc, #240]	@ (80061f0 <xTaskIncrementTick+0x158>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	f000 faa6 	bl	8006650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006104:	4b3b      	ldr	r3, [pc, #236]	@ (80061f4 <xTaskIncrementTick+0x15c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d348      	bcc.n	80061a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610e:	4b36      	ldr	r3, [pc, #216]	@ (80061e8 <xTaskIncrementTick+0x150>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006118:	4b36      	ldr	r3, [pc, #216]	@ (80061f4 <xTaskIncrementTick+0x15c>)
 800611a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800611e:	601a      	str	r2, [r3, #0]
					break;
 8006120:	e03e      	b.n	80061a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006122:	4b31      	ldr	r3, [pc, #196]	@ (80061e8 <xTaskIncrementTick+0x150>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d203      	bcs.n	8006142 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800613a:	4a2e      	ldr	r2, [pc, #184]	@ (80061f4 <xTaskIncrementTick+0x15c>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006140:	e02e      	b.n	80061a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f9bb 	bl	80054c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	3318      	adds	r3, #24
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff f9b2 	bl	80054c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006162:	2201      	movs	r2, #1
 8006164:	409a      	lsls	r2, r3
 8006166:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <xTaskIncrementTick+0x160>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	4a22      	ldr	r2, [pc, #136]	@ (80061f8 <xTaskIncrementTick+0x160>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <xTaskIncrementTick+0x164>)
 800617e:	441a      	add	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7ff f93e 	bl	8005408 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006190:	4b1b      	ldr	r3, [pc, #108]	@ (8006200 <xTaskIncrementTick+0x168>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	429a      	cmp	r2, r3
 8006198:	d3b9      	bcc.n	800610e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619e:	e7b6      	b.n	800610e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a0:	4b17      	ldr	r3, [pc, #92]	@ (8006200 <xTaskIncrementTick+0x168>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	4915      	ldr	r1, [pc, #84]	@ (80061fc <xTaskIncrementTick+0x164>)
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d901      	bls.n	80061bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061bc:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <xTaskIncrementTick+0x16c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e004      	b.n	80061d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006208 <xTaskIncrementTick+0x170>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <xTaskIncrementTick+0x170>)
 80061d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061d4:	697b      	ldr	r3, [r7, #20]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200009cc 	.word	0x200009cc
 80061e4:	200009a8 	.word	0x200009a8
 80061e8:	2000095c 	.word	0x2000095c
 80061ec:	20000960 	.word	0x20000960
 80061f0:	200009bc 	.word	0x200009bc
 80061f4:	200009c4 	.word	0x200009c4
 80061f8:	200009ac 	.word	0x200009ac
 80061fc:	200008a8 	.word	0x200008a8
 8006200:	200008a4 	.word	0x200008a4
 8006204:	200009b8 	.word	0x200009b8
 8006208:	200009b4 	.word	0x200009b4

0800620c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006212:	4b27      	ldr	r3, [pc, #156]	@ (80062b0 <vTaskSwitchContext+0xa4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800621a:	4b26      	ldr	r3, [pc, #152]	@ (80062b4 <vTaskSwitchContext+0xa8>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006220:	e040      	b.n	80062a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006222:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <vTaskSwitchContext+0xa8>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006228:	4b23      	ldr	r3, [pc, #140]	@ (80062b8 <vTaskSwitchContext+0xac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	fab3 f383 	clz	r3, r3
 8006234:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f1c3 031f 	rsb	r3, r3, #31
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	491f      	ldr	r1, [pc, #124]	@ (80062bc <vTaskSwitchContext+0xb0>)
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <vTaskSwitchContext+0x5a>
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4a11      	ldr	r2, [pc, #68]	@ (80062bc <vTaskSwitchContext+0xb0>)
 8006276:	4413      	add	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3308      	adds	r3, #8
 800628c:	429a      	cmp	r2, r3
 800628e:	d104      	bne.n	800629a <vTaskSwitchContext+0x8e>
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4a07      	ldr	r2, [pc, #28]	@ (80062c0 <vTaskSwitchContext+0xb4>)
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	200009cc 	.word	0x200009cc
 80062b4:	200009b8 	.word	0x200009b8
 80062b8:	200009ac 	.word	0x200009ac
 80062bc:	200008a8 	.word	0x200008a8
 80062c0:	200008a4 	.word	0x200008a4

080062c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ec:	4b07      	ldr	r3, [pc, #28]	@ (800630c <vTaskPlaceOnEventList+0x48>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3318      	adds	r3, #24
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff f8ab 	bl	8005450 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062fa:	2101      	movs	r1, #1
 80062fc:	6838      	ldr	r0, [r7, #0]
 80062fe:	f000 faff 	bl	8006900 <prvAddCurrentTaskToDelayedList>
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200008a4 	.word	0x200008a4

08006310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3318      	adds	r3, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f8bd 	bl	80054c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006348:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <xTaskRemoveFromEventList+0xb0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11c      	bne.n	800638a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff f8b4 	bl	80054c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635e:	2201      	movs	r2, #1
 8006360:	409a      	lsls	r2, r3
 8006362:	4b18      	ldr	r3, [pc, #96]	@ (80063c4 <xTaskRemoveFromEventList+0xb4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4313      	orrs	r3, r2
 8006368:	4a16      	ldr	r2, [pc, #88]	@ (80063c4 <xTaskRemoveFromEventList+0xb4>)
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4a13      	ldr	r2, [pc, #76]	@ (80063c8 <xTaskRemoveFromEventList+0xb8>)
 800637a:	441a      	add	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7ff f840 	bl	8005408 <vListInsertEnd>
 8006388:	e005      	b.n	8006396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3318      	adds	r3, #24
 800638e:	4619      	mov	r1, r3
 8006390:	480e      	ldr	r0, [pc, #56]	@ (80063cc <xTaskRemoveFromEventList+0xbc>)
 8006392:	f7ff f839 	bl	8005408 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <xTaskRemoveFromEventList+0xc0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d905      	bls.n	80063b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <xTaskRemoveFromEventList+0xc4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e001      	b.n	80063b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200009cc 	.word	0x200009cc
 80063c4:	200009ac 	.word	0x200009ac
 80063c8:	200008a8 	.word	0x200008a8
 80063cc:	20000964 	.word	0x20000964
 80063d0:	200008a4 	.word	0x200008a4
 80063d4:	200009b8 	.word	0x200009b8

080063d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <vTaskInternalSetTimeOutState+0x24>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <vTaskInternalSetTimeOutState+0x28>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	200009bc 	.word	0x200009bc
 8006400:	200009a8 	.word	0x200009a8

08006404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	613b      	str	r3, [r7, #16]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800644a:	f000 fbed 	bl	8006c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800644e:	4b1d      	ldr	r3, [pc, #116]	@ (80064c4 <xTaskCheckForTimeOut+0xc0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006466:	d102      	bne.n	800646e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	e023      	b.n	80064b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b15      	ldr	r3, [pc, #84]	@ (80064c8 <xTaskCheckForTimeOut+0xc4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d007      	beq.n	800648a <xTaskCheckForTimeOut+0x86>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e015      	b.n	80064b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	d20b      	bcs.n	80064ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ff99 	bl	80063d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e004      	b.n	80064b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f000 fbe9 	bl	8006c8c <vPortExitCritical>

	return xReturn;
 80064ba:	69fb      	ldr	r3, [r7, #28]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	200009a8 	.word	0x200009a8
 80064c8:	200009bc 	.word	0x200009bc

080064cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <vTaskMissedYield+0x14>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	200009b8 	.word	0x200009b8

080064e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064ec:	f000 f852 	bl	8006594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064f0:	4b06      	ldr	r3, [pc, #24]	@ (800650c <prvIdleTask+0x28>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d9f9      	bls.n	80064ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <prvIdleTask+0x2c>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006508:	e7f0      	b.n	80064ec <prvIdleTask+0x8>
 800650a:	bf00      	nop
 800650c:	200008a8 	.word	0x200008a8
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e00c      	b.n	800653a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <prvInitialiseTaskLists+0x60>)
 800652c:	4413      	add	r3, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe ff3d 	bl	80053ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b06      	cmp	r3, #6
 800653e:	d9ef      	bls.n	8006520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006540:	480d      	ldr	r0, [pc, #52]	@ (8006578 <prvInitialiseTaskLists+0x64>)
 8006542:	f7fe ff34 	bl	80053ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006546:	480d      	ldr	r0, [pc, #52]	@ (800657c <prvInitialiseTaskLists+0x68>)
 8006548:	f7fe ff31 	bl	80053ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800654c:	480c      	ldr	r0, [pc, #48]	@ (8006580 <prvInitialiseTaskLists+0x6c>)
 800654e:	f7fe ff2e 	bl	80053ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006552:	480c      	ldr	r0, [pc, #48]	@ (8006584 <prvInitialiseTaskLists+0x70>)
 8006554:	f7fe ff2b 	bl	80053ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006558:	480b      	ldr	r0, [pc, #44]	@ (8006588 <prvInitialiseTaskLists+0x74>)
 800655a:	f7fe ff28 	bl	80053ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <prvInitialiseTaskLists+0x78>)
 8006560:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <prvInitialiseTaskLists+0x64>)
 8006562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <prvInitialiseTaskLists+0x7c>)
 8006566:	4a05      	ldr	r2, [pc, #20]	@ (800657c <prvInitialiseTaskLists+0x68>)
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200008a8 	.word	0x200008a8
 8006578:	20000934 	.word	0x20000934
 800657c:	20000948 	.word	0x20000948
 8006580:	20000964 	.word	0x20000964
 8006584:	20000978 	.word	0x20000978
 8006588:	20000990 	.word	0x20000990
 800658c:	2000095c 	.word	0x2000095c
 8006590:	20000960 	.word	0x20000960

08006594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659a:	e019      	b.n	80065d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800659c:	f000 fb44 	bl	8006c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a0:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <prvCheckTasksWaitingTermination+0x50>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe ff88 	bl	80054c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065b2:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4a0b      	ldr	r2, [pc, #44]	@ (80065e8 <prvCheckTasksWaitingTermination+0x54>)
 80065ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065bc:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065c6:	f000 fb61 	bl	8006c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f810 	bl	80065f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d0:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <prvCheckTasksWaitingTermination+0x58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e1      	bne.n	800659c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000978 	.word	0x20000978
 80065e8:	200009a4 	.word	0x200009a4
 80065ec:	2000098c 	.word	0x2000098c

080065f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fcfe 	bl	8007008 <vPortFree>
				vPortFree( pxTCB );
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fcfb 	bl	8007008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006612:	e019      	b.n	8006648 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800661a:	2b01      	cmp	r3, #1
 800661c:	d103      	bne.n	8006626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fcf2 	bl	8007008 <vPortFree>
	}
 8006624:	e010      	b.n	8006648 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800662c:	2b02      	cmp	r3, #2
 800662e:	d00b      	beq.n	8006648 <prvDeleteTCB+0x58>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <prvDeleteTCB+0x54>
	}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006656:	4b0c      	ldr	r3, [pc, #48]	@ (8006688 <prvResetNextTaskUnblockTime+0x38>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006660:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <prvResetNextTaskUnblockTime+0x3c>)
 8006662:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006668:	e008      	b.n	800667c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666a:	4b07      	ldr	r3, [pc, #28]	@ (8006688 <prvResetNextTaskUnblockTime+0x38>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4a04      	ldr	r2, [pc, #16]	@ (800668c <prvResetNextTaskUnblockTime+0x3c>)
 800667a:	6013      	str	r3, [r2, #0]
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	2000095c 	.word	0x2000095c
 800668c:	200009c4 	.word	0x200009c4

08006690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006696:	4b0b      	ldr	r3, [pc, #44]	@ (80066c4 <xTaskGetSchedulerState+0x34>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800669e:	2301      	movs	r3, #1
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	e008      	b.n	80066b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a4:	4b08      	ldr	r3, [pc, #32]	@ (80066c8 <xTaskGetSchedulerState+0x38>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066ac:	2302      	movs	r3, #2
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	e001      	b.n	80066b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066b6:	687b      	ldr	r3, [r7, #4]
	}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	200009b0 	.word	0x200009b0
 80066c8:	200009cc 	.word	0x200009cc

080066cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d05e      	beq.n	80067a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e6:	4b31      	ldr	r3, [pc, #196]	@ (80067ac <xTaskPriorityInherit+0xe0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d24e      	bcs.n	800678e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db06      	blt.n	8006706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f8:	4b2c      	ldr	r3, [pc, #176]	@ (80067ac <xTaskPriorityInherit+0xe0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	f1c3 0207 	rsb	r2, r3, #7
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6959      	ldr	r1, [r3, #20]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a26      	ldr	r2, [pc, #152]	@ (80067b0 <xTaskPriorityInherit+0xe4>)
 8006718:	4413      	add	r3, r2
 800671a:	4299      	cmp	r1, r3
 800671c:	d12f      	bne.n	800677e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fecd 	bl	80054c2 <uxListRemove>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	43da      	mvns	r2, r3
 800673a:	4b1e      	ldr	r3, [pc, #120]	@ (80067b4 <xTaskPriorityInherit+0xe8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4013      	ands	r3, r2
 8006740:	4a1c      	ldr	r2, [pc, #112]	@ (80067b4 <xTaskPriorityInherit+0xe8>)
 8006742:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006744:	4b19      	ldr	r3, [pc, #100]	@ (80067ac <xTaskPriorityInherit+0xe0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	2201      	movs	r2, #1
 8006754:	409a      	lsls	r2, r3
 8006756:	4b17      	ldr	r3, [pc, #92]	@ (80067b4 <xTaskPriorityInherit+0xe8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4313      	orrs	r3, r2
 800675c:	4a15      	ldr	r2, [pc, #84]	@ (80067b4 <xTaskPriorityInherit+0xe8>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a10      	ldr	r2, [pc, #64]	@ (80067b0 <xTaskPriorityInherit+0xe4>)
 800676e:	441a      	add	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7fe fe46 	bl	8005408 <vListInsertEnd>
 800677c:	e004      	b.n	8006788 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <xTaskPriorityInherit+0xe0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e008      	b.n	80067a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <xTaskPriorityInherit+0xe0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	429a      	cmp	r2, r3
 800679a:	d201      	bcs.n	80067a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067a0:	68fb      	ldr	r3, [r7, #12]
	}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200008a4 	.word	0x200008a4
 80067b0:	200008a8 	.word	0x200008a8
 80067b4:	200009ac 	.word	0x200009ac

080067b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d079      	beq.n	80068c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	e7fd      	b.n	80067ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d902      	bls.n	8006800 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e002      	b.n	8006806 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006804:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	429a      	cmp	r2, r3
 800680e:	d059      	beq.n	80068c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	429a      	cmp	r2, r3
 8006818:	d154      	bne.n	80068c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800681a:	4b2c      	ldr	r3, [pc, #176]	@ (80068cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	429a      	cmp	r2, r3
 8006822:	d10b      	bne.n	800683c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60bb      	str	r3, [r7, #8]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	db04      	blt.n	800685a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f1c3 0207 	rsb	r2, r3, #7
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	6959      	ldr	r1, [r3, #20]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4a19      	ldr	r2, [pc, #100]	@ (80068d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800686a:	4413      	add	r3, r2
 800686c:	4299      	cmp	r1, r3
 800686e:	d129      	bne.n	80068c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	3304      	adds	r3, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fe24 	bl	80054c2 <uxListRemove>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	2201      	movs	r2, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	43da      	mvns	r2, r3
 800688c:	4b11      	ldr	r3, [pc, #68]	@ (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4013      	ands	r3, r2
 8006892:	4a10      	ldr	r2, [pc, #64]	@ (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006894:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689a:	2201      	movs	r2, #1
 800689c:	409a      	lsls	r2, r3
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	4a0b      	ldr	r2, [pc, #44]	@ (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4a06      	ldr	r2, [pc, #24]	@ (80068d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80068b6:	441a      	add	r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fe fda2 	bl	8005408 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c4:	bf00      	nop
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200008a4 	.word	0x200008a4
 80068d0:	200008a8 	.word	0x200008a8
 80068d4:	200009ac 	.word	0x200009ac

080068d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068dc:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <pvTaskIncrementMutexHeldCount+0x24>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068e4:	4b05      	ldr	r3, [pc, #20]	@ (80068fc <pvTaskIncrementMutexHeldCount+0x24>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068ea:	3201      	adds	r2, #1
 80068ec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80068ee:	4b03      	ldr	r3, [pc, #12]	@ (80068fc <pvTaskIncrementMutexHeldCount+0x24>)
 80068f0:	681b      	ldr	r3, [r3, #0]
	}
 80068f2:	4618      	mov	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	200008a4 	.word	0x200008a4

08006900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800690a:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006910:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fdd3 	bl	80054c2 <uxListRemove>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006922:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	2201      	movs	r2, #1
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	43da      	mvns	r2, r3
 8006930:	4b21      	ldr	r3, [pc, #132]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4013      	ands	r3, r2
 8006936:	4a20      	ldr	r2, [pc, #128]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006938:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006940:	d10a      	bne.n	8006958 <prvAddCurrentTaskToDelayedList+0x58>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006948:	4b1a      	ldr	r3, [pc, #104]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	481a      	ldr	r0, [pc, #104]	@ (80069bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006952:	f7fe fd59 	bl	8005408 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006956:	e026      	b.n	80069a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006960:	4b14      	ldr	r3, [pc, #80]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	429a      	cmp	r2, r3
 800696e:	d209      	bcs.n	8006984 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006970:	4b13      	ldr	r3, [pc, #76]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4b0f      	ldr	r3, [pc, #60]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7fe fd67 	bl	8005450 <vListInsert>
}
 8006982:	e010      	b.n	80069a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006984:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3304      	adds	r3, #4
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f7fe fd5d 	bl	8005450 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006996:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	429a      	cmp	r2, r3
 800699e:	d202      	bcs.n	80069a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069a0:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6013      	str	r3, [r2, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200009a8 	.word	0x200009a8
 80069b4:	200008a4 	.word	0x200008a4
 80069b8:	200009ac 	.word	0x200009ac
 80069bc:	20000990 	.word	0x20000990
 80069c0:	20000960 	.word	0x20000960
 80069c4:	2000095c 	.word	0x2000095c
 80069c8:	200009c4 	.word	0x200009c4

080069cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3b04      	subs	r3, #4
 80069dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3b04      	subs	r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3b04      	subs	r3, #4
 80069fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006a30 <pxPortInitialiseStack+0x64>)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b14      	subs	r3, #20
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f06f 0202 	mvn.w	r2, #2
 8006a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b20      	subs	r3, #32
 8006a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a22:	68fb      	ldr	r3, [r7, #12]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	08006a35 	.word	0x08006a35

08006a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a3e:	4b13      	ldr	r3, [pc, #76]	@ (8006a8c <prvTaskExitError+0x58>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a46:	d00b      	beq.n	8006a60 <prvTaskExitError+0x2c>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <prvTaskExitError+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
}
 8006a72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a74:	bf00      	nop
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0fc      	beq.n	8006a76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c

08006a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	4770      	bx	lr
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ab8:	4808      	ldr	r0, [pc, #32]	@ (8006adc <prvPortStartFirstTask+0x24>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8814 	msr	CONTROL, r0
 8006aca:	b662      	cpsie	i
 8006acc:	b661      	cpsie	f
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	df00      	svc	0
 8006ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ada:	bf00      	nop
 8006adc:	e000ed08 	.word	0xe000ed08

08006ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a47      	ldr	r2, [pc, #284]	@ (8006c08 <xPortStartScheduler+0x128>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10b      	bne.n	8006b08 <xPortStartScheduler+0x28>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b08:	4b3e      	ldr	r3, [pc, #248]	@ (8006c04 <xPortStartScheduler+0x124>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c0c <xPortStartScheduler+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10b      	bne.n	8006b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60fb      	str	r3, [r7, #12]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b2a:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <xPortStartScheduler+0x130>)
 8006b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	22ff      	movs	r2, #255	@ 0xff
 8006b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <xPortStartScheduler+0x134>)
 8006b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b54:	2207      	movs	r2, #7
 8006b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b58:	e009      	b.n	8006b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4a2d      	ldr	r2, [pc, #180]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b76:	2b80      	cmp	r3, #128	@ 0x80
 8006b78:	d0ef      	beq.n	8006b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b7a:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1c3 0307 	rsb	r3, r3, #7
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00b      	beq.n	8006b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	4a19      	ldr	r2, [pc, #100]	@ (8006c18 <xPortStartScheduler+0x138>)
 8006bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bbc:	4b17      	ldr	r3, [pc, #92]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc8:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	@ (8006c1c <xPortStartScheduler+0x13c>)
 8006bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bd4:	f000 f8da 	bl	8006d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	@ (8006c20 <xPortStartScheduler+0x140>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bde:	f000 f8f9 	bl	8006dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c24 <xPortStartScheduler+0x144>)
 8006be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bee:	f7ff ff63 	bl	8006ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf2:	f7ff fb0b 	bl	800620c <vTaskSwitchContext>
	prvTaskExitError();
 8006bf6:	f7ff ff1d 	bl	8006a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed00 	.word	0xe000ed00
 8006c08:	410fc271 	.word	0x410fc271
 8006c0c:	410fc270 	.word	0x410fc270
 8006c10:	e000e400 	.word	0xe000e400
 8006c14:	200009d0 	.word	0x200009d0
 8006c18:	200009d4 	.word	0x200009d4
 8006c1c:	e000ed20 	.word	0xe000ed20
 8006c20:	2000000c 	.word	0x2000000c
 8006c24:	e000ef34 	.word	0xe000ef34

08006c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <vPortEnterCritical+0x5c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d110      	bne.n	8006c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <vPortEnterCritical+0x60>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortEnterCritical+0x4a>
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c92:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <vPortExitCritical+0x50>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <vPortExitCritical+0x26>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a08      	ldr	r2, [pc, #32]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vPortExitCritical+0x50>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <vPortExitCritical+0x44>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	2000000c 	.word	0x2000000c

08006ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ce0:	f3ef 8009 	mrs	r0, PSP
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <pxCurrentTCBConst>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f01e 0f10 	tst.w	lr, #16
 8006cf0:	bf08      	it	eq
 8006cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d04:	f380 8811 	msr	BASEPRI, r0
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f7ff fa7c 	bl	800620c <vTaskSwitchContext>
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f380 8811 	msr	BASEPRI, r0
 8006d1c:	bc09      	pop	{r0, r3}
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	6808      	ldr	r0, [r1, #0]
 8006d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d26:	f01e 0f10 	tst.w	lr, #16
 8006d2a:	bf08      	it	eq
 8006d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d30:	f380 8809 	msr	PSP, r0
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst>:
 8006d40:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d62:	f7ff f999 	bl	8006098 <xTaskIncrementTick>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <xPortSysTickHandler+0x40>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
}
 8006d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d90:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <vPortSetupTimerInterrupt+0x38>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <vPortSetupTimerInterrupt+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dcc <vPortSetupTimerInterrupt+0x40>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	4a09      	ldr	r2, [pc, #36]	@ (8006dd0 <vPortSetupTimerInterrupt+0x44>)
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dae:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e010 	.word	0xe000e010
 8006dc4:	e000e018 	.word	0xe000e018
 8006dc8:	20000000 	.word	0x20000000
 8006dcc:	10624dd3 	.word	0x10624dd3
 8006dd0:	e000e014 	.word	0xe000e014

08006dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006de4 <vPortEnableVFP+0x10>
 8006dd8:	6801      	ldr	r1, [r0, #0]
 8006dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dde:	6001      	str	r1, [r0, #0]
 8006de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed88 	.word	0xe000ed88

08006de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d915      	bls.n	8006e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <vPortValidateInterruptPriority+0x74>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e04:	4b16      	ldr	r3, [pc, #88]	@ (8006e60 <vPortValidateInterruptPriority+0x78>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	7afa      	ldrb	r2, [r7, #11]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20b      	bcs.n	8006e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e26:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <vPortValidateInterruptPriority+0x7c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <vPortValidateInterruptPriority+0x80>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d90b      	bls.n	8006e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <vPortValidateInterruptPriority+0x62>
	}
 8006e4e:	bf00      	nop
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	e000e3f0 	.word	0xe000e3f0
 8006e60:	200009d0 	.word	0x200009d0
 8006e64:	e000ed0c 	.word	0xe000ed0c
 8006e68:	200009d4 	.word	0x200009d4

08006e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	@ 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e78:	f7ff f862 	bl	8005f40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e84:	f000 f924 	bl	80070d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e88:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8095 	bne.w	8006fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <pvPortMalloc+0x6e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d06f      	beq.n	8006fc0 <pvPortMalloc+0x154>
 8006ee0:	4b45      	ldr	r3, [pc, #276]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d86a      	bhi.n	8006fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eea:	4b44      	ldr	r3, [pc, #272]	@ (8006ffc <pvPortMalloc+0x190>)
 8006eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eee:	4b43      	ldr	r3, [pc, #268]	@ (8006ffc <pvPortMalloc+0x190>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef4:	e004      	b.n	8006f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <pvPortMalloc+0xa6>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f12:	4b37      	ldr	r3, [pc, #220]	@ (8006ff0 <pvPortMalloc+0x184>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d051      	beq.n	8006fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	4413      	add	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	2308      	movs	r3, #8
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d920      	bls.n	8006f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <pvPortMalloc+0xfc>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	f000 f90a 	bl	8007194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f80:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b1b      	ldr	r3, [pc, #108]	@ (8007000 <pvPortMalloc+0x194>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d203      	bcs.n	8006fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <pvPortMalloc+0x18c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <pvPortMalloc+0x194>)
 8006fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <pvPortMalloc+0x188>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fb6:	4b13      	ldr	r3, [pc, #76]	@ (8007004 <pvPortMalloc+0x198>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <pvPortMalloc+0x198>)
 8006fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fc0:	f7fe ffcc 	bl	8005f5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3728      	adds	r7, #40	@ 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001598 	.word	0x20001598
 8006ff4:	200015ac 	.word	0x200015ac
 8006ff8:	2000159c 	.word	0x2000159c
 8006ffc:	20001590 	.word	0x20001590
 8007000:	200015a0 	.word	0x200015a0
 8007004:	200015a4 	.word	0x200015a4

08007008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d04f      	beq.n	80070ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800701a:	2308      	movs	r3, #8
 800701c:	425b      	negs	r3, r3
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b25      	ldr	r3, [pc, #148]	@ (80070c4 <vPortFree+0xbc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <vPortFree+0x46>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60fb      	str	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <vPortFree+0x66>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <vPortFree+0xbc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01e      	beq.n	80070ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11a      	bne.n	80070ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	4b0e      	ldr	r3, [pc, #56]	@ (80070c4 <vPortFree+0xbc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	43db      	mvns	r3, r3
 800708e:	401a      	ands	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007094:	f7fe ff54 	bl	8005f40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <vPortFree+0xc0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4413      	add	r3, r2
 80070a2:	4a09      	ldr	r2, [pc, #36]	@ (80070c8 <vPortFree+0xc0>)
 80070a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f000 f874 	bl	8007194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070ac:	4b07      	ldr	r3, [pc, #28]	@ (80070cc <vPortFree+0xc4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a06      	ldr	r2, [pc, #24]	@ (80070cc <vPortFree+0xc4>)
 80070b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070b6:	f7fe ff51 	bl	8005f5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200015ac 	.word	0x200015ac
 80070c8:	2000159c 	.word	0x2000159c
 80070cc:	200015a8 	.word	0x200015a8

080070d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80070da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070dc:	4b27      	ldr	r3, [pc, #156]	@ (800717c <prvHeapInit+0xac>)
 80070de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00c      	beq.n	8007104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3307      	adds	r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <prvHeapInit+0xac>)
 8007100:	4413      	add	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007108:	4a1d      	ldr	r2, [pc, #116]	@ (8007180 <prvHeapInit+0xb0>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800710e:	4b1c      	ldr	r3, [pc, #112]	@ (8007180 <prvHeapInit+0xb0>)
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4413      	add	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800711c:	2208      	movs	r2, #8
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a15      	ldr	r2, [pc, #84]	@ (8007184 <prvHeapInit+0xb4>)
 8007130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007132:	4b14      	ldr	r3, [pc, #80]	@ (8007184 <prvHeapInit+0xb4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800713a:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <prvHeapInit+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007150:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <prvHeapInit+0xb4>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <prvHeapInit+0xb8>)
 800715e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a09      	ldr	r2, [pc, #36]	@ (800718c <prvHeapInit+0xbc>)
 8007166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007168:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <prvHeapInit+0xc0>)
 800716a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800716e:	601a      	str	r2, [r3, #0]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	200009d8 	.word	0x200009d8
 8007180:	20001590 	.word	0x20001590
 8007184:	20001598 	.word	0x20001598
 8007188:	200015a0 	.word	0x200015a0
 800718c:	2000159c 	.word	0x2000159c
 8007190:	200015ac 	.word	0x200015ac

08007194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800719c:	4b28      	ldr	r3, [pc, #160]	@ (8007240 <prvInsertBlockIntoFreeList+0xac>)
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e002      	b.n	80071a8 <prvInsertBlockIntoFreeList+0x14>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d8f7      	bhi.n	80071a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d108      	bne.n	80071d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d118      	bne.n	800721c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <prvInsertBlockIntoFreeList+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d00d      	beq.n	8007212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e008      	b.n	8007224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007212:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <prvInsertBlockIntoFreeList+0xb0>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e003      	b.n	8007224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d002      	beq.n	8007232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20001590 	.word	0x20001590
 8007244:	20001598 	.word	0x20001598

08007248 <__cvt>:
 8007248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	ec57 6b10 	vmov	r6, r7, d0
 8007250:	2f00      	cmp	r7, #0
 8007252:	460c      	mov	r4, r1
 8007254:	4619      	mov	r1, r3
 8007256:	463b      	mov	r3, r7
 8007258:	bfbb      	ittet	lt
 800725a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800725e:	461f      	movlt	r7, r3
 8007260:	2300      	movge	r3, #0
 8007262:	232d      	movlt	r3, #45	@ 0x2d
 8007264:	700b      	strb	r3, [r1, #0]
 8007266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007268:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800726c:	4691      	mov	r9, r2
 800726e:	f023 0820 	bic.w	r8, r3, #32
 8007272:	bfbc      	itt	lt
 8007274:	4632      	movlt	r2, r6
 8007276:	4616      	movlt	r6, r2
 8007278:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800727c:	d005      	beq.n	800728a <__cvt+0x42>
 800727e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007282:	d100      	bne.n	8007286 <__cvt+0x3e>
 8007284:	3401      	adds	r4, #1
 8007286:	2102      	movs	r1, #2
 8007288:	e000      	b.n	800728c <__cvt+0x44>
 800728a:	2103      	movs	r1, #3
 800728c:	ab03      	add	r3, sp, #12
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	ab02      	add	r3, sp, #8
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	ec47 6b10 	vmov	d0, r6, r7
 8007298:	4653      	mov	r3, sl
 800729a:	4622      	mov	r2, r4
 800729c:	f001 f9a8 	bl	80085f0 <_dtoa_r>
 80072a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072a4:	4605      	mov	r5, r0
 80072a6:	d119      	bne.n	80072dc <__cvt+0x94>
 80072a8:	f019 0f01 	tst.w	r9, #1
 80072ac:	d00e      	beq.n	80072cc <__cvt+0x84>
 80072ae:	eb00 0904 	add.w	r9, r0, r4
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f9 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80072be:	b108      	cbz	r0, 80072c4 <__cvt+0x7c>
 80072c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072c4:	2230      	movs	r2, #48	@ 0x30
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	454b      	cmp	r3, r9
 80072ca:	d31e      	bcc.n	800730a <__cvt+0xc2>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072d0:	1b5b      	subs	r3, r3, r5
 80072d2:	4628      	mov	r0, r5
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	b004      	add	sp, #16
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072e0:	eb00 0904 	add.w	r9, r0, r4
 80072e4:	d1e5      	bne.n	80072b2 <__cvt+0x6a>
 80072e6:	7803      	ldrb	r3, [r0, #0]
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d10a      	bne.n	8007302 <__cvt+0xba>
 80072ec:	2200      	movs	r2, #0
 80072ee:	2300      	movs	r3, #0
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f9 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f8:	b918      	cbnz	r0, 8007302 <__cvt+0xba>
 80072fa:	f1c4 0401 	rsb	r4, r4, #1
 80072fe:	f8ca 4000 	str.w	r4, [sl]
 8007302:	f8da 3000 	ldr.w	r3, [sl]
 8007306:	4499      	add	r9, r3
 8007308:	e7d3      	b.n	80072b2 <__cvt+0x6a>
 800730a:	1c59      	adds	r1, r3, #1
 800730c:	9103      	str	r1, [sp, #12]
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e7d9      	b.n	80072c6 <__cvt+0x7e>

08007312 <__exponent>:
 8007312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007314:	2900      	cmp	r1, #0
 8007316:	bfba      	itte	lt
 8007318:	4249      	neglt	r1, r1
 800731a:	232d      	movlt	r3, #45	@ 0x2d
 800731c:	232b      	movge	r3, #43	@ 0x2b
 800731e:	2909      	cmp	r1, #9
 8007320:	7002      	strb	r2, [r0, #0]
 8007322:	7043      	strb	r3, [r0, #1]
 8007324:	dd29      	ble.n	800737a <__exponent+0x68>
 8007326:	f10d 0307 	add.w	r3, sp, #7
 800732a:	461d      	mov	r5, r3
 800732c:	270a      	movs	r7, #10
 800732e:	461a      	mov	r2, r3
 8007330:	fbb1 f6f7 	udiv	r6, r1, r7
 8007334:	fb07 1416 	mls	r4, r7, r6, r1
 8007338:	3430      	adds	r4, #48	@ 0x30
 800733a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800733e:	460c      	mov	r4, r1
 8007340:	2c63      	cmp	r4, #99	@ 0x63
 8007342:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007346:	4631      	mov	r1, r6
 8007348:	dcf1      	bgt.n	800732e <__exponent+0x1c>
 800734a:	3130      	adds	r1, #48	@ 0x30
 800734c:	1e94      	subs	r4, r2, #2
 800734e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007352:	1c41      	adds	r1, r0, #1
 8007354:	4623      	mov	r3, r4
 8007356:	42ab      	cmp	r3, r5
 8007358:	d30a      	bcc.n	8007370 <__exponent+0x5e>
 800735a:	f10d 0309 	add.w	r3, sp, #9
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ac      	cmp	r4, r5
 8007362:	bf88      	it	hi
 8007364:	2300      	movhi	r3, #0
 8007366:	3302      	adds	r3, #2
 8007368:	4403      	add	r3, r0
 800736a:	1a18      	subs	r0, r3, r0
 800736c:	b003      	add	sp, #12
 800736e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007370:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007374:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007378:	e7ed      	b.n	8007356 <__exponent+0x44>
 800737a:	2330      	movs	r3, #48	@ 0x30
 800737c:	3130      	adds	r1, #48	@ 0x30
 800737e:	7083      	strb	r3, [r0, #2]
 8007380:	70c1      	strb	r1, [r0, #3]
 8007382:	1d03      	adds	r3, r0, #4
 8007384:	e7f1      	b.n	800736a <__exponent+0x58>
	...

08007388 <_printf_float>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	b08d      	sub	sp, #52	@ 0x34
 800738e:	460c      	mov	r4, r1
 8007390:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007394:	4616      	mov	r6, r2
 8007396:	461f      	mov	r7, r3
 8007398:	4605      	mov	r5, r0
 800739a:	f001 f815 	bl	80083c8 <_localeconv_r>
 800739e:	6803      	ldr	r3, [r0, #0]
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f8 ff64 	bl	8000270 <strlen>
 80073a8:	2300      	movs	r3, #0
 80073aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ac:	f8d8 3000 	ldr.w	r3, [r8]
 80073b0:	9005      	str	r0, [sp, #20]
 80073b2:	3307      	adds	r3, #7
 80073b4:	f023 0307 	bic.w	r3, r3, #7
 80073b8:	f103 0208 	add.w	r2, r3, #8
 80073bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073c0:	f8d4 b000 	ldr.w	fp, [r4]
 80073c4:	f8c8 2000 	str.w	r2, [r8]
 80073c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073d0:	9307      	str	r3, [sp, #28]
 80073d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073de:	4b9c      	ldr	r3, [pc, #624]	@ (8007650 <_printf_float+0x2c8>)
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073e4:	f7f9 fba2 	bl	8000b2c <__aeabi_dcmpun>
 80073e8:	bb70      	cbnz	r0, 8007448 <_printf_float+0xc0>
 80073ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ee:	4b98      	ldr	r3, [pc, #608]	@ (8007650 <_printf_float+0x2c8>)
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073f4:	f7f9 fb7c 	bl	8000af0 <__aeabi_dcmple>
 80073f8:	bb30      	cbnz	r0, 8007448 <_printf_float+0xc0>
 80073fa:	2200      	movs	r2, #0
 80073fc:	2300      	movs	r3, #0
 80073fe:	4640      	mov	r0, r8
 8007400:	4649      	mov	r1, r9
 8007402:	f7f9 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8007406:	b110      	cbz	r0, 800740e <_printf_float+0x86>
 8007408:	232d      	movs	r3, #45	@ 0x2d
 800740a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800740e:	4a91      	ldr	r2, [pc, #580]	@ (8007654 <_printf_float+0x2cc>)
 8007410:	4b91      	ldr	r3, [pc, #580]	@ (8007658 <_printf_float+0x2d0>)
 8007412:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007416:	bf94      	ite	ls
 8007418:	4690      	movls	r8, r2
 800741a:	4698      	movhi	r8, r3
 800741c:	2303      	movs	r3, #3
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	f02b 0304 	bic.w	r3, fp, #4
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f04f 0900 	mov.w	r9, #0
 800742a:	9700      	str	r7, [sp, #0]
 800742c:	4633      	mov	r3, r6
 800742e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f9d2 	bl	80077dc <_printf_common>
 8007438:	3001      	adds	r0, #1
 800743a:	f040 808d 	bne.w	8007558 <_printf_float+0x1d0>
 800743e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007442:	b00d      	add	sp, #52	@ 0x34
 8007444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	4640      	mov	r0, r8
 800744e:	4649      	mov	r1, r9
 8007450:	f7f9 fb6c 	bl	8000b2c <__aeabi_dcmpun>
 8007454:	b140      	cbz	r0, 8007468 <_printf_float+0xe0>
 8007456:	464b      	mov	r3, r9
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfbc      	itt	lt
 800745c:	232d      	movlt	r3, #45	@ 0x2d
 800745e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007462:	4a7e      	ldr	r2, [pc, #504]	@ (800765c <_printf_float+0x2d4>)
 8007464:	4b7e      	ldr	r3, [pc, #504]	@ (8007660 <_printf_float+0x2d8>)
 8007466:	e7d4      	b.n	8007412 <_printf_float+0x8a>
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800746e:	9206      	str	r2, [sp, #24]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	d13b      	bne.n	80074ec <_printf_float+0x164>
 8007474:	2306      	movs	r3, #6
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800747c:	2300      	movs	r3, #0
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	ab0a      	add	r3, sp, #40	@ 0x28
 8007484:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007488:	ab09      	add	r3, sp, #36	@ 0x24
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	ec49 8b10 	vmov	d0, r8, r9
 8007492:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007496:	4628      	mov	r0, r5
 8007498:	f7ff fed6 	bl	8007248 <__cvt>
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074a0:	2b47      	cmp	r3, #71	@ 0x47
 80074a2:	4680      	mov	r8, r0
 80074a4:	d129      	bne.n	80074fa <_printf_float+0x172>
 80074a6:	1cc8      	adds	r0, r1, #3
 80074a8:	db02      	blt.n	80074b0 <_printf_float+0x128>
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	4299      	cmp	r1, r3
 80074ae:	dd41      	ble.n	8007534 <_printf_float+0x1ac>
 80074b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80074b4:	fa5f fa8a 	uxtb.w	sl, sl
 80074b8:	3901      	subs	r1, #1
 80074ba:	4652      	mov	r2, sl
 80074bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80074c2:	f7ff ff26 	bl	8007312 <__exponent>
 80074c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074c8:	1813      	adds	r3, r2, r0
 80074ca:	2a01      	cmp	r2, #1
 80074cc:	4681      	mov	r9, r0
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	dc02      	bgt.n	80074d8 <_printf_float+0x150>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	07d2      	lsls	r2, r2, #31
 80074d6:	d501      	bpl.n	80074dc <_printf_float+0x154>
 80074d8:	3301      	adds	r3, #1
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0a2      	beq.n	800742a <_printf_float+0xa2>
 80074e4:	232d      	movs	r3, #45	@ 0x2d
 80074e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ea:	e79e      	b.n	800742a <_printf_float+0xa2>
 80074ec:	9a06      	ldr	r2, [sp, #24]
 80074ee:	2a47      	cmp	r2, #71	@ 0x47
 80074f0:	d1c2      	bne.n	8007478 <_printf_float+0xf0>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1c0      	bne.n	8007478 <_printf_float+0xf0>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e7bd      	b.n	8007476 <_printf_float+0xee>
 80074fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074fe:	d9db      	bls.n	80074b8 <_printf_float+0x130>
 8007500:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007504:	d118      	bne.n	8007538 <_printf_float+0x1b0>
 8007506:	2900      	cmp	r1, #0
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	dd0b      	ble.n	8007524 <_printf_float+0x19c>
 800750c:	6121      	str	r1, [r4, #16]
 800750e:	b913      	cbnz	r3, 8007516 <_printf_float+0x18e>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	07d0      	lsls	r0, r2, #31
 8007514:	d502      	bpl.n	800751c <_printf_float+0x194>
 8007516:	3301      	adds	r3, #1
 8007518:	440b      	add	r3, r1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800751e:	f04f 0900 	mov.w	r9, #0
 8007522:	e7db      	b.n	80074dc <_printf_float+0x154>
 8007524:	b913      	cbnz	r3, 800752c <_printf_float+0x1a4>
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	07d2      	lsls	r2, r2, #31
 800752a:	d501      	bpl.n	8007530 <_printf_float+0x1a8>
 800752c:	3302      	adds	r3, #2
 800752e:	e7f4      	b.n	800751a <_printf_float+0x192>
 8007530:	2301      	movs	r3, #1
 8007532:	e7f2      	b.n	800751a <_printf_float+0x192>
 8007534:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800753a:	4299      	cmp	r1, r3
 800753c:	db05      	blt.n	800754a <_printf_float+0x1c2>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6121      	str	r1, [r4, #16]
 8007542:	07d8      	lsls	r0, r3, #31
 8007544:	d5ea      	bpl.n	800751c <_printf_float+0x194>
 8007546:	1c4b      	adds	r3, r1, #1
 8007548:	e7e7      	b.n	800751a <_printf_float+0x192>
 800754a:	2900      	cmp	r1, #0
 800754c:	bfd4      	ite	le
 800754e:	f1c1 0202 	rsble	r2, r1, #2
 8007552:	2201      	movgt	r2, #1
 8007554:	4413      	add	r3, r2
 8007556:	e7e0      	b.n	800751a <_printf_float+0x192>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	055a      	lsls	r2, r3, #21
 800755c:	d407      	bmi.n	800756e <_printf_float+0x1e6>
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	4642      	mov	r2, r8
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	d12b      	bne.n	80075c4 <_printf_float+0x23c>
 800756c:	e767      	b.n	800743e <_printf_float+0xb6>
 800756e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007572:	f240 80dd 	bls.w	8007730 <_printf_float+0x3a8>
 8007576:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	f7f9 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007582:	2800      	cmp	r0, #0
 8007584:	d033      	beq.n	80075ee <_printf_float+0x266>
 8007586:	4a37      	ldr	r2, [pc, #220]	@ (8007664 <_printf_float+0x2dc>)
 8007588:	2301      	movs	r3, #1
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	f43f af54 	beq.w	800743e <_printf_float+0xb6>
 8007596:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800759a:	4543      	cmp	r3, r8
 800759c:	db02      	blt.n	80075a4 <_printf_float+0x21c>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	07d8      	lsls	r0, r3, #31
 80075a2:	d50f      	bpl.n	80075c4 <_printf_float+0x23c>
 80075a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f af45 	beq.w	800743e <_printf_float+0xb6>
 80075b4:	f04f 0900 	mov.w	r9, #0
 80075b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80075bc:	f104 0a1a 	add.w	sl, r4, #26
 80075c0:	45c8      	cmp	r8, r9
 80075c2:	dc09      	bgt.n	80075d8 <_printf_float+0x250>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	079b      	lsls	r3, r3, #30
 80075c8:	f100 8103 	bmi.w	80077d2 <_printf_float+0x44a>
 80075cc:	68e0      	ldr	r0, [r4, #12]
 80075ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d0:	4298      	cmp	r0, r3
 80075d2:	bfb8      	it	lt
 80075d4:	4618      	movlt	r0, r3
 80075d6:	e734      	b.n	8007442 <_printf_float+0xba>
 80075d8:	2301      	movs	r3, #1
 80075da:	4652      	mov	r2, sl
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f af2b 	beq.w	800743e <_printf_float+0xb6>
 80075e8:	f109 0901 	add.w	r9, r9, #1
 80075ec:	e7e8      	b.n	80075c0 <_printf_float+0x238>
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dc39      	bgt.n	8007668 <_printf_float+0x2e0>
 80075f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007664 <_printf_float+0x2dc>)
 80075f6:	2301      	movs	r3, #1
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	f43f af1d 	beq.w	800743e <_printf_float+0xb6>
 8007604:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007608:	ea59 0303 	orrs.w	r3, r9, r3
 800760c:	d102      	bne.n	8007614 <_printf_float+0x28c>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07d9      	lsls	r1, r3, #31
 8007612:	d5d7      	bpl.n	80075c4 <_printf_float+0x23c>
 8007614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af0d 	beq.w	800743e <_printf_float+0xb6>
 8007624:	f04f 0a00 	mov.w	sl, #0
 8007628:	f104 0b1a 	add.w	fp, r4, #26
 800762c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762e:	425b      	negs	r3, r3
 8007630:	4553      	cmp	r3, sl
 8007632:	dc01      	bgt.n	8007638 <_printf_float+0x2b0>
 8007634:	464b      	mov	r3, r9
 8007636:	e793      	b.n	8007560 <_printf_float+0x1d8>
 8007638:	2301      	movs	r3, #1
 800763a:	465a      	mov	r2, fp
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f aefb 	beq.w	800743e <_printf_float+0xb6>
 8007648:	f10a 0a01 	add.w	sl, sl, #1
 800764c:	e7ee      	b.n	800762c <_printf_float+0x2a4>
 800764e:	bf00      	nop
 8007650:	7fefffff 	.word	0x7fefffff
 8007654:	0800bb73 	.word	0x0800bb73
 8007658:	0800bb77 	.word	0x0800bb77
 800765c:	0800bb7b 	.word	0x0800bb7b
 8007660:	0800bb7f 	.word	0x0800bb7f
 8007664:	0800bb83 	.word	0x0800bb83
 8007668:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800766a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800766e:	4553      	cmp	r3, sl
 8007670:	bfa8      	it	ge
 8007672:	4653      	movge	r3, sl
 8007674:	2b00      	cmp	r3, #0
 8007676:	4699      	mov	r9, r3
 8007678:	dc36      	bgt.n	80076e8 <_printf_float+0x360>
 800767a:	f04f 0b00 	mov.w	fp, #0
 800767e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007682:	f104 021a 	add.w	r2, r4, #26
 8007686:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007688:	9306      	str	r3, [sp, #24]
 800768a:	eba3 0309 	sub.w	r3, r3, r9
 800768e:	455b      	cmp	r3, fp
 8007690:	dc31      	bgt.n	80076f6 <_printf_float+0x36e>
 8007692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007694:	459a      	cmp	sl, r3
 8007696:	dc3a      	bgt.n	800770e <_printf_float+0x386>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	07da      	lsls	r2, r3, #31
 800769c:	d437      	bmi.n	800770e <_printf_float+0x386>
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	ebaa 0903 	sub.w	r9, sl, r3
 80076a4:	9b06      	ldr	r3, [sp, #24]
 80076a6:	ebaa 0303 	sub.w	r3, sl, r3
 80076aa:	4599      	cmp	r9, r3
 80076ac:	bfa8      	it	ge
 80076ae:	4699      	movge	r9, r3
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	dc33      	bgt.n	800771e <_printf_float+0x396>
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076be:	f104 0b1a 	add.w	fp, r4, #26
 80076c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c4:	ebaa 0303 	sub.w	r3, sl, r3
 80076c8:	eba3 0309 	sub.w	r3, r3, r9
 80076cc:	4543      	cmp	r3, r8
 80076ce:	f77f af79 	ble.w	80075c4 <_printf_float+0x23c>
 80076d2:	2301      	movs	r3, #1
 80076d4:	465a      	mov	r2, fp
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f aeae 	beq.w	800743e <_printf_float+0xb6>
 80076e2:	f108 0801 	add.w	r8, r8, #1
 80076e6:	e7ec      	b.n	80076c2 <_printf_float+0x33a>
 80076e8:	4642      	mov	r2, r8
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	d1c2      	bne.n	800767a <_printf_float+0x2f2>
 80076f4:	e6a3      	b.n	800743e <_printf_float+0xb6>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	9206      	str	r2, [sp, #24]
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f ae9c 	beq.w	800743e <_printf_float+0xb6>
 8007706:	9a06      	ldr	r2, [sp, #24]
 8007708:	f10b 0b01 	add.w	fp, fp, #1
 800770c:	e7bb      	b.n	8007686 <_printf_float+0x2fe>
 800770e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	d1c0      	bne.n	800769e <_printf_float+0x316>
 800771c:	e68f      	b.n	800743e <_printf_float+0xb6>
 800771e:	9a06      	ldr	r2, [sp, #24]
 8007720:	464b      	mov	r3, r9
 8007722:	4442      	add	r2, r8
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	d1c3      	bne.n	80076b6 <_printf_float+0x32e>
 800772e:	e686      	b.n	800743e <_printf_float+0xb6>
 8007730:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007734:	f1ba 0f01 	cmp.w	sl, #1
 8007738:	dc01      	bgt.n	800773e <_printf_float+0x3b6>
 800773a:	07db      	lsls	r3, r3, #31
 800773c:	d536      	bpl.n	80077ac <_printf_float+0x424>
 800773e:	2301      	movs	r3, #1
 8007740:	4642      	mov	r2, r8
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f ae78 	beq.w	800743e <_printf_float+0xb6>
 800774e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f ae70 	beq.w	800743e <_printf_float+0xb6>
 800775e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800776a:	f7f9 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800776e:	b9c0      	cbnz	r0, 80077a2 <_printf_float+0x41a>
 8007770:	4653      	mov	r3, sl
 8007772:	f108 0201 	add.w	r2, r8, #1
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	d10c      	bne.n	800779a <_printf_float+0x412>
 8007780:	e65d      	b.n	800743e <_printf_float+0xb6>
 8007782:	2301      	movs	r3, #1
 8007784:	465a      	mov	r2, fp
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae56 	beq.w	800743e <_printf_float+0xb6>
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	45d0      	cmp	r8, sl
 8007798:	dbf3      	blt.n	8007782 <_printf_float+0x3fa>
 800779a:	464b      	mov	r3, r9
 800779c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077a0:	e6df      	b.n	8007562 <_printf_float+0x1da>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	f104 0b1a 	add.w	fp, r4, #26
 80077aa:	e7f4      	b.n	8007796 <_printf_float+0x40e>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4642      	mov	r2, r8
 80077b0:	e7e1      	b.n	8007776 <_printf_float+0x3ee>
 80077b2:	2301      	movs	r3, #1
 80077b4:	464a      	mov	r2, r9
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f ae3e 	beq.w	800743e <_printf_float+0xb6>
 80077c2:	f108 0801 	add.w	r8, r8, #1
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ca:	1a5b      	subs	r3, r3, r1
 80077cc:	4543      	cmp	r3, r8
 80077ce:	dcf0      	bgt.n	80077b2 <_printf_float+0x42a>
 80077d0:	e6fc      	b.n	80075cc <_printf_float+0x244>
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	f104 0919 	add.w	r9, r4, #25
 80077da:	e7f4      	b.n	80077c6 <_printf_float+0x43e>

080077dc <_printf_common>:
 80077dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e0:	4616      	mov	r6, r2
 80077e2:	4698      	mov	r8, r3
 80077e4:	688a      	ldr	r2, [r1, #8]
 80077e6:	690b      	ldr	r3, [r1, #16]
 80077e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	bfb8      	it	lt
 80077f0:	4613      	movlt	r3, r2
 80077f2:	6033      	str	r3, [r6, #0]
 80077f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077f8:	4607      	mov	r7, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	b10a      	cbz	r2, 8007802 <_printf_common+0x26>
 80077fe:	3301      	adds	r3, #1
 8007800:	6033      	str	r3, [r6, #0]
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	0699      	lsls	r1, r3, #26
 8007806:	bf42      	ittt	mi
 8007808:	6833      	ldrmi	r3, [r6, #0]
 800780a:	3302      	addmi	r3, #2
 800780c:	6033      	strmi	r3, [r6, #0]
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	f015 0506 	ands.w	r5, r5, #6
 8007814:	d106      	bne.n	8007824 <_printf_common+0x48>
 8007816:	f104 0a19 	add.w	sl, r4, #25
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	6832      	ldr	r2, [r6, #0]
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	42ab      	cmp	r3, r5
 8007822:	dc26      	bgt.n	8007872 <_printf_common+0x96>
 8007824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	3b00      	subs	r3, #0
 800782c:	bf18      	it	ne
 800782e:	2301      	movne	r3, #1
 8007830:	0692      	lsls	r2, r2, #26
 8007832:	d42b      	bmi.n	800788c <_printf_common+0xb0>
 8007834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007838:	4641      	mov	r1, r8
 800783a:	4638      	mov	r0, r7
 800783c:	47c8      	blx	r9
 800783e:	3001      	adds	r0, #1
 8007840:	d01e      	beq.n	8007880 <_printf_common+0xa4>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	6922      	ldr	r2, [r4, #16]
 8007846:	f003 0306 	and.w	r3, r3, #6
 800784a:	2b04      	cmp	r3, #4
 800784c:	bf02      	ittt	eq
 800784e:	68e5      	ldreq	r5, [r4, #12]
 8007850:	6833      	ldreq	r3, [r6, #0]
 8007852:	1aed      	subeq	r5, r5, r3
 8007854:	68a3      	ldr	r3, [r4, #8]
 8007856:	bf0c      	ite	eq
 8007858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800785c:	2500      	movne	r5, #0
 800785e:	4293      	cmp	r3, r2
 8007860:	bfc4      	itt	gt
 8007862:	1a9b      	subgt	r3, r3, r2
 8007864:	18ed      	addgt	r5, r5, r3
 8007866:	2600      	movs	r6, #0
 8007868:	341a      	adds	r4, #26
 800786a:	42b5      	cmp	r5, r6
 800786c:	d11a      	bne.n	80078a4 <_printf_common+0xc8>
 800786e:	2000      	movs	r0, #0
 8007870:	e008      	b.n	8007884 <_printf_common+0xa8>
 8007872:	2301      	movs	r3, #1
 8007874:	4652      	mov	r2, sl
 8007876:	4641      	mov	r1, r8
 8007878:	4638      	mov	r0, r7
 800787a:	47c8      	blx	r9
 800787c:	3001      	adds	r0, #1
 800787e:	d103      	bne.n	8007888 <_printf_common+0xac>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007888:	3501      	adds	r5, #1
 800788a:	e7c6      	b.n	800781a <_printf_common+0x3e>
 800788c:	18e1      	adds	r1, r4, r3
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	2030      	movs	r0, #48	@ 0x30
 8007892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007896:	4422      	add	r2, r4
 8007898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800789c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078a0:	3302      	adds	r3, #2
 80078a2:	e7c7      	b.n	8007834 <_printf_common+0x58>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4622      	mov	r2, r4
 80078a8:	4641      	mov	r1, r8
 80078aa:	4638      	mov	r0, r7
 80078ac:	47c8      	blx	r9
 80078ae:	3001      	adds	r0, #1
 80078b0:	d0e6      	beq.n	8007880 <_printf_common+0xa4>
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7d9      	b.n	800786a <_printf_common+0x8e>
	...

080078b8 <_printf_i>:
 80078b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	7e0f      	ldrb	r7, [r1, #24]
 80078be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078c0:	2f78      	cmp	r7, #120	@ 0x78
 80078c2:	4691      	mov	r9, r2
 80078c4:	4680      	mov	r8, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	469a      	mov	sl, r3
 80078ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ce:	d807      	bhi.n	80078e0 <_printf_i+0x28>
 80078d0:	2f62      	cmp	r7, #98	@ 0x62
 80078d2:	d80a      	bhi.n	80078ea <_printf_i+0x32>
 80078d4:	2f00      	cmp	r7, #0
 80078d6:	f000 80d2 	beq.w	8007a7e <_printf_i+0x1c6>
 80078da:	2f58      	cmp	r7, #88	@ 0x58
 80078dc:	f000 80b9 	beq.w	8007a52 <_printf_i+0x19a>
 80078e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078e8:	e03a      	b.n	8007960 <_printf_i+0xa8>
 80078ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ee:	2b15      	cmp	r3, #21
 80078f0:	d8f6      	bhi.n	80078e0 <_printf_i+0x28>
 80078f2:	a101      	add	r1, pc, #4	@ (adr r1, 80078f8 <_printf_i+0x40>)
 80078f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078f8:	08007951 	.word	0x08007951
 80078fc:	08007965 	.word	0x08007965
 8007900:	080078e1 	.word	0x080078e1
 8007904:	080078e1 	.word	0x080078e1
 8007908:	080078e1 	.word	0x080078e1
 800790c:	080078e1 	.word	0x080078e1
 8007910:	08007965 	.word	0x08007965
 8007914:	080078e1 	.word	0x080078e1
 8007918:	080078e1 	.word	0x080078e1
 800791c:	080078e1 	.word	0x080078e1
 8007920:	080078e1 	.word	0x080078e1
 8007924:	08007a65 	.word	0x08007a65
 8007928:	0800798f 	.word	0x0800798f
 800792c:	08007a1f 	.word	0x08007a1f
 8007930:	080078e1 	.word	0x080078e1
 8007934:	080078e1 	.word	0x080078e1
 8007938:	08007a87 	.word	0x08007a87
 800793c:	080078e1 	.word	0x080078e1
 8007940:	0800798f 	.word	0x0800798f
 8007944:	080078e1 	.word	0x080078e1
 8007948:	080078e1 	.word	0x080078e1
 800794c:	08007a27 	.word	0x08007a27
 8007950:	6833      	ldr	r3, [r6, #0]
 8007952:	1d1a      	adds	r2, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6032      	str	r2, [r6, #0]
 8007958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800795c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007960:	2301      	movs	r3, #1
 8007962:	e09d      	b.n	8007aa0 <_printf_i+0x1e8>
 8007964:	6833      	ldr	r3, [r6, #0]
 8007966:	6820      	ldr	r0, [r4, #0]
 8007968:	1d19      	adds	r1, r3, #4
 800796a:	6031      	str	r1, [r6, #0]
 800796c:	0606      	lsls	r6, r0, #24
 800796e:	d501      	bpl.n	8007974 <_printf_i+0xbc>
 8007970:	681d      	ldr	r5, [r3, #0]
 8007972:	e003      	b.n	800797c <_printf_i+0xc4>
 8007974:	0645      	lsls	r5, r0, #25
 8007976:	d5fb      	bpl.n	8007970 <_printf_i+0xb8>
 8007978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800797c:	2d00      	cmp	r5, #0
 800797e:	da03      	bge.n	8007988 <_printf_i+0xd0>
 8007980:	232d      	movs	r3, #45	@ 0x2d
 8007982:	426d      	negs	r5, r5
 8007984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007988:	4859      	ldr	r0, [pc, #356]	@ (8007af0 <_printf_i+0x238>)
 800798a:	230a      	movs	r3, #10
 800798c:	e011      	b.n	80079b2 <_printf_i+0xfa>
 800798e:	6821      	ldr	r1, [r4, #0]
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	0608      	lsls	r0, r1, #24
 8007994:	f853 5b04 	ldr.w	r5, [r3], #4
 8007998:	d402      	bmi.n	80079a0 <_printf_i+0xe8>
 800799a:	0649      	lsls	r1, r1, #25
 800799c:	bf48      	it	mi
 800799e:	b2ad      	uxthmi	r5, r5
 80079a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079a2:	4853      	ldr	r0, [pc, #332]	@ (8007af0 <_printf_i+0x238>)
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	bf14      	ite	ne
 80079a8:	230a      	movne	r3, #10
 80079aa:	2308      	moveq	r3, #8
 80079ac:	2100      	movs	r1, #0
 80079ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079b2:	6866      	ldr	r6, [r4, #4]
 80079b4:	60a6      	str	r6, [r4, #8]
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	bfa2      	ittt	ge
 80079ba:	6821      	ldrge	r1, [r4, #0]
 80079bc:	f021 0104 	bicge.w	r1, r1, #4
 80079c0:	6021      	strge	r1, [r4, #0]
 80079c2:	b90d      	cbnz	r5, 80079c8 <_printf_i+0x110>
 80079c4:	2e00      	cmp	r6, #0
 80079c6:	d04b      	beq.n	8007a60 <_printf_i+0x1a8>
 80079c8:	4616      	mov	r6, r2
 80079ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ce:	fb03 5711 	mls	r7, r3, r1, r5
 80079d2:	5dc7      	ldrb	r7, [r0, r7]
 80079d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079d8:	462f      	mov	r7, r5
 80079da:	42bb      	cmp	r3, r7
 80079dc:	460d      	mov	r5, r1
 80079de:	d9f4      	bls.n	80079ca <_printf_i+0x112>
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d10b      	bne.n	80079fc <_printf_i+0x144>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	07df      	lsls	r7, r3, #31
 80079e8:	d508      	bpl.n	80079fc <_printf_i+0x144>
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	6861      	ldr	r1, [r4, #4]
 80079ee:	4299      	cmp	r1, r3
 80079f0:	bfde      	ittt	le
 80079f2:	2330      	movle	r3, #48	@ 0x30
 80079f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80079fc:	1b92      	subs	r2, r2, r6
 80079fe:	6122      	str	r2, [r4, #16]
 8007a00:	f8cd a000 	str.w	sl, [sp]
 8007a04:	464b      	mov	r3, r9
 8007a06:	aa03      	add	r2, sp, #12
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7ff fee6 	bl	80077dc <_printf_common>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d14a      	bne.n	8007aaa <_printf_i+0x1f2>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a18:	b004      	add	sp, #16
 8007a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f043 0320 	orr.w	r3, r3, #32
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	4833      	ldr	r0, [pc, #204]	@ (8007af4 <_printf_i+0x23c>)
 8007a28:	2778      	movs	r7, #120	@ 0x78
 8007a2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6831      	ldr	r1, [r6, #0]
 8007a32:	061f      	lsls	r7, r3, #24
 8007a34:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a38:	d402      	bmi.n	8007a40 <_printf_i+0x188>
 8007a3a:	065f      	lsls	r7, r3, #25
 8007a3c:	bf48      	it	mi
 8007a3e:	b2ad      	uxthmi	r5, r5
 8007a40:	6031      	str	r1, [r6, #0]
 8007a42:	07d9      	lsls	r1, r3, #31
 8007a44:	bf44      	itt	mi
 8007a46:	f043 0320 	orrmi.w	r3, r3, #32
 8007a4a:	6023      	strmi	r3, [r4, #0]
 8007a4c:	b11d      	cbz	r5, 8007a56 <_printf_i+0x19e>
 8007a4e:	2310      	movs	r3, #16
 8007a50:	e7ac      	b.n	80079ac <_printf_i+0xf4>
 8007a52:	4827      	ldr	r0, [pc, #156]	@ (8007af0 <_printf_i+0x238>)
 8007a54:	e7e9      	b.n	8007a2a <_printf_i+0x172>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	f023 0320 	bic.w	r3, r3, #32
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	e7f6      	b.n	8007a4e <_printf_i+0x196>
 8007a60:	4616      	mov	r6, r2
 8007a62:	e7bd      	b.n	80079e0 <_printf_i+0x128>
 8007a64:	6833      	ldr	r3, [r6, #0]
 8007a66:	6825      	ldr	r5, [r4, #0]
 8007a68:	6961      	ldr	r1, [r4, #20]
 8007a6a:	1d18      	adds	r0, r3, #4
 8007a6c:	6030      	str	r0, [r6, #0]
 8007a6e:	062e      	lsls	r6, r5, #24
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	d501      	bpl.n	8007a78 <_printf_i+0x1c0>
 8007a74:	6019      	str	r1, [r3, #0]
 8007a76:	e002      	b.n	8007a7e <_printf_i+0x1c6>
 8007a78:	0668      	lsls	r0, r5, #25
 8007a7a:	d5fb      	bpl.n	8007a74 <_printf_i+0x1bc>
 8007a7c:	8019      	strh	r1, [r3, #0]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6123      	str	r3, [r4, #16]
 8007a82:	4616      	mov	r6, r2
 8007a84:	e7bc      	b.n	8007a00 <_printf_i+0x148>
 8007a86:	6833      	ldr	r3, [r6, #0]
 8007a88:	1d1a      	adds	r2, r3, #4
 8007a8a:	6032      	str	r2, [r6, #0]
 8007a8c:	681e      	ldr	r6, [r3, #0]
 8007a8e:	6862      	ldr	r2, [r4, #4]
 8007a90:	2100      	movs	r1, #0
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7f8 fb9c 	bl	80001d0 <memchr>
 8007a98:	b108      	cbz	r0, 8007a9e <_printf_i+0x1e6>
 8007a9a:	1b80      	subs	r0, r0, r6
 8007a9c:	6060      	str	r0, [r4, #4]
 8007a9e:	6863      	ldr	r3, [r4, #4]
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa8:	e7aa      	b.n	8007a00 <_printf_i+0x148>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	4632      	mov	r2, r6
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	47d0      	blx	sl
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d0ad      	beq.n	8007a14 <_printf_i+0x15c>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	079b      	lsls	r3, r3, #30
 8007abc:	d413      	bmi.n	8007ae6 <_printf_i+0x22e>
 8007abe:	68e0      	ldr	r0, [r4, #12]
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	4298      	cmp	r0, r3
 8007ac4:	bfb8      	it	lt
 8007ac6:	4618      	movlt	r0, r3
 8007ac8:	e7a6      	b.n	8007a18 <_printf_i+0x160>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4632      	mov	r2, r6
 8007ace:	4649      	mov	r1, r9
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	47d0      	blx	sl
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d09d      	beq.n	8007a14 <_printf_i+0x15c>
 8007ad8:	3501      	adds	r5, #1
 8007ada:	68e3      	ldr	r3, [r4, #12]
 8007adc:	9903      	ldr	r1, [sp, #12]
 8007ade:	1a5b      	subs	r3, r3, r1
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	dcf2      	bgt.n	8007aca <_printf_i+0x212>
 8007ae4:	e7eb      	b.n	8007abe <_printf_i+0x206>
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	f104 0619 	add.w	r6, r4, #25
 8007aec:	e7f5      	b.n	8007ada <_printf_i+0x222>
 8007aee:	bf00      	nop
 8007af0:	0800bb85 	.word	0x0800bb85
 8007af4:	0800bb96 	.word	0x0800bb96

08007af8 <_scanf_float>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	b087      	sub	sp, #28
 8007afe:	4617      	mov	r7, r2
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	688b      	ldr	r3, [r1, #8]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b0a:	bf81      	itttt	hi
 8007b0c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b10:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b14:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b18:	608b      	strhi	r3, [r1, #8]
 8007b1a:	680b      	ldr	r3, [r1, #0]
 8007b1c:	460a      	mov	r2, r1
 8007b1e:	f04f 0500 	mov.w	r5, #0
 8007b22:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b26:	f842 3b1c 	str.w	r3, [r2], #28
 8007b2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b2e:	4680      	mov	r8, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	bf98      	it	ls
 8007b34:	f04f 0b00 	movls.w	fp, #0
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	4616      	mov	r6, r2
 8007b3c:	46aa      	mov	sl, r5
 8007b3e:	46a9      	mov	r9, r5
 8007b40:	9502      	str	r5, [sp, #8]
 8007b42:	68a2      	ldr	r2, [r4, #8]
 8007b44:	b152      	cbz	r2, 8007b5c <_scanf_float+0x64>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b4c:	d864      	bhi.n	8007c18 <_scanf_float+0x120>
 8007b4e:	2b40      	cmp	r3, #64	@ 0x40
 8007b50:	d83c      	bhi.n	8007bcc <_scanf_float+0xd4>
 8007b52:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b56:	b2c8      	uxtb	r0, r1
 8007b58:	280e      	cmp	r0, #14
 8007b5a:	d93a      	bls.n	8007bd2 <_scanf_float+0xda>
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	d003      	beq.n	8007b6a <_scanf_float+0x72>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b6e:	f1ba 0f01 	cmp.w	sl, #1
 8007b72:	f200 8117 	bhi.w	8007da4 <_scanf_float+0x2ac>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	429e      	cmp	r6, r3
 8007b7a:	f200 8108 	bhi.w	8007d8e <_scanf_float+0x296>
 8007b7e:	2001      	movs	r0, #1
 8007b80:	b007      	add	sp, #28
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007b8a:	2a0d      	cmp	r2, #13
 8007b8c:	d8e6      	bhi.n	8007b5c <_scanf_float+0x64>
 8007b8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b94 <_scanf_float+0x9c>)
 8007b90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b94:	08007cdb 	.word	0x08007cdb
 8007b98:	08007b5d 	.word	0x08007b5d
 8007b9c:	08007b5d 	.word	0x08007b5d
 8007ba0:	08007b5d 	.word	0x08007b5d
 8007ba4:	08007d3b 	.word	0x08007d3b
 8007ba8:	08007d13 	.word	0x08007d13
 8007bac:	08007b5d 	.word	0x08007b5d
 8007bb0:	08007b5d 	.word	0x08007b5d
 8007bb4:	08007ce9 	.word	0x08007ce9
 8007bb8:	08007b5d 	.word	0x08007b5d
 8007bbc:	08007b5d 	.word	0x08007b5d
 8007bc0:	08007b5d 	.word	0x08007b5d
 8007bc4:	08007b5d 	.word	0x08007b5d
 8007bc8:	08007ca1 	.word	0x08007ca1
 8007bcc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007bd0:	e7db      	b.n	8007b8a <_scanf_float+0x92>
 8007bd2:	290e      	cmp	r1, #14
 8007bd4:	d8c2      	bhi.n	8007b5c <_scanf_float+0x64>
 8007bd6:	a001      	add	r0, pc, #4	@ (adr r0, 8007bdc <_scanf_float+0xe4>)
 8007bd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bdc:	08007c91 	.word	0x08007c91
 8007be0:	08007b5d 	.word	0x08007b5d
 8007be4:	08007c91 	.word	0x08007c91
 8007be8:	08007d27 	.word	0x08007d27
 8007bec:	08007b5d 	.word	0x08007b5d
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c77 	.word	0x08007c77
 8007bf8:	08007c77 	.word	0x08007c77
 8007bfc:	08007c77 	.word	0x08007c77
 8007c00:	08007c77 	.word	0x08007c77
 8007c04:	08007c77 	.word	0x08007c77
 8007c08:	08007c77 	.word	0x08007c77
 8007c0c:	08007c77 	.word	0x08007c77
 8007c10:	08007c77 	.word	0x08007c77
 8007c14:	08007c77 	.word	0x08007c77
 8007c18:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c1a:	d809      	bhi.n	8007c30 <_scanf_float+0x138>
 8007c1c:	2b60      	cmp	r3, #96	@ 0x60
 8007c1e:	d8b2      	bhi.n	8007b86 <_scanf_float+0x8e>
 8007c20:	2b54      	cmp	r3, #84	@ 0x54
 8007c22:	d07b      	beq.n	8007d1c <_scanf_float+0x224>
 8007c24:	2b59      	cmp	r3, #89	@ 0x59
 8007c26:	d199      	bne.n	8007b5c <_scanf_float+0x64>
 8007c28:	2d07      	cmp	r5, #7
 8007c2a:	d197      	bne.n	8007b5c <_scanf_float+0x64>
 8007c2c:	2508      	movs	r5, #8
 8007c2e:	e02c      	b.n	8007c8a <_scanf_float+0x192>
 8007c30:	2b74      	cmp	r3, #116	@ 0x74
 8007c32:	d073      	beq.n	8007d1c <_scanf_float+0x224>
 8007c34:	2b79      	cmp	r3, #121	@ 0x79
 8007c36:	e7f6      	b.n	8007c26 <_scanf_float+0x12e>
 8007c38:	6821      	ldr	r1, [r4, #0]
 8007c3a:	05c8      	lsls	r0, r1, #23
 8007c3c:	d51b      	bpl.n	8007c76 <_scanf_float+0x17e>
 8007c3e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c42:	6021      	str	r1, [r4, #0]
 8007c44:	f109 0901 	add.w	r9, r9, #1
 8007c48:	f1bb 0f00 	cmp.w	fp, #0
 8007c4c:	d003      	beq.n	8007c56 <_scanf_float+0x15e>
 8007c4e:	3201      	adds	r2, #1
 8007c50:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007c54:	60a2      	str	r2, [r4, #8]
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	60a3      	str	r3, [r4, #8]
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	f340 8087 	ble.w	8007d7c <_scanf_float+0x284>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	e765      	b.n	8007b42 <_scanf_float+0x4a>
 8007c76:	eb1a 0105 	adds.w	r1, sl, r5
 8007c7a:	f47f af6f 	bne.w	8007b5c <_scanf_float+0x64>
 8007c7e:	6822      	ldr	r2, [r4, #0]
 8007c80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007c84:	6022      	str	r2, [r4, #0]
 8007c86:	460d      	mov	r5, r1
 8007c88:	468a      	mov	sl, r1
 8007c8a:	f806 3b01 	strb.w	r3, [r6], #1
 8007c8e:	e7e2      	b.n	8007c56 <_scanf_float+0x15e>
 8007c90:	6822      	ldr	r2, [r4, #0]
 8007c92:	0610      	lsls	r0, r2, #24
 8007c94:	f57f af62 	bpl.w	8007b5c <_scanf_float+0x64>
 8007c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	e7f4      	b.n	8007c8a <_scanf_float+0x192>
 8007ca0:	f1ba 0f00 	cmp.w	sl, #0
 8007ca4:	d10e      	bne.n	8007cc4 <_scanf_float+0x1cc>
 8007ca6:	f1b9 0f00 	cmp.w	r9, #0
 8007caa:	d10e      	bne.n	8007cca <_scanf_float+0x1d2>
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cb2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cb6:	d108      	bne.n	8007cca <_scanf_float+0x1d2>
 8007cb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	f04f 0a01 	mov.w	sl, #1
 8007cc2:	e7e2      	b.n	8007c8a <_scanf_float+0x192>
 8007cc4:	f1ba 0f02 	cmp.w	sl, #2
 8007cc8:	d055      	beq.n	8007d76 <_scanf_float+0x27e>
 8007cca:	2d01      	cmp	r5, #1
 8007ccc:	d002      	beq.n	8007cd4 <_scanf_float+0x1dc>
 8007cce:	2d04      	cmp	r5, #4
 8007cd0:	f47f af44 	bne.w	8007b5c <_scanf_float+0x64>
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	b2ed      	uxtb	r5, r5
 8007cd8:	e7d7      	b.n	8007c8a <_scanf_float+0x192>
 8007cda:	f1ba 0f01 	cmp.w	sl, #1
 8007cde:	f47f af3d 	bne.w	8007b5c <_scanf_float+0x64>
 8007ce2:	f04f 0a02 	mov.w	sl, #2
 8007ce6:	e7d0      	b.n	8007c8a <_scanf_float+0x192>
 8007ce8:	b97d      	cbnz	r5, 8007d0a <_scanf_float+0x212>
 8007cea:	f1b9 0f00 	cmp.w	r9, #0
 8007cee:	f47f af38 	bne.w	8007b62 <_scanf_float+0x6a>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cf8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cfc:	f040 8108 	bne.w	8007f10 <_scanf_float+0x418>
 8007d00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	2501      	movs	r5, #1
 8007d08:	e7bf      	b.n	8007c8a <_scanf_float+0x192>
 8007d0a:	2d03      	cmp	r5, #3
 8007d0c:	d0e2      	beq.n	8007cd4 <_scanf_float+0x1dc>
 8007d0e:	2d05      	cmp	r5, #5
 8007d10:	e7de      	b.n	8007cd0 <_scanf_float+0x1d8>
 8007d12:	2d02      	cmp	r5, #2
 8007d14:	f47f af22 	bne.w	8007b5c <_scanf_float+0x64>
 8007d18:	2503      	movs	r5, #3
 8007d1a:	e7b6      	b.n	8007c8a <_scanf_float+0x192>
 8007d1c:	2d06      	cmp	r5, #6
 8007d1e:	f47f af1d 	bne.w	8007b5c <_scanf_float+0x64>
 8007d22:	2507      	movs	r5, #7
 8007d24:	e7b1      	b.n	8007c8a <_scanf_float+0x192>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	0591      	lsls	r1, r2, #22
 8007d2a:	f57f af17 	bpl.w	8007b5c <_scanf_float+0x64>
 8007d2e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d38:	e7a7      	b.n	8007c8a <_scanf_float+0x192>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d40:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d44:	d006      	beq.n	8007d54 <_scanf_float+0x25c>
 8007d46:	0550      	lsls	r0, r2, #21
 8007d48:	f57f af08 	bpl.w	8007b5c <_scanf_float+0x64>
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	f000 80de 	beq.w	8007f10 <_scanf_float+0x418>
 8007d54:	0591      	lsls	r1, r2, #22
 8007d56:	bf58      	it	pl
 8007d58:	9902      	ldrpl	r1, [sp, #8]
 8007d5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d5e:	bf58      	it	pl
 8007d60:	eba9 0101 	subpl.w	r1, r9, r1
 8007d64:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007d68:	bf58      	it	pl
 8007d6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	f04f 0900 	mov.w	r9, #0
 8007d74:	e789      	b.n	8007c8a <_scanf_float+0x192>
 8007d76:	f04f 0a03 	mov.w	sl, #3
 8007d7a:	e786      	b.n	8007c8a <_scanf_float+0x192>
 8007d7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d80:	4639      	mov	r1, r7
 8007d82:	4640      	mov	r0, r8
 8007d84:	4798      	blx	r3
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f aedb 	beq.w	8007b42 <_scanf_float+0x4a>
 8007d8c:	e6e6      	b.n	8007b5c <_scanf_float+0x64>
 8007d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d96:	463a      	mov	r2, r7
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4798      	blx	r3
 8007d9c:	6923      	ldr	r3, [r4, #16]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	e6e8      	b.n	8007b76 <_scanf_float+0x7e>
 8007da4:	1e6b      	subs	r3, r5, #1
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d824      	bhi.n	8007df4 <_scanf_float+0x2fc>
 8007daa:	2d02      	cmp	r5, #2
 8007dac:	d836      	bhi.n	8007e1c <_scanf_float+0x324>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	429e      	cmp	r6, r3
 8007db2:	f67f aee4 	bls.w	8007b7e <_scanf_float+0x86>
 8007db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4798      	blx	r3
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	e7f0      	b.n	8007dae <_scanf_float+0x2b6>
 8007dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dd0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007dd4:	463a      	mov	r2, r7
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4798      	blx	r3
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007de4:	fa5f fa8a 	uxtb.w	sl, sl
 8007de8:	f1ba 0f02 	cmp.w	sl, #2
 8007dec:	d1ee      	bne.n	8007dcc <_scanf_float+0x2d4>
 8007dee:	3d03      	subs	r5, #3
 8007df0:	b2ed      	uxtb	r5, r5
 8007df2:	1b76      	subs	r6, r6, r5
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	05da      	lsls	r2, r3, #23
 8007df8:	d530      	bpl.n	8007e5c <_scanf_float+0x364>
 8007dfa:	055b      	lsls	r3, r3, #21
 8007dfc:	d511      	bpl.n	8007e22 <_scanf_float+0x32a>
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	429e      	cmp	r6, r3
 8007e02:	f67f aebc 	bls.w	8007b7e <_scanf_float+0x86>
 8007e06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e0e:	463a      	mov	r2, r7
 8007e10:	4640      	mov	r0, r8
 8007e12:	4798      	blx	r3
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	e7f0      	b.n	8007dfe <_scanf_float+0x306>
 8007e1c:	46aa      	mov	sl, r5
 8007e1e:	46b3      	mov	fp, r6
 8007e20:	e7de      	b.n	8007de0 <_scanf_float+0x2e8>
 8007e22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	2965      	cmp	r1, #101	@ 0x65
 8007e2a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007e2e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	d00c      	beq.n	8007e50 <_scanf_float+0x358>
 8007e36:	2945      	cmp	r1, #69	@ 0x45
 8007e38:	d00a      	beq.n	8007e50 <_scanf_float+0x358>
 8007e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e3e:	463a      	mov	r2, r7
 8007e40:	4640      	mov	r0, r8
 8007e42:	4798      	blx	r3
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	1eb5      	subs	r5, r6, #2
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e54:	463a      	mov	r2, r7
 8007e56:	4640      	mov	r0, r8
 8007e58:	4798      	blx	r3
 8007e5a:	462e      	mov	r6, r5
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	f012 0210 	ands.w	r2, r2, #16
 8007e62:	d001      	beq.n	8007e68 <_scanf_float+0x370>
 8007e64:	2000      	movs	r0, #0
 8007e66:	e68b      	b.n	8007b80 <_scanf_float+0x88>
 8007e68:	7032      	strb	r2, [r6, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e74:	d11c      	bne.n	8007eb0 <_scanf_float+0x3b8>
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	454b      	cmp	r3, r9
 8007e7a:	eba3 0209 	sub.w	r2, r3, r9
 8007e7e:	d123      	bne.n	8007ec8 <_scanf_float+0x3d0>
 8007e80:	9901      	ldr	r1, [sp, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	4640      	mov	r0, r8
 8007e86:	f002 fd2b 	bl	800a8e0 <_strtod_r>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	6821      	ldr	r1, [r4, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f011 0f02 	tst.w	r1, #2
 8007e94:	ec57 6b10 	vmov	r6, r7, d0
 8007e98:	f103 0204 	add.w	r2, r3, #4
 8007e9c:	d01f      	beq.n	8007ede <_scanf_float+0x3e6>
 8007e9e:	9903      	ldr	r1, [sp, #12]
 8007ea0:	600a      	str	r2, [r1, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	e9c3 6700 	strd	r6, r7, [r3]
 8007ea8:	68e3      	ldr	r3, [r4, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60e3      	str	r3, [r4, #12]
 8007eae:	e7d9      	b.n	8007e64 <_scanf_float+0x36c>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0e4      	beq.n	8007e80 <_scanf_float+0x388>
 8007eb6:	9905      	ldr	r1, [sp, #20]
 8007eb8:	230a      	movs	r3, #10
 8007eba:	3101      	adds	r1, #1
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	f002 fd8f 	bl	800a9e0 <_strtol_r>
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	9e05      	ldr	r6, [sp, #20]
 8007ec6:	1ac2      	subs	r2, r0, r3
 8007ec8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007ecc:	429e      	cmp	r6, r3
 8007ece:	bf28      	it	cs
 8007ed0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007ed4:	4910      	ldr	r1, [pc, #64]	@ (8007f18 <_scanf_float+0x420>)
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 f976 	bl	80081c8 <siprintf>
 8007edc:	e7d0      	b.n	8007e80 <_scanf_float+0x388>
 8007ede:	f011 0f04 	tst.w	r1, #4
 8007ee2:	9903      	ldr	r1, [sp, #12]
 8007ee4:	600a      	str	r2, [r1, #0]
 8007ee6:	d1dc      	bne.n	8007ea2 <_scanf_float+0x3aa>
 8007ee8:	681d      	ldr	r5, [r3, #0]
 8007eea:	4632      	mov	r2, r6
 8007eec:	463b      	mov	r3, r7
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fe1b 	bl	8000b2c <__aeabi_dcmpun>
 8007ef6:	b128      	cbz	r0, 8007f04 <_scanf_float+0x40c>
 8007ef8:	4808      	ldr	r0, [pc, #32]	@ (8007f1c <_scanf_float+0x424>)
 8007efa:	f000 faeb 	bl	80084d4 <nanf>
 8007efe:	ed85 0a00 	vstr	s0, [r5]
 8007f02:	e7d1      	b.n	8007ea8 <_scanf_float+0x3b0>
 8007f04:	4630      	mov	r0, r6
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 fe6e 	bl	8000be8 <__aeabi_d2f>
 8007f0c:	6028      	str	r0, [r5, #0]
 8007f0e:	e7cb      	b.n	8007ea8 <_scanf_float+0x3b0>
 8007f10:	f04f 0900 	mov.w	r9, #0
 8007f14:	e629      	b.n	8007b6a <_scanf_float+0x72>
 8007f16:	bf00      	nop
 8007f18:	0800bba7 	.word	0x0800bba7
 8007f1c:	0800bf3d 	.word	0x0800bf3d

08007f20 <std>:
 8007f20:	2300      	movs	r3, #0
 8007f22:	b510      	push	{r4, lr}
 8007f24:	4604      	mov	r4, r0
 8007f26:	e9c0 3300 	strd	r3, r3, [r0]
 8007f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f2e:	6083      	str	r3, [r0, #8]
 8007f30:	8181      	strh	r1, [r0, #12]
 8007f32:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f34:	81c2      	strh	r2, [r0, #14]
 8007f36:	6183      	str	r3, [r0, #24]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	305c      	adds	r0, #92	@ 0x5c
 8007f3e:	f000 fa3b 	bl	80083b8 <memset>
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <std+0x58>)
 8007f44:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f46:	4b0d      	ldr	r3, [pc, #52]	@ (8007f7c <std+0x5c>)
 8007f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <std+0x60>)
 8007f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f84 <std+0x64>)
 8007f50:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f52:	4b0d      	ldr	r3, [pc, #52]	@ (8007f88 <std+0x68>)
 8007f54:	6224      	str	r4, [r4, #32]
 8007f56:	429c      	cmp	r4, r3
 8007f58:	d006      	beq.n	8007f68 <std+0x48>
 8007f5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f5e:	4294      	cmp	r4, r2
 8007f60:	d002      	beq.n	8007f68 <std+0x48>
 8007f62:	33d0      	adds	r3, #208	@ 0xd0
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d105      	bne.n	8007f74 <std+0x54>
 8007f68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	f000 ba9e 	b.w	80084b0 <__retarget_lock_init_recursive>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	bf00      	nop
 8007f78:	08008209 	.word	0x08008209
 8007f7c:	0800822b 	.word	0x0800822b
 8007f80:	08008263 	.word	0x08008263
 8007f84:	08008287 	.word	0x08008287
 8007f88:	200015b0 	.word	0x200015b0

08007f8c <stdio_exit_handler>:
 8007f8c:	4a02      	ldr	r2, [pc, #8]	@ (8007f98 <stdio_exit_handler+0xc>)
 8007f8e:	4903      	ldr	r1, [pc, #12]	@ (8007f9c <stdio_exit_handler+0x10>)
 8007f90:	4803      	ldr	r0, [pc, #12]	@ (8007fa0 <stdio_exit_handler+0x14>)
 8007f92:	f000 b869 	b.w	8008068 <_fwalk_sglue>
 8007f96:	bf00      	nop
 8007f98:	20000010 	.word	0x20000010
 8007f9c:	0800b021 	.word	0x0800b021
 8007fa0:	20000020 	.word	0x20000020

08007fa4 <cleanup_stdio>:
 8007fa4:	6841      	ldr	r1, [r0, #4]
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd8 <cleanup_stdio+0x34>)
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	b510      	push	{r4, lr}
 8007fac:	4604      	mov	r4, r0
 8007fae:	d001      	beq.n	8007fb4 <cleanup_stdio+0x10>
 8007fb0:	f003 f836 	bl	800b020 <_fflush_r>
 8007fb4:	68a1      	ldr	r1, [r4, #8]
 8007fb6:	4b09      	ldr	r3, [pc, #36]	@ (8007fdc <cleanup_stdio+0x38>)
 8007fb8:	4299      	cmp	r1, r3
 8007fba:	d002      	beq.n	8007fc2 <cleanup_stdio+0x1e>
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f003 f82f 	bl	800b020 <_fflush_r>
 8007fc2:	68e1      	ldr	r1, [r4, #12]
 8007fc4:	4b06      	ldr	r3, [pc, #24]	@ (8007fe0 <cleanup_stdio+0x3c>)
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	d004      	beq.n	8007fd4 <cleanup_stdio+0x30>
 8007fca:	4620      	mov	r0, r4
 8007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd0:	f003 b826 	b.w	800b020 <_fflush_r>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200015b0 	.word	0x200015b0
 8007fdc:	20001618 	.word	0x20001618
 8007fe0:	20001680 	.word	0x20001680

08007fe4 <global_stdio_init.part.0>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <global_stdio_init.part.0+0x30>)
 8007fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8008018 <global_stdio_init.part.0+0x34>)
 8007fea:	4a0c      	ldr	r2, [pc, #48]	@ (800801c <global_stdio_init.part.0+0x38>)
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2104      	movs	r1, #4
 8007ff4:	f7ff ff94 	bl	8007f20 <std>
 8007ff8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	2109      	movs	r1, #9
 8008000:	f7ff ff8e 	bl	8007f20 <std>
 8008004:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008008:	2202      	movs	r2, #2
 800800a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800e:	2112      	movs	r1, #18
 8008010:	f7ff bf86 	b.w	8007f20 <std>
 8008014:	200016e8 	.word	0x200016e8
 8008018:	200015b0 	.word	0x200015b0
 800801c:	08007f8d 	.word	0x08007f8d

08008020 <__sfp_lock_acquire>:
 8008020:	4801      	ldr	r0, [pc, #4]	@ (8008028 <__sfp_lock_acquire+0x8>)
 8008022:	f000 ba46 	b.w	80084b2 <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	200016f1 	.word	0x200016f1

0800802c <__sfp_lock_release>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__sfp_lock_release+0x8>)
 800802e:	f000 ba41 	b.w	80084b4 <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	200016f1 	.word	0x200016f1

08008038 <__sinit>:
 8008038:	b510      	push	{r4, lr}
 800803a:	4604      	mov	r4, r0
 800803c:	f7ff fff0 	bl	8008020 <__sfp_lock_acquire>
 8008040:	6a23      	ldr	r3, [r4, #32]
 8008042:	b11b      	cbz	r3, 800804c <__sinit+0x14>
 8008044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008048:	f7ff bff0 	b.w	800802c <__sfp_lock_release>
 800804c:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <__sinit+0x28>)
 800804e:	6223      	str	r3, [r4, #32]
 8008050:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <__sinit+0x2c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f5      	bne.n	8008044 <__sinit+0xc>
 8008058:	f7ff ffc4 	bl	8007fe4 <global_stdio_init.part.0>
 800805c:	e7f2      	b.n	8008044 <__sinit+0xc>
 800805e:	bf00      	nop
 8008060:	08007fa5 	.word	0x08007fa5
 8008064:	200016e8 	.word	0x200016e8

08008068 <_fwalk_sglue>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	4607      	mov	r7, r0
 800806e:	4688      	mov	r8, r1
 8008070:	4614      	mov	r4, r2
 8008072:	2600      	movs	r6, #0
 8008074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008078:	f1b9 0901 	subs.w	r9, r9, #1
 800807c:	d505      	bpl.n	800808a <_fwalk_sglue+0x22>
 800807e:	6824      	ldr	r4, [r4, #0]
 8008080:	2c00      	cmp	r4, #0
 8008082:	d1f7      	bne.n	8008074 <_fwalk_sglue+0xc>
 8008084:	4630      	mov	r0, r6
 8008086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d907      	bls.n	80080a0 <_fwalk_sglue+0x38>
 8008090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008094:	3301      	adds	r3, #1
 8008096:	d003      	beq.n	80080a0 <_fwalk_sglue+0x38>
 8008098:	4629      	mov	r1, r5
 800809a:	4638      	mov	r0, r7
 800809c:	47c0      	blx	r8
 800809e:	4306      	orrs	r6, r0
 80080a0:	3568      	adds	r5, #104	@ 0x68
 80080a2:	e7e9      	b.n	8008078 <_fwalk_sglue+0x10>

080080a4 <_puts_r>:
 80080a4:	6a03      	ldr	r3, [r0, #32]
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	6884      	ldr	r4, [r0, #8]
 80080aa:	4605      	mov	r5, r0
 80080ac:	460e      	mov	r6, r1
 80080ae:	b90b      	cbnz	r3, 80080b4 <_puts_r+0x10>
 80080b0:	f7ff ffc2 	bl	8008038 <__sinit>
 80080b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080b6:	07db      	lsls	r3, r3, #31
 80080b8:	d405      	bmi.n	80080c6 <_puts_r+0x22>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	0598      	lsls	r0, r3, #22
 80080be:	d402      	bmi.n	80080c6 <_puts_r+0x22>
 80080c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080c2:	f000 f9f6 	bl	80084b2 <__retarget_lock_acquire_recursive>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	0719      	lsls	r1, r3, #28
 80080ca:	d502      	bpl.n	80080d2 <_puts_r+0x2e>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d135      	bne.n	800813e <_puts_r+0x9a>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4628      	mov	r0, r5
 80080d6:	f000 f919 	bl	800830c <__swsetup_r>
 80080da:	b380      	cbz	r0, 800813e <_puts_r+0x9a>
 80080dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80080e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e2:	07da      	lsls	r2, r3, #31
 80080e4:	d405      	bmi.n	80080f2 <_puts_r+0x4e>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	059b      	lsls	r3, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_puts_r+0x4e>
 80080ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ee:	f000 f9e1 	bl	80084b4 <__retarget_lock_release_recursive>
 80080f2:	4628      	mov	r0, r5
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da04      	bge.n	8008104 <_puts_r+0x60>
 80080fa:	69a2      	ldr	r2, [r4, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	dc17      	bgt.n	8008130 <_puts_r+0x8c>
 8008100:	290a      	cmp	r1, #10
 8008102:	d015      	beq.n	8008130 <_puts_r+0x8c>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	6022      	str	r2, [r4, #0]
 800810a:	7019      	strb	r1, [r3, #0]
 800810c:	68a3      	ldr	r3, [r4, #8]
 800810e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008112:	3b01      	subs	r3, #1
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	2900      	cmp	r1, #0
 8008118:	d1ed      	bne.n	80080f6 <_puts_r+0x52>
 800811a:	2b00      	cmp	r3, #0
 800811c:	da11      	bge.n	8008142 <_puts_r+0x9e>
 800811e:	4622      	mov	r2, r4
 8008120:	210a      	movs	r1, #10
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f8b3 	bl	800828e <__swbuf_r>
 8008128:	3001      	adds	r0, #1
 800812a:	d0d7      	beq.n	80080dc <_puts_r+0x38>
 800812c:	250a      	movs	r5, #10
 800812e:	e7d7      	b.n	80080e0 <_puts_r+0x3c>
 8008130:	4622      	mov	r2, r4
 8008132:	4628      	mov	r0, r5
 8008134:	f000 f8ab 	bl	800828e <__swbuf_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d1e7      	bne.n	800810c <_puts_r+0x68>
 800813c:	e7ce      	b.n	80080dc <_puts_r+0x38>
 800813e:	3e01      	subs	r6, #1
 8008140:	e7e4      	b.n	800810c <_puts_r+0x68>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	220a      	movs	r2, #10
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e7ee      	b.n	800812c <_puts_r+0x88>
	...

08008150 <puts>:
 8008150:	4b02      	ldr	r3, [pc, #8]	@ (800815c <puts+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfa5 	b.w	80080a4 <_puts_r>
 800815a:	bf00      	nop
 800815c:	2000001c 	.word	0x2000001c

08008160 <sniprintf>:
 8008160:	b40c      	push	{r2, r3}
 8008162:	b530      	push	{r4, r5, lr}
 8008164:	4b17      	ldr	r3, [pc, #92]	@ (80081c4 <sniprintf+0x64>)
 8008166:	1e0c      	subs	r4, r1, #0
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	b09d      	sub	sp, #116	@ 0x74
 800816c:	da08      	bge.n	8008180 <sniprintf+0x20>
 800816e:	238b      	movs	r3, #139	@ 0x8b
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008176:	b01d      	add	sp, #116	@ 0x74
 8008178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800817c:	b002      	add	sp, #8
 800817e:	4770      	bx	lr
 8008180:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008184:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008188:	bf14      	ite	ne
 800818a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800818e:	4623      	moveq	r3, r4
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	9307      	str	r3, [sp, #28]
 8008194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008198:	9002      	str	r0, [sp, #8]
 800819a:	9006      	str	r0, [sp, #24]
 800819c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081a2:	ab21      	add	r3, sp, #132	@ 0x84
 80081a4:	a902      	add	r1, sp, #8
 80081a6:	4628      	mov	r0, r5
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	f002 fc77 	bl	800aa9c <_svfiprintf_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	bfbc      	itt	lt
 80081b2:	238b      	movlt	r3, #139	@ 0x8b
 80081b4:	602b      	strlt	r3, [r5, #0]
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d0dd      	beq.n	8008176 <sniprintf+0x16>
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e7d9      	b.n	8008176 <sniprintf+0x16>
 80081c2:	bf00      	nop
 80081c4:	2000001c 	.word	0x2000001c

080081c8 <siprintf>:
 80081c8:	b40e      	push	{r1, r2, r3}
 80081ca:	b500      	push	{lr}
 80081cc:	b09c      	sub	sp, #112	@ 0x70
 80081ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80081d0:	9002      	str	r0, [sp, #8]
 80081d2:	9006      	str	r0, [sp, #24]
 80081d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081d8:	4809      	ldr	r0, [pc, #36]	@ (8008200 <siprintf+0x38>)
 80081da:	9107      	str	r1, [sp, #28]
 80081dc:	9104      	str	r1, [sp, #16]
 80081de:	4909      	ldr	r1, [pc, #36]	@ (8008204 <siprintf+0x3c>)
 80081e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	6800      	ldr	r0, [r0, #0]
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	a902      	add	r1, sp, #8
 80081ec:	f002 fc56 	bl	800aa9c <_svfiprintf_r>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	b01c      	add	sp, #112	@ 0x70
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b003      	add	sp, #12
 80081fe:	4770      	bx	lr
 8008200:	2000001c 	.word	0x2000001c
 8008204:	ffff0208 	.word	0xffff0208

08008208 <__sread>:
 8008208:	b510      	push	{r4, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008210:	f000 f900 	bl	8008414 <_read_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	bfab      	itete	ge
 8008218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800821a:	89a3      	ldrhlt	r3, [r4, #12]
 800821c:	181b      	addge	r3, r3, r0
 800821e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008222:	bfac      	ite	ge
 8008224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008226:	81a3      	strhlt	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__swrite>:
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	461f      	mov	r7, r3
 8008230:	898b      	ldrh	r3, [r1, #12]
 8008232:	05db      	lsls	r3, r3, #23
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	4616      	mov	r6, r2
 800823a:	d505      	bpl.n	8008248 <__swrite+0x1e>
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	2302      	movs	r3, #2
 8008242:	2200      	movs	r2, #0
 8008244:	f000 f8d4 	bl	80083f0 <_lseek_r>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	4628      	mov	r0, r5
 800825a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825e:	f000 b8eb 	b.w	8008438 <_write_r>

08008262 <__sseek>:
 8008262:	b510      	push	{r4, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826a:	f000 f8c1 	bl	80083f0 <_lseek_r>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	bf15      	itete	ne
 8008274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800827a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800827e:	81a3      	strheq	r3, [r4, #12]
 8008280:	bf18      	it	ne
 8008282:	81a3      	strhne	r3, [r4, #12]
 8008284:	bd10      	pop	{r4, pc}

08008286 <__sclose>:
 8008286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828a:	f000 b8a1 	b.w	80083d0 <_close_r>

0800828e <__swbuf_r>:
 800828e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008290:	460e      	mov	r6, r1
 8008292:	4614      	mov	r4, r2
 8008294:	4605      	mov	r5, r0
 8008296:	b118      	cbz	r0, 80082a0 <__swbuf_r+0x12>
 8008298:	6a03      	ldr	r3, [r0, #32]
 800829a:	b90b      	cbnz	r3, 80082a0 <__swbuf_r+0x12>
 800829c:	f7ff fecc 	bl	8008038 <__sinit>
 80082a0:	69a3      	ldr	r3, [r4, #24]
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	071a      	lsls	r2, r3, #28
 80082a8:	d501      	bpl.n	80082ae <__swbuf_r+0x20>
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	b943      	cbnz	r3, 80082c0 <__swbuf_r+0x32>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f82b 	bl	800830c <__swsetup_r>
 80082b6:	b118      	cbz	r0, 80082c0 <__swbuf_r+0x32>
 80082b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80082bc:	4638      	mov	r0, r7
 80082be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	6922      	ldr	r2, [r4, #16]
 80082c4:	1a98      	subs	r0, r3, r2
 80082c6:	6963      	ldr	r3, [r4, #20]
 80082c8:	b2f6      	uxtb	r6, r6
 80082ca:	4283      	cmp	r3, r0
 80082cc:	4637      	mov	r7, r6
 80082ce:	dc05      	bgt.n	80082dc <__swbuf_r+0x4e>
 80082d0:	4621      	mov	r1, r4
 80082d2:	4628      	mov	r0, r5
 80082d4:	f002 fea4 	bl	800b020 <_fflush_r>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d1ed      	bne.n	80082b8 <__swbuf_r+0x2a>
 80082dc:	68a3      	ldr	r3, [r4, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	60a3      	str	r3, [r4, #8]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	6022      	str	r2, [r4, #0]
 80082e8:	701e      	strb	r6, [r3, #0]
 80082ea:	6962      	ldr	r2, [r4, #20]
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d004      	beq.n	80082fc <__swbuf_r+0x6e>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	07db      	lsls	r3, r3, #31
 80082f6:	d5e1      	bpl.n	80082bc <__swbuf_r+0x2e>
 80082f8:	2e0a      	cmp	r6, #10
 80082fa:	d1df      	bne.n	80082bc <__swbuf_r+0x2e>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f002 fe8e 	bl	800b020 <_fflush_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	d0d9      	beq.n	80082bc <__swbuf_r+0x2e>
 8008308:	e7d6      	b.n	80082b8 <__swbuf_r+0x2a>
	...

0800830c <__swsetup_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4b29      	ldr	r3, [pc, #164]	@ (80083b4 <__swsetup_r+0xa8>)
 8008310:	4605      	mov	r5, r0
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	460c      	mov	r4, r1
 8008316:	b118      	cbz	r0, 8008320 <__swsetup_r+0x14>
 8008318:	6a03      	ldr	r3, [r0, #32]
 800831a:	b90b      	cbnz	r3, 8008320 <__swsetup_r+0x14>
 800831c:	f7ff fe8c 	bl	8008038 <__sinit>
 8008320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008324:	0719      	lsls	r1, r3, #28
 8008326:	d422      	bmi.n	800836e <__swsetup_r+0x62>
 8008328:	06da      	lsls	r2, r3, #27
 800832a:	d407      	bmi.n	800833c <__swsetup_r+0x30>
 800832c:	2209      	movs	r2, #9
 800832e:	602a      	str	r2, [r5, #0]
 8008330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800833a:	e033      	b.n	80083a4 <__swsetup_r+0x98>
 800833c:	0758      	lsls	r0, r3, #29
 800833e:	d512      	bpl.n	8008366 <__swsetup_r+0x5a>
 8008340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008342:	b141      	cbz	r1, 8008356 <__swsetup_r+0x4a>
 8008344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <__swsetup_r+0x46>
 800834c:	4628      	mov	r0, r5
 800834e:	f000 ff13 	bl	8009178 <_free_r>
 8008352:	2300      	movs	r3, #0
 8008354:	6363      	str	r3, [r4, #52]	@ 0x34
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0308 	orr.w	r3, r3, #8
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b94b      	cbnz	r3, 8008386 <__swsetup_r+0x7a>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800837c:	d003      	beq.n	8008386 <__swsetup_r+0x7a>
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f002 fe9b 	bl	800b0bc <__smakebuf_r>
 8008386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838a:	f013 0201 	ands.w	r2, r3, #1
 800838e:	d00a      	beq.n	80083a6 <__swsetup_r+0x9a>
 8008390:	2200      	movs	r2, #0
 8008392:	60a2      	str	r2, [r4, #8]
 8008394:	6962      	ldr	r2, [r4, #20]
 8008396:	4252      	negs	r2, r2
 8008398:	61a2      	str	r2, [r4, #24]
 800839a:	6922      	ldr	r2, [r4, #16]
 800839c:	b942      	cbnz	r2, 80083b0 <__swsetup_r+0xa4>
 800839e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083a2:	d1c5      	bne.n	8008330 <__swsetup_r+0x24>
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	0799      	lsls	r1, r3, #30
 80083a8:	bf58      	it	pl
 80083aa:	6962      	ldrpl	r2, [r4, #20]
 80083ac:	60a2      	str	r2, [r4, #8]
 80083ae:	e7f4      	b.n	800839a <__swsetup_r+0x8e>
 80083b0:	2000      	movs	r0, #0
 80083b2:	e7f7      	b.n	80083a4 <__swsetup_r+0x98>
 80083b4:	2000001c 	.word	0x2000001c

080083b8 <memset>:
 80083b8:	4402      	add	r2, r0
 80083ba:	4603      	mov	r3, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <memset+0xa>
 80083c0:	4770      	bx	lr
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <memset+0x4>

080083c8 <_localeconv_r>:
 80083c8:	4800      	ldr	r0, [pc, #0]	@ (80083cc <_localeconv_r+0x4>)
 80083ca:	4770      	bx	lr
 80083cc:	2000015c 	.word	0x2000015c

080083d0 <_close_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	@ (80083ec <_close_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7f9 f890 	bl	8001500 <_close>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_close_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_close_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	200016ec 	.word	0x200016ec

080083f0 <_lseek_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_lseek_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f9 f8a5 	bl	800154e <_lseek>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_lseek_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_lseek_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200016ec 	.word	0x200016ec

08008414 <_read_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_read_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f7f9 f833 	bl	800148e <_read>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_read_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_read_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	200016ec 	.word	0x200016ec

08008438 <_write_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_write_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7f9 f83e 	bl	80014c8 <_write>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_write_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_write_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	200016ec 	.word	0x200016ec

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	@ (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	2000001c 	.word	0x2000001c

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	@ (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	@ (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	@ (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	@ (80084ac <__libc_init_array+0x44>)
 800847c:	f003 fade 	bl	800ba3c <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	0800bfa8 	.word	0x0800bfa8
 80084a4:	0800bfa8 	.word	0x0800bfa8
 80084a8:	0800bfa8 	.word	0x0800bfa8
 80084ac:	0800bfac 	.word	0x0800bfac

080084b0 <__retarget_lock_init_recursive>:
 80084b0:	4770      	bx	lr

080084b2 <__retarget_lock_acquire_recursive>:
 80084b2:	4770      	bx	lr

080084b4 <__retarget_lock_release_recursive>:
 80084b4:	4770      	bx	lr

080084b6 <memcpy>:
 80084b6:	440a      	add	r2, r1
 80084b8:	4291      	cmp	r1, r2
 80084ba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80084be:	d100      	bne.n	80084c2 <memcpy+0xc>
 80084c0:	4770      	bx	lr
 80084c2:	b510      	push	{r4, lr}
 80084c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084cc:	4291      	cmp	r1, r2
 80084ce:	d1f9      	bne.n	80084c4 <memcpy+0xe>
 80084d0:	bd10      	pop	{r4, pc}
	...

080084d4 <nanf>:
 80084d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80084dc <nanf+0x8>
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	7fc00000 	.word	0x7fc00000

080084e0 <quorem>:
 80084e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	6903      	ldr	r3, [r0, #16]
 80084e6:	690c      	ldr	r4, [r1, #16]
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	4607      	mov	r7, r0
 80084ec:	db7e      	blt.n	80085ec <quorem+0x10c>
 80084ee:	3c01      	subs	r4, #1
 80084f0:	f101 0814 	add.w	r8, r1, #20
 80084f4:	00a3      	lsls	r3, r4, #2
 80084f6:	f100 0514 	add.w	r5, r0, #20
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800850a:	3301      	adds	r3, #1
 800850c:	429a      	cmp	r2, r3
 800850e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008512:	fbb2 f6f3 	udiv	r6, r2, r3
 8008516:	d32e      	bcc.n	8008576 <quorem+0x96>
 8008518:	f04f 0a00 	mov.w	sl, #0
 800851c:	46c4      	mov	ip, r8
 800851e:	46ae      	mov	lr, r5
 8008520:	46d3      	mov	fp, sl
 8008522:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008526:	b298      	uxth	r0, r3
 8008528:	fb06 a000 	mla	r0, r6, r0, sl
 800852c:	0c02      	lsrs	r2, r0, #16
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	fb06 2303 	mla	r3, r6, r3, r2
 8008534:	f8de 2000 	ldr.w	r2, [lr]
 8008538:	b280      	uxth	r0, r0
 800853a:	b292      	uxth	r2, r2
 800853c:	1a12      	subs	r2, r2, r0
 800853e:	445a      	add	r2, fp
 8008540:	f8de 0000 	ldr.w	r0, [lr]
 8008544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008548:	b29b      	uxth	r3, r3
 800854a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800854e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008552:	b292      	uxth	r2, r2
 8008554:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008558:	45e1      	cmp	r9, ip
 800855a:	f84e 2b04 	str.w	r2, [lr], #4
 800855e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008562:	d2de      	bcs.n	8008522 <quorem+0x42>
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	58eb      	ldr	r3, [r5, r3]
 8008568:	b92b      	cbnz	r3, 8008576 <quorem+0x96>
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	3b04      	subs	r3, #4
 800856e:	429d      	cmp	r5, r3
 8008570:	461a      	mov	r2, r3
 8008572:	d32f      	bcc.n	80085d4 <quorem+0xf4>
 8008574:	613c      	str	r4, [r7, #16]
 8008576:	4638      	mov	r0, r7
 8008578:	f001 f9c2 	bl	8009900 <__mcmp>
 800857c:	2800      	cmp	r0, #0
 800857e:	db25      	blt.n	80085cc <quorem+0xec>
 8008580:	4629      	mov	r1, r5
 8008582:	2000      	movs	r0, #0
 8008584:	f858 2b04 	ldr.w	r2, [r8], #4
 8008588:	f8d1 c000 	ldr.w	ip, [r1]
 800858c:	fa1f fe82 	uxth.w	lr, r2
 8008590:	fa1f f38c 	uxth.w	r3, ip
 8008594:	eba3 030e 	sub.w	r3, r3, lr
 8008598:	4403      	add	r3, r0
 800859a:	0c12      	lsrs	r2, r2, #16
 800859c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085aa:	45c1      	cmp	r9, r8
 80085ac:	f841 3b04 	str.w	r3, [r1], #4
 80085b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085b4:	d2e6      	bcs.n	8008584 <quorem+0xa4>
 80085b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085be:	b922      	cbnz	r2, 80085ca <quorem+0xea>
 80085c0:	3b04      	subs	r3, #4
 80085c2:	429d      	cmp	r5, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	d30b      	bcc.n	80085e0 <quorem+0x100>
 80085c8:	613c      	str	r4, [r7, #16]
 80085ca:	3601      	adds	r6, #1
 80085cc:	4630      	mov	r0, r6
 80085ce:	b003      	add	sp, #12
 80085d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	3b04      	subs	r3, #4
 80085d8:	2a00      	cmp	r2, #0
 80085da:	d1cb      	bne.n	8008574 <quorem+0x94>
 80085dc:	3c01      	subs	r4, #1
 80085de:	e7c6      	b.n	800856e <quorem+0x8e>
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	3b04      	subs	r3, #4
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	d1ef      	bne.n	80085c8 <quorem+0xe8>
 80085e8:	3c01      	subs	r4, #1
 80085ea:	e7ea      	b.n	80085c2 <quorem+0xe2>
 80085ec:	2000      	movs	r0, #0
 80085ee:	e7ee      	b.n	80085ce <quorem+0xee>

080085f0 <_dtoa_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	69c7      	ldr	r7, [r0, #28]
 80085f6:	b099      	sub	sp, #100	@ 0x64
 80085f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085fc:	ec55 4b10 	vmov	r4, r5, d0
 8008600:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008602:	9109      	str	r1, [sp, #36]	@ 0x24
 8008604:	4683      	mov	fp, r0
 8008606:	920e      	str	r2, [sp, #56]	@ 0x38
 8008608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800860a:	b97f      	cbnz	r7, 800862c <_dtoa_r+0x3c>
 800860c:	2010      	movs	r0, #16
 800860e:	f000 fdfd 	bl	800920c <malloc>
 8008612:	4602      	mov	r2, r0
 8008614:	f8cb 001c 	str.w	r0, [fp, #28]
 8008618:	b920      	cbnz	r0, 8008624 <_dtoa_r+0x34>
 800861a:	4ba7      	ldr	r3, [pc, #668]	@ (80088b8 <_dtoa_r+0x2c8>)
 800861c:	21ef      	movs	r1, #239	@ 0xef
 800861e:	48a7      	ldr	r0, [pc, #668]	@ (80088bc <_dtoa_r+0x2cc>)
 8008620:	f002 fdee 	bl	800b200 <__assert_func>
 8008624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008628:	6007      	str	r7, [r0, #0]
 800862a:	60c7      	str	r7, [r0, #12]
 800862c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	b159      	cbz	r1, 800864c <_dtoa_r+0x5c>
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	604a      	str	r2, [r1, #4]
 8008638:	2301      	movs	r3, #1
 800863a:	4093      	lsls	r3, r2
 800863c:	608b      	str	r3, [r1, #8]
 800863e:	4658      	mov	r0, fp
 8008640:	f000 feda 	bl	80093f8 <_Bfree>
 8008644:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	1e2b      	subs	r3, r5, #0
 800864e:	bfb9      	ittee	lt
 8008650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008654:	9303      	strlt	r3, [sp, #12]
 8008656:	2300      	movge	r3, #0
 8008658:	6033      	strge	r3, [r6, #0]
 800865a:	9f03      	ldr	r7, [sp, #12]
 800865c:	4b98      	ldr	r3, [pc, #608]	@ (80088c0 <_dtoa_r+0x2d0>)
 800865e:	bfbc      	itt	lt
 8008660:	2201      	movlt	r2, #1
 8008662:	6032      	strlt	r2, [r6, #0]
 8008664:	43bb      	bics	r3, r7
 8008666:	d112      	bne.n	800868e <_dtoa_r+0x9e>
 8008668:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800866a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008674:	4323      	orrs	r3, r4
 8008676:	f000 854d 	beq.w	8009114 <_dtoa_r+0xb24>
 800867a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800867c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088d4 <_dtoa_r+0x2e4>
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 854f 	beq.w	8009124 <_dtoa_r+0xb34>
 8008686:	f10a 0303 	add.w	r3, sl, #3
 800868a:	f000 bd49 	b.w	8009120 <_dtoa_r+0xb30>
 800868e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	ec51 0b17 	vmov	r0, r1, d7
 8008698:	2300      	movs	r3, #0
 800869a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800869e:	f7f8 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a2:	4680      	mov	r8, r0
 80086a4:	b158      	cbz	r0, 80086be <_dtoa_r+0xce>
 80086a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086a8:	2301      	movs	r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086ae:	b113      	cbz	r3, 80086b6 <_dtoa_r+0xc6>
 80086b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086b2:	4b84      	ldr	r3, [pc, #528]	@ (80088c4 <_dtoa_r+0x2d4>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088d8 <_dtoa_r+0x2e8>
 80086ba:	f000 bd33 	b.w	8009124 <_dtoa_r+0xb34>
 80086be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086c2:	aa16      	add	r2, sp, #88	@ 0x58
 80086c4:	a917      	add	r1, sp, #92	@ 0x5c
 80086c6:	4658      	mov	r0, fp
 80086c8:	f001 fa3a 	bl	8009b40 <__d2b>
 80086cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086d0:	4681      	mov	r9, r0
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d077      	beq.n	80087c6 <_dtoa_r+0x1d6>
 80086d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086f0:	4619      	mov	r1, r3
 80086f2:	2200      	movs	r2, #0
 80086f4:	4b74      	ldr	r3, [pc, #464]	@ (80088c8 <_dtoa_r+0x2d8>)
 80086f6:	f7f7 fdc7 	bl	8000288 <__aeabi_dsub>
 80086fa:	a369      	add	r3, pc, #420	@ (adr r3, 80088a0 <_dtoa_r+0x2b0>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 ff7a 	bl	80005f8 <__aeabi_dmul>
 8008704:	a368      	add	r3, pc, #416	@ (adr r3, 80088a8 <_dtoa_r+0x2b8>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4604      	mov	r4, r0
 8008710:	4630      	mov	r0, r6
 8008712:	460d      	mov	r5, r1
 8008714:	f7f7 ff06 	bl	8000524 <__aeabi_i2d>
 8008718:	a365      	add	r3, pc, #404	@ (adr r3, 80088b0 <_dtoa_r+0x2c0>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	f7f8 fa11 	bl	8000b58 <__aeabi_d2iz>
 8008736:	2200      	movs	r2, #0
 8008738:	4607      	mov	r7, r0
 800873a:	2300      	movs	r3, #0
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	b140      	cbz	r0, 8008758 <_dtoa_r+0x168>
 8008746:	4638      	mov	r0, r7
 8008748:	f7f7 feec 	bl	8000524 <__aeabi_i2d>
 800874c:	4622      	mov	r2, r4
 800874e:	462b      	mov	r3, r5
 8008750:	f7f8 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8008754:	b900      	cbnz	r0, 8008758 <_dtoa_r+0x168>
 8008756:	3f01      	subs	r7, #1
 8008758:	2f16      	cmp	r7, #22
 800875a:	d851      	bhi.n	8008800 <_dtoa_r+0x210>
 800875c:	4b5b      	ldr	r3, [pc, #364]	@ (80088cc <_dtoa_r+0x2dc>)
 800875e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800876a:	f7f8 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	d048      	beq.n	8008804 <_dtoa_r+0x214>
 8008772:	3f01      	subs	r7, #1
 8008774:	2300      	movs	r3, #0
 8008776:	9312      	str	r3, [sp, #72]	@ 0x48
 8008778:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800877a:	1b9b      	subs	r3, r3, r6
 800877c:	1e5a      	subs	r2, r3, #1
 800877e:	bf44      	itt	mi
 8008780:	f1c3 0801 	rsbmi	r8, r3, #1
 8008784:	2300      	movmi	r3, #0
 8008786:	9208      	str	r2, [sp, #32]
 8008788:	bf54      	ite	pl
 800878a:	f04f 0800 	movpl.w	r8, #0
 800878e:	9308      	strmi	r3, [sp, #32]
 8008790:	2f00      	cmp	r7, #0
 8008792:	db39      	blt.n	8008808 <_dtoa_r+0x218>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008798:	443b      	add	r3, r7
 800879a:	9308      	str	r3, [sp, #32]
 800879c:	2300      	movs	r3, #0
 800879e:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a2:	2b09      	cmp	r3, #9
 80087a4:	d864      	bhi.n	8008870 <_dtoa_r+0x280>
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	bfc4      	itt	gt
 80087aa:	3b04      	subgt	r3, #4
 80087ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b0:	f1a3 0302 	sub.w	r3, r3, #2
 80087b4:	bfcc      	ite	gt
 80087b6:	2400      	movgt	r4, #0
 80087b8:	2401      	movle	r4, #1
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d863      	bhi.n	8008886 <_dtoa_r+0x296>
 80087be:	e8df f003 	tbb	[pc, r3]
 80087c2:	372a      	.short	0x372a
 80087c4:	5535      	.short	0x5535
 80087c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087ca:	441e      	add	r6, r3
 80087cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	bfc1      	itttt	gt
 80087d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087d8:	409f      	lslgt	r7, r3
 80087da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087e2:	bfd6      	itet	le
 80087e4:	f1c3 0320 	rsble	r3, r3, #32
 80087e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80087ec:	fa04 f003 	lslle.w	r0, r4, r3
 80087f0:	f7f7 fe88 	bl	8000504 <__aeabi_ui2d>
 80087f4:	2201      	movs	r2, #1
 80087f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087fa:	3e01      	subs	r6, #1
 80087fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80087fe:	e777      	b.n	80086f0 <_dtoa_r+0x100>
 8008800:	2301      	movs	r3, #1
 8008802:	e7b8      	b.n	8008776 <_dtoa_r+0x186>
 8008804:	9012      	str	r0, [sp, #72]	@ 0x48
 8008806:	e7b7      	b.n	8008778 <_dtoa_r+0x188>
 8008808:	427b      	negs	r3, r7
 800880a:	930a      	str	r3, [sp, #40]	@ 0x28
 800880c:	2300      	movs	r3, #0
 800880e:	eba8 0807 	sub.w	r8, r8, r7
 8008812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008814:	e7c4      	b.n	80087a0 <_dtoa_r+0x1b0>
 8008816:	2300      	movs	r3, #0
 8008818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800881a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc35      	bgt.n	800888c <_dtoa_r+0x29c>
 8008820:	2301      	movs	r3, #1
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	9307      	str	r3, [sp, #28]
 8008826:	461a      	mov	r2, r3
 8008828:	920e      	str	r2, [sp, #56]	@ 0x38
 800882a:	e00b      	b.n	8008844 <_dtoa_r+0x254>
 800882c:	2301      	movs	r3, #1
 800882e:	e7f3      	b.n	8008818 <_dtoa_r+0x228>
 8008830:	2300      	movs	r3, #0
 8008832:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	2b01      	cmp	r3, #1
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	bfb8      	it	lt
 8008842:	2301      	movlt	r3, #1
 8008844:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008848:	2100      	movs	r1, #0
 800884a:	2204      	movs	r2, #4
 800884c:	f102 0514 	add.w	r5, r2, #20
 8008850:	429d      	cmp	r5, r3
 8008852:	d91f      	bls.n	8008894 <_dtoa_r+0x2a4>
 8008854:	6041      	str	r1, [r0, #4]
 8008856:	4658      	mov	r0, fp
 8008858:	f000 fd8e 	bl	8009378 <_Balloc>
 800885c:	4682      	mov	sl, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d13c      	bne.n	80088dc <_dtoa_r+0x2ec>
 8008862:	4b1b      	ldr	r3, [pc, #108]	@ (80088d0 <_dtoa_r+0x2e0>)
 8008864:	4602      	mov	r2, r0
 8008866:	f240 11af 	movw	r1, #431	@ 0x1af
 800886a:	e6d8      	b.n	800861e <_dtoa_r+0x2e>
 800886c:	2301      	movs	r3, #1
 800886e:	e7e0      	b.n	8008832 <_dtoa_r+0x242>
 8008870:	2401      	movs	r4, #1
 8008872:	2300      	movs	r3, #0
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	2200      	movs	r2, #0
 8008882:	2312      	movs	r3, #18
 8008884:	e7d0      	b.n	8008828 <_dtoa_r+0x238>
 8008886:	2301      	movs	r3, #1
 8008888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800888a:	e7f5      	b.n	8008878 <_dtoa_r+0x288>
 800888c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	e7d7      	b.n	8008844 <_dtoa_r+0x254>
 8008894:	3101      	adds	r1, #1
 8008896:	0052      	lsls	r2, r2, #1
 8008898:	e7d8      	b.n	800884c <_dtoa_r+0x25c>
 800889a:	bf00      	nop
 800889c:	f3af 8000 	nop.w
 80088a0:	636f4361 	.word	0x636f4361
 80088a4:	3fd287a7 	.word	0x3fd287a7
 80088a8:	8b60c8b3 	.word	0x8b60c8b3
 80088ac:	3fc68a28 	.word	0x3fc68a28
 80088b0:	509f79fb 	.word	0x509f79fb
 80088b4:	3fd34413 	.word	0x3fd34413
 80088b8:	0800bbb9 	.word	0x0800bbb9
 80088bc:	0800bbd0 	.word	0x0800bbd0
 80088c0:	7ff00000 	.word	0x7ff00000
 80088c4:	0800bb84 	.word	0x0800bb84
 80088c8:	3ff80000 	.word	0x3ff80000
 80088cc:	0800bcc8 	.word	0x0800bcc8
 80088d0:	0800bc28 	.word	0x0800bc28
 80088d4:	0800bbb5 	.word	0x0800bbb5
 80088d8:	0800bb83 	.word	0x0800bb83
 80088dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	9b07      	ldr	r3, [sp, #28]
 80088e4:	2b0e      	cmp	r3, #14
 80088e6:	f200 80a4 	bhi.w	8008a32 <_dtoa_r+0x442>
 80088ea:	2c00      	cmp	r4, #0
 80088ec:	f000 80a1 	beq.w	8008a32 <_dtoa_r+0x442>
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	dd33      	ble.n	800895c <_dtoa_r+0x36c>
 80088f4:	4bad      	ldr	r3, [pc, #692]	@ (8008bac <_dtoa_r+0x5bc>)
 80088f6:	f007 020f 	and.w	r2, r7, #15
 80088fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fe:	ed93 7b00 	vldr	d7, [r3]
 8008902:	05f8      	lsls	r0, r7, #23
 8008904:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800890c:	d516      	bpl.n	800893c <_dtoa_r+0x34c>
 800890e:	4ba8      	ldr	r3, [pc, #672]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008918:	f7f7 ff98 	bl	800084c <__aeabi_ddiv>
 800891c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008920:	f004 040f 	and.w	r4, r4, #15
 8008924:	2603      	movs	r6, #3
 8008926:	4da2      	ldr	r5, [pc, #648]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008928:	b954      	cbnz	r4, 8008940 <_dtoa_r+0x350>
 800892a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008932:	f7f7 ff8b 	bl	800084c <__aeabi_ddiv>
 8008936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893a:	e028      	b.n	800898e <_dtoa_r+0x39e>
 800893c:	2602      	movs	r6, #2
 800893e:	e7f2      	b.n	8008926 <_dtoa_r+0x336>
 8008940:	07e1      	lsls	r1, r4, #31
 8008942:	d508      	bpl.n	8008956 <_dtoa_r+0x366>
 8008944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800894c:	f7f7 fe54 	bl	80005f8 <__aeabi_dmul>
 8008950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008954:	3601      	adds	r6, #1
 8008956:	1064      	asrs	r4, r4, #1
 8008958:	3508      	adds	r5, #8
 800895a:	e7e5      	b.n	8008928 <_dtoa_r+0x338>
 800895c:	f000 80d2 	beq.w	8008b04 <_dtoa_r+0x514>
 8008960:	427c      	negs	r4, r7
 8008962:	4b92      	ldr	r3, [pc, #584]	@ (8008bac <_dtoa_r+0x5bc>)
 8008964:	4d92      	ldr	r5, [pc, #584]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008966:	f004 020f 	and.w	r2, r4, #15
 800896a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008976:	f7f7 fe3f 	bl	80005f8 <__aeabi_dmul>
 800897a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897e:	1124      	asrs	r4, r4, #4
 8008980:	2300      	movs	r3, #0
 8008982:	2602      	movs	r6, #2
 8008984:	2c00      	cmp	r4, #0
 8008986:	f040 80b2 	bne.w	8008aee <_dtoa_r+0x4fe>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d3      	bne.n	8008936 <_dtoa_r+0x346>
 800898e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008990:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80b7 	beq.w	8008b08 <_dtoa_r+0x518>
 800899a:	4b86      	ldr	r3, [pc, #536]	@ (8008bb4 <_dtoa_r+0x5c4>)
 800899c:	2200      	movs	r2, #0
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f8 f89b 	bl	8000adc <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f000 80ae 	beq.w	8008b08 <_dtoa_r+0x518>
 80089ac:	9b07      	ldr	r3, [sp, #28]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80aa 	beq.w	8008b08 <_dtoa_r+0x518>
 80089b4:	9b00      	ldr	r3, [sp, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dd37      	ble.n	8008a2a <_dtoa_r+0x43a>
 80089ba:	1e7b      	subs	r3, r7, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	4620      	mov	r0, r4
 80089c0:	4b7d      	ldr	r3, [pc, #500]	@ (8008bb8 <_dtoa_r+0x5c8>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 fe17 	bl	80005f8 <__aeabi_dmul>
 80089ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ce:	9c00      	ldr	r4, [sp, #0]
 80089d0:	3601      	adds	r6, #1
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7f7 fda6 	bl	8000524 <__aeabi_i2d>
 80089d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089dc:	f7f7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80089e0:	4b76      	ldr	r3, [pc, #472]	@ (8008bbc <_dtoa_r+0x5cc>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fc52 	bl	800028c <__adddf3>
 80089e8:	4605      	mov	r5, r0
 80089ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	f040 808d 	bne.w	8008b0e <_dtoa_r+0x51e>
 80089f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f8:	4b71      	ldr	r3, [pc, #452]	@ (8008bc0 <_dtoa_r+0x5d0>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc44 	bl	8000288 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a08:	462a      	mov	r2, r5
 8008a0a:	4633      	mov	r3, r6
 8008a0c:	f7f8 f884 	bl	8000b18 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 828b 	bne.w	8008f2c <_dtoa_r+0x93c>
 8008a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a20:	f7f8 f85c 	bl	8000adc <__aeabi_dcmplt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 8128 	bne.w	8008c7a <_dtoa_r+0x68a>
 8008a2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f2c0 815a 	blt.w	8008cee <_dtoa_r+0x6fe>
 8008a3a:	2f0e      	cmp	r7, #14
 8008a3c:	f300 8157 	bgt.w	8008cee <_dtoa_r+0x6fe>
 8008a40:	4b5a      	ldr	r3, [pc, #360]	@ (8008bac <_dtoa_r+0x5bc>)
 8008a42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a46:	ed93 7b00 	vldr	d7, [r3]
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	ed8d 7b00 	vstr	d7, [sp]
 8008a52:	da03      	bge.n	8008a5c <_dtoa_r+0x46c>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f340 8101 	ble.w	8008c5e <_dtoa_r+0x66e>
 8008a5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a60:	4656      	mov	r6, sl
 8008a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a66:	4620      	mov	r0, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f7 feef 	bl	800084c <__aeabi_ddiv>
 8008a6e:	f7f8 f873 	bl	8000b58 <__aeabi_d2iz>
 8008a72:	4680      	mov	r8, r0
 8008a74:	f7f7 fd56 	bl	8000524 <__aeabi_i2d>
 8008a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	f806 4b01 	strb.w	r4, [r6], #1
 8008a94:	9d07      	ldr	r5, [sp, #28]
 8008a96:	eba6 040a 	sub.w	r4, r6, sl
 8008a9a:	42a5      	cmp	r5, r4
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	f040 8117 	bne.w	8008cd2 <_dtoa_r+0x6e2>
 8008aa4:	f7f7 fbf2 	bl	800028c <__adddf3>
 8008aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aac:	4604      	mov	r4, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	f7f8 f832 	bl	8000b18 <__aeabi_dcmpgt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f040 80f9 	bne.w	8008cac <_dtoa_r+0x6bc>
 8008aba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f8 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac6:	b118      	cbz	r0, 8008ad0 <_dtoa_r+0x4e0>
 8008ac8:	f018 0f01 	tst.w	r8, #1
 8008acc:	f040 80ee 	bne.w	8008cac <_dtoa_r+0x6bc>
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 fc90 	bl	80093f8 <_Bfree>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	7033      	strb	r3, [r6, #0]
 8008adc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ade:	3701      	adds	r7, #1
 8008ae0:	601f      	str	r7, [r3, #0]
 8008ae2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 831d 	beq.w	8009124 <_dtoa_r+0xb34>
 8008aea:	601e      	str	r6, [r3, #0]
 8008aec:	e31a      	b.n	8009124 <_dtoa_r+0xb34>
 8008aee:	07e2      	lsls	r2, r4, #31
 8008af0:	d505      	bpl.n	8008afe <_dtoa_r+0x50e>
 8008af2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008af6:	f7f7 fd7f 	bl	80005f8 <__aeabi_dmul>
 8008afa:	3601      	adds	r6, #1
 8008afc:	2301      	movs	r3, #1
 8008afe:	1064      	asrs	r4, r4, #1
 8008b00:	3508      	adds	r5, #8
 8008b02:	e73f      	b.n	8008984 <_dtoa_r+0x394>
 8008b04:	2602      	movs	r6, #2
 8008b06:	e742      	b.n	800898e <_dtoa_r+0x39e>
 8008b08:	9c07      	ldr	r4, [sp, #28]
 8008b0a:	9704      	str	r7, [sp, #16]
 8008b0c:	e761      	b.n	80089d2 <_dtoa_r+0x3e2>
 8008b0e:	4b27      	ldr	r3, [pc, #156]	@ (8008bac <_dtoa_r+0x5bc>)
 8008b10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b1a:	4454      	add	r4, sl
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d053      	beq.n	8008bc8 <_dtoa_r+0x5d8>
 8008b20:	4928      	ldr	r1, [pc, #160]	@ (8008bc4 <_dtoa_r+0x5d4>)
 8008b22:	2000      	movs	r0, #0
 8008b24:	f7f7 fe92 	bl	800084c <__aeabi_ddiv>
 8008b28:	4633      	mov	r3, r6
 8008b2a:	462a      	mov	r2, r5
 8008b2c:	f7f7 fbac 	bl	8000288 <__aeabi_dsub>
 8008b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b34:	4656      	mov	r6, sl
 8008b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3a:	f7f8 f80d 	bl	8000b58 <__aeabi_d2iz>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	f7f7 fcf0 	bl	8000524 <__aeabi_i2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b4c:	f7f7 fb9c 	bl	8000288 <__aeabi_dsub>
 8008b50:	3530      	adds	r5, #48	@ 0x30
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b5a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b62:	f7f7 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d171      	bne.n	8008c4e <_dtoa_r+0x65e>
 8008b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b6e:	4911      	ldr	r1, [pc, #68]	@ (8008bb4 <_dtoa_r+0x5c4>)
 8008b70:	2000      	movs	r0, #0
 8008b72:	f7f7 fb89 	bl	8000288 <__aeabi_dsub>
 8008b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b7a:	f7f7 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f040 8095 	bne.w	8008cae <_dtoa_r+0x6be>
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	f43f af50 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <_dtoa_r+0x5c8>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	4b08      	ldr	r3, [pc, #32]	@ (8008bb8 <_dtoa_r+0x5c8>)
 8008b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008baa:	e7c4      	b.n	8008b36 <_dtoa_r+0x546>
 8008bac:	0800bcc8 	.word	0x0800bcc8
 8008bb0:	0800bca0 	.word	0x0800bca0
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	40240000 	.word	0x40240000
 8008bbc:	401c0000 	.word	0x401c0000
 8008bc0:	40140000 	.word	0x40140000
 8008bc4:	3fe00000 	.word	0x3fe00000
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7f7 fd14 	bl	80005f8 <__aeabi_dmul>
 8008bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bd6:	4656      	mov	r6, sl
 8008bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bdc:	f7f7 ffbc 	bl	8000b58 <__aeabi_d2iz>
 8008be0:	4605      	mov	r5, r0
 8008be2:	f7f7 fc9f 	bl	8000524 <__aeabi_i2d>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bee:	f7f7 fb4b 	bl	8000288 <__aeabi_dsub>
 8008bf2:	3530      	adds	r5, #48	@ 0x30
 8008bf4:	f806 5b01 	strb.w	r5, [r6], #1
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	42a6      	cmp	r6, r4
 8008bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	d124      	bne.n	8008c52 <_dtoa_r+0x662>
 8008c08:	4bac      	ldr	r3, [pc, #688]	@ (8008ebc <_dtoa_r+0x8cc>)
 8008c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c0e:	f7f7 fb3d 	bl	800028c <__adddf3>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1a:	f7f7 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d145      	bne.n	8008cae <_dtoa_r+0x6be>
 8008c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c26:	49a5      	ldr	r1, [pc, #660]	@ (8008ebc <_dtoa_r+0x8cc>)
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f7f7 fb2d 	bl	8000288 <__aeabi_dsub>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 ff51 	bl	8000adc <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f43f aef5 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008c40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c42:	1e73      	subs	r3, r6, #1
 8008c44:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c4a:	2b30      	cmp	r3, #48	@ 0x30
 8008c4c:	d0f8      	beq.n	8008c40 <_dtoa_r+0x650>
 8008c4e:	9f04      	ldr	r7, [sp, #16]
 8008c50:	e73e      	b.n	8008ad0 <_dtoa_r+0x4e0>
 8008c52:	4b9b      	ldr	r3, [pc, #620]	@ (8008ec0 <_dtoa_r+0x8d0>)
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c5c:	e7bc      	b.n	8008bd8 <_dtoa_r+0x5e8>
 8008c5e:	d10c      	bne.n	8008c7a <_dtoa_r+0x68a>
 8008c60:	4b98      	ldr	r3, [pc, #608]	@ (8008ec4 <_dtoa_r+0x8d4>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c70:	f7f7 ff48 	bl	8000b04 <__aeabi_dcmpge>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f000 8157 	beq.w	8008f28 <_dtoa_r+0x938>
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	4625      	mov	r5, r4
 8008c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c80:	43db      	mvns	r3, r3
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	4656      	mov	r6, sl
 8008c86:	2700      	movs	r7, #0
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4658      	mov	r0, fp
 8008c8c:	f000 fbb4 	bl	80093f8 <_Bfree>
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	d0dc      	beq.n	8008c4e <_dtoa_r+0x65e>
 8008c94:	b12f      	cbz	r7, 8008ca2 <_dtoa_r+0x6b2>
 8008c96:	42af      	cmp	r7, r5
 8008c98:	d003      	beq.n	8008ca2 <_dtoa_r+0x6b2>
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	f000 fbab 	bl	80093f8 <_Bfree>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4658      	mov	r0, fp
 8008ca6:	f000 fba7 	bl	80093f8 <_Bfree>
 8008caa:	e7d0      	b.n	8008c4e <_dtoa_r+0x65e>
 8008cac:	9704      	str	r7, [sp, #16]
 8008cae:	4633      	mov	r3, r6
 8008cb0:	461e      	mov	r6, r3
 8008cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb6:	2a39      	cmp	r2, #57	@ 0x39
 8008cb8:	d107      	bne.n	8008cca <_dtoa_r+0x6da>
 8008cba:	459a      	cmp	sl, r3
 8008cbc:	d1f8      	bne.n	8008cb0 <_dtoa_r+0x6c0>
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	9204      	str	r2, [sp, #16]
 8008cc4:	2230      	movs	r2, #48	@ 0x30
 8008cc6:	f88a 2000 	strb.w	r2, [sl]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	3201      	adds	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e7bd      	b.n	8008c4e <_dtoa_r+0x65e>
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ec0 <_dtoa_r+0x8d0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	f7f7 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f43f aebb 	beq.w	8008a62 <_dtoa_r+0x472>
 8008cec:	e6f0      	b.n	8008ad0 <_dtoa_r+0x4e0>
 8008cee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	f000 80db 	beq.w	8008eac <_dtoa_r+0x8bc>
 8008cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf8:	2a01      	cmp	r2, #1
 8008cfa:	f300 80bf 	bgt.w	8008e7c <_dtoa_r+0x88c>
 8008cfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	f000 80b7 	beq.w	8008e74 <_dtoa_r+0x884>
 8008d06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d0c:	4646      	mov	r6, r8
 8008d0e:	9a08      	ldr	r2, [sp, #32]
 8008d10:	2101      	movs	r1, #1
 8008d12:	441a      	add	r2, r3
 8008d14:	4658      	mov	r0, fp
 8008d16:	4498      	add	r8, r3
 8008d18:	9208      	str	r2, [sp, #32]
 8008d1a:	f000 fc6b 	bl	80095f4 <__i2b>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	b15e      	cbz	r6, 8008d3a <_dtoa_r+0x74a>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd08      	ble.n	8008d3a <_dtoa_r+0x74a>
 8008d28:	42b3      	cmp	r3, r6
 8008d2a:	9a08      	ldr	r2, [sp, #32]
 8008d2c:	bfa8      	it	ge
 8008d2e:	4633      	movge	r3, r6
 8008d30:	eba8 0803 	sub.w	r8, r8, r3
 8008d34:	1af6      	subs	r6, r6, r3
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3c:	b1f3      	cbz	r3, 8008d7c <_dtoa_r+0x78c>
 8008d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80b7 	beq.w	8008eb4 <_dtoa_r+0x8c4>
 8008d46:	b18c      	cbz	r4, 8008d6c <_dtoa_r+0x77c>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f000 fd11 	bl	8009774 <__pow5mult>
 8008d52:	464a      	mov	r2, r9
 8008d54:	4601      	mov	r1, r0
 8008d56:	4605      	mov	r5, r0
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 fc61 	bl	8009620 <__multiply>
 8008d5e:	4649      	mov	r1, r9
 8008d60:	9004      	str	r0, [sp, #16]
 8008d62:	4658      	mov	r0, fp
 8008d64:	f000 fb48 	bl	80093f8 <_Bfree>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	4699      	mov	r9, r3
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6e:	1b1a      	subs	r2, r3, r4
 8008d70:	d004      	beq.n	8008d7c <_dtoa_r+0x78c>
 8008d72:	4649      	mov	r1, r9
 8008d74:	4658      	mov	r0, fp
 8008d76:	f000 fcfd 	bl	8009774 <__pow5mult>
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	4658      	mov	r0, fp
 8008d80:	f000 fc38 	bl	80095f4 <__i2b>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d86:	4604      	mov	r4, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 81cf 	beq.w	800912c <_dtoa_r+0xb3c>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4601      	mov	r1, r0
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 fcee 	bl	8009774 <__pow5mult>
 8008d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	f300 8095 	bgt.w	8008ecc <_dtoa_r+0x8dc>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8087 	bne.w	8008eb8 <_dtoa_r+0x8c8>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 8089 	bne.w	8008ec8 <_dtoa_r+0x8d8>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dbc:	0d1b      	lsrs	r3, r3, #20
 8008dbe:	051b      	lsls	r3, r3, #20
 8008dc0:	b12b      	cbz	r3, 8008dce <_dtoa_r+0x7de>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	9308      	str	r3, [sp, #32]
 8008dc8:	f108 0801 	add.w	r8, r8, #1
 8008dcc:	2301      	movs	r3, #1
 8008dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 81b0 	beq.w	8009138 <_dtoa_r+0xb48>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dde:	6918      	ldr	r0, [r3, #16]
 8008de0:	f000 fbbc 	bl	800955c <__hi0bits>
 8008de4:	f1c0 0020 	rsb	r0, r0, #32
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	4418      	add	r0, r3
 8008dec:	f010 001f 	ands.w	r0, r0, #31
 8008df0:	d077      	beq.n	8008ee2 <_dtoa_r+0x8f2>
 8008df2:	f1c0 0320 	rsb	r3, r0, #32
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	dd6b      	ble.n	8008ed2 <_dtoa_r+0x8e2>
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	f1c0 001c 	rsb	r0, r0, #28
 8008e00:	4403      	add	r3, r0
 8008e02:	4480      	add	r8, r0
 8008e04:	4406      	add	r6, r0
 8008e06:	9308      	str	r3, [sp, #32]
 8008e08:	f1b8 0f00 	cmp.w	r8, #0
 8008e0c:	dd05      	ble.n	8008e1a <_dtoa_r+0x82a>
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4642      	mov	r2, r8
 8008e12:	4658      	mov	r0, fp
 8008e14:	f000 fd08 	bl	8009828 <__lshift>
 8008e18:	4681      	mov	r9, r0
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd05      	ble.n	8008e2c <_dtoa_r+0x83c>
 8008e20:	4621      	mov	r1, r4
 8008e22:	461a      	mov	r2, r3
 8008e24:	4658      	mov	r0, fp
 8008e26:	f000 fcff 	bl	8009828 <__lshift>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d059      	beq.n	8008ee6 <_dtoa_r+0x8f6>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 fd63 	bl	8009900 <__mcmp>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	da53      	bge.n	8008ee6 <_dtoa_r+0x8f6>
 8008e3e:	1e7b      	subs	r3, r7, #1
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	4649      	mov	r1, r9
 8008e44:	2300      	movs	r3, #0
 8008e46:	220a      	movs	r2, #10
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f000 faf7 	bl	800943c <__multadd>
 8008e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e50:	4681      	mov	r9, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8172 	beq.w	800913c <_dtoa_r+0xb4c>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	4658      	mov	r0, fp
 8008e60:	f000 faec 	bl	800943c <__multadd>
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	4605      	mov	r5, r0
 8008e6a:	dc67      	bgt.n	8008f3c <_dtoa_r+0x94c>
 8008e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dc41      	bgt.n	8008ef6 <_dtoa_r+0x906>
 8008e72:	e063      	b.n	8008f3c <_dtoa_r+0x94c>
 8008e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e7a:	e746      	b.n	8008d0a <_dtoa_r+0x71a>
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	1e5c      	subs	r4, r3, #1
 8008e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	bfbf      	itttt	lt
 8008e86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e8c:	1ae3      	sublt	r3, r4, r3
 8008e8e:	bfb4      	ite	lt
 8008e90:	18d2      	addlt	r2, r2, r3
 8008e92:	1b1c      	subge	r4, r3, r4
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	bfbc      	itt	lt
 8008e98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e9a:	2400      	movlt	r4, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb5      	itete	lt
 8008ea0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ea4:	9b07      	ldrge	r3, [sp, #28]
 8008ea6:	2300      	movlt	r3, #0
 8008ea8:	4646      	movge	r6, r8
 8008eaa:	e730      	b.n	8008d0e <_dtoa_r+0x71e>
 8008eac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008eae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008eb0:	4646      	mov	r6, r8
 8008eb2:	e735      	b.n	8008d20 <_dtoa_r+0x730>
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008eb6:	e75c      	b.n	8008d72 <_dtoa_r+0x782>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e788      	b.n	8008dce <_dtoa_r+0x7de>
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	40140000 	.word	0x40140000
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	e780      	b.n	8008dce <_dtoa_r+0x7de>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed0:	e782      	b.n	8008dd8 <_dtoa_r+0x7e8>
 8008ed2:	d099      	beq.n	8008e08 <_dtoa_r+0x818>
 8008ed4:	9a08      	ldr	r2, [sp, #32]
 8008ed6:	331c      	adds	r3, #28
 8008ed8:	441a      	add	r2, r3
 8008eda:	4498      	add	r8, r3
 8008edc:	441e      	add	r6, r3
 8008ede:	9208      	str	r2, [sp, #32]
 8008ee0:	e792      	b.n	8008e08 <_dtoa_r+0x818>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	e7f6      	b.n	8008ed4 <_dtoa_r+0x8e4>
 8008ee6:	9b07      	ldr	r3, [sp, #28]
 8008ee8:	9704      	str	r7, [sp, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc20      	bgt.n	8008f30 <_dtoa_r+0x940>
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	dd1e      	ble.n	8008f34 <_dtoa_r+0x944>
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f aec0 	bne.w	8008c7e <_dtoa_r+0x68e>
 8008efe:	4621      	mov	r1, r4
 8008f00:	2205      	movs	r2, #5
 8008f02:	4658      	mov	r0, fp
 8008f04:	f000 fa9a 	bl	800943c <__multadd>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f000 fcf7 	bl	8009900 <__mcmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f77f aeb3 	ble.w	8008c7e <_dtoa_r+0x68e>
 8008f18:	4656      	mov	r6, sl
 8008f1a:	2331      	movs	r3, #49	@ 0x31
 8008f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	e6ae      	b.n	8008c86 <_dtoa_r+0x696>
 8008f28:	9c07      	ldr	r4, [sp, #28]
 8008f2a:	9704      	str	r7, [sp, #16]
 8008f2c:	4625      	mov	r5, r4
 8008f2e:	e7f3      	b.n	8008f18 <_dtoa_r+0x928>
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8104 	beq.w	8009144 <_dtoa_r+0xb54>
 8008f3c:	2e00      	cmp	r6, #0
 8008f3e:	dd05      	ble.n	8008f4c <_dtoa_r+0x95c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4632      	mov	r2, r6
 8008f44:	4658      	mov	r0, fp
 8008f46:	f000 fc6f 	bl	8009828 <__lshift>
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d05a      	beq.n	8009008 <_dtoa_r+0xa18>
 8008f52:	6869      	ldr	r1, [r5, #4]
 8008f54:	4658      	mov	r0, fp
 8008f56:	f000 fa0f 	bl	8009378 <_Balloc>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <_dtoa_r+0x97a>
 8008f5e:	4b84      	ldr	r3, [pc, #528]	@ (8009170 <_dtoa_r+0xb80>)
 8008f60:	4602      	mov	r2, r0
 8008f62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f66:	f7ff bb5a 	b.w	800861e <_dtoa_r+0x2e>
 8008f6a:	692a      	ldr	r2, [r5, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	0092      	lsls	r2, r2, #2
 8008f70:	f105 010c 	add.w	r1, r5, #12
 8008f74:	300c      	adds	r0, #12
 8008f76:	f7ff fa9e 	bl	80084b6 <memcpy>
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f000 fc52 	bl	8009828 <__lshift>
 8008f84:	f10a 0301 	add.w	r3, sl, #1
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	9b00      	ldr	r3, [sp, #0]
 8008f8c:	4453      	add	r3, sl
 8008f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f90:	9b02      	ldr	r3, [sp, #8]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	462f      	mov	r7, r5
 8008f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	9b07      	ldr	r3, [sp, #28]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4648      	mov	r0, r9
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	f7ff fa9b 	bl	80084e0 <quorem>
 8008faa:	4639      	mov	r1, r7
 8008fac:	9002      	str	r0, [sp, #8]
 8008fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	f000 fca4 	bl	8009900 <__mcmp>
 8008fb8:	462a      	mov	r2, r5
 8008fba:	9008      	str	r0, [sp, #32]
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fcba 	bl	8009938 <__mdiff>
 8008fc4:	68c2      	ldr	r2, [r0, #12]
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	bb02      	cbnz	r2, 800900c <_dtoa_r+0xa1c>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4648      	mov	r0, r9
 8008fce:	f000 fc97 	bl	8009900 <__mcmp>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fda:	f000 fa0d 	bl	80093f8 <_Bfree>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fe2:	9e07      	ldr	r6, [sp, #28]
 8008fe4:	ea43 0102 	orr.w	r1, r3, r2
 8008fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fea:	4319      	orrs	r1, r3
 8008fec:	d110      	bne.n	8009010 <_dtoa_r+0xa20>
 8008fee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ff2:	d029      	beq.n	8009048 <_dtoa_r+0xa58>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dd02      	ble.n	8009000 <_dtoa_r+0xa10>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009000:	9b00      	ldr	r3, [sp, #0]
 8009002:	f883 8000 	strb.w	r8, [r3]
 8009006:	e63f      	b.n	8008c88 <_dtoa_r+0x698>
 8009008:	4628      	mov	r0, r5
 800900a:	e7bb      	b.n	8008f84 <_dtoa_r+0x994>
 800900c:	2201      	movs	r2, #1
 800900e:	e7e1      	b.n	8008fd4 <_dtoa_r+0x9e4>
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	2b00      	cmp	r3, #0
 8009014:	db04      	blt.n	8009020 <_dtoa_r+0xa30>
 8009016:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009018:	430b      	orrs	r3, r1
 800901a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800901c:	430b      	orrs	r3, r1
 800901e:	d120      	bne.n	8009062 <_dtoa_r+0xa72>
 8009020:	2a00      	cmp	r2, #0
 8009022:	dded      	ble.n	8009000 <_dtoa_r+0xa10>
 8009024:	4649      	mov	r1, r9
 8009026:	2201      	movs	r2, #1
 8009028:	4658      	mov	r0, fp
 800902a:	f000 fbfd 	bl	8009828 <__lshift>
 800902e:	4621      	mov	r1, r4
 8009030:	4681      	mov	r9, r0
 8009032:	f000 fc65 	bl	8009900 <__mcmp>
 8009036:	2800      	cmp	r0, #0
 8009038:	dc03      	bgt.n	8009042 <_dtoa_r+0xa52>
 800903a:	d1e1      	bne.n	8009000 <_dtoa_r+0xa10>
 800903c:	f018 0f01 	tst.w	r8, #1
 8009040:	d0de      	beq.n	8009000 <_dtoa_r+0xa10>
 8009042:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009046:	d1d8      	bne.n	8008ffa <_dtoa_r+0xa0a>
 8009048:	9a00      	ldr	r2, [sp, #0]
 800904a:	2339      	movs	r3, #57	@ 0x39
 800904c:	7013      	strb	r3, [r2, #0]
 800904e:	4633      	mov	r3, r6
 8009050:	461e      	mov	r6, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009058:	2a39      	cmp	r2, #57	@ 0x39
 800905a:	d052      	beq.n	8009102 <_dtoa_r+0xb12>
 800905c:	3201      	adds	r2, #1
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	e612      	b.n	8008c88 <_dtoa_r+0x698>
 8009062:	2a00      	cmp	r2, #0
 8009064:	dd07      	ble.n	8009076 <_dtoa_r+0xa86>
 8009066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800906a:	d0ed      	beq.n	8009048 <_dtoa_r+0xa58>
 800906c:	9a00      	ldr	r2, [sp, #0]
 800906e:	f108 0301 	add.w	r3, r8, #1
 8009072:	7013      	strb	r3, [r2, #0]
 8009074:	e608      	b.n	8008c88 <_dtoa_r+0x698>
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	9a07      	ldr	r2, [sp, #28]
 800907a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800907e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009080:	4293      	cmp	r3, r2
 8009082:	d028      	beq.n	80090d6 <_dtoa_r+0xae6>
 8009084:	4649      	mov	r1, r9
 8009086:	2300      	movs	r3, #0
 8009088:	220a      	movs	r2, #10
 800908a:	4658      	mov	r0, fp
 800908c:	f000 f9d6 	bl	800943c <__multadd>
 8009090:	42af      	cmp	r7, r5
 8009092:	4681      	mov	r9, r0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	f04f 020a 	mov.w	r2, #10
 800909c:	4639      	mov	r1, r7
 800909e:	4658      	mov	r0, fp
 80090a0:	d107      	bne.n	80090b2 <_dtoa_r+0xac2>
 80090a2:	f000 f9cb 	bl	800943c <__multadd>
 80090a6:	4607      	mov	r7, r0
 80090a8:	4605      	mov	r5, r0
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	3301      	adds	r3, #1
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	e774      	b.n	8008f9c <_dtoa_r+0x9ac>
 80090b2:	f000 f9c3 	bl	800943c <__multadd>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4607      	mov	r7, r0
 80090ba:	2300      	movs	r3, #0
 80090bc:	220a      	movs	r2, #10
 80090be:	4658      	mov	r0, fp
 80090c0:	f000 f9bc 	bl	800943c <__multadd>
 80090c4:	4605      	mov	r5, r0
 80090c6:	e7f0      	b.n	80090aa <_dtoa_r+0xaba>
 80090c8:	9b00      	ldr	r3, [sp, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfcc      	ite	gt
 80090ce:	461e      	movgt	r6, r3
 80090d0:	2601      	movle	r6, #1
 80090d2:	4456      	add	r6, sl
 80090d4:	2700      	movs	r7, #0
 80090d6:	4649      	mov	r1, r9
 80090d8:	2201      	movs	r2, #1
 80090da:	4658      	mov	r0, fp
 80090dc:	f000 fba4 	bl	8009828 <__lshift>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4681      	mov	r9, r0
 80090e4:	f000 fc0c 	bl	8009900 <__mcmp>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dcb0      	bgt.n	800904e <_dtoa_r+0xa5e>
 80090ec:	d102      	bne.n	80090f4 <_dtoa_r+0xb04>
 80090ee:	f018 0f01 	tst.w	r8, #1
 80090f2:	d1ac      	bne.n	800904e <_dtoa_r+0xa5e>
 80090f4:	4633      	mov	r3, r6
 80090f6:	461e      	mov	r6, r3
 80090f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fc:	2a30      	cmp	r2, #48	@ 0x30
 80090fe:	d0fa      	beq.n	80090f6 <_dtoa_r+0xb06>
 8009100:	e5c2      	b.n	8008c88 <_dtoa_r+0x698>
 8009102:	459a      	cmp	sl, r3
 8009104:	d1a4      	bne.n	8009050 <_dtoa_r+0xa60>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	2331      	movs	r3, #49	@ 0x31
 800910e:	f88a 3000 	strb.w	r3, [sl]
 8009112:	e5b9      	b.n	8008c88 <_dtoa_r+0x698>
 8009114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009116:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009174 <_dtoa_r+0xb84>
 800911a:	b11b      	cbz	r3, 8009124 <_dtoa_r+0xb34>
 800911c:	f10a 0308 	add.w	r3, sl, #8
 8009120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	4650      	mov	r0, sl
 8009126:	b019      	add	sp, #100	@ 0x64
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912e:	2b01      	cmp	r3, #1
 8009130:	f77f ae37 	ble.w	8008da2 <_dtoa_r+0x7b2>
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	930a      	str	r3, [sp, #40]	@ 0x28
 8009138:	2001      	movs	r0, #1
 800913a:	e655      	b.n	8008de8 <_dtoa_r+0x7f8>
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f77f aed6 	ble.w	8008ef0 <_dtoa_r+0x900>
 8009144:	4656      	mov	r6, sl
 8009146:	4621      	mov	r1, r4
 8009148:	4648      	mov	r0, r9
 800914a:	f7ff f9c9 	bl	80084e0 <quorem>
 800914e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009152:	f806 8b01 	strb.w	r8, [r6], #1
 8009156:	9b00      	ldr	r3, [sp, #0]
 8009158:	eba6 020a 	sub.w	r2, r6, sl
 800915c:	4293      	cmp	r3, r2
 800915e:	ddb3      	ble.n	80090c8 <_dtoa_r+0xad8>
 8009160:	4649      	mov	r1, r9
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 f968 	bl	800943c <__multadd>
 800916c:	4681      	mov	r9, r0
 800916e:	e7ea      	b.n	8009146 <_dtoa_r+0xb56>
 8009170:	0800bc28 	.word	0x0800bc28
 8009174:	0800bbac 	.word	0x0800bbac

08009178 <_free_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4605      	mov	r5, r0
 800917c:	2900      	cmp	r1, #0
 800917e:	d041      	beq.n	8009204 <_free_r+0x8c>
 8009180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009184:	1f0c      	subs	r4, r1, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	18e4      	addlt	r4, r4, r3
 800918c:	f000 f8e8 	bl	8009360 <__malloc_lock>
 8009190:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <_free_r+0x90>)
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	b933      	cbnz	r3, 80091a4 <_free_r+0x2c>
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6014      	str	r4, [r2, #0]
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091a0:	f000 b8e4 	b.w	800936c <__malloc_unlock>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x42>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf01      	itttt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	1809      	addeq	r1, r1, r0
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	e7ed      	b.n	8009196 <_free_r+0x1e>
 80091ba:	461a      	mov	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	b10b      	cbz	r3, 80091c4 <_free_r+0x4c>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x42>
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	1850      	adds	r0, r2, r1
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x6c>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	4401      	add	r1, r0
 80091d0:	1850      	adds	r0, r2, r1
 80091d2:	4283      	cmp	r3, r0
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	d1e0      	bne.n	800919a <_free_r+0x22>
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6053      	str	r3, [r2, #4]
 80091de:	4408      	add	r0, r1
 80091e0:	6010      	str	r0, [r2, #0]
 80091e2:	e7da      	b.n	800919a <_free_r+0x22>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x74>
 80091e6:	230c      	movs	r3, #12
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	e7d6      	b.n	800919a <_free_r+0x22>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7ca      	b.n	800919a <_free_r+0x22>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	200016f8 	.word	0x200016f8

0800920c <malloc>:
 800920c:	4b02      	ldr	r3, [pc, #8]	@ (8009218 <malloc+0xc>)
 800920e:	4601      	mov	r1, r0
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f000 b825 	b.w	8009260 <_malloc_r>
 8009216:	bf00      	nop
 8009218:	2000001c 	.word	0x2000001c

0800921c <sbrk_aligned>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4e0f      	ldr	r6, [pc, #60]	@ (800925c <sbrk_aligned+0x40>)
 8009220:	460c      	mov	r4, r1
 8009222:	6831      	ldr	r1, [r6, #0]
 8009224:	4605      	mov	r5, r0
 8009226:	b911      	cbnz	r1, 800922e <sbrk_aligned+0x12>
 8009228:	f001 ffd2 	bl	800b1d0 <_sbrk_r>
 800922c:	6030      	str	r0, [r6, #0]
 800922e:	4621      	mov	r1, r4
 8009230:	4628      	mov	r0, r5
 8009232:	f001 ffcd 	bl	800b1d0 <_sbrk_r>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d103      	bne.n	8009242 <sbrk_aligned+0x26>
 800923a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800923e:	4620      	mov	r0, r4
 8009240:	bd70      	pop	{r4, r5, r6, pc}
 8009242:	1cc4      	adds	r4, r0, #3
 8009244:	f024 0403 	bic.w	r4, r4, #3
 8009248:	42a0      	cmp	r0, r4
 800924a:	d0f8      	beq.n	800923e <sbrk_aligned+0x22>
 800924c:	1a21      	subs	r1, r4, r0
 800924e:	4628      	mov	r0, r5
 8009250:	f001 ffbe 	bl	800b1d0 <_sbrk_r>
 8009254:	3001      	adds	r0, #1
 8009256:	d1f2      	bne.n	800923e <sbrk_aligned+0x22>
 8009258:	e7ef      	b.n	800923a <sbrk_aligned+0x1e>
 800925a:	bf00      	nop
 800925c:	200016f4 	.word	0x200016f4

08009260 <_malloc_r>:
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	1ccd      	adds	r5, r1, #3
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	2d00      	cmp	r5, #0
 8009274:	4606      	mov	r6, r0
 8009276:	db01      	blt.n	800927c <_malloc_r+0x1c>
 8009278:	42a9      	cmp	r1, r5
 800927a:	d904      	bls.n	8009286 <_malloc_r+0x26>
 800927c:	230c      	movs	r3, #12
 800927e:	6033      	str	r3, [r6, #0]
 8009280:	2000      	movs	r0, #0
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800935c <_malloc_r+0xfc>
 800928a:	f000 f869 	bl	8009360 <__malloc_lock>
 800928e:	f8d8 3000 	ldr.w	r3, [r8]
 8009292:	461c      	mov	r4, r3
 8009294:	bb44      	cbnz	r4, 80092e8 <_malloc_r+0x88>
 8009296:	4629      	mov	r1, r5
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffbf 	bl	800921c <sbrk_aligned>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	4604      	mov	r4, r0
 80092a2:	d158      	bne.n	8009356 <_malloc_r+0xf6>
 80092a4:	f8d8 4000 	ldr.w	r4, [r8]
 80092a8:	4627      	mov	r7, r4
 80092aa:	2f00      	cmp	r7, #0
 80092ac:	d143      	bne.n	8009336 <_malloc_r+0xd6>
 80092ae:	2c00      	cmp	r4, #0
 80092b0:	d04b      	beq.n	800934a <_malloc_r+0xea>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	4639      	mov	r1, r7
 80092b6:	4630      	mov	r0, r6
 80092b8:	eb04 0903 	add.w	r9, r4, r3
 80092bc:	f001 ff88 	bl	800b1d0 <_sbrk_r>
 80092c0:	4581      	cmp	r9, r0
 80092c2:	d142      	bne.n	800934a <_malloc_r+0xea>
 80092c4:	6821      	ldr	r1, [r4, #0]
 80092c6:	1a6d      	subs	r5, r5, r1
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ffa6 	bl	800921c <sbrk_aligned>
 80092d0:	3001      	adds	r0, #1
 80092d2:	d03a      	beq.n	800934a <_malloc_r+0xea>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	442b      	add	r3, r5
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	f8d8 3000 	ldr.w	r3, [r8]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	bb62      	cbnz	r2, 800933c <_malloc_r+0xdc>
 80092e2:	f8c8 7000 	str.w	r7, [r8]
 80092e6:	e00f      	b.n	8009308 <_malloc_r+0xa8>
 80092e8:	6822      	ldr	r2, [r4, #0]
 80092ea:	1b52      	subs	r2, r2, r5
 80092ec:	d420      	bmi.n	8009330 <_malloc_r+0xd0>
 80092ee:	2a0b      	cmp	r2, #11
 80092f0:	d917      	bls.n	8009322 <_malloc_r+0xc2>
 80092f2:	1961      	adds	r1, r4, r5
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	6025      	str	r5, [r4, #0]
 80092f8:	bf18      	it	ne
 80092fa:	6059      	strne	r1, [r3, #4]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	bf08      	it	eq
 8009300:	f8c8 1000 	streq.w	r1, [r8]
 8009304:	5162      	str	r2, [r4, r5]
 8009306:	604b      	str	r3, [r1, #4]
 8009308:	4630      	mov	r0, r6
 800930a:	f000 f82f 	bl	800936c <__malloc_unlock>
 800930e:	f104 000b 	add.w	r0, r4, #11
 8009312:	1d23      	adds	r3, r4, #4
 8009314:	f020 0007 	bic.w	r0, r0, #7
 8009318:	1ac2      	subs	r2, r0, r3
 800931a:	bf1c      	itt	ne
 800931c:	1a1b      	subne	r3, r3, r0
 800931e:	50a3      	strne	r3, [r4, r2]
 8009320:	e7af      	b.n	8009282 <_malloc_r+0x22>
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	42a3      	cmp	r3, r4
 8009326:	bf0c      	ite	eq
 8009328:	f8c8 2000 	streq.w	r2, [r8]
 800932c:	605a      	strne	r2, [r3, #4]
 800932e:	e7eb      	b.n	8009308 <_malloc_r+0xa8>
 8009330:	4623      	mov	r3, r4
 8009332:	6864      	ldr	r4, [r4, #4]
 8009334:	e7ae      	b.n	8009294 <_malloc_r+0x34>
 8009336:	463c      	mov	r4, r7
 8009338:	687f      	ldr	r7, [r7, #4]
 800933a:	e7b6      	b.n	80092aa <_malloc_r+0x4a>
 800933c:	461a      	mov	r2, r3
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	42a3      	cmp	r3, r4
 8009342:	d1fb      	bne.n	800933c <_malloc_r+0xdc>
 8009344:	2300      	movs	r3, #0
 8009346:	6053      	str	r3, [r2, #4]
 8009348:	e7de      	b.n	8009308 <_malloc_r+0xa8>
 800934a:	230c      	movs	r3, #12
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f80c 	bl	800936c <__malloc_unlock>
 8009354:	e794      	b.n	8009280 <_malloc_r+0x20>
 8009356:	6005      	str	r5, [r0, #0]
 8009358:	e7d6      	b.n	8009308 <_malloc_r+0xa8>
 800935a:	bf00      	nop
 800935c:	200016f8 	.word	0x200016f8

08009360 <__malloc_lock>:
 8009360:	4801      	ldr	r0, [pc, #4]	@ (8009368 <__malloc_lock+0x8>)
 8009362:	f7ff b8a6 	b.w	80084b2 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	200016f0 	.word	0x200016f0

0800936c <__malloc_unlock>:
 800936c:	4801      	ldr	r0, [pc, #4]	@ (8009374 <__malloc_unlock+0x8>)
 800936e:	f7ff b8a1 	b.w	80084b4 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	200016f0 	.word	0x200016f0

08009378 <_Balloc>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	69c6      	ldr	r6, [r0, #28]
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	b976      	cbnz	r6, 80093a0 <_Balloc+0x28>
 8009382:	2010      	movs	r0, #16
 8009384:	f7ff ff42 	bl	800920c <malloc>
 8009388:	4602      	mov	r2, r0
 800938a:	61e0      	str	r0, [r4, #28]
 800938c:	b920      	cbnz	r0, 8009398 <_Balloc+0x20>
 800938e:	4b18      	ldr	r3, [pc, #96]	@ (80093f0 <_Balloc+0x78>)
 8009390:	4818      	ldr	r0, [pc, #96]	@ (80093f4 <_Balloc+0x7c>)
 8009392:	216b      	movs	r1, #107	@ 0x6b
 8009394:	f001 ff34 	bl	800b200 <__assert_func>
 8009398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800939c:	6006      	str	r6, [r0, #0]
 800939e:	60c6      	str	r6, [r0, #12]
 80093a0:	69e6      	ldr	r6, [r4, #28]
 80093a2:	68f3      	ldr	r3, [r6, #12]
 80093a4:	b183      	cbz	r3, 80093c8 <_Balloc+0x50>
 80093a6:	69e3      	ldr	r3, [r4, #28]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ae:	b9b8      	cbnz	r0, 80093e0 <_Balloc+0x68>
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f605 	lsl.w	r6, r1, r5
 80093b6:	1d72      	adds	r2, r6, #5
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 ff3e 	bl	800b23c <_calloc_r>
 80093c0:	b160      	cbz	r0, 80093dc <_Balloc+0x64>
 80093c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c6:	e00e      	b.n	80093e6 <_Balloc+0x6e>
 80093c8:	2221      	movs	r2, #33	@ 0x21
 80093ca:	2104      	movs	r1, #4
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 ff35 	bl	800b23c <_calloc_r>
 80093d2:	69e3      	ldr	r3, [r4, #28]
 80093d4:	60f0      	str	r0, [r6, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e4      	bne.n	80093a6 <_Balloc+0x2e>
 80093dc:	2000      	movs	r0, #0
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e6:	2300      	movs	r3, #0
 80093e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093ec:	e7f7      	b.n	80093de <_Balloc+0x66>
 80093ee:	bf00      	nop
 80093f0:	0800bbb9 	.word	0x0800bbb9
 80093f4:	0800bc39 	.word	0x0800bc39

080093f8 <_Bfree>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	69c6      	ldr	r6, [r0, #28]
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b976      	cbnz	r6, 8009420 <_Bfree+0x28>
 8009402:	2010      	movs	r0, #16
 8009404:	f7ff ff02 	bl	800920c <malloc>
 8009408:	4602      	mov	r2, r0
 800940a:	61e8      	str	r0, [r5, #28]
 800940c:	b920      	cbnz	r0, 8009418 <_Bfree+0x20>
 800940e:	4b09      	ldr	r3, [pc, #36]	@ (8009434 <_Bfree+0x3c>)
 8009410:	4809      	ldr	r0, [pc, #36]	@ (8009438 <_Bfree+0x40>)
 8009412:	218f      	movs	r1, #143	@ 0x8f
 8009414:	f001 fef4 	bl	800b200 <__assert_func>
 8009418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800941c:	6006      	str	r6, [r0, #0]
 800941e:	60c6      	str	r6, [r0, #12]
 8009420:	b13c      	cbz	r4, 8009432 <_Bfree+0x3a>
 8009422:	69eb      	ldr	r3, [r5, #28]
 8009424:	6862      	ldr	r2, [r4, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800942c:	6021      	str	r1, [r4, #0]
 800942e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	0800bbb9 	.word	0x0800bbb9
 8009438:	0800bc39 	.word	0x0800bc39

0800943c <__multadd>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	690d      	ldr	r5, [r1, #16]
 8009442:	4607      	mov	r7, r0
 8009444:	460c      	mov	r4, r1
 8009446:	461e      	mov	r6, r3
 8009448:	f101 0c14 	add.w	ip, r1, #20
 800944c:	2000      	movs	r0, #0
 800944e:	f8dc 3000 	ldr.w	r3, [ip]
 8009452:	b299      	uxth	r1, r3
 8009454:	fb02 6101 	mla	r1, r2, r1, r6
 8009458:	0c1e      	lsrs	r6, r3, #16
 800945a:	0c0b      	lsrs	r3, r1, #16
 800945c:	fb02 3306 	mla	r3, r2, r6, r3
 8009460:	b289      	uxth	r1, r1
 8009462:	3001      	adds	r0, #1
 8009464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009468:	4285      	cmp	r5, r0
 800946a:	f84c 1b04 	str.w	r1, [ip], #4
 800946e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009472:	dcec      	bgt.n	800944e <__multadd+0x12>
 8009474:	b30e      	cbz	r6, 80094ba <__multadd+0x7e>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc19      	bgt.n	80094b0 <__multadd+0x74>
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4638      	mov	r0, r7
 8009480:	3101      	adds	r1, #1
 8009482:	f7ff ff79 	bl	8009378 <_Balloc>
 8009486:	4680      	mov	r8, r0
 8009488:	b928      	cbnz	r0, 8009496 <__multadd+0x5a>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <__multadd+0x84>)
 800948e:	480d      	ldr	r0, [pc, #52]	@ (80094c4 <__multadd+0x88>)
 8009490:	21ba      	movs	r1, #186	@ 0xba
 8009492:	f001 feb5 	bl	800b200 <__assert_func>
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	f104 010c 	add.w	r1, r4, #12
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7ff f808 	bl	80084b6 <memcpy>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa5 	bl	80093f8 <_Bfree>
 80094ae:	4644      	mov	r4, r8
 80094b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b4:	3501      	adds	r5, #1
 80094b6:	615e      	str	r6, [r3, #20]
 80094b8:	6125      	str	r5, [r4, #16]
 80094ba:	4620      	mov	r0, r4
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	0800bc28 	.word	0x0800bc28
 80094c4:	0800bc39 	.word	0x0800bc39

080094c8 <__s2b>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	460c      	mov	r4, r1
 80094ce:	4615      	mov	r5, r2
 80094d0:	461f      	mov	r7, r3
 80094d2:	2209      	movs	r2, #9
 80094d4:	3308      	adds	r3, #8
 80094d6:	4606      	mov	r6, r0
 80094d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80094dc:	2100      	movs	r1, #0
 80094de:	2201      	movs	r2, #1
 80094e0:	429a      	cmp	r2, r3
 80094e2:	db09      	blt.n	80094f8 <__s2b+0x30>
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff ff47 	bl	8009378 <_Balloc>
 80094ea:	b940      	cbnz	r0, 80094fe <__s2b+0x36>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b19      	ldr	r3, [pc, #100]	@ (8009554 <__s2b+0x8c>)
 80094f0:	4819      	ldr	r0, [pc, #100]	@ (8009558 <__s2b+0x90>)
 80094f2:	21d3      	movs	r1, #211	@ 0xd3
 80094f4:	f001 fe84 	bl	800b200 <__assert_func>
 80094f8:	0052      	lsls	r2, r2, #1
 80094fa:	3101      	adds	r1, #1
 80094fc:	e7f0      	b.n	80094e0 <__s2b+0x18>
 80094fe:	9b08      	ldr	r3, [sp, #32]
 8009500:	6143      	str	r3, [r0, #20]
 8009502:	2d09      	cmp	r5, #9
 8009504:	f04f 0301 	mov.w	r3, #1
 8009508:	6103      	str	r3, [r0, #16]
 800950a:	dd16      	ble.n	800953a <__s2b+0x72>
 800950c:	f104 0909 	add.w	r9, r4, #9
 8009510:	46c8      	mov	r8, r9
 8009512:	442c      	add	r4, r5
 8009514:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009518:	4601      	mov	r1, r0
 800951a:	3b30      	subs	r3, #48	@ 0x30
 800951c:	220a      	movs	r2, #10
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ff8c 	bl	800943c <__multadd>
 8009524:	45a0      	cmp	r8, r4
 8009526:	d1f5      	bne.n	8009514 <__s2b+0x4c>
 8009528:	f1a5 0408 	sub.w	r4, r5, #8
 800952c:	444c      	add	r4, r9
 800952e:	1b2d      	subs	r5, r5, r4
 8009530:	1963      	adds	r3, r4, r5
 8009532:	42bb      	cmp	r3, r7
 8009534:	db04      	blt.n	8009540 <__s2b+0x78>
 8009536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953a:	340a      	adds	r4, #10
 800953c:	2509      	movs	r5, #9
 800953e:	e7f6      	b.n	800952e <__s2b+0x66>
 8009540:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009544:	4601      	mov	r1, r0
 8009546:	3b30      	subs	r3, #48	@ 0x30
 8009548:	220a      	movs	r2, #10
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ff76 	bl	800943c <__multadd>
 8009550:	e7ee      	b.n	8009530 <__s2b+0x68>
 8009552:	bf00      	nop
 8009554:	0800bc28 	.word	0x0800bc28
 8009558:	0800bc39 	.word	0x0800bc39

0800955c <__hi0bits>:
 800955c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009560:	4603      	mov	r3, r0
 8009562:	bf36      	itet	cc
 8009564:	0403      	lslcc	r3, r0, #16
 8009566:	2000      	movcs	r0, #0
 8009568:	2010      	movcc	r0, #16
 800956a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800956e:	bf3c      	itt	cc
 8009570:	021b      	lslcc	r3, r3, #8
 8009572:	3008      	addcc	r0, #8
 8009574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009578:	bf3c      	itt	cc
 800957a:	011b      	lslcc	r3, r3, #4
 800957c:	3004      	addcc	r0, #4
 800957e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009582:	bf3c      	itt	cc
 8009584:	009b      	lslcc	r3, r3, #2
 8009586:	3002      	addcc	r0, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	db05      	blt.n	8009598 <__hi0bits+0x3c>
 800958c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009590:	f100 0001 	add.w	r0, r0, #1
 8009594:	bf08      	it	eq
 8009596:	2020      	moveq	r0, #32
 8009598:	4770      	bx	lr

0800959a <__lo0bits>:
 800959a:	6803      	ldr	r3, [r0, #0]
 800959c:	4602      	mov	r2, r0
 800959e:	f013 0007 	ands.w	r0, r3, #7
 80095a2:	d00b      	beq.n	80095bc <__lo0bits+0x22>
 80095a4:	07d9      	lsls	r1, r3, #31
 80095a6:	d421      	bmi.n	80095ec <__lo0bits+0x52>
 80095a8:	0798      	lsls	r0, r3, #30
 80095aa:	bf49      	itett	mi
 80095ac:	085b      	lsrmi	r3, r3, #1
 80095ae:	089b      	lsrpl	r3, r3, #2
 80095b0:	2001      	movmi	r0, #1
 80095b2:	6013      	strmi	r3, [r2, #0]
 80095b4:	bf5c      	itt	pl
 80095b6:	6013      	strpl	r3, [r2, #0]
 80095b8:	2002      	movpl	r0, #2
 80095ba:	4770      	bx	lr
 80095bc:	b299      	uxth	r1, r3
 80095be:	b909      	cbnz	r1, 80095c4 <__lo0bits+0x2a>
 80095c0:	0c1b      	lsrs	r3, r3, #16
 80095c2:	2010      	movs	r0, #16
 80095c4:	b2d9      	uxtb	r1, r3
 80095c6:	b909      	cbnz	r1, 80095cc <__lo0bits+0x32>
 80095c8:	3008      	adds	r0, #8
 80095ca:	0a1b      	lsrs	r3, r3, #8
 80095cc:	0719      	lsls	r1, r3, #28
 80095ce:	bf04      	itt	eq
 80095d0:	091b      	lsreq	r3, r3, #4
 80095d2:	3004      	addeq	r0, #4
 80095d4:	0799      	lsls	r1, r3, #30
 80095d6:	bf04      	itt	eq
 80095d8:	089b      	lsreq	r3, r3, #2
 80095da:	3002      	addeq	r0, #2
 80095dc:	07d9      	lsls	r1, r3, #31
 80095de:	d403      	bmi.n	80095e8 <__lo0bits+0x4e>
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	f100 0001 	add.w	r0, r0, #1
 80095e6:	d003      	beq.n	80095f0 <__lo0bits+0x56>
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	4770      	bx	lr
 80095ec:	2000      	movs	r0, #0
 80095ee:	4770      	bx	lr
 80095f0:	2020      	movs	r0, #32
 80095f2:	4770      	bx	lr

080095f4 <__i2b>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	2101      	movs	r1, #1
 80095fa:	f7ff febd 	bl	8009378 <_Balloc>
 80095fe:	4602      	mov	r2, r0
 8009600:	b928      	cbnz	r0, 800960e <__i2b+0x1a>
 8009602:	4b05      	ldr	r3, [pc, #20]	@ (8009618 <__i2b+0x24>)
 8009604:	4805      	ldr	r0, [pc, #20]	@ (800961c <__i2b+0x28>)
 8009606:	f240 1145 	movw	r1, #325	@ 0x145
 800960a:	f001 fdf9 	bl	800b200 <__assert_func>
 800960e:	2301      	movs	r3, #1
 8009610:	6144      	str	r4, [r0, #20]
 8009612:	6103      	str	r3, [r0, #16]
 8009614:	bd10      	pop	{r4, pc}
 8009616:	bf00      	nop
 8009618:	0800bc28 	.word	0x0800bc28
 800961c:	0800bc39 	.word	0x0800bc39

08009620 <__multiply>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	4614      	mov	r4, r2
 8009626:	690a      	ldr	r2, [r1, #16]
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	429a      	cmp	r2, r3
 800962c:	bfa8      	it	ge
 800962e:	4623      	movge	r3, r4
 8009630:	460f      	mov	r7, r1
 8009632:	bfa4      	itt	ge
 8009634:	460c      	movge	r4, r1
 8009636:	461f      	movge	r7, r3
 8009638:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800963c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009640:	68a3      	ldr	r3, [r4, #8]
 8009642:	6861      	ldr	r1, [r4, #4]
 8009644:	eb0a 0609 	add.w	r6, sl, r9
 8009648:	42b3      	cmp	r3, r6
 800964a:	b085      	sub	sp, #20
 800964c:	bfb8      	it	lt
 800964e:	3101      	addlt	r1, #1
 8009650:	f7ff fe92 	bl	8009378 <_Balloc>
 8009654:	b930      	cbnz	r0, 8009664 <__multiply+0x44>
 8009656:	4602      	mov	r2, r0
 8009658:	4b44      	ldr	r3, [pc, #272]	@ (800976c <__multiply+0x14c>)
 800965a:	4845      	ldr	r0, [pc, #276]	@ (8009770 <__multiply+0x150>)
 800965c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009660:	f001 fdce 	bl	800b200 <__assert_func>
 8009664:	f100 0514 	add.w	r5, r0, #20
 8009668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800966c:	462b      	mov	r3, r5
 800966e:	2200      	movs	r2, #0
 8009670:	4543      	cmp	r3, r8
 8009672:	d321      	bcc.n	80096b8 <__multiply+0x98>
 8009674:	f107 0114 	add.w	r1, r7, #20
 8009678:	f104 0214 	add.w	r2, r4, #20
 800967c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009680:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009684:	9302      	str	r3, [sp, #8]
 8009686:	1b13      	subs	r3, r2, r4
 8009688:	3b15      	subs	r3, #21
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	3304      	adds	r3, #4
 8009690:	f104 0715 	add.w	r7, r4, #21
 8009694:	42ba      	cmp	r2, r7
 8009696:	bf38      	it	cc
 8009698:	2304      	movcc	r3, #4
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	9103      	str	r1, [sp, #12]
 80096a0:	428b      	cmp	r3, r1
 80096a2:	d80c      	bhi.n	80096be <__multiply+0x9e>
 80096a4:	2e00      	cmp	r6, #0
 80096a6:	dd03      	ble.n	80096b0 <__multiply+0x90>
 80096a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d05b      	beq.n	8009768 <__multiply+0x148>
 80096b0:	6106      	str	r6, [r0, #16]
 80096b2:	b005      	add	sp, #20
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	f843 2b04 	str.w	r2, [r3], #4
 80096bc:	e7d8      	b.n	8009670 <__multiply+0x50>
 80096be:	f8b1 a000 	ldrh.w	sl, [r1]
 80096c2:	f1ba 0f00 	cmp.w	sl, #0
 80096c6:	d024      	beq.n	8009712 <__multiply+0xf2>
 80096c8:	f104 0e14 	add.w	lr, r4, #20
 80096cc:	46a9      	mov	r9, r5
 80096ce:	f04f 0c00 	mov.w	ip, #0
 80096d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096d6:	f8d9 3000 	ldr.w	r3, [r9]
 80096da:	fa1f fb87 	uxth.w	fp, r7
 80096de:	b29b      	uxth	r3, r3
 80096e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80096e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80096e8:	f8d9 7000 	ldr.w	r7, [r9]
 80096ec:	4463      	add	r3, ip
 80096ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80096f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009700:	4572      	cmp	r2, lr
 8009702:	f849 3b04 	str.w	r3, [r9], #4
 8009706:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800970a:	d8e2      	bhi.n	80096d2 <__multiply+0xb2>
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	f845 c003 	str.w	ip, [r5, r3]
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009718:	3104      	adds	r1, #4
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	d021      	beq.n	8009764 <__multiply+0x144>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	f104 0c14 	add.w	ip, r4, #20
 8009726:	46ae      	mov	lr, r5
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	f8bc b000 	ldrh.w	fp, [ip]
 8009730:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009734:	fb09 770b 	mla	r7, r9, fp, r7
 8009738:	4457      	add	r7, sl
 800973a:	b29b      	uxth	r3, r3
 800973c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009740:	f84e 3b04 	str.w	r3, [lr], #4
 8009744:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009748:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800974c:	f8be 3000 	ldrh.w	r3, [lr]
 8009750:	fb09 330a 	mla	r3, r9, sl, r3
 8009754:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009758:	4562      	cmp	r2, ip
 800975a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800975e:	d8e5      	bhi.n	800972c <__multiply+0x10c>
 8009760:	9f01      	ldr	r7, [sp, #4]
 8009762:	51eb      	str	r3, [r5, r7]
 8009764:	3504      	adds	r5, #4
 8009766:	e799      	b.n	800969c <__multiply+0x7c>
 8009768:	3e01      	subs	r6, #1
 800976a:	e79b      	b.n	80096a4 <__multiply+0x84>
 800976c:	0800bc28 	.word	0x0800bc28
 8009770:	0800bc39 	.word	0x0800bc39

08009774 <__pow5mult>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4615      	mov	r5, r2
 800977a:	f012 0203 	ands.w	r2, r2, #3
 800977e:	4607      	mov	r7, r0
 8009780:	460e      	mov	r6, r1
 8009782:	d007      	beq.n	8009794 <__pow5mult+0x20>
 8009784:	4c25      	ldr	r4, [pc, #148]	@ (800981c <__pow5mult+0xa8>)
 8009786:	3a01      	subs	r2, #1
 8009788:	2300      	movs	r3, #0
 800978a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978e:	f7ff fe55 	bl	800943c <__multadd>
 8009792:	4606      	mov	r6, r0
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	d03d      	beq.n	8009814 <__pow5mult+0xa0>
 8009798:	69fc      	ldr	r4, [r7, #28]
 800979a:	b97c      	cbnz	r4, 80097bc <__pow5mult+0x48>
 800979c:	2010      	movs	r0, #16
 800979e:	f7ff fd35 	bl	800920c <malloc>
 80097a2:	4602      	mov	r2, r0
 80097a4:	61f8      	str	r0, [r7, #28]
 80097a6:	b928      	cbnz	r0, 80097b4 <__pow5mult+0x40>
 80097a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009820 <__pow5mult+0xac>)
 80097aa:	481e      	ldr	r0, [pc, #120]	@ (8009824 <__pow5mult+0xb0>)
 80097ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80097b0:	f001 fd26 	bl	800b200 <__assert_func>
 80097b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097b8:	6004      	str	r4, [r0, #0]
 80097ba:	60c4      	str	r4, [r0, #12]
 80097bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80097c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c4:	b94c      	cbnz	r4, 80097da <__pow5mult+0x66>
 80097c6:	f240 2171 	movw	r1, #625	@ 0x271
 80097ca:	4638      	mov	r0, r7
 80097cc:	f7ff ff12 	bl	80095f4 <__i2b>
 80097d0:	2300      	movs	r3, #0
 80097d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097d6:	4604      	mov	r4, r0
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 0900 	mov.w	r9, #0
 80097de:	07eb      	lsls	r3, r5, #31
 80097e0:	d50a      	bpl.n	80097f8 <__pow5mult+0x84>
 80097e2:	4631      	mov	r1, r6
 80097e4:	4622      	mov	r2, r4
 80097e6:	4638      	mov	r0, r7
 80097e8:	f7ff ff1a 	bl	8009620 <__multiply>
 80097ec:	4631      	mov	r1, r6
 80097ee:	4680      	mov	r8, r0
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff fe01 	bl	80093f8 <_Bfree>
 80097f6:	4646      	mov	r6, r8
 80097f8:	106d      	asrs	r5, r5, #1
 80097fa:	d00b      	beq.n	8009814 <__pow5mult+0xa0>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	b938      	cbnz	r0, 8009810 <__pow5mult+0x9c>
 8009800:	4622      	mov	r2, r4
 8009802:	4621      	mov	r1, r4
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff ff0b 	bl	8009620 <__multiply>
 800980a:	6020      	str	r0, [r4, #0]
 800980c:	f8c0 9000 	str.w	r9, [r0]
 8009810:	4604      	mov	r4, r0
 8009812:	e7e4      	b.n	80097de <__pow5mult+0x6a>
 8009814:	4630      	mov	r0, r6
 8009816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981a:	bf00      	nop
 800981c:	0800bc94 	.word	0x0800bc94
 8009820:	0800bbb9 	.word	0x0800bbb9
 8009824:	0800bc39 	.word	0x0800bc39

08009828 <__lshift>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	460c      	mov	r4, r1
 800982e:	6849      	ldr	r1, [r1, #4]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	4607      	mov	r7, r0
 800983a:	4691      	mov	r9, r2
 800983c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009840:	f108 0601 	add.w	r6, r8, #1
 8009844:	42b3      	cmp	r3, r6
 8009846:	db0b      	blt.n	8009860 <__lshift+0x38>
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff fd95 	bl	8009378 <_Balloc>
 800984e:	4605      	mov	r5, r0
 8009850:	b948      	cbnz	r0, 8009866 <__lshift+0x3e>
 8009852:	4602      	mov	r2, r0
 8009854:	4b28      	ldr	r3, [pc, #160]	@ (80098f8 <__lshift+0xd0>)
 8009856:	4829      	ldr	r0, [pc, #164]	@ (80098fc <__lshift+0xd4>)
 8009858:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800985c:	f001 fcd0 	bl	800b200 <__assert_func>
 8009860:	3101      	adds	r1, #1
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	e7ee      	b.n	8009844 <__lshift+0x1c>
 8009866:	2300      	movs	r3, #0
 8009868:	f100 0114 	add.w	r1, r0, #20
 800986c:	f100 0210 	add.w	r2, r0, #16
 8009870:	4618      	mov	r0, r3
 8009872:	4553      	cmp	r3, sl
 8009874:	db33      	blt.n	80098de <__lshift+0xb6>
 8009876:	6920      	ldr	r0, [r4, #16]
 8009878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800987c:	f104 0314 	add.w	r3, r4, #20
 8009880:	f019 091f 	ands.w	r9, r9, #31
 8009884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009888:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800988c:	d02b      	beq.n	80098e6 <__lshift+0xbe>
 800988e:	f1c9 0e20 	rsb	lr, r9, #32
 8009892:	468a      	mov	sl, r1
 8009894:	2200      	movs	r2, #0
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	fa00 f009 	lsl.w	r0, r0, r9
 800989c:	4310      	orrs	r0, r2
 800989e:	f84a 0b04 	str.w	r0, [sl], #4
 80098a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a6:	459c      	cmp	ip, r3
 80098a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80098ac:	d8f3      	bhi.n	8009896 <__lshift+0x6e>
 80098ae:	ebac 0304 	sub.w	r3, ip, r4
 80098b2:	3b15      	subs	r3, #21
 80098b4:	f023 0303 	bic.w	r3, r3, #3
 80098b8:	3304      	adds	r3, #4
 80098ba:	f104 0015 	add.w	r0, r4, #21
 80098be:	4584      	cmp	ip, r0
 80098c0:	bf38      	it	cc
 80098c2:	2304      	movcc	r3, #4
 80098c4:	50ca      	str	r2, [r1, r3]
 80098c6:	b10a      	cbz	r2, 80098cc <__lshift+0xa4>
 80098c8:	f108 0602 	add.w	r6, r8, #2
 80098cc:	3e01      	subs	r6, #1
 80098ce:	4638      	mov	r0, r7
 80098d0:	612e      	str	r6, [r5, #16]
 80098d2:	4621      	mov	r1, r4
 80098d4:	f7ff fd90 	bl	80093f8 <_Bfree>
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	f842 0f04 	str.w	r0, [r2, #4]!
 80098e2:	3301      	adds	r3, #1
 80098e4:	e7c5      	b.n	8009872 <__lshift+0x4a>
 80098e6:	3904      	subs	r1, #4
 80098e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f0:	459c      	cmp	ip, r3
 80098f2:	d8f9      	bhi.n	80098e8 <__lshift+0xc0>
 80098f4:	e7ea      	b.n	80098cc <__lshift+0xa4>
 80098f6:	bf00      	nop
 80098f8:	0800bc28 	.word	0x0800bc28
 80098fc:	0800bc39 	.word	0x0800bc39

08009900 <__mcmp>:
 8009900:	690a      	ldr	r2, [r1, #16]
 8009902:	4603      	mov	r3, r0
 8009904:	6900      	ldr	r0, [r0, #16]
 8009906:	1a80      	subs	r0, r0, r2
 8009908:	b530      	push	{r4, r5, lr}
 800990a:	d10e      	bne.n	800992a <__mcmp+0x2a>
 800990c:	3314      	adds	r3, #20
 800990e:	3114      	adds	r1, #20
 8009910:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009914:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800991c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009920:	4295      	cmp	r5, r2
 8009922:	d003      	beq.n	800992c <__mcmp+0x2c>
 8009924:	d205      	bcs.n	8009932 <__mcmp+0x32>
 8009926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	42a3      	cmp	r3, r4
 800992e:	d3f3      	bcc.n	8009918 <__mcmp+0x18>
 8009930:	e7fb      	b.n	800992a <__mcmp+0x2a>
 8009932:	2001      	movs	r0, #1
 8009934:	e7f9      	b.n	800992a <__mcmp+0x2a>
	...

08009938 <__mdiff>:
 8009938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	4689      	mov	r9, r1
 800993e:	4606      	mov	r6, r0
 8009940:	4611      	mov	r1, r2
 8009942:	4648      	mov	r0, r9
 8009944:	4614      	mov	r4, r2
 8009946:	f7ff ffdb 	bl	8009900 <__mcmp>
 800994a:	1e05      	subs	r5, r0, #0
 800994c:	d112      	bne.n	8009974 <__mdiff+0x3c>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff fd11 	bl	8009378 <_Balloc>
 8009956:	4602      	mov	r2, r0
 8009958:	b928      	cbnz	r0, 8009966 <__mdiff+0x2e>
 800995a:	4b3f      	ldr	r3, [pc, #252]	@ (8009a58 <__mdiff+0x120>)
 800995c:	f240 2137 	movw	r1, #567	@ 0x237
 8009960:	483e      	ldr	r0, [pc, #248]	@ (8009a5c <__mdiff+0x124>)
 8009962:	f001 fc4d 	bl	800b200 <__assert_func>
 8009966:	2301      	movs	r3, #1
 8009968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800996c:	4610      	mov	r0, r2
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	bfbc      	itt	lt
 8009976:	464b      	movlt	r3, r9
 8009978:	46a1      	movlt	r9, r4
 800997a:	4630      	mov	r0, r6
 800997c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009980:	bfba      	itte	lt
 8009982:	461c      	movlt	r4, r3
 8009984:	2501      	movlt	r5, #1
 8009986:	2500      	movge	r5, #0
 8009988:	f7ff fcf6 	bl	8009378 <_Balloc>
 800998c:	4602      	mov	r2, r0
 800998e:	b918      	cbnz	r0, 8009998 <__mdiff+0x60>
 8009990:	4b31      	ldr	r3, [pc, #196]	@ (8009a58 <__mdiff+0x120>)
 8009992:	f240 2145 	movw	r1, #581	@ 0x245
 8009996:	e7e3      	b.n	8009960 <__mdiff+0x28>
 8009998:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800999c:	6926      	ldr	r6, [r4, #16]
 800999e:	60c5      	str	r5, [r0, #12]
 80099a0:	f109 0310 	add.w	r3, r9, #16
 80099a4:	f109 0514 	add.w	r5, r9, #20
 80099a8:	f104 0e14 	add.w	lr, r4, #20
 80099ac:	f100 0b14 	add.w	fp, r0, #20
 80099b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80099b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	46d9      	mov	r9, fp
 80099bc:	f04f 0c00 	mov.w	ip, #0
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80099c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	fa1f f38a 	uxth.w	r3, sl
 80099d0:	4619      	mov	r1, r3
 80099d2:	b283      	uxth	r3, r0
 80099d4:	1acb      	subs	r3, r1, r3
 80099d6:	0c00      	lsrs	r0, r0, #16
 80099d8:	4463      	add	r3, ip
 80099da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80099de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099e8:	4576      	cmp	r6, lr
 80099ea:	f849 3b04 	str.w	r3, [r9], #4
 80099ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099f2:	d8e5      	bhi.n	80099c0 <__mdiff+0x88>
 80099f4:	1b33      	subs	r3, r6, r4
 80099f6:	3b15      	subs	r3, #21
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	3415      	adds	r4, #21
 80099fe:	3304      	adds	r3, #4
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	bf38      	it	cc
 8009a04:	2304      	movcc	r3, #4
 8009a06:	441d      	add	r5, r3
 8009a08:	445b      	add	r3, fp
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	462c      	mov	r4, r5
 8009a0e:	4544      	cmp	r4, r8
 8009a10:	d30e      	bcc.n	8009a30 <__mdiff+0xf8>
 8009a12:	f108 0103 	add.w	r1, r8, #3
 8009a16:	1b49      	subs	r1, r1, r5
 8009a18:	f021 0103 	bic.w	r1, r1, #3
 8009a1c:	3d03      	subs	r5, #3
 8009a1e:	45a8      	cmp	r8, r5
 8009a20:	bf38      	it	cc
 8009a22:	2100      	movcc	r1, #0
 8009a24:	440b      	add	r3, r1
 8009a26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a2a:	b191      	cbz	r1, 8009a52 <__mdiff+0x11a>
 8009a2c:	6117      	str	r7, [r2, #16]
 8009a2e:	e79d      	b.n	800996c <__mdiff+0x34>
 8009a30:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a34:	46e6      	mov	lr, ip
 8009a36:	0c08      	lsrs	r0, r1, #16
 8009a38:	fa1c fc81 	uxtah	ip, ip, r1
 8009a3c:	4471      	add	r1, lr
 8009a3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a42:	b289      	uxth	r1, r1
 8009a44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a48:	f846 1b04 	str.w	r1, [r6], #4
 8009a4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a50:	e7dd      	b.n	8009a0e <__mdiff+0xd6>
 8009a52:	3f01      	subs	r7, #1
 8009a54:	e7e7      	b.n	8009a26 <__mdiff+0xee>
 8009a56:	bf00      	nop
 8009a58:	0800bc28 	.word	0x0800bc28
 8009a5c:	0800bc39 	.word	0x0800bc39

08009a60 <__ulp>:
 8009a60:	b082      	sub	sp, #8
 8009a62:	ed8d 0b00 	vstr	d0, [sp]
 8009a66:	9a01      	ldr	r2, [sp, #4]
 8009a68:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <__ulp+0x48>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dc08      	bgt.n	8009a86 <__ulp+0x26>
 8009a74:	425b      	negs	r3, r3
 8009a76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009a7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a7e:	da04      	bge.n	8009a8a <__ulp+0x2a>
 8009a80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009a84:	4113      	asrs	r3, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	e008      	b.n	8009a9c <__ulp+0x3c>
 8009a8a:	f1a2 0314 	sub.w	r3, r2, #20
 8009a8e:	2b1e      	cmp	r3, #30
 8009a90:	bfda      	itte	le
 8009a92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009a96:	40da      	lsrle	r2, r3
 8009a98:	2201      	movgt	r2, #1
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	ec41 0b10 	vmov	d0, r0, r1
 8009aa4:	b002      	add	sp, #8
 8009aa6:	4770      	bx	lr
 8009aa8:	7ff00000 	.word	0x7ff00000

08009aac <__b2d>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	6906      	ldr	r6, [r0, #16]
 8009ab2:	f100 0814 	add.w	r8, r0, #20
 8009ab6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009aba:	1f37      	subs	r7, r6, #4
 8009abc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f7ff fd4b 	bl	800955c <__hi0bits>
 8009ac6:	f1c0 0320 	rsb	r3, r0, #32
 8009aca:	280a      	cmp	r0, #10
 8009acc:	600b      	str	r3, [r1, #0]
 8009ace:	491b      	ldr	r1, [pc, #108]	@ (8009b3c <__b2d+0x90>)
 8009ad0:	dc15      	bgt.n	8009afe <__b2d+0x52>
 8009ad2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ad6:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ada:	45b8      	cmp	r8, r7
 8009adc:	ea43 0501 	orr.w	r5, r3, r1
 8009ae0:	bf34      	ite	cc
 8009ae2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ae6:	2300      	movcs	r3, #0
 8009ae8:	3015      	adds	r0, #21
 8009aea:	fa02 f000 	lsl.w	r0, r2, r0
 8009aee:	fa23 f30c 	lsr.w	r3, r3, ip
 8009af2:	4303      	orrs	r3, r0
 8009af4:	461c      	mov	r4, r3
 8009af6:	ec45 4b10 	vmov	d0, r4, r5
 8009afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afe:	45b8      	cmp	r8, r7
 8009b00:	bf3a      	itte	cc
 8009b02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b06:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b0a:	2300      	movcs	r3, #0
 8009b0c:	380b      	subs	r0, #11
 8009b0e:	d012      	beq.n	8009b36 <__b2d+0x8a>
 8009b10:	f1c0 0120 	rsb	r1, r0, #32
 8009b14:	fa23 f401 	lsr.w	r4, r3, r1
 8009b18:	4082      	lsls	r2, r0
 8009b1a:	4322      	orrs	r2, r4
 8009b1c:	4547      	cmp	r7, r8
 8009b1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009b22:	bf8c      	ite	hi
 8009b24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b28:	2200      	movls	r2, #0
 8009b2a:	4083      	lsls	r3, r0
 8009b2c:	40ca      	lsrs	r2, r1
 8009b2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009b32:	4313      	orrs	r3, r2
 8009b34:	e7de      	b.n	8009af4 <__b2d+0x48>
 8009b36:	ea42 0501 	orr.w	r5, r2, r1
 8009b3a:	e7db      	b.n	8009af4 <__b2d+0x48>
 8009b3c:	3ff00000 	.word	0x3ff00000

08009b40 <__d2b>:
 8009b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b44:	460f      	mov	r7, r1
 8009b46:	2101      	movs	r1, #1
 8009b48:	ec59 8b10 	vmov	r8, r9, d0
 8009b4c:	4616      	mov	r6, r2
 8009b4e:	f7ff fc13 	bl	8009378 <_Balloc>
 8009b52:	4604      	mov	r4, r0
 8009b54:	b930      	cbnz	r0, 8009b64 <__d2b+0x24>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b23      	ldr	r3, [pc, #140]	@ (8009be8 <__d2b+0xa8>)
 8009b5a:	4824      	ldr	r0, [pc, #144]	@ (8009bec <__d2b+0xac>)
 8009b5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b60:	f001 fb4e 	bl	800b200 <__assert_func>
 8009b64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b6c:	b10d      	cbz	r5, 8009b72 <__d2b+0x32>
 8009b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f1b8 0300 	subs.w	r3, r8, #0
 8009b78:	d023      	beq.n	8009bc2 <__d2b+0x82>
 8009b7a:	4668      	mov	r0, sp
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	f7ff fd0c 	bl	800959a <__lo0bits>
 8009b82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b86:	b1d0      	cbz	r0, 8009bbe <__d2b+0x7e>
 8009b88:	f1c0 0320 	rsb	r3, r0, #32
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	430b      	orrs	r3, r1
 8009b92:	40c2      	lsrs	r2, r0
 8009b94:	6163      	str	r3, [r4, #20]
 8009b96:	9201      	str	r2, [sp, #4]
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	61a3      	str	r3, [r4, #24]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bf0c      	ite	eq
 8009ba0:	2201      	moveq	r2, #1
 8009ba2:	2202      	movne	r2, #2
 8009ba4:	6122      	str	r2, [r4, #16]
 8009ba6:	b1a5      	cbz	r5, 8009bd2 <__d2b+0x92>
 8009ba8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009bac:	4405      	add	r5, r0
 8009bae:	603d      	str	r5, [r7, #0]
 8009bb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009bb4:	6030      	str	r0, [r6, #0]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	b003      	add	sp, #12
 8009bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bbe:	6161      	str	r1, [r4, #20]
 8009bc0:	e7ea      	b.n	8009b98 <__d2b+0x58>
 8009bc2:	a801      	add	r0, sp, #4
 8009bc4:	f7ff fce9 	bl	800959a <__lo0bits>
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	6163      	str	r3, [r4, #20]
 8009bcc:	3020      	adds	r0, #32
 8009bce:	2201      	movs	r2, #1
 8009bd0:	e7e8      	b.n	8009ba4 <__d2b+0x64>
 8009bd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009bda:	6038      	str	r0, [r7, #0]
 8009bdc:	6918      	ldr	r0, [r3, #16]
 8009bde:	f7ff fcbd 	bl	800955c <__hi0bits>
 8009be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009be6:	e7e5      	b.n	8009bb4 <__d2b+0x74>
 8009be8:	0800bc28 	.word	0x0800bc28
 8009bec:	0800bc39 	.word	0x0800bc39

08009bf0 <__ratio>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	e9cd 1000 	strd	r1, r0, [sp]
 8009bfa:	a902      	add	r1, sp, #8
 8009bfc:	f7ff ff56 	bl	8009aac <__b2d>
 8009c00:	9800      	ldr	r0, [sp, #0]
 8009c02:	a903      	add	r1, sp, #12
 8009c04:	ec55 4b10 	vmov	r4, r5, d0
 8009c08:	f7ff ff50 	bl	8009aac <__b2d>
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	6919      	ldr	r1, [r3, #16]
 8009c10:	9b00      	ldr	r3, [sp, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	1ac9      	subs	r1, r1, r3
 8009c16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	ec5b ab10 	vmov	sl, fp, d0
 8009c20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfce      	itee	gt
 8009c28:	462a      	movgt	r2, r5
 8009c2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c2e:	465a      	movle	r2, fp
 8009c30:	462f      	mov	r7, r5
 8009c32:	46d9      	mov	r9, fp
 8009c34:	bfcc      	ite	gt
 8009c36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009c3e:	464b      	mov	r3, r9
 8009c40:	4652      	mov	r2, sl
 8009c42:	4620      	mov	r0, r4
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 fe01 	bl	800084c <__aeabi_ddiv>
 8009c4a:	ec41 0b10 	vmov	d0, r0, r1
 8009c4e:	b005      	add	sp, #20
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c54 <__copybits>:
 8009c54:	3901      	subs	r1, #1
 8009c56:	b570      	push	{r4, r5, r6, lr}
 8009c58:	1149      	asrs	r1, r1, #5
 8009c5a:	6914      	ldr	r4, [r2, #16]
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	f102 0314 	add.w	r3, r2, #20
 8009c62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c6a:	1f05      	subs	r5, r0, #4
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d30c      	bcc.n	8009c8a <__copybits+0x36>
 8009c70:	1aa3      	subs	r3, r4, r2
 8009c72:	3b11      	subs	r3, #17
 8009c74:	f023 0303 	bic.w	r3, r3, #3
 8009c78:	3211      	adds	r2, #17
 8009c7a:	42a2      	cmp	r2, r4
 8009c7c:	bf88      	it	hi
 8009c7e:	2300      	movhi	r3, #0
 8009c80:	4418      	add	r0, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	4288      	cmp	r0, r1
 8009c86:	d305      	bcc.n	8009c94 <__copybits+0x40>
 8009c88:	bd70      	pop	{r4, r5, r6, pc}
 8009c8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c92:	e7eb      	b.n	8009c6c <__copybits+0x18>
 8009c94:	f840 3b04 	str.w	r3, [r0], #4
 8009c98:	e7f4      	b.n	8009c84 <__copybits+0x30>

08009c9a <__any_on>:
 8009c9a:	f100 0214 	add.w	r2, r0, #20
 8009c9e:	6900      	ldr	r0, [r0, #16]
 8009ca0:	114b      	asrs	r3, r1, #5
 8009ca2:	4298      	cmp	r0, r3
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	db11      	blt.n	8009ccc <__any_on+0x32>
 8009ca8:	dd0a      	ble.n	8009cc0 <__any_on+0x26>
 8009caa:	f011 011f 	ands.w	r1, r1, #31
 8009cae:	d007      	beq.n	8009cc0 <__any_on+0x26>
 8009cb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cb4:	fa24 f001 	lsr.w	r0, r4, r1
 8009cb8:	fa00 f101 	lsl.w	r1, r0, r1
 8009cbc:	428c      	cmp	r4, r1
 8009cbe:	d10b      	bne.n	8009cd8 <__any_on+0x3e>
 8009cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d803      	bhi.n	8009cd0 <__any_on+0x36>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	bd10      	pop	{r4, pc}
 8009ccc:	4603      	mov	r3, r0
 8009cce:	e7f7      	b.n	8009cc0 <__any_on+0x26>
 8009cd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d0f5      	beq.n	8009cc4 <__any_on+0x2a>
 8009cd8:	2001      	movs	r0, #1
 8009cda:	e7f6      	b.n	8009cca <__any_on+0x30>

08009cdc <sulp>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	ec45 4b10 	vmov	d0, r4, r5
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	f7ff feba 	bl	8009a60 <__ulp>
 8009cec:	ec51 0b10 	vmov	r0, r1, d0
 8009cf0:	b17e      	cbz	r6, 8009d12 <sulp+0x36>
 8009cf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cf6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd09      	ble.n	8009d12 <sulp+0x36>
 8009cfe:	051b      	lsls	r3, r3, #20
 8009d00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d04:	2400      	movs	r4, #0
 8009d06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	f7f6 fc73 	bl	80005f8 <__aeabi_dmul>
 8009d12:	ec41 0b10 	vmov	d0, r0, r1
 8009d16:	bd70      	pop	{r4, r5, r6, pc}

08009d18 <_strtod_l>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	b09f      	sub	sp, #124	@ 0x7c
 8009d1e:	460c      	mov	r4, r1
 8009d20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009d22:	2200      	movs	r2, #0
 8009d24:	921a      	str	r2, [sp, #104]	@ 0x68
 8009d26:	9005      	str	r0, [sp, #20]
 8009d28:	f04f 0a00 	mov.w	sl, #0
 8009d2c:	f04f 0b00 	mov.w	fp, #0
 8009d30:	460a      	mov	r2, r1
 8009d32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d34:	7811      	ldrb	r1, [r2, #0]
 8009d36:	292b      	cmp	r1, #43	@ 0x2b
 8009d38:	d04a      	beq.n	8009dd0 <_strtod_l+0xb8>
 8009d3a:	d838      	bhi.n	8009dae <_strtod_l+0x96>
 8009d3c:	290d      	cmp	r1, #13
 8009d3e:	d832      	bhi.n	8009da6 <_strtod_l+0x8e>
 8009d40:	2908      	cmp	r1, #8
 8009d42:	d832      	bhi.n	8009daa <_strtod_l+0x92>
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d03b      	beq.n	8009dc0 <_strtod_l+0xa8>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d4e:	782a      	ldrb	r2, [r5, #0]
 8009d50:	2a30      	cmp	r2, #48	@ 0x30
 8009d52:	f040 80b3 	bne.w	8009ebc <_strtod_l+0x1a4>
 8009d56:	786a      	ldrb	r2, [r5, #1]
 8009d58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d5c:	2a58      	cmp	r2, #88	@ 0x58
 8009d5e:	d16e      	bne.n	8009e3e <_strtod_l+0x126>
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	4a8e      	ldr	r2, [pc, #568]	@ (8009fa4 <_strtod_l+0x28c>)
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d70:	a919      	add	r1, sp, #100	@ 0x64
 8009d72:	f001 fadf 	bl	800b334 <__gethex>
 8009d76:	f010 060f 	ands.w	r6, r0, #15
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	d005      	beq.n	8009d8a <_strtod_l+0x72>
 8009d7e:	2e06      	cmp	r6, #6
 8009d80:	d128      	bne.n	8009dd4 <_strtod_l+0xbc>
 8009d82:	3501      	adds	r5, #1
 8009d84:	2300      	movs	r3, #0
 8009d86:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 858e 	bne.w	800a8ae <_strtod_l+0xb96>
 8009d92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d94:	b1cb      	cbz	r3, 8009dca <_strtod_l+0xb2>
 8009d96:	4652      	mov	r2, sl
 8009d98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d9c:	ec43 2b10 	vmov	d0, r2, r3
 8009da0:	b01f      	add	sp, #124	@ 0x7c
 8009da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da6:	2920      	cmp	r1, #32
 8009da8:	d1ce      	bne.n	8009d48 <_strtod_l+0x30>
 8009daa:	3201      	adds	r2, #1
 8009dac:	e7c1      	b.n	8009d32 <_strtod_l+0x1a>
 8009dae:	292d      	cmp	r1, #45	@ 0x2d
 8009db0:	d1ca      	bne.n	8009d48 <_strtod_l+0x30>
 8009db2:	2101      	movs	r1, #1
 8009db4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009db6:	1c51      	adds	r1, r2, #1
 8009db8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009dba:	7852      	ldrb	r2, [r2, #1]
 8009dbc:	2a00      	cmp	r2, #0
 8009dbe:	d1c5      	bne.n	8009d4c <_strtod_l+0x34>
 8009dc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 8570 	bne.w	800a8aa <_strtod_l+0xb92>
 8009dca:	4652      	mov	r2, sl
 8009dcc:	465b      	mov	r3, fp
 8009dce:	e7e5      	b.n	8009d9c <_strtod_l+0x84>
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	e7ef      	b.n	8009db4 <_strtod_l+0x9c>
 8009dd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009dd6:	b13a      	cbz	r2, 8009de8 <_strtod_l+0xd0>
 8009dd8:	2135      	movs	r1, #53	@ 0x35
 8009dda:	a81c      	add	r0, sp, #112	@ 0x70
 8009ddc:	f7ff ff3a 	bl	8009c54 <__copybits>
 8009de0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009de2:	9805      	ldr	r0, [sp, #20]
 8009de4:	f7ff fb08 	bl	80093f8 <_Bfree>
 8009de8:	3e01      	subs	r6, #1
 8009dea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009dec:	2e04      	cmp	r6, #4
 8009dee:	d806      	bhi.n	8009dfe <_strtod_l+0xe6>
 8009df0:	e8df f006 	tbb	[pc, r6]
 8009df4:	201d0314 	.word	0x201d0314
 8009df8:	14          	.byte	0x14
 8009df9:	00          	.byte	0x00
 8009dfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009dfe:	05e1      	lsls	r1, r4, #23
 8009e00:	bf48      	it	mi
 8009e02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e0a:	0d1b      	lsrs	r3, r3, #20
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1bb      	bne.n	8009d8a <_strtod_l+0x72>
 8009e12:	f7fe fb23 	bl	800845c <__errno>
 8009e16:	2322      	movs	r3, #34	@ 0x22
 8009e18:	6003      	str	r3, [r0, #0]
 8009e1a:	e7b6      	b.n	8009d8a <_strtod_l+0x72>
 8009e1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009e20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e2c:	e7e7      	b.n	8009dfe <_strtod_l+0xe6>
 8009e2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009fac <_strtod_l+0x294>
 8009e32:	e7e4      	b.n	8009dfe <_strtod_l+0xe6>
 8009e34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009e38:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e3c:	e7df      	b.n	8009dfe <_strtod_l+0xe6>
 8009e3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b30      	cmp	r3, #48	@ 0x30
 8009e48:	d0f9      	beq.n	8009e3e <_strtod_l+0x126>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d09d      	beq.n	8009d8a <_strtod_l+0x72>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e54:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e56:	2300      	movs	r3, #0
 8009e58:	9308      	str	r3, [sp, #32]
 8009e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e5c:	461f      	mov	r7, r3
 8009e5e:	220a      	movs	r2, #10
 8009e60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e62:	7805      	ldrb	r5, [r0, #0]
 8009e64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e68:	b2d9      	uxtb	r1, r3
 8009e6a:	2909      	cmp	r1, #9
 8009e6c:	d928      	bls.n	8009ec0 <_strtod_l+0x1a8>
 8009e6e:	494e      	ldr	r1, [pc, #312]	@ (8009fa8 <_strtod_l+0x290>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	f001 f979 	bl	800b168 <strncmp>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d032      	beq.n	8009ee0 <_strtod_l+0x1c8>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	4681      	mov	r9, r0
 8009e80:	463d      	mov	r5, r7
 8009e82:	4603      	mov	r3, r0
 8009e84:	2a65      	cmp	r2, #101	@ 0x65
 8009e86:	d001      	beq.n	8009e8c <_strtod_l+0x174>
 8009e88:	2a45      	cmp	r2, #69	@ 0x45
 8009e8a:	d114      	bne.n	8009eb6 <_strtod_l+0x19e>
 8009e8c:	b91d      	cbnz	r5, 8009e96 <_strtod_l+0x17e>
 8009e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e90:	4302      	orrs	r2, r0
 8009e92:	d095      	beq.n	8009dc0 <_strtod_l+0xa8>
 8009e94:	2500      	movs	r5, #0
 8009e96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e98:	1c62      	adds	r2, r4, #1
 8009e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e9c:	7862      	ldrb	r2, [r4, #1]
 8009e9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ea0:	d077      	beq.n	8009f92 <_strtod_l+0x27a>
 8009ea2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ea4:	d07b      	beq.n	8009f9e <_strtod_l+0x286>
 8009ea6:	f04f 0c00 	mov.w	ip, #0
 8009eaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009eae:	2909      	cmp	r1, #9
 8009eb0:	f240 8082 	bls.w	8009fb8 <_strtod_l+0x2a0>
 8009eb4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	e0a2      	b.n	800a002 <_strtod_l+0x2ea>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e7c7      	b.n	8009e50 <_strtod_l+0x138>
 8009ec0:	2f08      	cmp	r7, #8
 8009ec2:	bfd5      	itete	le
 8009ec4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009ec6:	9908      	ldrgt	r1, [sp, #32]
 8009ec8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ecc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ed0:	f100 0001 	add.w	r0, r0, #1
 8009ed4:	bfd4      	ite	le
 8009ed6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ed8:	9308      	strgt	r3, [sp, #32]
 8009eda:	3701      	adds	r7, #1
 8009edc:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ede:	e7bf      	b.n	8009e60 <_strtod_l+0x148>
 8009ee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ee6:	785a      	ldrb	r2, [r3, #1]
 8009ee8:	b37f      	cbz	r7, 8009f4a <_strtod_l+0x232>
 8009eea:	4681      	mov	r9, r0
 8009eec:	463d      	mov	r5, r7
 8009eee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009ef2:	2b09      	cmp	r3, #9
 8009ef4:	d912      	bls.n	8009f1c <_strtod_l+0x204>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7c4      	b.n	8009e84 <_strtod_l+0x16c>
 8009efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f00:	785a      	ldrb	r2, [r3, #1]
 8009f02:	3001      	adds	r0, #1
 8009f04:	2a30      	cmp	r2, #48	@ 0x30
 8009f06:	d0f8      	beq.n	8009efa <_strtod_l+0x1e2>
 8009f08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	f200 84d3 	bhi.w	800a8b8 <_strtod_l+0xba0>
 8009f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f14:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f16:	4681      	mov	r9, r0
 8009f18:	2000      	movs	r0, #0
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	3a30      	subs	r2, #48	@ 0x30
 8009f1e:	f100 0301 	add.w	r3, r0, #1
 8009f22:	d02a      	beq.n	8009f7a <_strtod_l+0x262>
 8009f24:	4499      	add	r9, r3
 8009f26:	eb00 0c05 	add.w	ip, r0, r5
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	210a      	movs	r1, #10
 8009f2e:	4563      	cmp	r3, ip
 8009f30:	d10d      	bne.n	8009f4e <_strtod_l+0x236>
 8009f32:	1c69      	adds	r1, r5, #1
 8009f34:	4401      	add	r1, r0
 8009f36:	4428      	add	r0, r5
 8009f38:	2808      	cmp	r0, #8
 8009f3a:	dc16      	bgt.n	8009f6a <_strtod_l+0x252>
 8009f3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f3e:	230a      	movs	r3, #10
 8009f40:	fb03 2300 	mla	r3, r3, r0, r2
 8009f44:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f46:	2300      	movs	r3, #0
 8009f48:	e018      	b.n	8009f7c <_strtod_l+0x264>
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	e7da      	b.n	8009f04 <_strtod_l+0x1ec>
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	f103 0301 	add.w	r3, r3, #1
 8009f54:	dc03      	bgt.n	8009f5e <_strtod_l+0x246>
 8009f56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f58:	434e      	muls	r6, r1
 8009f5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009f5c:	e7e7      	b.n	8009f2e <_strtod_l+0x216>
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	bfde      	ittt	le
 8009f62:	9e08      	ldrle	r6, [sp, #32]
 8009f64:	434e      	mulle	r6, r1
 8009f66:	9608      	strle	r6, [sp, #32]
 8009f68:	e7e1      	b.n	8009f2e <_strtod_l+0x216>
 8009f6a:	280f      	cmp	r0, #15
 8009f6c:	dceb      	bgt.n	8009f46 <_strtod_l+0x22e>
 8009f6e:	9808      	ldr	r0, [sp, #32]
 8009f70:	230a      	movs	r3, #10
 8009f72:	fb03 2300 	mla	r3, r3, r0, r2
 8009f76:	9308      	str	r3, [sp, #32]
 8009f78:	e7e5      	b.n	8009f46 <_strtod_l+0x22e>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f7e:	1c50      	adds	r0, r2, #1
 8009f80:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f82:	7852      	ldrb	r2, [r2, #1]
 8009f84:	4618      	mov	r0, r3
 8009f86:	460d      	mov	r5, r1
 8009f88:	e7b1      	b.n	8009eee <_strtod_l+0x1d6>
 8009f8a:	f04f 0900 	mov.w	r9, #0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e77d      	b.n	8009e8e <_strtod_l+0x176>
 8009f92:	f04f 0c00 	mov.w	ip, #0
 8009f96:	1ca2      	adds	r2, r4, #2
 8009f98:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f9a:	78a2      	ldrb	r2, [r4, #2]
 8009f9c:	e785      	b.n	8009eaa <_strtod_l+0x192>
 8009f9e:	f04f 0c01 	mov.w	ip, #1
 8009fa2:	e7f8      	b.n	8009f96 <_strtod_l+0x27e>
 8009fa4:	0800bda8 	.word	0x0800bda8
 8009fa8:	0800bd90 	.word	0x0800bd90
 8009fac:	7ff00000 	.word	0x7ff00000
 8009fb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fb2:	1c51      	adds	r1, r2, #1
 8009fb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009fb6:	7852      	ldrb	r2, [r2, #1]
 8009fb8:	2a30      	cmp	r2, #48	@ 0x30
 8009fba:	d0f9      	beq.n	8009fb0 <_strtod_l+0x298>
 8009fbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009fc0:	2908      	cmp	r1, #8
 8009fc2:	f63f af78 	bhi.w	8009eb6 <_strtod_l+0x19e>
 8009fc6:	3a30      	subs	r2, #48	@ 0x30
 8009fc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fcc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009fce:	f04f 080a 	mov.w	r8, #10
 8009fd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fd4:	1c56      	adds	r6, r2, #1
 8009fd6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009fd8:	7852      	ldrb	r2, [r2, #1]
 8009fda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009fde:	f1be 0f09 	cmp.w	lr, #9
 8009fe2:	d939      	bls.n	800a058 <_strtod_l+0x340>
 8009fe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fe6:	1a76      	subs	r6, r6, r1
 8009fe8:	2e08      	cmp	r6, #8
 8009fea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009fee:	dc03      	bgt.n	8009ff8 <_strtod_l+0x2e0>
 8009ff0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ff2:	4588      	cmp	r8, r1
 8009ff4:	bfa8      	it	ge
 8009ff6:	4688      	movge	r8, r1
 8009ff8:	f1bc 0f00 	cmp.w	ip, #0
 8009ffc:	d001      	beq.n	800a002 <_strtod_l+0x2ea>
 8009ffe:	f1c8 0800 	rsb	r8, r8, #0
 800a002:	2d00      	cmp	r5, #0
 800a004:	d14e      	bne.n	800a0a4 <_strtod_l+0x38c>
 800a006:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a008:	4308      	orrs	r0, r1
 800a00a:	f47f aebe 	bne.w	8009d8a <_strtod_l+0x72>
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f47f aed6 	bne.w	8009dc0 <_strtod_l+0xa8>
 800a014:	2a69      	cmp	r2, #105	@ 0x69
 800a016:	d028      	beq.n	800a06a <_strtod_l+0x352>
 800a018:	dc25      	bgt.n	800a066 <_strtod_l+0x34e>
 800a01a:	2a49      	cmp	r2, #73	@ 0x49
 800a01c:	d025      	beq.n	800a06a <_strtod_l+0x352>
 800a01e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a020:	f47f aece 	bne.w	8009dc0 <_strtod_l+0xa8>
 800a024:	499b      	ldr	r1, [pc, #620]	@ (800a294 <_strtod_l+0x57c>)
 800a026:	a819      	add	r0, sp, #100	@ 0x64
 800a028:	f001 fba6 	bl	800b778 <__match>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	f43f aec7 	beq.w	8009dc0 <_strtod_l+0xa8>
 800a032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b28      	cmp	r3, #40	@ 0x28
 800a038:	d12e      	bne.n	800a098 <_strtod_l+0x380>
 800a03a:	4997      	ldr	r1, [pc, #604]	@ (800a298 <_strtod_l+0x580>)
 800a03c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a03e:	a819      	add	r0, sp, #100	@ 0x64
 800a040:	f001 fbae 	bl	800b7a0 <__hexnan>
 800a044:	2805      	cmp	r0, #5
 800a046:	d127      	bne.n	800a098 <_strtod_l+0x380>
 800a048:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a04a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a04e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a052:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a056:	e698      	b.n	8009d8a <_strtod_l+0x72>
 800a058:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a05a:	fb08 2101 	mla	r1, r8, r1, r2
 800a05e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a062:	920e      	str	r2, [sp, #56]	@ 0x38
 800a064:	e7b5      	b.n	8009fd2 <_strtod_l+0x2ba>
 800a066:	2a6e      	cmp	r2, #110	@ 0x6e
 800a068:	e7da      	b.n	800a020 <_strtod_l+0x308>
 800a06a:	498c      	ldr	r1, [pc, #560]	@ (800a29c <_strtod_l+0x584>)
 800a06c:	a819      	add	r0, sp, #100	@ 0x64
 800a06e:	f001 fb83 	bl	800b778 <__match>
 800a072:	2800      	cmp	r0, #0
 800a074:	f43f aea4 	beq.w	8009dc0 <_strtod_l+0xa8>
 800a078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a07a:	4989      	ldr	r1, [pc, #548]	@ (800a2a0 <_strtod_l+0x588>)
 800a07c:	3b01      	subs	r3, #1
 800a07e:	a819      	add	r0, sp, #100	@ 0x64
 800a080:	9319      	str	r3, [sp, #100]	@ 0x64
 800a082:	f001 fb79 	bl	800b778 <__match>
 800a086:	b910      	cbnz	r0, 800a08e <_strtod_l+0x376>
 800a088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a08a:	3301      	adds	r3, #1
 800a08c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a08e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a2b0 <_strtod_l+0x598>
 800a092:	f04f 0a00 	mov.w	sl, #0
 800a096:	e678      	b.n	8009d8a <_strtod_l+0x72>
 800a098:	4882      	ldr	r0, [pc, #520]	@ (800a2a4 <_strtod_l+0x58c>)
 800a09a:	f001 f8a9 	bl	800b1f0 <nan>
 800a09e:	ec5b ab10 	vmov	sl, fp, d0
 800a0a2:	e672      	b.n	8009d8a <_strtod_l+0x72>
 800a0a4:	eba8 0309 	sub.w	r3, r8, r9
 800a0a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	bf08      	it	eq
 800a0b0:	462f      	moveq	r7, r5
 800a0b2:	2d10      	cmp	r5, #16
 800a0b4:	462c      	mov	r4, r5
 800a0b6:	bfa8      	it	ge
 800a0b8:	2410      	movge	r4, #16
 800a0ba:	f7f6 fa23 	bl	8000504 <__aeabi_ui2d>
 800a0be:	2d09      	cmp	r5, #9
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	468b      	mov	fp, r1
 800a0c4:	dc13      	bgt.n	800a0ee <_strtod_l+0x3d6>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f43f ae5e 	beq.w	8009d8a <_strtod_l+0x72>
 800a0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d0:	dd78      	ble.n	800a1c4 <_strtod_l+0x4ac>
 800a0d2:	2b16      	cmp	r3, #22
 800a0d4:	dc5f      	bgt.n	800a196 <_strtod_l+0x47e>
 800a0d6:	4974      	ldr	r1, [pc, #464]	@ (800a2a8 <_strtod_l+0x590>)
 800a0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0e0:	4652      	mov	r2, sl
 800a0e2:	465b      	mov	r3, fp
 800a0e4:	f7f6 fa88 	bl	80005f8 <__aeabi_dmul>
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	468b      	mov	fp, r1
 800a0ec:	e64d      	b.n	8009d8a <_strtod_l+0x72>
 800a0ee:	4b6e      	ldr	r3, [pc, #440]	@ (800a2a8 <_strtod_l+0x590>)
 800a0f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a0f8:	f7f6 fa7e 	bl	80005f8 <__aeabi_dmul>
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	9808      	ldr	r0, [sp, #32]
 800a100:	468b      	mov	fp, r1
 800a102:	f7f6 f9ff 	bl	8000504 <__aeabi_ui2d>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4650      	mov	r0, sl
 800a10c:	4659      	mov	r1, fp
 800a10e:	f7f6 f8bd 	bl	800028c <__adddf3>
 800a112:	2d0f      	cmp	r5, #15
 800a114:	4682      	mov	sl, r0
 800a116:	468b      	mov	fp, r1
 800a118:	ddd5      	ble.n	800a0c6 <_strtod_l+0x3ae>
 800a11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11c:	1b2c      	subs	r4, r5, r4
 800a11e:	441c      	add	r4, r3
 800a120:	2c00      	cmp	r4, #0
 800a122:	f340 8096 	ble.w	800a252 <_strtod_l+0x53a>
 800a126:	f014 030f 	ands.w	r3, r4, #15
 800a12a:	d00a      	beq.n	800a142 <_strtod_l+0x42a>
 800a12c:	495e      	ldr	r1, [pc, #376]	@ (800a2a8 <_strtod_l+0x590>)
 800a12e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a132:	4652      	mov	r2, sl
 800a134:	465b      	mov	r3, fp
 800a136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a13a:	f7f6 fa5d 	bl	80005f8 <__aeabi_dmul>
 800a13e:	4682      	mov	sl, r0
 800a140:	468b      	mov	fp, r1
 800a142:	f034 040f 	bics.w	r4, r4, #15
 800a146:	d073      	beq.n	800a230 <_strtod_l+0x518>
 800a148:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a14c:	dd48      	ble.n	800a1e0 <_strtod_l+0x4c8>
 800a14e:	2400      	movs	r4, #0
 800a150:	46a0      	mov	r8, r4
 800a152:	940a      	str	r4, [sp, #40]	@ 0x28
 800a154:	46a1      	mov	r9, r4
 800a156:	9a05      	ldr	r2, [sp, #20]
 800a158:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a2b0 <_strtod_l+0x598>
 800a15c:	2322      	movs	r3, #34	@ 0x22
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	f04f 0a00 	mov.w	sl, #0
 800a164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a166:	2b00      	cmp	r3, #0
 800a168:	f43f ae0f 	beq.w	8009d8a <_strtod_l+0x72>
 800a16c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a16e:	9805      	ldr	r0, [sp, #20]
 800a170:	f7ff f942 	bl	80093f8 <_Bfree>
 800a174:	9805      	ldr	r0, [sp, #20]
 800a176:	4649      	mov	r1, r9
 800a178:	f7ff f93e 	bl	80093f8 <_Bfree>
 800a17c:	9805      	ldr	r0, [sp, #20]
 800a17e:	4641      	mov	r1, r8
 800a180:	f7ff f93a 	bl	80093f8 <_Bfree>
 800a184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a186:	9805      	ldr	r0, [sp, #20]
 800a188:	f7ff f936 	bl	80093f8 <_Bfree>
 800a18c:	9805      	ldr	r0, [sp, #20]
 800a18e:	4621      	mov	r1, r4
 800a190:	f7ff f932 	bl	80093f8 <_Bfree>
 800a194:	e5f9      	b.n	8009d8a <_strtod_l+0x72>
 800a196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a198:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a19c:	4293      	cmp	r3, r2
 800a19e:	dbbc      	blt.n	800a11a <_strtod_l+0x402>
 800a1a0:	4c41      	ldr	r4, [pc, #260]	@ (800a2a8 <_strtod_l+0x590>)
 800a1a2:	f1c5 050f 	rsb	r5, r5, #15
 800a1a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a1aa:	4652      	mov	r2, sl
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b2:	f7f6 fa21 	bl	80005f8 <__aeabi_dmul>
 800a1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b8:	1b5d      	subs	r5, r3, r5
 800a1ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a1be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1c2:	e78f      	b.n	800a0e4 <_strtod_l+0x3cc>
 800a1c4:	3316      	adds	r3, #22
 800a1c6:	dba8      	blt.n	800a11a <_strtod_l+0x402>
 800a1c8:	4b37      	ldr	r3, [pc, #220]	@ (800a2a8 <_strtod_l+0x590>)
 800a1ca:	eba9 0808 	sub.w	r8, r9, r8
 800a1ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a1d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a1d6:	4650      	mov	r0, sl
 800a1d8:	4659      	mov	r1, fp
 800a1da:	f7f6 fb37 	bl	800084c <__aeabi_ddiv>
 800a1de:	e783      	b.n	800a0e8 <_strtod_l+0x3d0>
 800a1e0:	4b32      	ldr	r3, [pc, #200]	@ (800a2ac <_strtod_l+0x594>)
 800a1e2:	9308      	str	r3, [sp, #32]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	1124      	asrs	r4, r4, #4
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	4659      	mov	r1, fp
 800a1ec:	461e      	mov	r6, r3
 800a1ee:	2c01      	cmp	r4, #1
 800a1f0:	dc21      	bgt.n	800a236 <_strtod_l+0x51e>
 800a1f2:	b10b      	cbz	r3, 800a1f8 <_strtod_l+0x4e0>
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	468b      	mov	fp, r1
 800a1f8:	492c      	ldr	r1, [pc, #176]	@ (800a2ac <_strtod_l+0x594>)
 800a1fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a1fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a202:	4652      	mov	r2, sl
 800a204:	465b      	mov	r3, fp
 800a206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a20a:	f7f6 f9f5 	bl	80005f8 <__aeabi_dmul>
 800a20e:	4b28      	ldr	r3, [pc, #160]	@ (800a2b0 <_strtod_l+0x598>)
 800a210:	460a      	mov	r2, r1
 800a212:	400b      	ands	r3, r1
 800a214:	4927      	ldr	r1, [pc, #156]	@ (800a2b4 <_strtod_l+0x59c>)
 800a216:	428b      	cmp	r3, r1
 800a218:	4682      	mov	sl, r0
 800a21a:	d898      	bhi.n	800a14e <_strtod_l+0x436>
 800a21c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a220:	428b      	cmp	r3, r1
 800a222:	bf86      	itte	hi
 800a224:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a2b8 <_strtod_l+0x5a0>
 800a228:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a22c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a230:	2300      	movs	r3, #0
 800a232:	9308      	str	r3, [sp, #32]
 800a234:	e07a      	b.n	800a32c <_strtod_l+0x614>
 800a236:	07e2      	lsls	r2, r4, #31
 800a238:	d505      	bpl.n	800a246 <_strtod_l+0x52e>
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	2301      	movs	r3, #1
 800a246:	9a08      	ldr	r2, [sp, #32]
 800a248:	3208      	adds	r2, #8
 800a24a:	3601      	adds	r6, #1
 800a24c:	1064      	asrs	r4, r4, #1
 800a24e:	9208      	str	r2, [sp, #32]
 800a250:	e7cd      	b.n	800a1ee <_strtod_l+0x4d6>
 800a252:	d0ed      	beq.n	800a230 <_strtod_l+0x518>
 800a254:	4264      	negs	r4, r4
 800a256:	f014 020f 	ands.w	r2, r4, #15
 800a25a:	d00a      	beq.n	800a272 <_strtod_l+0x55a>
 800a25c:	4b12      	ldr	r3, [pc, #72]	@ (800a2a8 <_strtod_l+0x590>)
 800a25e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a262:	4650      	mov	r0, sl
 800a264:	4659      	mov	r1, fp
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f6 faef 	bl	800084c <__aeabi_ddiv>
 800a26e:	4682      	mov	sl, r0
 800a270:	468b      	mov	fp, r1
 800a272:	1124      	asrs	r4, r4, #4
 800a274:	d0dc      	beq.n	800a230 <_strtod_l+0x518>
 800a276:	2c1f      	cmp	r4, #31
 800a278:	dd20      	ble.n	800a2bc <_strtod_l+0x5a4>
 800a27a:	2400      	movs	r4, #0
 800a27c:	46a0      	mov	r8, r4
 800a27e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a280:	46a1      	mov	r9, r4
 800a282:	9a05      	ldr	r2, [sp, #20]
 800a284:	2322      	movs	r3, #34	@ 0x22
 800a286:	f04f 0a00 	mov.w	sl, #0
 800a28a:	f04f 0b00 	mov.w	fp, #0
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	e768      	b.n	800a164 <_strtod_l+0x44c>
 800a292:	bf00      	nop
 800a294:	0800bb80 	.word	0x0800bb80
 800a298:	0800bd94 	.word	0x0800bd94
 800a29c:	0800bb78 	.word	0x0800bb78
 800a2a0:	0800bbaf 	.word	0x0800bbaf
 800a2a4:	0800bf3d 	.word	0x0800bf3d
 800a2a8:	0800bcc8 	.word	0x0800bcc8
 800a2ac:	0800bca0 	.word	0x0800bca0
 800a2b0:	7ff00000 	.word	0x7ff00000
 800a2b4:	7ca00000 	.word	0x7ca00000
 800a2b8:	7fefffff 	.word	0x7fefffff
 800a2bc:	f014 0310 	ands.w	r3, r4, #16
 800a2c0:	bf18      	it	ne
 800a2c2:	236a      	movne	r3, #106	@ 0x6a
 800a2c4:	4ea9      	ldr	r6, [pc, #676]	@ (800a56c <_strtod_l+0x854>)
 800a2c6:	9308      	str	r3, [sp, #32]
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	07e2      	lsls	r2, r4, #31
 800a2d0:	d504      	bpl.n	800a2dc <_strtod_l+0x5c4>
 800a2d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2d6:	f7f6 f98f 	bl	80005f8 <__aeabi_dmul>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	1064      	asrs	r4, r4, #1
 800a2de:	f106 0608 	add.w	r6, r6, #8
 800a2e2:	d1f4      	bne.n	800a2ce <_strtod_l+0x5b6>
 800a2e4:	b10b      	cbz	r3, 800a2ea <_strtod_l+0x5d2>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	468b      	mov	fp, r1
 800a2ea:	9b08      	ldr	r3, [sp, #32]
 800a2ec:	b1b3      	cbz	r3, 800a31c <_strtod_l+0x604>
 800a2ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	4659      	mov	r1, fp
 800a2fa:	dd0f      	ble.n	800a31c <_strtod_l+0x604>
 800a2fc:	2b1f      	cmp	r3, #31
 800a2fe:	dd55      	ble.n	800a3ac <_strtod_l+0x694>
 800a300:	2b34      	cmp	r3, #52	@ 0x34
 800a302:	bfde      	ittt	le
 800a304:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a308:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a30c:	4093      	lslle	r3, r2
 800a30e:	f04f 0a00 	mov.w	sl, #0
 800a312:	bfcc      	ite	gt
 800a314:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a318:	ea03 0b01 	andle.w	fp, r3, r1
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	4650      	mov	r0, sl
 800a322:	4659      	mov	r1, fp
 800a324:	f7f6 fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1a6      	bne.n	800a27a <_strtod_l+0x562>
 800a32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a332:	9805      	ldr	r0, [sp, #20]
 800a334:	462b      	mov	r3, r5
 800a336:	463a      	mov	r2, r7
 800a338:	f7ff f8c6 	bl	80094c8 <__s2b>
 800a33c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f af05 	beq.w	800a14e <_strtod_l+0x436>
 800a344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a346:	2a00      	cmp	r2, #0
 800a348:	eba9 0308 	sub.w	r3, r9, r8
 800a34c:	bfa8      	it	ge
 800a34e:	2300      	movge	r3, #0
 800a350:	9312      	str	r3, [sp, #72]	@ 0x48
 800a352:	2400      	movs	r4, #0
 800a354:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a358:	9316      	str	r3, [sp, #88]	@ 0x58
 800a35a:	46a0      	mov	r8, r4
 800a35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a35e:	9805      	ldr	r0, [sp, #20]
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	f7ff f809 	bl	8009378 <_Balloc>
 800a366:	4681      	mov	r9, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	f43f aef4 	beq.w	800a156 <_strtod_l+0x43e>
 800a36e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a370:	691a      	ldr	r2, [r3, #16]
 800a372:	3202      	adds	r2, #2
 800a374:	f103 010c 	add.w	r1, r3, #12
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	300c      	adds	r0, #12
 800a37c:	f7fe f89b 	bl	80084b6 <memcpy>
 800a380:	ec4b ab10 	vmov	d0, sl, fp
 800a384:	9805      	ldr	r0, [sp, #20]
 800a386:	aa1c      	add	r2, sp, #112	@ 0x70
 800a388:	a91b      	add	r1, sp, #108	@ 0x6c
 800a38a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a38e:	f7ff fbd7 	bl	8009b40 <__d2b>
 800a392:	901a      	str	r0, [sp, #104]	@ 0x68
 800a394:	2800      	cmp	r0, #0
 800a396:	f43f aede 	beq.w	800a156 <_strtod_l+0x43e>
 800a39a:	9805      	ldr	r0, [sp, #20]
 800a39c:	2101      	movs	r1, #1
 800a39e:	f7ff f929 	bl	80095f4 <__i2b>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	b948      	cbnz	r0, 800a3ba <_strtod_l+0x6a2>
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	e6d4      	b.n	800a156 <_strtod_l+0x43e>
 800a3ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b4:	ea03 0a0a 	and.w	sl, r3, sl
 800a3b8:	e7b0      	b.n	800a31c <_strtod_l+0x604>
 800a3ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a3bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	bfab      	itete	ge
 800a3c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a3c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a3c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a3c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a3ca:	bfac      	ite	ge
 800a3cc:	18ef      	addge	r7, r5, r3
 800a3ce:	1b5e      	sublt	r6, r3, r5
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	1aed      	subs	r5, r5, r3
 800a3d4:	4415      	add	r5, r2
 800a3d6:	4b66      	ldr	r3, [pc, #408]	@ (800a570 <_strtod_l+0x858>)
 800a3d8:	3d01      	subs	r5, #1
 800a3da:	429d      	cmp	r5, r3
 800a3dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a3e0:	da50      	bge.n	800a484 <_strtod_l+0x76c>
 800a3e2:	1b5b      	subs	r3, r3, r5
 800a3e4:	2b1f      	cmp	r3, #31
 800a3e6:	eba2 0203 	sub.w	r2, r2, r3
 800a3ea:	f04f 0101 	mov.w	r1, #1
 800a3ee:	dc3d      	bgt.n	800a46c <_strtod_l+0x754>
 800a3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3fa:	18bd      	adds	r5, r7, r2
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	42af      	cmp	r7, r5
 800a400:	4416      	add	r6, r2
 800a402:	441e      	add	r6, r3
 800a404:	463b      	mov	r3, r7
 800a406:	bfa8      	it	ge
 800a408:	462b      	movge	r3, r5
 800a40a:	42b3      	cmp	r3, r6
 800a40c:	bfa8      	it	ge
 800a40e:	4633      	movge	r3, r6
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfc2      	ittt	gt
 800a414:	1aed      	subgt	r5, r5, r3
 800a416:	1af6      	subgt	r6, r6, r3
 800a418:	1aff      	subgt	r7, r7, r3
 800a41a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd16      	ble.n	800a44e <_strtod_l+0x736>
 800a420:	4641      	mov	r1, r8
 800a422:	9805      	ldr	r0, [sp, #20]
 800a424:	461a      	mov	r2, r3
 800a426:	f7ff f9a5 	bl	8009774 <__pow5mult>
 800a42a:	4680      	mov	r8, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d0ba      	beq.n	800a3a6 <_strtod_l+0x68e>
 800a430:	4601      	mov	r1, r0
 800a432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	f7ff f8f3 	bl	8009620 <__multiply>
 800a43a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f ae8a 	beq.w	800a156 <_strtod_l+0x43e>
 800a442:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a444:	9805      	ldr	r0, [sp, #20]
 800a446:	f7fe ffd7 	bl	80093f8 <_Bfree>
 800a44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a44c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a44e:	2d00      	cmp	r5, #0
 800a450:	dc1d      	bgt.n	800a48e <_strtod_l+0x776>
 800a452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	dd23      	ble.n	800a4a0 <_strtod_l+0x788>
 800a458:	4649      	mov	r1, r9
 800a45a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a45c:	9805      	ldr	r0, [sp, #20]
 800a45e:	f7ff f989 	bl	8009774 <__pow5mult>
 800a462:	4681      	mov	r9, r0
 800a464:	b9e0      	cbnz	r0, 800a4a0 <_strtod_l+0x788>
 800a466:	f04f 0900 	mov.w	r9, #0
 800a46a:	e674      	b.n	800a156 <_strtod_l+0x43e>
 800a46c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a470:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a474:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a478:	35e2      	adds	r5, #226	@ 0xe2
 800a47a:	fa01 f305 	lsl.w	r3, r1, r5
 800a47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a480:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a482:	e7ba      	b.n	800a3fa <_strtod_l+0x6e2>
 800a484:	2300      	movs	r3, #0
 800a486:	9310      	str	r3, [sp, #64]	@ 0x40
 800a488:	2301      	movs	r3, #1
 800a48a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a48c:	e7b5      	b.n	800a3fa <_strtod_l+0x6e2>
 800a48e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a490:	9805      	ldr	r0, [sp, #20]
 800a492:	462a      	mov	r2, r5
 800a494:	f7ff f9c8 	bl	8009828 <__lshift>
 800a498:	901a      	str	r0, [sp, #104]	@ 0x68
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1d9      	bne.n	800a452 <_strtod_l+0x73a>
 800a49e:	e65a      	b.n	800a156 <_strtod_l+0x43e>
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	dd07      	ble.n	800a4b4 <_strtod_l+0x79c>
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	9805      	ldr	r0, [sp, #20]
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	f7ff f9bd 	bl	8009828 <__lshift>
 800a4ae:	4681      	mov	r9, r0
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d0d8      	beq.n	800a466 <_strtod_l+0x74e>
 800a4b4:	2f00      	cmp	r7, #0
 800a4b6:	dd08      	ble.n	800a4ca <_strtod_l+0x7b2>
 800a4b8:	4641      	mov	r1, r8
 800a4ba:	9805      	ldr	r0, [sp, #20]
 800a4bc:	463a      	mov	r2, r7
 800a4be:	f7ff f9b3 	bl	8009828 <__lshift>
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f43f ae46 	beq.w	800a156 <_strtod_l+0x43e>
 800a4ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4cc:	9805      	ldr	r0, [sp, #20]
 800a4ce:	464a      	mov	r2, r9
 800a4d0:	f7ff fa32 	bl	8009938 <__mdiff>
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f43f ae3d 	beq.w	800a156 <_strtod_l+0x43e>
 800a4dc:	68c3      	ldr	r3, [r0, #12]
 800a4de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60c3      	str	r3, [r0, #12]
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	f7ff fa0b 	bl	8009900 <__mcmp>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	da46      	bge.n	800a57c <_strtod_l+0x864>
 800a4ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4f4:	d16c      	bne.n	800a5d0 <_strtod_l+0x8b8>
 800a4f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d168      	bne.n	800a5d0 <_strtod_l+0x8b8>
 800a4fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a502:	0d1b      	lsrs	r3, r3, #20
 800a504:	051b      	lsls	r3, r3, #20
 800a506:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a50a:	d961      	bls.n	800a5d0 <_strtod_l+0x8b8>
 800a50c:	6963      	ldr	r3, [r4, #20]
 800a50e:	b913      	cbnz	r3, 800a516 <_strtod_l+0x7fe>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	2b01      	cmp	r3, #1
 800a514:	dd5c      	ble.n	800a5d0 <_strtod_l+0x8b8>
 800a516:	4621      	mov	r1, r4
 800a518:	2201      	movs	r2, #1
 800a51a:	9805      	ldr	r0, [sp, #20]
 800a51c:	f7ff f984 	bl	8009828 <__lshift>
 800a520:	4641      	mov	r1, r8
 800a522:	4604      	mov	r4, r0
 800a524:	f7ff f9ec 	bl	8009900 <__mcmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	dd51      	ble.n	800a5d0 <_strtod_l+0x8b8>
 800a52c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a530:	9a08      	ldr	r2, [sp, #32]
 800a532:	0d1b      	lsrs	r3, r3, #20
 800a534:	051b      	lsls	r3, r3, #20
 800a536:	2a00      	cmp	r2, #0
 800a538:	d06b      	beq.n	800a612 <_strtod_l+0x8fa>
 800a53a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a53e:	d868      	bhi.n	800a612 <_strtod_l+0x8fa>
 800a540:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a544:	f67f ae9d 	bls.w	800a282 <_strtod_l+0x56a>
 800a548:	4b0a      	ldr	r3, [pc, #40]	@ (800a574 <_strtod_l+0x85c>)
 800a54a:	4650      	mov	r0, sl
 800a54c:	4659      	mov	r1, fp
 800a54e:	2200      	movs	r2, #0
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	4b08      	ldr	r3, [pc, #32]	@ (800a578 <_strtod_l+0x860>)
 800a556:	400b      	ands	r3, r1
 800a558:	4682      	mov	sl, r0
 800a55a:	468b      	mov	fp, r1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f47f ae05 	bne.w	800a16c <_strtod_l+0x454>
 800a562:	9a05      	ldr	r2, [sp, #20]
 800a564:	2322      	movs	r3, #34	@ 0x22
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	e600      	b.n	800a16c <_strtod_l+0x454>
 800a56a:	bf00      	nop
 800a56c:	0800bdc0 	.word	0x0800bdc0
 800a570:	fffffc02 	.word	0xfffffc02
 800a574:	39500000 	.word	0x39500000
 800a578:	7ff00000 	.word	0x7ff00000
 800a57c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a580:	d165      	bne.n	800a64e <_strtod_l+0x936>
 800a582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a588:	b35a      	cbz	r2, 800a5e2 <_strtod_l+0x8ca>
 800a58a:	4a9f      	ldr	r2, [pc, #636]	@ (800a808 <_strtod_l+0xaf0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d12b      	bne.n	800a5e8 <_strtod_l+0x8d0>
 800a590:	9b08      	ldr	r3, [sp, #32]
 800a592:	4651      	mov	r1, sl
 800a594:	b303      	cbz	r3, 800a5d8 <_strtod_l+0x8c0>
 800a596:	4b9d      	ldr	r3, [pc, #628]	@ (800a80c <_strtod_l+0xaf4>)
 800a598:	465a      	mov	r2, fp
 800a59a:	4013      	ands	r3, r2
 800a59c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5a4:	d81b      	bhi.n	800a5de <_strtod_l+0x8c6>
 800a5a6:	0d1b      	lsrs	r3, r3, #20
 800a5a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d119      	bne.n	800a5e8 <_strtod_l+0x8d0>
 800a5b4:	4b96      	ldr	r3, [pc, #600]	@ (800a810 <_strtod_l+0xaf8>)
 800a5b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d102      	bne.n	800a5c2 <_strtod_l+0x8aa>
 800a5bc:	3101      	adds	r1, #1
 800a5be:	f43f adca 	beq.w	800a156 <_strtod_l+0x43e>
 800a5c2:	4b92      	ldr	r3, [pc, #584]	@ (800a80c <_strtod_l+0xaf4>)
 800a5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5c6:	401a      	ands	r2, r3
 800a5c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a5cc:	f04f 0a00 	mov.w	sl, #0
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1b8      	bne.n	800a548 <_strtod_l+0x830>
 800a5d6:	e5c9      	b.n	800a16c <_strtod_l+0x454>
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5dc:	e7e8      	b.n	800a5b0 <_strtod_l+0x898>
 800a5de:	4613      	mov	r3, r2
 800a5e0:	e7e6      	b.n	800a5b0 <_strtod_l+0x898>
 800a5e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a5e6:	d0a1      	beq.n	800a52c <_strtod_l+0x814>
 800a5e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5ea:	b1db      	cbz	r3, 800a624 <_strtod_l+0x90c>
 800a5ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ee:	4213      	tst	r3, r2
 800a5f0:	d0ee      	beq.n	800a5d0 <_strtod_l+0x8b8>
 800a5f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	b1bb      	cbz	r3, 800a62c <_strtod_l+0x914>
 800a5fc:	f7ff fb6e 	bl	8009cdc <sulp>
 800a600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a604:	ec53 2b10 	vmov	r2, r3, d0
 800a608:	f7f5 fe40 	bl	800028c <__adddf3>
 800a60c:	4682      	mov	sl, r0
 800a60e:	468b      	mov	fp, r1
 800a610:	e7de      	b.n	800a5d0 <_strtod_l+0x8b8>
 800a612:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a616:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a61a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a61e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a622:	e7d5      	b.n	800a5d0 <_strtod_l+0x8b8>
 800a624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a626:	ea13 0f0a 	tst.w	r3, sl
 800a62a:	e7e1      	b.n	800a5f0 <_strtod_l+0x8d8>
 800a62c:	f7ff fb56 	bl	8009cdc <sulp>
 800a630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a634:	ec53 2b10 	vmov	r2, r3, d0
 800a638:	f7f5 fe26 	bl	8000288 <__aeabi_dsub>
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	f7f6 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d0c1      	beq.n	800a5d0 <_strtod_l+0x8b8>
 800a64c:	e619      	b.n	800a282 <_strtod_l+0x56a>
 800a64e:	4641      	mov	r1, r8
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff facd 	bl	8009bf0 <__ratio>
 800a656:	ec57 6b10 	vmov	r6, r7, d0
 800a65a:	2200      	movs	r2, #0
 800a65c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a660:	4630      	mov	r0, r6
 800a662:	4639      	mov	r1, r7
 800a664:	f7f6 fa44 	bl	8000af0 <__aeabi_dcmple>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d06f      	beq.n	800a74c <_strtod_l+0xa34>
 800a66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d17a      	bne.n	800a768 <_strtod_l+0xa50>
 800a672:	f1ba 0f00 	cmp.w	sl, #0
 800a676:	d158      	bne.n	800a72a <_strtod_l+0xa12>
 800a678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d15a      	bne.n	800a738 <_strtod_l+0xa20>
 800a682:	4b64      	ldr	r3, [pc, #400]	@ (800a814 <_strtod_l+0xafc>)
 800a684:	2200      	movs	r2, #0
 800a686:	4630      	mov	r0, r6
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f6 fa27 	bl	8000adc <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d159      	bne.n	800a746 <_strtod_l+0xa2e>
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	4b60      	ldr	r3, [pc, #384]	@ (800a818 <_strtod_l+0xb00>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffad 	bl	80005f8 <__aeabi_dmul>
 800a69e:	4606      	mov	r6, r0
 800a6a0:	460f      	mov	r7, r1
 800a6a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a6a6:	9606      	str	r6, [sp, #24]
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6ae:	4d57      	ldr	r5, [pc, #348]	@ (800a80c <_strtod_l+0xaf4>)
 800a6b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b6:	401d      	ands	r5, r3
 800a6b8:	4b58      	ldr	r3, [pc, #352]	@ (800a81c <_strtod_l+0xb04>)
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	f040 80b2 	bne.w	800a824 <_strtod_l+0xb0c>
 800a6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a6c6:	ec4b ab10 	vmov	d0, sl, fp
 800a6ca:	f7ff f9c9 	bl	8009a60 <__ulp>
 800a6ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6d2:	ec51 0b10 	vmov	r0, r1, d0
 800a6d6:	f7f5 ff8f 	bl	80005f8 <__aeabi_dmul>
 800a6da:	4652      	mov	r2, sl
 800a6dc:	465b      	mov	r3, fp
 800a6de:	f7f5 fdd5 	bl	800028c <__adddf3>
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4949      	ldr	r1, [pc, #292]	@ (800a80c <_strtod_l+0xaf4>)
 800a6e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a820 <_strtod_l+0xb08>)
 800a6e8:	4019      	ands	r1, r3
 800a6ea:	4291      	cmp	r1, r2
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	d942      	bls.n	800a776 <_strtod_l+0xa5e>
 800a6f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6f2:	4b47      	ldr	r3, [pc, #284]	@ (800a810 <_strtod_l+0xaf8>)
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d103      	bne.n	800a700 <_strtod_l+0x9e8>
 800a6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	f43f ad2b 	beq.w	800a156 <_strtod_l+0x43e>
 800a700:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a810 <_strtod_l+0xaf8>
 800a704:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a70a:	9805      	ldr	r0, [sp, #20]
 800a70c:	f7fe fe74 	bl	80093f8 <_Bfree>
 800a710:	9805      	ldr	r0, [sp, #20]
 800a712:	4649      	mov	r1, r9
 800a714:	f7fe fe70 	bl	80093f8 <_Bfree>
 800a718:	9805      	ldr	r0, [sp, #20]
 800a71a:	4641      	mov	r1, r8
 800a71c:	f7fe fe6c 	bl	80093f8 <_Bfree>
 800a720:	9805      	ldr	r0, [sp, #20]
 800a722:	4621      	mov	r1, r4
 800a724:	f7fe fe68 	bl	80093f8 <_Bfree>
 800a728:	e618      	b.n	800a35c <_strtod_l+0x644>
 800a72a:	f1ba 0f01 	cmp.w	sl, #1
 800a72e:	d103      	bne.n	800a738 <_strtod_l+0xa20>
 800a730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a732:	2b00      	cmp	r3, #0
 800a734:	f43f ada5 	beq.w	800a282 <_strtod_l+0x56a>
 800a738:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a7e8 <_strtod_l+0xad0>
 800a73c:	4f35      	ldr	r7, [pc, #212]	@ (800a814 <_strtod_l+0xafc>)
 800a73e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a742:	2600      	movs	r6, #0
 800a744:	e7b1      	b.n	800a6aa <_strtod_l+0x992>
 800a746:	4f34      	ldr	r7, [pc, #208]	@ (800a818 <_strtod_l+0xb00>)
 800a748:	2600      	movs	r6, #0
 800a74a:	e7aa      	b.n	800a6a2 <_strtod_l+0x98a>
 800a74c:	4b32      	ldr	r3, [pc, #200]	@ (800a818 <_strtod_l+0xb00>)
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	2200      	movs	r2, #0
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d09f      	beq.n	800a6a2 <_strtod_l+0x98a>
 800a762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a766:	e7a0      	b.n	800a6aa <_strtod_l+0x992>
 800a768:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a7f0 <_strtod_l+0xad8>
 800a76c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a770:	ec57 6b17 	vmov	r6, r7, d7
 800a774:	e799      	b.n	800a6aa <_strtod_l+0x992>
 800a776:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1c1      	bne.n	800a708 <_strtod_l+0x9f0>
 800a784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a788:	0d1b      	lsrs	r3, r3, #20
 800a78a:	051b      	lsls	r3, r3, #20
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d1bb      	bne.n	800a708 <_strtod_l+0x9f0>
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f6 fa90 	bl	8000cb8 <__aeabi_d2lz>
 800a798:	f7f5 ff00 	bl	800059c <__aeabi_l2d>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 fd70 	bl	8000288 <__aeabi_dsub>
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a7b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b6:	ea46 060a 	orr.w	r6, r6, sl
 800a7ba:	431e      	orrs	r6, r3
 800a7bc:	d06f      	beq.n	800a89e <_strtod_l+0xb86>
 800a7be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7f8 <_strtod_l+0xae0>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f6 f98a 	bl	8000adc <__aeabi_dcmplt>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f47f accf 	bne.w	800a16c <_strtod_l+0x454>
 800a7ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a800 <_strtod_l+0xae8>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7d8:	f7f6 f99e 	bl	8000b18 <__aeabi_dcmpgt>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d093      	beq.n	800a708 <_strtod_l+0x9f0>
 800a7e0:	e4c4      	b.n	800a16c <_strtod_l+0x454>
 800a7e2:	bf00      	nop
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	00000000 	.word	0x00000000
 800a7ec:	bff00000 	.word	0xbff00000
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	3ff00000 	.word	0x3ff00000
 800a7f8:	94a03595 	.word	0x94a03595
 800a7fc:	3fdfffff 	.word	0x3fdfffff
 800a800:	35afe535 	.word	0x35afe535
 800a804:	3fe00000 	.word	0x3fe00000
 800a808:	000fffff 	.word	0x000fffff
 800a80c:	7ff00000 	.word	0x7ff00000
 800a810:	7fefffff 	.word	0x7fefffff
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	3fe00000 	.word	0x3fe00000
 800a81c:	7fe00000 	.word	0x7fe00000
 800a820:	7c9fffff 	.word	0x7c9fffff
 800a824:	9b08      	ldr	r3, [sp, #32]
 800a826:	b323      	cbz	r3, 800a872 <_strtod_l+0xb5a>
 800a828:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a82c:	d821      	bhi.n	800a872 <_strtod_l+0xb5a>
 800a82e:	a328      	add	r3, pc, #160	@ (adr r3, 800a8d0 <_strtod_l+0xbb8>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f6 f95a 	bl	8000af0 <__aeabi_dcmple>
 800a83c:	b1a0      	cbz	r0, 800a868 <_strtod_l+0xb50>
 800a83e:	4639      	mov	r1, r7
 800a840:	4630      	mov	r0, r6
 800a842:	f7f6 f9b1 	bl	8000ba8 <__aeabi_d2uiz>
 800a846:	2801      	cmp	r0, #1
 800a848:	bf38      	it	cc
 800a84a:	2001      	movcc	r0, #1
 800a84c:	f7f5 fe5a 	bl	8000504 <__aeabi_ui2d>
 800a850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	b9fb      	cbnz	r3, 800a898 <_strtod_l+0xb80>
 800a858:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a85c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a85e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a860:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a864:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a868:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a86a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a86e:	1b5b      	subs	r3, r3, r5
 800a870:	9311      	str	r3, [sp, #68]	@ 0x44
 800a872:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a876:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a87a:	f7ff f8f1 	bl	8009a60 <__ulp>
 800a87e:	4650      	mov	r0, sl
 800a880:	ec53 2b10 	vmov	r2, r3, d0
 800a884:	4659      	mov	r1, fp
 800a886:	f7f5 feb7 	bl	80005f8 <__aeabi_dmul>
 800a88a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a88e:	f7f5 fcfd 	bl	800028c <__adddf3>
 800a892:	4682      	mov	sl, r0
 800a894:	468b      	mov	fp, r1
 800a896:	e770      	b.n	800a77a <_strtod_l+0xa62>
 800a898:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a89c:	e7e0      	b.n	800a860 <_strtod_l+0xb48>
 800a89e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8d8 <_strtod_l+0xbc0>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f6 f91a 	bl	8000adc <__aeabi_dcmplt>
 800a8a8:	e798      	b.n	800a7dc <_strtod_l+0xac4>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a8b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	f7ff ba6d 	b.w	8009d92 <_strtod_l+0x7a>
 800a8b8:	2a65      	cmp	r2, #101	@ 0x65
 800a8ba:	f43f ab66 	beq.w	8009f8a <_strtod_l+0x272>
 800a8be:	2a45      	cmp	r2, #69	@ 0x45
 800a8c0:	f43f ab63 	beq.w	8009f8a <_strtod_l+0x272>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f7ff bb9e 	b.w	800a006 <_strtod_l+0x2ee>
 800a8ca:	bf00      	nop
 800a8cc:	f3af 8000 	nop.w
 800a8d0:	ffc00000 	.word	0xffc00000
 800a8d4:	41dfffff 	.word	0x41dfffff
 800a8d8:	94a03595 	.word	0x94a03595
 800a8dc:	3fcfffff 	.word	0x3fcfffff

0800a8e0 <_strtod_r>:
 800a8e0:	4b01      	ldr	r3, [pc, #4]	@ (800a8e8 <_strtod_r+0x8>)
 800a8e2:	f7ff ba19 	b.w	8009d18 <_strtod_l>
 800a8e6:	bf00      	nop
 800a8e8:	2000006c 	.word	0x2000006c

0800a8ec <_strtol_l.constprop.0>:
 800a8ec:	2b24      	cmp	r3, #36	@ 0x24
 800a8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f2:	4686      	mov	lr, r0
 800a8f4:	4690      	mov	r8, r2
 800a8f6:	d801      	bhi.n	800a8fc <_strtol_l.constprop.0+0x10>
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d106      	bne.n	800a90a <_strtol_l.constprop.0+0x1e>
 800a8fc:	f7fd fdae 	bl	800845c <__errno>
 800a900:	2316      	movs	r3, #22
 800a902:	6003      	str	r3, [r0, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	4834      	ldr	r0, [pc, #208]	@ (800a9dc <_strtol_l.constprop.0+0xf0>)
 800a90c:	460d      	mov	r5, r1
 800a90e:	462a      	mov	r2, r5
 800a910:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a914:	5d06      	ldrb	r6, [r0, r4]
 800a916:	f016 0608 	ands.w	r6, r6, #8
 800a91a:	d1f8      	bne.n	800a90e <_strtol_l.constprop.0+0x22>
 800a91c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a91e:	d12d      	bne.n	800a97c <_strtol_l.constprop.0+0x90>
 800a920:	782c      	ldrb	r4, [r5, #0]
 800a922:	2601      	movs	r6, #1
 800a924:	1c95      	adds	r5, r2, #2
 800a926:	f033 0210 	bics.w	r2, r3, #16
 800a92a:	d109      	bne.n	800a940 <_strtol_l.constprop.0+0x54>
 800a92c:	2c30      	cmp	r4, #48	@ 0x30
 800a92e:	d12a      	bne.n	800a986 <_strtol_l.constprop.0+0x9a>
 800a930:	782a      	ldrb	r2, [r5, #0]
 800a932:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a936:	2a58      	cmp	r2, #88	@ 0x58
 800a938:	d125      	bne.n	800a986 <_strtol_l.constprop.0+0x9a>
 800a93a:	786c      	ldrb	r4, [r5, #1]
 800a93c:	2310      	movs	r3, #16
 800a93e:	3502      	adds	r5, #2
 800a940:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a944:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a948:	2200      	movs	r2, #0
 800a94a:	fbbc f9f3 	udiv	r9, ip, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	fb03 ca19 	mls	sl, r3, r9, ip
 800a954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a958:	2f09      	cmp	r7, #9
 800a95a:	d81b      	bhi.n	800a994 <_strtol_l.constprop.0+0xa8>
 800a95c:	463c      	mov	r4, r7
 800a95e:	42a3      	cmp	r3, r4
 800a960:	dd27      	ble.n	800a9b2 <_strtol_l.constprop.0+0xc6>
 800a962:	1c57      	adds	r7, r2, #1
 800a964:	d007      	beq.n	800a976 <_strtol_l.constprop.0+0x8a>
 800a966:	4581      	cmp	r9, r0
 800a968:	d320      	bcc.n	800a9ac <_strtol_l.constprop.0+0xc0>
 800a96a:	d101      	bne.n	800a970 <_strtol_l.constprop.0+0x84>
 800a96c:	45a2      	cmp	sl, r4
 800a96e:	db1d      	blt.n	800a9ac <_strtol_l.constprop.0+0xc0>
 800a970:	fb00 4003 	mla	r0, r0, r3, r4
 800a974:	2201      	movs	r2, #1
 800a976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a97a:	e7eb      	b.n	800a954 <_strtol_l.constprop.0+0x68>
 800a97c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a97e:	bf04      	itt	eq
 800a980:	782c      	ldrbeq	r4, [r5, #0]
 800a982:	1c95      	addeq	r5, r2, #2
 800a984:	e7cf      	b.n	800a926 <_strtol_l.constprop.0+0x3a>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1da      	bne.n	800a940 <_strtol_l.constprop.0+0x54>
 800a98a:	2c30      	cmp	r4, #48	@ 0x30
 800a98c:	bf0c      	ite	eq
 800a98e:	2308      	moveq	r3, #8
 800a990:	230a      	movne	r3, #10
 800a992:	e7d5      	b.n	800a940 <_strtol_l.constprop.0+0x54>
 800a994:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a998:	2f19      	cmp	r7, #25
 800a99a:	d801      	bhi.n	800a9a0 <_strtol_l.constprop.0+0xb4>
 800a99c:	3c37      	subs	r4, #55	@ 0x37
 800a99e:	e7de      	b.n	800a95e <_strtol_l.constprop.0+0x72>
 800a9a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9a4:	2f19      	cmp	r7, #25
 800a9a6:	d804      	bhi.n	800a9b2 <_strtol_l.constprop.0+0xc6>
 800a9a8:	3c57      	subs	r4, #87	@ 0x57
 800a9aa:	e7d8      	b.n	800a95e <_strtol_l.constprop.0+0x72>
 800a9ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9b0:	e7e1      	b.n	800a976 <_strtol_l.constprop.0+0x8a>
 800a9b2:	1c53      	adds	r3, r2, #1
 800a9b4:	d108      	bne.n	800a9c8 <_strtol_l.constprop.0+0xdc>
 800a9b6:	2322      	movs	r3, #34	@ 0x22
 800a9b8:	f8ce 3000 	str.w	r3, [lr]
 800a9bc:	4660      	mov	r0, ip
 800a9be:	f1b8 0f00 	cmp.w	r8, #0
 800a9c2:	d0a0      	beq.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9c4:	1e69      	subs	r1, r5, #1
 800a9c6:	e006      	b.n	800a9d6 <_strtol_l.constprop.0+0xea>
 800a9c8:	b106      	cbz	r6, 800a9cc <_strtol_l.constprop.0+0xe0>
 800a9ca:	4240      	negs	r0, r0
 800a9cc:	f1b8 0f00 	cmp.w	r8, #0
 800a9d0:	d099      	beq.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1f6      	bne.n	800a9c4 <_strtol_l.constprop.0+0xd8>
 800a9d6:	f8c8 1000 	str.w	r1, [r8]
 800a9da:	e794      	b.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9dc:	0800bde9 	.word	0x0800bde9

0800a9e0 <_strtol_r>:
 800a9e0:	f7ff bf84 	b.w	800a8ec <_strtol_l.constprop.0>

0800a9e4 <__ssputs_r>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	688e      	ldr	r6, [r1, #8]
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	42be      	cmp	r6, r7
 800a9ee:	680b      	ldr	r3, [r1, #0]
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	4690      	mov	r8, r2
 800a9f6:	d82d      	bhi.n	800aa54 <__ssputs_r+0x70>
 800a9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa00:	d026      	beq.n	800aa50 <__ssputs_r+0x6c>
 800aa02:	6965      	ldr	r5, [r4, #20]
 800aa04:	6909      	ldr	r1, [r1, #16]
 800aa06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa0a:	eba3 0901 	sub.w	r9, r3, r1
 800aa0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa12:	1c7b      	adds	r3, r7, #1
 800aa14:	444b      	add	r3, r9
 800aa16:	106d      	asrs	r5, r5, #1
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	bf38      	it	cc
 800aa1c:	461d      	movcc	r5, r3
 800aa1e:	0553      	lsls	r3, r2, #21
 800aa20:	d527      	bpl.n	800aa72 <__ssputs_r+0x8e>
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7fe fc1c 	bl	8009260 <_malloc_r>
 800aa28:	4606      	mov	r6, r0
 800aa2a:	b360      	cbz	r0, 800aa86 <__ssputs_r+0xa2>
 800aa2c:	6921      	ldr	r1, [r4, #16]
 800aa2e:	464a      	mov	r2, r9
 800aa30:	f7fd fd41 	bl	80084b6 <memcpy>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	6126      	str	r6, [r4, #16]
 800aa42:	6165      	str	r5, [r4, #20]
 800aa44:	444e      	add	r6, r9
 800aa46:	eba5 0509 	sub.w	r5, r5, r9
 800aa4a:	6026      	str	r6, [r4, #0]
 800aa4c:	60a5      	str	r5, [r4, #8]
 800aa4e:	463e      	mov	r6, r7
 800aa50:	42be      	cmp	r6, r7
 800aa52:	d900      	bls.n	800aa56 <__ssputs_r+0x72>
 800aa54:	463e      	mov	r6, r7
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	4632      	mov	r2, r6
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	f000 fb6a 	bl	800b134 <memmove>
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	1b9b      	subs	r3, r3, r6
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	4433      	add	r3, r6
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa72:	462a      	mov	r2, r5
 800aa74:	f000 ff41 	bl	800b8fa <_realloc_r>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1e0      	bne.n	800aa40 <__ssputs_r+0x5c>
 800aa7e:	6921      	ldr	r1, [r4, #16]
 800aa80:	4650      	mov	r0, sl
 800aa82:	f7fe fb79 	bl	8009178 <_free_r>
 800aa86:	230c      	movs	r3, #12
 800aa88:	f8ca 3000 	str.w	r3, [sl]
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa92:	81a3      	strh	r3, [r4, #12]
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa98:	e7e9      	b.n	800aa6e <__ssputs_r+0x8a>
	...

0800aa9c <_svfiprintf_r>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	4698      	mov	r8, r3
 800aaa2:	898b      	ldrh	r3, [r1, #12]
 800aaa4:	061b      	lsls	r3, r3, #24
 800aaa6:	b09d      	sub	sp, #116	@ 0x74
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	4614      	mov	r4, r2
 800aaae:	d510      	bpl.n	800aad2 <_svfiprintf_r+0x36>
 800aab0:	690b      	ldr	r3, [r1, #16]
 800aab2:	b973      	cbnz	r3, 800aad2 <_svfiprintf_r+0x36>
 800aab4:	2140      	movs	r1, #64	@ 0x40
 800aab6:	f7fe fbd3 	bl	8009260 <_malloc_r>
 800aaba:	6028      	str	r0, [r5, #0]
 800aabc:	6128      	str	r0, [r5, #16]
 800aabe:	b930      	cbnz	r0, 800aace <_svfiprintf_r+0x32>
 800aac0:	230c      	movs	r3, #12
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aac8:	b01d      	add	sp, #116	@ 0x74
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	2340      	movs	r3, #64	@ 0x40
 800aad0:	616b      	str	r3, [r5, #20]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad6:	2320      	movs	r3, #32
 800aad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae0:	2330      	movs	r3, #48	@ 0x30
 800aae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac80 <_svfiprintf_r+0x1e4>
 800aae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaea:	f04f 0901 	mov.w	r9, #1
 800aaee:	4623      	mov	r3, r4
 800aaf0:	469a      	mov	sl, r3
 800aaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf6:	b10a      	cbz	r2, 800aafc <_svfiprintf_r+0x60>
 800aaf8:	2a25      	cmp	r2, #37	@ 0x25
 800aafa:	d1f9      	bne.n	800aaf0 <_svfiprintf_r+0x54>
 800aafc:	ebba 0b04 	subs.w	fp, sl, r4
 800ab00:	d00b      	beq.n	800ab1a <_svfiprintf_r+0x7e>
 800ab02:	465b      	mov	r3, fp
 800ab04:	4622      	mov	r2, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f7ff ff6b 	bl	800a9e4 <__ssputs_r>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	f000 80a7 	beq.w	800ac62 <_svfiprintf_r+0x1c6>
 800ab14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab16:	445a      	add	r2, fp
 800ab18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 809f 	beq.w	800ac62 <_svfiprintf_r+0x1c6>
 800ab24:	2300      	movs	r3, #0
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab2e:	f10a 0a01 	add.w	sl, sl, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	9307      	str	r3, [sp, #28]
 800ab36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab3c:	4654      	mov	r4, sl
 800ab3e:	2205      	movs	r2, #5
 800ab40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab44:	484e      	ldr	r0, [pc, #312]	@ (800ac80 <_svfiprintf_r+0x1e4>)
 800ab46:	f7f5 fb43 	bl	80001d0 <memchr>
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	b9d8      	cbnz	r0, 800ab86 <_svfiprintf_r+0xea>
 800ab4e:	06d0      	lsls	r0, r2, #27
 800ab50:	bf44      	itt	mi
 800ab52:	2320      	movmi	r3, #32
 800ab54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab58:	0711      	lsls	r1, r2, #28
 800ab5a:	bf44      	itt	mi
 800ab5c:	232b      	movmi	r3, #43	@ 0x2b
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab62:	f89a 3000 	ldrb.w	r3, [sl]
 800ab66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab68:	d015      	beq.n	800ab96 <_svfiprintf_r+0xfa>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4654      	mov	r4, sl
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f04f 0c0a 	mov.w	ip, #10
 800ab74:	4621      	mov	r1, r4
 800ab76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7a:	3b30      	subs	r3, #48	@ 0x30
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d94b      	bls.n	800ac18 <_svfiprintf_r+0x17c>
 800ab80:	b1b0      	cbz	r0, 800abb0 <_svfiprintf_r+0x114>
 800ab82:	9207      	str	r2, [sp, #28]
 800ab84:	e014      	b.n	800abb0 <_svfiprintf_r+0x114>
 800ab86:	eba0 0308 	sub.w	r3, r0, r8
 800ab8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	46a2      	mov	sl, r4
 800ab94:	e7d2      	b.n	800ab3c <_svfiprintf_r+0xa0>
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	9103      	str	r1, [sp, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfbb      	ittet	lt
 800aba2:	425b      	neglt	r3, r3
 800aba4:	f042 0202 	orrlt.w	r2, r2, #2
 800aba8:	9307      	strge	r3, [sp, #28]
 800abaa:	9307      	strlt	r3, [sp, #28]
 800abac:	bfb8      	it	lt
 800abae:	9204      	strlt	r2, [sp, #16]
 800abb0:	7823      	ldrb	r3, [r4, #0]
 800abb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800abb4:	d10a      	bne.n	800abcc <_svfiprintf_r+0x130>
 800abb6:	7863      	ldrb	r3, [r4, #1]
 800abb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abba:	d132      	bne.n	800ac22 <_svfiprintf_r+0x186>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	9203      	str	r2, [sp, #12]
 800abc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abc8:	3402      	adds	r4, #2
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac90 <_svfiprintf_r+0x1f4>
 800abd0:	7821      	ldrb	r1, [r4, #0]
 800abd2:	2203      	movs	r2, #3
 800abd4:	4650      	mov	r0, sl
 800abd6:	f7f5 fafb 	bl	80001d0 <memchr>
 800abda:	b138      	cbz	r0, 800abec <_svfiprintf_r+0x150>
 800abdc:	9b04      	ldr	r3, [sp, #16]
 800abde:	eba0 000a 	sub.w	r0, r0, sl
 800abe2:	2240      	movs	r2, #64	@ 0x40
 800abe4:	4082      	lsls	r2, r0
 800abe6:	4313      	orrs	r3, r2
 800abe8:	3401      	adds	r4, #1
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf0:	4824      	ldr	r0, [pc, #144]	@ (800ac84 <_svfiprintf_r+0x1e8>)
 800abf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abf6:	2206      	movs	r2, #6
 800abf8:	f7f5 faea 	bl	80001d0 <memchr>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d036      	beq.n	800ac6e <_svfiprintf_r+0x1d2>
 800ac00:	4b21      	ldr	r3, [pc, #132]	@ (800ac88 <_svfiprintf_r+0x1ec>)
 800ac02:	bb1b      	cbnz	r3, 800ac4c <_svfiprintf_r+0x1b0>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	3307      	adds	r3, #7
 800ac08:	f023 0307 	bic.w	r3, r3, #7
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	9303      	str	r3, [sp, #12]
 800ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac12:	4433      	add	r3, r6
 800ac14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac16:	e76a      	b.n	800aaee <_svfiprintf_r+0x52>
 800ac18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	2001      	movs	r0, #1
 800ac20:	e7a8      	b.n	800ab74 <_svfiprintf_r+0xd8>
 800ac22:	2300      	movs	r3, #0
 800ac24:	3401      	adds	r4, #1
 800ac26:	9305      	str	r3, [sp, #20]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac34:	3a30      	subs	r2, #48	@ 0x30
 800ac36:	2a09      	cmp	r2, #9
 800ac38:	d903      	bls.n	800ac42 <_svfiprintf_r+0x1a6>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0c6      	beq.n	800abcc <_svfiprintf_r+0x130>
 800ac3e:	9105      	str	r1, [sp, #20]
 800ac40:	e7c4      	b.n	800abcc <_svfiprintf_r+0x130>
 800ac42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac46:	4604      	mov	r4, r0
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7f0      	b.n	800ac2e <_svfiprintf_r+0x192>
 800ac4c:	ab03      	add	r3, sp, #12
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	462a      	mov	r2, r5
 800ac52:	4b0e      	ldr	r3, [pc, #56]	@ (800ac8c <_svfiprintf_r+0x1f0>)
 800ac54:	a904      	add	r1, sp, #16
 800ac56:	4638      	mov	r0, r7
 800ac58:	f7fc fb96 	bl	8007388 <_printf_float>
 800ac5c:	1c42      	adds	r2, r0, #1
 800ac5e:	4606      	mov	r6, r0
 800ac60:	d1d6      	bne.n	800ac10 <_svfiprintf_r+0x174>
 800ac62:	89ab      	ldrh	r3, [r5, #12]
 800ac64:	065b      	lsls	r3, r3, #25
 800ac66:	f53f af2d 	bmi.w	800aac4 <_svfiprintf_r+0x28>
 800ac6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac6c:	e72c      	b.n	800aac8 <_svfiprintf_r+0x2c>
 800ac6e:	ab03      	add	r3, sp, #12
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	462a      	mov	r2, r5
 800ac74:	4b05      	ldr	r3, [pc, #20]	@ (800ac8c <_svfiprintf_r+0x1f0>)
 800ac76:	a904      	add	r1, sp, #16
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7fc fe1d 	bl	80078b8 <_printf_i>
 800ac7e:	e7ed      	b.n	800ac5c <_svfiprintf_r+0x1c0>
 800ac80:	0800bee9 	.word	0x0800bee9
 800ac84:	0800bef3 	.word	0x0800bef3
 800ac88:	08007389 	.word	0x08007389
 800ac8c:	0800a9e5 	.word	0x0800a9e5
 800ac90:	0800beef 	.word	0x0800beef

0800ac94 <__sfputc_r>:
 800ac94:	6893      	ldr	r3, [r2, #8]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	b410      	push	{r4}
 800ac9c:	6093      	str	r3, [r2, #8]
 800ac9e:	da08      	bge.n	800acb2 <__sfputc_r+0x1e>
 800aca0:	6994      	ldr	r4, [r2, #24]
 800aca2:	42a3      	cmp	r3, r4
 800aca4:	db01      	blt.n	800acaa <__sfputc_r+0x16>
 800aca6:	290a      	cmp	r1, #10
 800aca8:	d103      	bne.n	800acb2 <__sfputc_r+0x1e>
 800acaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acae:	f7fd baee 	b.w	800828e <__swbuf_r>
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	1c58      	adds	r0, r3, #1
 800acb6:	6010      	str	r0, [r2, #0]
 800acb8:	7019      	strb	r1, [r3, #0]
 800acba:	4608      	mov	r0, r1
 800acbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <__sfputs_r>:
 800acc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	18d5      	adds	r5, r2, r3
 800accc:	42ac      	cmp	r4, r5
 800acce:	d101      	bne.n	800acd4 <__sfputs_r+0x12>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e007      	b.n	800ace4 <__sfputs_r+0x22>
 800acd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd8:	463a      	mov	r2, r7
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff ffda 	bl	800ac94 <__sfputc_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d1f3      	bne.n	800accc <__sfputs_r+0xa>
 800ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ace8 <_vfiprintf_r>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	460d      	mov	r5, r1
 800acee:	b09d      	sub	sp, #116	@ 0x74
 800acf0:	4614      	mov	r4, r2
 800acf2:	4698      	mov	r8, r3
 800acf4:	4606      	mov	r6, r0
 800acf6:	b118      	cbz	r0, 800ad00 <_vfiprintf_r+0x18>
 800acf8:	6a03      	ldr	r3, [r0, #32]
 800acfa:	b90b      	cbnz	r3, 800ad00 <_vfiprintf_r+0x18>
 800acfc:	f7fd f99c 	bl	8008038 <__sinit>
 800ad00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad02:	07d9      	lsls	r1, r3, #31
 800ad04:	d405      	bmi.n	800ad12 <_vfiprintf_r+0x2a>
 800ad06:	89ab      	ldrh	r3, [r5, #12]
 800ad08:	059a      	lsls	r2, r3, #22
 800ad0a:	d402      	bmi.n	800ad12 <_vfiprintf_r+0x2a>
 800ad0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad0e:	f7fd fbd0 	bl	80084b2 <__retarget_lock_acquire_recursive>
 800ad12:	89ab      	ldrh	r3, [r5, #12]
 800ad14:	071b      	lsls	r3, r3, #28
 800ad16:	d501      	bpl.n	800ad1c <_vfiprintf_r+0x34>
 800ad18:	692b      	ldr	r3, [r5, #16]
 800ad1a:	b99b      	cbnz	r3, 800ad44 <_vfiprintf_r+0x5c>
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7fd faf4 	bl	800830c <__swsetup_r>
 800ad24:	b170      	cbz	r0, 800ad44 <_vfiprintf_r+0x5c>
 800ad26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad28:	07dc      	lsls	r4, r3, #31
 800ad2a:	d504      	bpl.n	800ad36 <_vfiprintf_r+0x4e>
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad30:	b01d      	add	sp, #116	@ 0x74
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	0598      	lsls	r0, r3, #22
 800ad3a:	d4f7      	bmi.n	800ad2c <_vfiprintf_r+0x44>
 800ad3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad3e:	f7fd fbb9 	bl	80084b4 <__retarget_lock_release_recursive>
 800ad42:	e7f3      	b.n	800ad2c <_vfiprintf_r+0x44>
 800ad44:	2300      	movs	r3, #0
 800ad46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad48:	2320      	movs	r3, #32
 800ad4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad52:	2330      	movs	r3, #48	@ 0x30
 800ad54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af04 <_vfiprintf_r+0x21c>
 800ad58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad5c:	f04f 0901 	mov.w	r9, #1
 800ad60:	4623      	mov	r3, r4
 800ad62:	469a      	mov	sl, r3
 800ad64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad68:	b10a      	cbz	r2, 800ad6e <_vfiprintf_r+0x86>
 800ad6a:	2a25      	cmp	r2, #37	@ 0x25
 800ad6c:	d1f9      	bne.n	800ad62 <_vfiprintf_r+0x7a>
 800ad6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad72:	d00b      	beq.n	800ad8c <_vfiprintf_r+0xa4>
 800ad74:	465b      	mov	r3, fp
 800ad76:	4622      	mov	r2, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f7ff ffa1 	bl	800acc2 <__sfputs_r>
 800ad80:	3001      	adds	r0, #1
 800ad82:	f000 80a7 	beq.w	800aed4 <_vfiprintf_r+0x1ec>
 800ad86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad88:	445a      	add	r2, fp
 800ad8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 809f 	beq.w	800aed4 <_vfiprintf_r+0x1ec>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada0:	f10a 0a01 	add.w	sl, sl, #1
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	9307      	str	r3, [sp, #28]
 800ada8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adac:	931a      	str	r3, [sp, #104]	@ 0x68
 800adae:	4654      	mov	r4, sl
 800adb0:	2205      	movs	r2, #5
 800adb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb6:	4853      	ldr	r0, [pc, #332]	@ (800af04 <_vfiprintf_r+0x21c>)
 800adb8:	f7f5 fa0a 	bl	80001d0 <memchr>
 800adbc:	9a04      	ldr	r2, [sp, #16]
 800adbe:	b9d8      	cbnz	r0, 800adf8 <_vfiprintf_r+0x110>
 800adc0:	06d1      	lsls	r1, r2, #27
 800adc2:	bf44      	itt	mi
 800adc4:	2320      	movmi	r3, #32
 800adc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adca:	0713      	lsls	r3, r2, #28
 800adcc:	bf44      	itt	mi
 800adce:	232b      	movmi	r3, #43	@ 0x2b
 800add0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800add4:	f89a 3000 	ldrb.w	r3, [sl]
 800add8:	2b2a      	cmp	r3, #42	@ 0x2a
 800adda:	d015      	beq.n	800ae08 <_vfiprintf_r+0x120>
 800addc:	9a07      	ldr	r2, [sp, #28]
 800adde:	4654      	mov	r4, sl
 800ade0:	2000      	movs	r0, #0
 800ade2:	f04f 0c0a 	mov.w	ip, #10
 800ade6:	4621      	mov	r1, r4
 800ade8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adec:	3b30      	subs	r3, #48	@ 0x30
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d94b      	bls.n	800ae8a <_vfiprintf_r+0x1a2>
 800adf2:	b1b0      	cbz	r0, 800ae22 <_vfiprintf_r+0x13a>
 800adf4:	9207      	str	r2, [sp, #28]
 800adf6:	e014      	b.n	800ae22 <_vfiprintf_r+0x13a>
 800adf8:	eba0 0308 	sub.w	r3, r0, r8
 800adfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ae00:	4313      	orrs	r3, r2
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	46a2      	mov	sl, r4
 800ae06:	e7d2      	b.n	800adae <_vfiprintf_r+0xc6>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	1d19      	adds	r1, r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	9103      	str	r1, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfbb      	ittet	lt
 800ae14:	425b      	neglt	r3, r3
 800ae16:	f042 0202 	orrlt.w	r2, r2, #2
 800ae1a:	9307      	strge	r3, [sp, #28]
 800ae1c:	9307      	strlt	r3, [sp, #28]
 800ae1e:	bfb8      	it	lt
 800ae20:	9204      	strlt	r2, [sp, #16]
 800ae22:	7823      	ldrb	r3, [r4, #0]
 800ae24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae26:	d10a      	bne.n	800ae3e <_vfiprintf_r+0x156>
 800ae28:	7863      	ldrb	r3, [r4, #1]
 800ae2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae2c:	d132      	bne.n	800ae94 <_vfiprintf_r+0x1ac>
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	1d1a      	adds	r2, r3, #4
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	9203      	str	r2, [sp, #12]
 800ae36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae3a:	3402      	adds	r4, #2
 800ae3c:	9305      	str	r3, [sp, #20]
 800ae3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af14 <_vfiprintf_r+0x22c>
 800ae42:	7821      	ldrb	r1, [r4, #0]
 800ae44:	2203      	movs	r2, #3
 800ae46:	4650      	mov	r0, sl
 800ae48:	f7f5 f9c2 	bl	80001d0 <memchr>
 800ae4c:	b138      	cbz	r0, 800ae5e <_vfiprintf_r+0x176>
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	eba0 000a 	sub.w	r0, r0, sl
 800ae54:	2240      	movs	r2, #64	@ 0x40
 800ae56:	4082      	lsls	r2, r0
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae62:	4829      	ldr	r0, [pc, #164]	@ (800af08 <_vfiprintf_r+0x220>)
 800ae64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae68:	2206      	movs	r2, #6
 800ae6a:	f7f5 f9b1 	bl	80001d0 <memchr>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d03f      	beq.n	800aef2 <_vfiprintf_r+0x20a>
 800ae72:	4b26      	ldr	r3, [pc, #152]	@ (800af0c <_vfiprintf_r+0x224>)
 800ae74:	bb1b      	cbnz	r3, 800aebe <_vfiprintf_r+0x1d6>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	3307      	adds	r3, #7
 800ae7a:	f023 0307 	bic.w	r3, r3, #7
 800ae7e:	3308      	adds	r3, #8
 800ae80:	9303      	str	r3, [sp, #12]
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	443b      	add	r3, r7
 800ae86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae88:	e76a      	b.n	800ad60 <_vfiprintf_r+0x78>
 800ae8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae8e:	460c      	mov	r4, r1
 800ae90:	2001      	movs	r0, #1
 800ae92:	e7a8      	b.n	800ade6 <_vfiprintf_r+0xfe>
 800ae94:	2300      	movs	r3, #0
 800ae96:	3401      	adds	r4, #1
 800ae98:	9305      	str	r3, [sp, #20]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	f04f 0c0a 	mov.w	ip, #10
 800aea0:	4620      	mov	r0, r4
 800aea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea6:	3a30      	subs	r2, #48	@ 0x30
 800aea8:	2a09      	cmp	r2, #9
 800aeaa:	d903      	bls.n	800aeb4 <_vfiprintf_r+0x1cc>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0c6      	beq.n	800ae3e <_vfiprintf_r+0x156>
 800aeb0:	9105      	str	r1, [sp, #20]
 800aeb2:	e7c4      	b.n	800ae3e <_vfiprintf_r+0x156>
 800aeb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb8:	4604      	mov	r4, r0
 800aeba:	2301      	movs	r3, #1
 800aebc:	e7f0      	b.n	800aea0 <_vfiprintf_r+0x1b8>
 800aebe:	ab03      	add	r3, sp, #12
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	462a      	mov	r2, r5
 800aec4:	4b12      	ldr	r3, [pc, #72]	@ (800af10 <_vfiprintf_r+0x228>)
 800aec6:	a904      	add	r1, sp, #16
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7fc fa5d 	bl	8007388 <_printf_float>
 800aece:	4607      	mov	r7, r0
 800aed0:	1c78      	adds	r0, r7, #1
 800aed2:	d1d6      	bne.n	800ae82 <_vfiprintf_r+0x19a>
 800aed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aed6:	07d9      	lsls	r1, r3, #31
 800aed8:	d405      	bmi.n	800aee6 <_vfiprintf_r+0x1fe>
 800aeda:	89ab      	ldrh	r3, [r5, #12]
 800aedc:	059a      	lsls	r2, r3, #22
 800aede:	d402      	bmi.n	800aee6 <_vfiprintf_r+0x1fe>
 800aee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aee2:	f7fd fae7 	bl	80084b4 <__retarget_lock_release_recursive>
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	065b      	lsls	r3, r3, #25
 800aeea:	f53f af1f 	bmi.w	800ad2c <_vfiprintf_r+0x44>
 800aeee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aef0:	e71e      	b.n	800ad30 <_vfiprintf_r+0x48>
 800aef2:	ab03      	add	r3, sp, #12
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	462a      	mov	r2, r5
 800aef8:	4b05      	ldr	r3, [pc, #20]	@ (800af10 <_vfiprintf_r+0x228>)
 800aefa:	a904      	add	r1, sp, #16
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7fc fcdb 	bl	80078b8 <_printf_i>
 800af02:	e7e4      	b.n	800aece <_vfiprintf_r+0x1e6>
 800af04:	0800bee9 	.word	0x0800bee9
 800af08:	0800bef3 	.word	0x0800bef3
 800af0c:	08007389 	.word	0x08007389
 800af10:	0800acc3 	.word	0x0800acc3
 800af14:	0800beef 	.word	0x0800beef

0800af18 <__sflush_r>:
 800af18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	0716      	lsls	r6, r2, #28
 800af22:	4605      	mov	r5, r0
 800af24:	460c      	mov	r4, r1
 800af26:	d454      	bmi.n	800afd2 <__sflush_r+0xba>
 800af28:	684b      	ldr	r3, [r1, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	dc02      	bgt.n	800af34 <__sflush_r+0x1c>
 800af2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af30:	2b00      	cmp	r3, #0
 800af32:	dd48      	ble.n	800afc6 <__sflush_r+0xae>
 800af34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af36:	2e00      	cmp	r6, #0
 800af38:	d045      	beq.n	800afc6 <__sflush_r+0xae>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af40:	682f      	ldr	r7, [r5, #0]
 800af42:	6a21      	ldr	r1, [r4, #32]
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	d030      	beq.n	800afaa <__sflush_r+0x92>
 800af48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	0759      	lsls	r1, r3, #29
 800af4e:	d505      	bpl.n	800af5c <__sflush_r+0x44>
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	1ad2      	subs	r2, r2, r3
 800af54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af56:	b10b      	cbz	r3, 800af5c <__sflush_r+0x44>
 800af58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	2300      	movs	r3, #0
 800af5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af60:	6a21      	ldr	r1, [r4, #32]
 800af62:	4628      	mov	r0, r5
 800af64:	47b0      	blx	r6
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	d106      	bne.n	800af7a <__sflush_r+0x62>
 800af6c:	6829      	ldr	r1, [r5, #0]
 800af6e:	291d      	cmp	r1, #29
 800af70:	d82b      	bhi.n	800afca <__sflush_r+0xb2>
 800af72:	4a2a      	ldr	r2, [pc, #168]	@ (800b01c <__sflush_r+0x104>)
 800af74:	410a      	asrs	r2, r1
 800af76:	07d6      	lsls	r6, r2, #31
 800af78:	d427      	bmi.n	800afca <__sflush_r+0xb2>
 800af7a:	2200      	movs	r2, #0
 800af7c:	6062      	str	r2, [r4, #4]
 800af7e:	04d9      	lsls	r1, r3, #19
 800af80:	6922      	ldr	r2, [r4, #16]
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	d504      	bpl.n	800af90 <__sflush_r+0x78>
 800af86:	1c42      	adds	r2, r0, #1
 800af88:	d101      	bne.n	800af8e <__sflush_r+0x76>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	b903      	cbnz	r3, 800af90 <__sflush_r+0x78>
 800af8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800af90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af92:	602f      	str	r7, [r5, #0]
 800af94:	b1b9      	cbz	r1, 800afc6 <__sflush_r+0xae>
 800af96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9a:	4299      	cmp	r1, r3
 800af9c:	d002      	beq.n	800afa4 <__sflush_r+0x8c>
 800af9e:	4628      	mov	r0, r5
 800afa0:	f7fe f8ea 	bl	8009178 <_free_r>
 800afa4:	2300      	movs	r3, #0
 800afa6:	6363      	str	r3, [r4, #52]	@ 0x34
 800afa8:	e00d      	b.n	800afc6 <__sflush_r+0xae>
 800afaa:	2301      	movs	r3, #1
 800afac:	4628      	mov	r0, r5
 800afae:	47b0      	blx	r6
 800afb0:	4602      	mov	r2, r0
 800afb2:	1c50      	adds	r0, r2, #1
 800afb4:	d1c9      	bne.n	800af4a <__sflush_r+0x32>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0c6      	beq.n	800af4a <__sflush_r+0x32>
 800afbc:	2b1d      	cmp	r3, #29
 800afbe:	d001      	beq.n	800afc4 <__sflush_r+0xac>
 800afc0:	2b16      	cmp	r3, #22
 800afc2:	d11e      	bne.n	800b002 <__sflush_r+0xea>
 800afc4:	602f      	str	r7, [r5, #0]
 800afc6:	2000      	movs	r0, #0
 800afc8:	e022      	b.n	800b010 <__sflush_r+0xf8>
 800afca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afce:	b21b      	sxth	r3, r3
 800afd0:	e01b      	b.n	800b00a <__sflush_r+0xf2>
 800afd2:	690f      	ldr	r7, [r1, #16]
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	d0f6      	beq.n	800afc6 <__sflush_r+0xae>
 800afd8:	0793      	lsls	r3, r2, #30
 800afda:	680e      	ldr	r6, [r1, #0]
 800afdc:	bf08      	it	eq
 800afde:	694b      	ldreq	r3, [r1, #20]
 800afe0:	600f      	str	r7, [r1, #0]
 800afe2:	bf18      	it	ne
 800afe4:	2300      	movne	r3, #0
 800afe6:	eba6 0807 	sub.w	r8, r6, r7
 800afea:	608b      	str	r3, [r1, #8]
 800afec:	f1b8 0f00 	cmp.w	r8, #0
 800aff0:	dde9      	ble.n	800afc6 <__sflush_r+0xae>
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aff6:	4643      	mov	r3, r8
 800aff8:	463a      	mov	r2, r7
 800affa:	4628      	mov	r0, r5
 800affc:	47b0      	blx	r6
 800affe:	2800      	cmp	r0, #0
 800b000:	dc08      	bgt.n	800b014 <__sflush_r+0xfc>
 800b002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	4407      	add	r7, r0
 800b016:	eba8 0800 	sub.w	r8, r8, r0
 800b01a:	e7e7      	b.n	800afec <__sflush_r+0xd4>
 800b01c:	dfbffffe 	.word	0xdfbffffe

0800b020 <_fflush_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	690b      	ldr	r3, [r1, #16]
 800b024:	4605      	mov	r5, r0
 800b026:	460c      	mov	r4, r1
 800b028:	b913      	cbnz	r3, 800b030 <_fflush_r+0x10>
 800b02a:	2500      	movs	r5, #0
 800b02c:	4628      	mov	r0, r5
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	b118      	cbz	r0, 800b03a <_fflush_r+0x1a>
 800b032:	6a03      	ldr	r3, [r0, #32]
 800b034:	b90b      	cbnz	r3, 800b03a <_fflush_r+0x1a>
 800b036:	f7fc ffff 	bl	8008038 <__sinit>
 800b03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0f3      	beq.n	800b02a <_fflush_r+0xa>
 800b042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b044:	07d0      	lsls	r0, r2, #31
 800b046:	d404      	bmi.n	800b052 <_fflush_r+0x32>
 800b048:	0599      	lsls	r1, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_fflush_r+0x32>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f7fd fa30 	bl	80084b2 <__retarget_lock_acquire_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	4621      	mov	r1, r4
 800b056:	f7ff ff5f 	bl	800af18 <__sflush_r>
 800b05a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b05c:	07da      	lsls	r2, r3, #31
 800b05e:	4605      	mov	r5, r0
 800b060:	d4e4      	bmi.n	800b02c <_fflush_r+0xc>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d4e1      	bmi.n	800b02c <_fflush_r+0xc>
 800b068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06a:	f7fd fa23 	bl	80084b4 <__retarget_lock_release_recursive>
 800b06e:	e7dd      	b.n	800b02c <_fflush_r+0xc>

0800b070 <__swhatbuf_r>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	460c      	mov	r4, r1
 800b074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b078:	2900      	cmp	r1, #0
 800b07a:	b096      	sub	sp, #88	@ 0x58
 800b07c:	4615      	mov	r5, r2
 800b07e:	461e      	mov	r6, r3
 800b080:	da0d      	bge.n	800b09e <__swhatbuf_r+0x2e>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b088:	f04f 0100 	mov.w	r1, #0
 800b08c:	bf14      	ite	ne
 800b08e:	2340      	movne	r3, #64	@ 0x40
 800b090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b094:	2000      	movs	r0, #0
 800b096:	6031      	str	r1, [r6, #0]
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	b016      	add	sp, #88	@ 0x58
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
 800b09e:	466a      	mov	r2, sp
 800b0a0:	f000 f874 	bl	800b18c <_fstat_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	dbec      	blt.n	800b082 <__swhatbuf_r+0x12>
 800b0a8:	9901      	ldr	r1, [sp, #4]
 800b0aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0b2:	4259      	negs	r1, r3
 800b0b4:	4159      	adcs	r1, r3
 800b0b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0ba:	e7eb      	b.n	800b094 <__swhatbuf_r+0x24>

0800b0bc <__smakebuf_r>:
 800b0bc:	898b      	ldrh	r3, [r1, #12]
 800b0be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c0:	079d      	lsls	r5, r3, #30
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	d507      	bpl.n	800b0d8 <__smakebuf_r+0x1c>
 800b0c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	6123      	str	r3, [r4, #16]
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	b003      	add	sp, #12
 800b0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d8:	ab01      	add	r3, sp, #4
 800b0da:	466a      	mov	r2, sp
 800b0dc:	f7ff ffc8 	bl	800b070 <__swhatbuf_r>
 800b0e0:	9f00      	ldr	r7, [sp, #0]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7fe f8ba 	bl	8009260 <_malloc_r>
 800b0ec:	b948      	cbnz	r0, 800b102 <__smakebuf_r+0x46>
 800b0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f2:	059a      	lsls	r2, r3, #22
 800b0f4:	d4ee      	bmi.n	800b0d4 <__smakebuf_r+0x18>
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	f043 0302 	orr.w	r3, r3, #2
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	e7e2      	b.n	800b0c8 <__smakebuf_r+0xc>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	6020      	str	r0, [r4, #0]
 800b106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b112:	b15b      	cbz	r3, 800b12c <__smakebuf_r+0x70>
 800b114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 f849 	bl	800b1b0 <_isatty_r>
 800b11e:	b128      	cbz	r0, 800b12c <__smakebuf_r+0x70>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	431d      	orrs	r5, r3
 800b130:	81a5      	strh	r5, [r4, #12]
 800b132:	e7cf      	b.n	800b0d4 <__smakebuf_r+0x18>

0800b134 <memmove>:
 800b134:	4288      	cmp	r0, r1
 800b136:	b510      	push	{r4, lr}
 800b138:	eb01 0402 	add.w	r4, r1, r2
 800b13c:	d902      	bls.n	800b144 <memmove+0x10>
 800b13e:	4284      	cmp	r4, r0
 800b140:	4623      	mov	r3, r4
 800b142:	d807      	bhi.n	800b154 <memmove+0x20>
 800b144:	1e43      	subs	r3, r0, #1
 800b146:	42a1      	cmp	r1, r4
 800b148:	d008      	beq.n	800b15c <memmove+0x28>
 800b14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b152:	e7f8      	b.n	800b146 <memmove+0x12>
 800b154:	4402      	add	r2, r0
 800b156:	4601      	mov	r1, r0
 800b158:	428a      	cmp	r2, r1
 800b15a:	d100      	bne.n	800b15e <memmove+0x2a>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b166:	e7f7      	b.n	800b158 <memmove+0x24>

0800b168 <strncmp>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	b16a      	cbz	r2, 800b188 <strncmp+0x20>
 800b16c:	3901      	subs	r1, #1
 800b16e:	1884      	adds	r4, r0, r2
 800b170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b178:	429a      	cmp	r2, r3
 800b17a:	d103      	bne.n	800b184 <strncmp+0x1c>
 800b17c:	42a0      	cmp	r0, r4
 800b17e:	d001      	beq.n	800b184 <strncmp+0x1c>
 800b180:	2a00      	cmp	r2, #0
 800b182:	d1f5      	bne.n	800b170 <strncmp+0x8>
 800b184:	1ad0      	subs	r0, r2, r3
 800b186:	bd10      	pop	{r4, pc}
 800b188:	4610      	mov	r0, r2
 800b18a:	e7fc      	b.n	800b186 <strncmp+0x1e>

0800b18c <_fstat_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	@ (800b1ac <_fstat_r+0x20>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f7f6 f9bd 	bl	8001518 <_fstat>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	d102      	bne.n	800b1a8 <_fstat_r+0x1c>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	b103      	cbz	r3, 800b1a8 <_fstat_r+0x1c>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200016ec 	.word	0x200016ec

0800b1b0 <_isatty_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d06      	ldr	r5, [pc, #24]	@ (800b1cc <_isatty_r+0x1c>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	f7f6 f9bc 	bl	8001538 <_isatty>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_isatty_r+0x1a>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_isatty_r+0x1a>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	200016ec 	.word	0x200016ec

0800b1d0 <_sbrk_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d06      	ldr	r5, [pc, #24]	@ (800b1ec <_sbrk_r+0x1c>)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4608      	mov	r0, r1
 800b1da:	602b      	str	r3, [r5, #0]
 800b1dc:	f7f6 f9c4 	bl	8001568 <_sbrk>
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	d102      	bne.n	800b1ea <_sbrk_r+0x1a>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	b103      	cbz	r3, 800b1ea <_sbrk_r+0x1a>
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	200016ec 	.word	0x200016ec

0800b1f0 <nan>:
 800b1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b1f8 <nan+0x8>
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	7ff80000 	.word	0x7ff80000

0800b200 <__assert_func>:
 800b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b202:	4614      	mov	r4, r2
 800b204:	461a      	mov	r2, r3
 800b206:	4b09      	ldr	r3, [pc, #36]	@ (800b22c <__assert_func+0x2c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4605      	mov	r5, r0
 800b20c:	68d8      	ldr	r0, [r3, #12]
 800b20e:	b954      	cbnz	r4, 800b226 <__assert_func+0x26>
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <__assert_func+0x30>)
 800b212:	461c      	mov	r4, r3
 800b214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b218:	9100      	str	r1, [sp, #0]
 800b21a:	462b      	mov	r3, r5
 800b21c:	4905      	ldr	r1, [pc, #20]	@ (800b234 <__assert_func+0x34>)
 800b21e:	f000 fba7 	bl	800b970 <fiprintf>
 800b222:	f000 fbb7 	bl	800b994 <abort>
 800b226:	4b04      	ldr	r3, [pc, #16]	@ (800b238 <__assert_func+0x38>)
 800b228:	e7f4      	b.n	800b214 <__assert_func+0x14>
 800b22a:	bf00      	nop
 800b22c:	2000001c 	.word	0x2000001c
 800b230:	0800bf3d 	.word	0x0800bf3d
 800b234:	0800bf0f 	.word	0x0800bf0f
 800b238:	0800bf02 	.word	0x0800bf02

0800b23c <_calloc_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	fba1 5402 	umull	r5, r4, r1, r2
 800b242:	b93c      	cbnz	r4, 800b254 <_calloc_r+0x18>
 800b244:	4629      	mov	r1, r5
 800b246:	f7fe f80b 	bl	8009260 <_malloc_r>
 800b24a:	4606      	mov	r6, r0
 800b24c:	b928      	cbnz	r0, 800b25a <_calloc_r+0x1e>
 800b24e:	2600      	movs	r6, #0
 800b250:	4630      	mov	r0, r6
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	220c      	movs	r2, #12
 800b256:	6002      	str	r2, [r0, #0]
 800b258:	e7f9      	b.n	800b24e <_calloc_r+0x12>
 800b25a:	462a      	mov	r2, r5
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7fd f8ab 	bl	80083b8 <memset>
 800b262:	e7f5      	b.n	800b250 <_calloc_r+0x14>

0800b264 <rshift>:
 800b264:	6903      	ldr	r3, [r0, #16]
 800b266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b26a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b26e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b272:	f100 0414 	add.w	r4, r0, #20
 800b276:	dd45      	ble.n	800b304 <rshift+0xa0>
 800b278:	f011 011f 	ands.w	r1, r1, #31
 800b27c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b284:	d10c      	bne.n	800b2a0 <rshift+0x3c>
 800b286:	f100 0710 	add.w	r7, r0, #16
 800b28a:	4629      	mov	r1, r5
 800b28c:	42b1      	cmp	r1, r6
 800b28e:	d334      	bcc.n	800b2fa <rshift+0x96>
 800b290:	1a9b      	subs	r3, r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	1eea      	subs	r2, r5, #3
 800b296:	4296      	cmp	r6, r2
 800b298:	bf38      	it	cc
 800b29a:	2300      	movcc	r3, #0
 800b29c:	4423      	add	r3, r4
 800b29e:	e015      	b.n	800b2cc <rshift+0x68>
 800b2a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2a4:	f1c1 0820 	rsb	r8, r1, #32
 800b2a8:	40cf      	lsrs	r7, r1
 800b2aa:	f105 0e04 	add.w	lr, r5, #4
 800b2ae:	46a1      	mov	r9, r4
 800b2b0:	4576      	cmp	r6, lr
 800b2b2:	46f4      	mov	ip, lr
 800b2b4:	d815      	bhi.n	800b2e2 <rshift+0x7e>
 800b2b6:	1a9a      	subs	r2, r3, r2
 800b2b8:	0092      	lsls	r2, r2, #2
 800b2ba:	3a04      	subs	r2, #4
 800b2bc:	3501      	adds	r5, #1
 800b2be:	42ae      	cmp	r6, r5
 800b2c0:	bf38      	it	cc
 800b2c2:	2200      	movcc	r2, #0
 800b2c4:	18a3      	adds	r3, r4, r2
 800b2c6:	50a7      	str	r7, [r4, r2]
 800b2c8:	b107      	cbz	r7, 800b2cc <rshift+0x68>
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	1b1a      	subs	r2, r3, r4
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2d4:	bf08      	it	eq
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	6102      	str	r2, [r0, #16]
 800b2da:	bf08      	it	eq
 800b2dc:	6143      	streq	r3, [r0, #20]
 800b2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2e2:	f8dc c000 	ldr.w	ip, [ip]
 800b2e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2ea:	ea4c 0707 	orr.w	r7, ip, r7
 800b2ee:	f849 7b04 	str.w	r7, [r9], #4
 800b2f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2f6:	40cf      	lsrs	r7, r1
 800b2f8:	e7da      	b.n	800b2b0 <rshift+0x4c>
 800b2fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800b302:	e7c3      	b.n	800b28c <rshift+0x28>
 800b304:	4623      	mov	r3, r4
 800b306:	e7e1      	b.n	800b2cc <rshift+0x68>

0800b308 <__hexdig_fun>:
 800b308:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	d802      	bhi.n	800b316 <__hexdig_fun+0xe>
 800b310:	3820      	subs	r0, #32
 800b312:	b2c0      	uxtb	r0, r0
 800b314:	4770      	bx	lr
 800b316:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d801      	bhi.n	800b322 <__hexdig_fun+0x1a>
 800b31e:	3847      	subs	r0, #71	@ 0x47
 800b320:	e7f7      	b.n	800b312 <__hexdig_fun+0xa>
 800b322:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b326:	2b05      	cmp	r3, #5
 800b328:	d801      	bhi.n	800b32e <__hexdig_fun+0x26>
 800b32a:	3827      	subs	r0, #39	@ 0x27
 800b32c:	e7f1      	b.n	800b312 <__hexdig_fun+0xa>
 800b32e:	2000      	movs	r0, #0
 800b330:	4770      	bx	lr
	...

0800b334 <__gethex>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	b085      	sub	sp, #20
 800b33a:	468a      	mov	sl, r1
 800b33c:	9302      	str	r3, [sp, #8]
 800b33e:	680b      	ldr	r3, [r1, #0]
 800b340:	9001      	str	r0, [sp, #4]
 800b342:	4690      	mov	r8, r2
 800b344:	1c9c      	adds	r4, r3, #2
 800b346:	46a1      	mov	r9, r4
 800b348:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b34c:	2830      	cmp	r0, #48	@ 0x30
 800b34e:	d0fa      	beq.n	800b346 <__gethex+0x12>
 800b350:	eba9 0303 	sub.w	r3, r9, r3
 800b354:	f1a3 0b02 	sub.w	fp, r3, #2
 800b358:	f7ff ffd6 	bl	800b308 <__hexdig_fun>
 800b35c:	4605      	mov	r5, r0
 800b35e:	2800      	cmp	r0, #0
 800b360:	d168      	bne.n	800b434 <__gethex+0x100>
 800b362:	49a0      	ldr	r1, [pc, #640]	@ (800b5e4 <__gethex+0x2b0>)
 800b364:	2201      	movs	r2, #1
 800b366:	4648      	mov	r0, r9
 800b368:	f7ff fefe 	bl	800b168 <strncmp>
 800b36c:	4607      	mov	r7, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d167      	bne.n	800b442 <__gethex+0x10e>
 800b372:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b376:	4626      	mov	r6, r4
 800b378:	f7ff ffc6 	bl	800b308 <__hexdig_fun>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d062      	beq.n	800b446 <__gethex+0x112>
 800b380:	4623      	mov	r3, r4
 800b382:	7818      	ldrb	r0, [r3, #0]
 800b384:	2830      	cmp	r0, #48	@ 0x30
 800b386:	4699      	mov	r9, r3
 800b388:	f103 0301 	add.w	r3, r3, #1
 800b38c:	d0f9      	beq.n	800b382 <__gethex+0x4e>
 800b38e:	f7ff ffbb 	bl	800b308 <__hexdig_fun>
 800b392:	fab0 f580 	clz	r5, r0
 800b396:	096d      	lsrs	r5, r5, #5
 800b398:	f04f 0b01 	mov.w	fp, #1
 800b39c:	464a      	mov	r2, r9
 800b39e:	4616      	mov	r6, r2
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	7830      	ldrb	r0, [r6, #0]
 800b3a4:	f7ff ffb0 	bl	800b308 <__hexdig_fun>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1f8      	bne.n	800b39e <__gethex+0x6a>
 800b3ac:	498d      	ldr	r1, [pc, #564]	@ (800b5e4 <__gethex+0x2b0>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff fed9 	bl	800b168 <strncmp>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d13f      	bne.n	800b43a <__gethex+0x106>
 800b3ba:	b944      	cbnz	r4, 800b3ce <__gethex+0x9a>
 800b3bc:	1c74      	adds	r4, r6, #1
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	3201      	adds	r2, #1
 800b3c4:	7830      	ldrb	r0, [r6, #0]
 800b3c6:	f7ff ff9f 	bl	800b308 <__hexdig_fun>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d1f8      	bne.n	800b3c0 <__gethex+0x8c>
 800b3ce:	1ba4      	subs	r4, r4, r6
 800b3d0:	00a7      	lsls	r7, r4, #2
 800b3d2:	7833      	ldrb	r3, [r6, #0]
 800b3d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b3d8:	2b50      	cmp	r3, #80	@ 0x50
 800b3da:	d13e      	bne.n	800b45a <__gethex+0x126>
 800b3dc:	7873      	ldrb	r3, [r6, #1]
 800b3de:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3e0:	d033      	beq.n	800b44a <__gethex+0x116>
 800b3e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3e4:	d034      	beq.n	800b450 <__gethex+0x11c>
 800b3e6:	1c71      	adds	r1, r6, #1
 800b3e8:	2400      	movs	r4, #0
 800b3ea:	7808      	ldrb	r0, [r1, #0]
 800b3ec:	f7ff ff8c 	bl	800b308 <__hexdig_fun>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b18      	cmp	r3, #24
 800b3f6:	d830      	bhi.n	800b45a <__gethex+0x126>
 800b3f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b3fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b400:	f7ff ff82 	bl	800b308 <__hexdig_fun>
 800b404:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b408:	fa5f fc8c 	uxtb.w	ip, ip
 800b40c:	f1bc 0f18 	cmp.w	ip, #24
 800b410:	f04f 030a 	mov.w	r3, #10
 800b414:	d91e      	bls.n	800b454 <__gethex+0x120>
 800b416:	b104      	cbz	r4, 800b41a <__gethex+0xe6>
 800b418:	4252      	negs	r2, r2
 800b41a:	4417      	add	r7, r2
 800b41c:	f8ca 1000 	str.w	r1, [sl]
 800b420:	b1ed      	cbz	r5, 800b45e <__gethex+0x12a>
 800b422:	f1bb 0f00 	cmp.w	fp, #0
 800b426:	bf0c      	ite	eq
 800b428:	2506      	moveq	r5, #6
 800b42a:	2500      	movne	r5, #0
 800b42c:	4628      	mov	r0, r5
 800b42e:	b005      	add	sp, #20
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b434:	2500      	movs	r5, #0
 800b436:	462c      	mov	r4, r5
 800b438:	e7b0      	b.n	800b39c <__gethex+0x68>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d1c7      	bne.n	800b3ce <__gethex+0x9a>
 800b43e:	4627      	mov	r7, r4
 800b440:	e7c7      	b.n	800b3d2 <__gethex+0x9e>
 800b442:	464e      	mov	r6, r9
 800b444:	462f      	mov	r7, r5
 800b446:	2501      	movs	r5, #1
 800b448:	e7c3      	b.n	800b3d2 <__gethex+0x9e>
 800b44a:	2400      	movs	r4, #0
 800b44c:	1cb1      	adds	r1, r6, #2
 800b44e:	e7cc      	b.n	800b3ea <__gethex+0xb6>
 800b450:	2401      	movs	r4, #1
 800b452:	e7fb      	b.n	800b44c <__gethex+0x118>
 800b454:	fb03 0002 	mla	r0, r3, r2, r0
 800b458:	e7ce      	b.n	800b3f8 <__gethex+0xc4>
 800b45a:	4631      	mov	r1, r6
 800b45c:	e7de      	b.n	800b41c <__gethex+0xe8>
 800b45e:	eba6 0309 	sub.w	r3, r6, r9
 800b462:	3b01      	subs	r3, #1
 800b464:	4629      	mov	r1, r5
 800b466:	2b07      	cmp	r3, #7
 800b468:	dc0a      	bgt.n	800b480 <__gethex+0x14c>
 800b46a:	9801      	ldr	r0, [sp, #4]
 800b46c:	f7fd ff84 	bl	8009378 <_Balloc>
 800b470:	4604      	mov	r4, r0
 800b472:	b940      	cbnz	r0, 800b486 <__gethex+0x152>
 800b474:	4b5c      	ldr	r3, [pc, #368]	@ (800b5e8 <__gethex+0x2b4>)
 800b476:	4602      	mov	r2, r0
 800b478:	21e4      	movs	r1, #228	@ 0xe4
 800b47a:	485c      	ldr	r0, [pc, #368]	@ (800b5ec <__gethex+0x2b8>)
 800b47c:	f7ff fec0 	bl	800b200 <__assert_func>
 800b480:	3101      	adds	r1, #1
 800b482:	105b      	asrs	r3, r3, #1
 800b484:	e7ef      	b.n	800b466 <__gethex+0x132>
 800b486:	f100 0a14 	add.w	sl, r0, #20
 800b48a:	2300      	movs	r3, #0
 800b48c:	4655      	mov	r5, sl
 800b48e:	469b      	mov	fp, r3
 800b490:	45b1      	cmp	r9, r6
 800b492:	d337      	bcc.n	800b504 <__gethex+0x1d0>
 800b494:	f845 bb04 	str.w	fp, [r5], #4
 800b498:	eba5 050a 	sub.w	r5, r5, sl
 800b49c:	10ad      	asrs	r5, r5, #2
 800b49e:	6125      	str	r5, [r4, #16]
 800b4a0:	4658      	mov	r0, fp
 800b4a2:	f7fe f85b 	bl	800955c <__hi0bits>
 800b4a6:	016d      	lsls	r5, r5, #5
 800b4a8:	f8d8 6000 	ldr.w	r6, [r8]
 800b4ac:	1a2d      	subs	r5, r5, r0
 800b4ae:	42b5      	cmp	r5, r6
 800b4b0:	dd54      	ble.n	800b55c <__gethex+0x228>
 800b4b2:	1bad      	subs	r5, r5, r6
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7fe fbef 	bl	8009c9a <__any_on>
 800b4bc:	4681      	mov	r9, r0
 800b4be:	b178      	cbz	r0, 800b4e0 <__gethex+0x1ac>
 800b4c0:	1e6b      	subs	r3, r5, #1
 800b4c2:	1159      	asrs	r1, r3, #5
 800b4c4:	f003 021f 	and.w	r2, r3, #31
 800b4c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4cc:	f04f 0901 	mov.w	r9, #1
 800b4d0:	fa09 f202 	lsl.w	r2, r9, r2
 800b4d4:	420a      	tst	r2, r1
 800b4d6:	d003      	beq.n	800b4e0 <__gethex+0x1ac>
 800b4d8:	454b      	cmp	r3, r9
 800b4da:	dc36      	bgt.n	800b54a <__gethex+0x216>
 800b4dc:	f04f 0902 	mov.w	r9, #2
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff febe 	bl	800b264 <rshift>
 800b4e8:	442f      	add	r7, r5
 800b4ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4ee:	42bb      	cmp	r3, r7
 800b4f0:	da42      	bge.n	800b578 <__gethex+0x244>
 800b4f2:	9801      	ldr	r0, [sp, #4]
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f7fd ff7f 	bl	80093f8 <_Bfree>
 800b4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	25a3      	movs	r5, #163	@ 0xa3
 800b502:	e793      	b.n	800b42c <__gethex+0xf8>
 800b504:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b508:	2a2e      	cmp	r2, #46	@ 0x2e
 800b50a:	d012      	beq.n	800b532 <__gethex+0x1fe>
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d104      	bne.n	800b51a <__gethex+0x1e6>
 800b510:	f845 bb04 	str.w	fp, [r5], #4
 800b514:	f04f 0b00 	mov.w	fp, #0
 800b518:	465b      	mov	r3, fp
 800b51a:	7830      	ldrb	r0, [r6, #0]
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	f7ff fef3 	bl	800b308 <__hexdig_fun>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	f000 000f 	and.w	r0, r0, #15
 800b528:	4098      	lsls	r0, r3
 800b52a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b52e:	3304      	adds	r3, #4
 800b530:	e7ae      	b.n	800b490 <__gethex+0x15c>
 800b532:	45b1      	cmp	r9, r6
 800b534:	d8ea      	bhi.n	800b50c <__gethex+0x1d8>
 800b536:	492b      	ldr	r1, [pc, #172]	@ (800b5e4 <__gethex+0x2b0>)
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff fe13 	bl	800b168 <strncmp>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	2800      	cmp	r0, #0
 800b546:	d1e1      	bne.n	800b50c <__gethex+0x1d8>
 800b548:	e7a2      	b.n	800b490 <__gethex+0x15c>
 800b54a:	1ea9      	subs	r1, r5, #2
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fe fba4 	bl	8009c9a <__any_on>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0c2      	beq.n	800b4dc <__gethex+0x1a8>
 800b556:	f04f 0903 	mov.w	r9, #3
 800b55a:	e7c1      	b.n	800b4e0 <__gethex+0x1ac>
 800b55c:	da09      	bge.n	800b572 <__gethex+0x23e>
 800b55e:	1b75      	subs	r5, r6, r5
 800b560:	4621      	mov	r1, r4
 800b562:	9801      	ldr	r0, [sp, #4]
 800b564:	462a      	mov	r2, r5
 800b566:	f7fe f95f 	bl	8009828 <__lshift>
 800b56a:	1b7f      	subs	r7, r7, r5
 800b56c:	4604      	mov	r4, r0
 800b56e:	f100 0a14 	add.w	sl, r0, #20
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	e7b8      	b.n	800b4ea <__gethex+0x1b6>
 800b578:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b57c:	42bd      	cmp	r5, r7
 800b57e:	dd6f      	ble.n	800b660 <__gethex+0x32c>
 800b580:	1bed      	subs	r5, r5, r7
 800b582:	42ae      	cmp	r6, r5
 800b584:	dc34      	bgt.n	800b5f0 <__gethex+0x2bc>
 800b586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d022      	beq.n	800b5d4 <__gethex+0x2a0>
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d024      	beq.n	800b5dc <__gethex+0x2a8>
 800b592:	2b01      	cmp	r3, #1
 800b594:	d115      	bne.n	800b5c2 <__gethex+0x28e>
 800b596:	42ae      	cmp	r6, r5
 800b598:	d113      	bne.n	800b5c2 <__gethex+0x28e>
 800b59a:	2e01      	cmp	r6, #1
 800b59c:	d10b      	bne.n	800b5b6 <__gethex+0x282>
 800b59e:	9a02      	ldr	r2, [sp, #8]
 800b5a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	f8ca 3000 	str.w	r3, [sl]
 800b5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b0:	2562      	movs	r5, #98	@ 0x62
 800b5b2:	601c      	str	r4, [r3, #0]
 800b5b4:	e73a      	b.n	800b42c <__gethex+0xf8>
 800b5b6:	1e71      	subs	r1, r6, #1
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7fe fb6e 	bl	8009c9a <__any_on>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d1ed      	bne.n	800b59e <__gethex+0x26a>
 800b5c2:	9801      	ldr	r0, [sp, #4]
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7fd ff17 	bl	80093f8 <_Bfree>
 800b5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	2550      	movs	r5, #80	@ 0x50
 800b5d2:	e72b      	b.n	800b42c <__gethex+0xf8>
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f3      	bne.n	800b5c2 <__gethex+0x28e>
 800b5da:	e7e0      	b.n	800b59e <__gethex+0x26a>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1dd      	bne.n	800b59e <__gethex+0x26a>
 800b5e2:	e7ee      	b.n	800b5c2 <__gethex+0x28e>
 800b5e4:	0800bd90 	.word	0x0800bd90
 800b5e8:	0800bc28 	.word	0x0800bc28
 800b5ec:	0800bf3e 	.word	0x0800bf3e
 800b5f0:	1e6f      	subs	r7, r5, #1
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d130      	bne.n	800b65a <__gethex+0x326>
 800b5f8:	b127      	cbz	r7, 800b604 <__gethex+0x2d0>
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7fe fb4c 	bl	8009c9a <__any_on>
 800b602:	4681      	mov	r9, r0
 800b604:	117a      	asrs	r2, r7, #5
 800b606:	2301      	movs	r3, #1
 800b608:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b60c:	f007 071f 	and.w	r7, r7, #31
 800b610:	40bb      	lsls	r3, r7
 800b612:	4213      	tst	r3, r2
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	bf18      	it	ne
 800b61a:	f049 0902 	orrne.w	r9, r9, #2
 800b61e:	f7ff fe21 	bl	800b264 <rshift>
 800b622:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b626:	1b76      	subs	r6, r6, r5
 800b628:	2502      	movs	r5, #2
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	d047      	beq.n	800b6c0 <__gethex+0x38c>
 800b630:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b634:	2b02      	cmp	r3, #2
 800b636:	d015      	beq.n	800b664 <__gethex+0x330>
 800b638:	2b03      	cmp	r3, #3
 800b63a:	d017      	beq.n	800b66c <__gethex+0x338>
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d109      	bne.n	800b654 <__gethex+0x320>
 800b640:	f019 0f02 	tst.w	r9, #2
 800b644:	d006      	beq.n	800b654 <__gethex+0x320>
 800b646:	f8da 3000 	ldr.w	r3, [sl]
 800b64a:	ea49 0903 	orr.w	r9, r9, r3
 800b64e:	f019 0f01 	tst.w	r9, #1
 800b652:	d10e      	bne.n	800b672 <__gethex+0x33e>
 800b654:	f045 0510 	orr.w	r5, r5, #16
 800b658:	e032      	b.n	800b6c0 <__gethex+0x38c>
 800b65a:	f04f 0901 	mov.w	r9, #1
 800b65e:	e7d1      	b.n	800b604 <__gethex+0x2d0>
 800b660:	2501      	movs	r5, #1
 800b662:	e7e2      	b.n	800b62a <__gethex+0x2f6>
 800b664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b666:	f1c3 0301 	rsb	r3, r3, #1
 800b66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0f0      	beq.n	800b654 <__gethex+0x320>
 800b672:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b676:	f104 0314 	add.w	r3, r4, #20
 800b67a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b67e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b682:	f04f 0c00 	mov.w	ip, #0
 800b686:	4618      	mov	r0, r3
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b690:	d01b      	beq.n	800b6ca <__gethex+0x396>
 800b692:	3201      	adds	r2, #1
 800b694:	6002      	str	r2, [r0, #0]
 800b696:	2d02      	cmp	r5, #2
 800b698:	f104 0314 	add.w	r3, r4, #20
 800b69c:	d13c      	bne.n	800b718 <__gethex+0x3e4>
 800b69e:	f8d8 2000 	ldr.w	r2, [r8]
 800b6a2:	3a01      	subs	r2, #1
 800b6a4:	42b2      	cmp	r2, r6
 800b6a6:	d109      	bne.n	800b6bc <__gethex+0x388>
 800b6a8:	1171      	asrs	r1, r6, #5
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6b0:	f006 061f 	and.w	r6, r6, #31
 800b6b4:	fa02 f606 	lsl.w	r6, r2, r6
 800b6b8:	421e      	tst	r6, r3
 800b6ba:	d13a      	bne.n	800b732 <__gethex+0x3fe>
 800b6bc:	f045 0520 	orr.w	r5, r5, #32
 800b6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c2:	601c      	str	r4, [r3, #0]
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	601f      	str	r7, [r3, #0]
 800b6c8:	e6b0      	b.n	800b42c <__gethex+0xf8>
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6d0:	d8d9      	bhi.n	800b686 <__gethex+0x352>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	459b      	cmp	fp, r3
 800b6d6:	db17      	blt.n	800b708 <__gethex+0x3d4>
 800b6d8:	6861      	ldr	r1, [r4, #4]
 800b6da:	9801      	ldr	r0, [sp, #4]
 800b6dc:	3101      	adds	r1, #1
 800b6de:	f7fd fe4b 	bl	8009378 <_Balloc>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	b918      	cbnz	r0, 800b6ee <__gethex+0x3ba>
 800b6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b750 <__gethex+0x41c>)
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	2184      	movs	r1, #132	@ 0x84
 800b6ec:	e6c5      	b.n	800b47a <__gethex+0x146>
 800b6ee:	6922      	ldr	r2, [r4, #16]
 800b6f0:	3202      	adds	r2, #2
 800b6f2:	f104 010c 	add.w	r1, r4, #12
 800b6f6:	0092      	lsls	r2, r2, #2
 800b6f8:	300c      	adds	r0, #12
 800b6fa:	f7fc fedc 	bl	80084b6 <memcpy>
 800b6fe:	4621      	mov	r1, r4
 800b700:	9801      	ldr	r0, [sp, #4]
 800b702:	f7fd fe79 	bl	80093f8 <_Bfree>
 800b706:	464c      	mov	r4, r9
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b710:	6122      	str	r2, [r4, #16]
 800b712:	2201      	movs	r2, #1
 800b714:	615a      	str	r2, [r3, #20]
 800b716:	e7be      	b.n	800b696 <__gethex+0x362>
 800b718:	6922      	ldr	r2, [r4, #16]
 800b71a:	455a      	cmp	r2, fp
 800b71c:	dd0b      	ble.n	800b736 <__gethex+0x402>
 800b71e:	2101      	movs	r1, #1
 800b720:	4620      	mov	r0, r4
 800b722:	f7ff fd9f 	bl	800b264 <rshift>
 800b726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b72a:	3701      	adds	r7, #1
 800b72c:	42bb      	cmp	r3, r7
 800b72e:	f6ff aee0 	blt.w	800b4f2 <__gethex+0x1be>
 800b732:	2501      	movs	r5, #1
 800b734:	e7c2      	b.n	800b6bc <__gethex+0x388>
 800b736:	f016 061f 	ands.w	r6, r6, #31
 800b73a:	d0fa      	beq.n	800b732 <__gethex+0x3fe>
 800b73c:	4453      	add	r3, sl
 800b73e:	f1c6 0620 	rsb	r6, r6, #32
 800b742:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b746:	f7fd ff09 	bl	800955c <__hi0bits>
 800b74a:	42b0      	cmp	r0, r6
 800b74c:	dbe7      	blt.n	800b71e <__gethex+0x3ea>
 800b74e:	e7f0      	b.n	800b732 <__gethex+0x3fe>
 800b750:	0800bc28 	.word	0x0800bc28

0800b754 <L_shift>:
 800b754:	f1c2 0208 	rsb	r2, r2, #8
 800b758:	0092      	lsls	r2, r2, #2
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	f1c2 0620 	rsb	r6, r2, #32
 800b760:	6843      	ldr	r3, [r0, #4]
 800b762:	6804      	ldr	r4, [r0, #0]
 800b764:	fa03 f506 	lsl.w	r5, r3, r6
 800b768:	432c      	orrs	r4, r5
 800b76a:	40d3      	lsrs	r3, r2
 800b76c:	6004      	str	r4, [r0, #0]
 800b76e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b772:	4288      	cmp	r0, r1
 800b774:	d3f4      	bcc.n	800b760 <L_shift+0xc>
 800b776:	bd70      	pop	{r4, r5, r6, pc}

0800b778 <__match>:
 800b778:	b530      	push	{r4, r5, lr}
 800b77a:	6803      	ldr	r3, [r0, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b782:	b914      	cbnz	r4, 800b78a <__match+0x12>
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	bd30      	pop	{r4, r5, pc}
 800b78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b792:	2d19      	cmp	r5, #25
 800b794:	bf98      	it	ls
 800b796:	3220      	addls	r2, #32
 800b798:	42a2      	cmp	r2, r4
 800b79a:	d0f0      	beq.n	800b77e <__match+0x6>
 800b79c:	2000      	movs	r0, #0
 800b79e:	e7f3      	b.n	800b788 <__match+0x10>

0800b7a0 <__hexnan>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	680b      	ldr	r3, [r1, #0]
 800b7a6:	6801      	ldr	r1, [r0, #0]
 800b7a8:	115e      	asrs	r6, r3, #5
 800b7aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7ae:	f013 031f 	ands.w	r3, r3, #31
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	bf18      	it	ne
 800b7b6:	3604      	addne	r6, #4
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	1f37      	subs	r7, r6, #4
 800b7bc:	4682      	mov	sl, r0
 800b7be:	4690      	mov	r8, r2
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7c6:	46b9      	mov	r9, r7
 800b7c8:	463c      	mov	r4, r7
 800b7ca:	9502      	str	r5, [sp, #8]
 800b7cc:	46ab      	mov	fp, r5
 800b7ce:	784a      	ldrb	r2, [r1, #1]
 800b7d0:	1c4b      	adds	r3, r1, #1
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	b342      	cbz	r2, 800b828 <__hexnan+0x88>
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	9105      	str	r1, [sp, #20]
 800b7da:	9204      	str	r2, [sp, #16]
 800b7dc:	f7ff fd94 	bl	800b308 <__hexdig_fun>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d151      	bne.n	800b888 <__hexnan+0xe8>
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	9905      	ldr	r1, [sp, #20]
 800b7e8:	2a20      	cmp	r2, #32
 800b7ea:	d818      	bhi.n	800b81e <__hexnan+0x7e>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	459b      	cmp	fp, r3
 800b7f0:	dd13      	ble.n	800b81a <__hexnan+0x7a>
 800b7f2:	454c      	cmp	r4, r9
 800b7f4:	d206      	bcs.n	800b804 <__hexnan+0x64>
 800b7f6:	2d07      	cmp	r5, #7
 800b7f8:	dc04      	bgt.n	800b804 <__hexnan+0x64>
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff ffa8 	bl	800b754 <L_shift>
 800b804:	4544      	cmp	r4, r8
 800b806:	d952      	bls.n	800b8ae <__hexnan+0x10e>
 800b808:	2300      	movs	r3, #0
 800b80a:	f1a4 0904 	sub.w	r9, r4, #4
 800b80e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b812:	f8cd b008 	str.w	fp, [sp, #8]
 800b816:	464c      	mov	r4, r9
 800b818:	461d      	mov	r5, r3
 800b81a:	9903      	ldr	r1, [sp, #12]
 800b81c:	e7d7      	b.n	800b7ce <__hexnan+0x2e>
 800b81e:	2a29      	cmp	r2, #41	@ 0x29
 800b820:	d157      	bne.n	800b8d2 <__hexnan+0x132>
 800b822:	3102      	adds	r1, #2
 800b824:	f8ca 1000 	str.w	r1, [sl]
 800b828:	f1bb 0f00 	cmp.w	fp, #0
 800b82c:	d051      	beq.n	800b8d2 <__hexnan+0x132>
 800b82e:	454c      	cmp	r4, r9
 800b830:	d206      	bcs.n	800b840 <__hexnan+0xa0>
 800b832:	2d07      	cmp	r5, #7
 800b834:	dc04      	bgt.n	800b840 <__hexnan+0xa0>
 800b836:	462a      	mov	r2, r5
 800b838:	4649      	mov	r1, r9
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff ff8a 	bl	800b754 <L_shift>
 800b840:	4544      	cmp	r4, r8
 800b842:	d936      	bls.n	800b8b2 <__hexnan+0x112>
 800b844:	f1a8 0204 	sub.w	r2, r8, #4
 800b848:	4623      	mov	r3, r4
 800b84a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b84e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b852:	429f      	cmp	r7, r3
 800b854:	d2f9      	bcs.n	800b84a <__hexnan+0xaa>
 800b856:	1b3b      	subs	r3, r7, r4
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	3304      	adds	r3, #4
 800b85e:	3401      	adds	r4, #1
 800b860:	3e03      	subs	r6, #3
 800b862:	42b4      	cmp	r4, r6
 800b864:	bf88      	it	hi
 800b866:	2304      	movhi	r3, #4
 800b868:	4443      	add	r3, r8
 800b86a:	2200      	movs	r2, #0
 800b86c:	f843 2b04 	str.w	r2, [r3], #4
 800b870:	429f      	cmp	r7, r3
 800b872:	d2fb      	bcs.n	800b86c <__hexnan+0xcc>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	b91b      	cbnz	r3, 800b880 <__hexnan+0xe0>
 800b878:	4547      	cmp	r7, r8
 800b87a:	d128      	bne.n	800b8ce <__hexnan+0x12e>
 800b87c:	2301      	movs	r3, #1
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	2005      	movs	r0, #5
 800b882:	b007      	add	sp, #28
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	3501      	adds	r5, #1
 800b88a:	2d08      	cmp	r5, #8
 800b88c:	f10b 0b01 	add.w	fp, fp, #1
 800b890:	dd06      	ble.n	800b8a0 <__hexnan+0x100>
 800b892:	4544      	cmp	r4, r8
 800b894:	d9c1      	bls.n	800b81a <__hexnan+0x7a>
 800b896:	2300      	movs	r3, #0
 800b898:	f844 3c04 	str.w	r3, [r4, #-4]
 800b89c:	2501      	movs	r5, #1
 800b89e:	3c04      	subs	r4, #4
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	f000 000f 	and.w	r0, r0, #15
 800b8a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8aa:	6020      	str	r0, [r4, #0]
 800b8ac:	e7b5      	b.n	800b81a <__hexnan+0x7a>
 800b8ae:	2508      	movs	r5, #8
 800b8b0:	e7b3      	b.n	800b81a <__hexnan+0x7a>
 800b8b2:	9b01      	ldr	r3, [sp, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0dd      	beq.n	800b874 <__hexnan+0xd4>
 800b8b8:	f1c3 0320 	rsb	r3, r3, #32
 800b8bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8c0:	40da      	lsrs	r2, r3
 800b8c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8cc:	e7d2      	b.n	800b874 <__hexnan+0xd4>
 800b8ce:	3f04      	subs	r7, #4
 800b8d0:	e7d0      	b.n	800b874 <__hexnan+0xd4>
 800b8d2:	2004      	movs	r0, #4
 800b8d4:	e7d5      	b.n	800b882 <__hexnan+0xe2>

0800b8d6 <__ascii_mbtowc>:
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	b901      	cbnz	r1, 800b8dc <__ascii_mbtowc+0x6>
 800b8da:	a901      	add	r1, sp, #4
 800b8dc:	b142      	cbz	r2, 800b8f0 <__ascii_mbtowc+0x1a>
 800b8de:	b14b      	cbz	r3, 800b8f4 <__ascii_mbtowc+0x1e>
 800b8e0:	7813      	ldrb	r3, [r2, #0]
 800b8e2:	600b      	str	r3, [r1, #0]
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	1e10      	subs	r0, r2, #0
 800b8e8:	bf18      	it	ne
 800b8ea:	2001      	movne	r0, #1
 800b8ec:	b002      	add	sp, #8
 800b8ee:	4770      	bx	lr
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	e7fb      	b.n	800b8ec <__ascii_mbtowc+0x16>
 800b8f4:	f06f 0001 	mvn.w	r0, #1
 800b8f8:	e7f8      	b.n	800b8ec <__ascii_mbtowc+0x16>

0800b8fa <_realloc_r>:
 800b8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fe:	4680      	mov	r8, r0
 800b900:	4615      	mov	r5, r2
 800b902:	460c      	mov	r4, r1
 800b904:	b921      	cbnz	r1, 800b910 <_realloc_r+0x16>
 800b906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	4611      	mov	r1, r2
 800b90c:	f7fd bca8 	b.w	8009260 <_malloc_r>
 800b910:	b92a      	cbnz	r2, 800b91e <_realloc_r+0x24>
 800b912:	f7fd fc31 	bl	8009178 <_free_r>
 800b916:	2400      	movs	r4, #0
 800b918:	4620      	mov	r0, r4
 800b91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91e:	f000 f840 	bl	800b9a2 <_malloc_usable_size_r>
 800b922:	4285      	cmp	r5, r0
 800b924:	4606      	mov	r6, r0
 800b926:	d802      	bhi.n	800b92e <_realloc_r+0x34>
 800b928:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b92c:	d8f4      	bhi.n	800b918 <_realloc_r+0x1e>
 800b92e:	4629      	mov	r1, r5
 800b930:	4640      	mov	r0, r8
 800b932:	f7fd fc95 	bl	8009260 <_malloc_r>
 800b936:	4607      	mov	r7, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d0ec      	beq.n	800b916 <_realloc_r+0x1c>
 800b93c:	42b5      	cmp	r5, r6
 800b93e:	462a      	mov	r2, r5
 800b940:	4621      	mov	r1, r4
 800b942:	bf28      	it	cs
 800b944:	4632      	movcs	r2, r6
 800b946:	f7fc fdb6 	bl	80084b6 <memcpy>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4640      	mov	r0, r8
 800b94e:	f7fd fc13 	bl	8009178 <_free_r>
 800b952:	463c      	mov	r4, r7
 800b954:	e7e0      	b.n	800b918 <_realloc_r+0x1e>

0800b956 <__ascii_wctomb>:
 800b956:	4603      	mov	r3, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	b141      	cbz	r1, 800b96e <__ascii_wctomb+0x18>
 800b95c:	2aff      	cmp	r2, #255	@ 0xff
 800b95e:	d904      	bls.n	800b96a <__ascii_wctomb+0x14>
 800b960:	228a      	movs	r2, #138	@ 0x8a
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b968:	4770      	bx	lr
 800b96a:	700a      	strb	r2, [r1, #0]
 800b96c:	2001      	movs	r0, #1
 800b96e:	4770      	bx	lr

0800b970 <fiprintf>:
 800b970:	b40e      	push	{r1, r2, r3}
 800b972:	b503      	push	{r0, r1, lr}
 800b974:	4601      	mov	r1, r0
 800b976:	ab03      	add	r3, sp, #12
 800b978:	4805      	ldr	r0, [pc, #20]	@ (800b990 <fiprintf+0x20>)
 800b97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	f7ff f9b1 	bl	800ace8 <_vfiprintf_r>
 800b986:	b002      	add	sp, #8
 800b988:	f85d eb04 	ldr.w	lr, [sp], #4
 800b98c:	b003      	add	sp, #12
 800b98e:	4770      	bx	lr
 800b990:	2000001c 	.word	0x2000001c

0800b994 <abort>:
 800b994:	b508      	push	{r3, lr}
 800b996:	2006      	movs	r0, #6
 800b998:	f000 f834 	bl	800ba04 <raise>
 800b99c:	2001      	movs	r0, #1
 800b99e:	f7f5 fd6b 	bl	8001478 <_exit>

0800b9a2 <_malloc_usable_size_r>:
 800b9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a6:	1f18      	subs	r0, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbc      	itt	lt
 800b9ac:	580b      	ldrlt	r3, [r1, r0]
 800b9ae:	18c0      	addlt	r0, r0, r3
 800b9b0:	4770      	bx	lr

0800b9b2 <_raise_r>:
 800b9b2:	291f      	cmp	r1, #31
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d904      	bls.n	800b9c6 <_raise_r+0x14>
 800b9bc:	2316      	movs	r3, #22
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c8:	b112      	cbz	r2, 800b9d0 <_raise_r+0x1e>
 800b9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ce:	b94b      	cbnz	r3, 800b9e4 <_raise_r+0x32>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f831 	bl	800ba38 <_getpid_r>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e0:	f000 b818 	b.w	800ba14 <_kill_r>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <_raise_r+0x4c>
 800b9e8:	1c59      	adds	r1, r3, #1
 800b9ea:	d103      	bne.n	800b9f4 <_raise_r+0x42>
 800b9ec:	2316      	movs	r3, #22
 800b9ee:	6003      	str	r3, [r0, #0]
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	e7e7      	b.n	800b9c4 <_raise_r+0x12>
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4798      	blx	r3
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7e0      	b.n	800b9c4 <_raise_r+0x12>
	...

0800ba04 <raise>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <raise+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff bfd2 	b.w	800b9b2 <_raise_r>
 800ba0e:	bf00      	nop
 800ba10:	2000001c 	.word	0x2000001c

0800ba14 <_kill_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	@ (800ba34 <_kill_r+0x20>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f5 fd19 	bl	8001458 <_kill>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_kill_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_kill_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	200016ec 	.word	0x200016ec

0800ba38 <_getpid_r>:
 800ba38:	f7f5 bd06 	b.w	8001448 <_getpid>

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
