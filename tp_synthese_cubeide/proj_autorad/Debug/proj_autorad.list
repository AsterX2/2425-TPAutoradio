
proj_autorad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800af98  0800af98  0000bf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d0  0800b4d0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d0  0800b4d0  0000c4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4d8  0800b4d8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4d8  0800b4d8  0000c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4dc  0800b4dc  0000c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b4e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  200001d8  0800b6b8  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  0800b6b8  0000d698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e12  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bd  00000000  00000000  0002101a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000247d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  000258d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  000265ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140b4  00000000  00000000  0004f64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a43  00000000  00000000  00063703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  0015618c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0015ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af7c 	.word	0x0800af7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800af7c 	.word	0x0800af7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001f8 	.word	0x200001f8
 8001014:	2000024c 	.word	0x2000024c

08001018 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_FREERTOS_Init+0x30>)
 8001020:	1d3c      	adds	r4, r7, #4
 8001022:	461d      	mov	r5, r3
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f003 fded 	bl	8004c14 <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a03      	ldr	r2, [pc, #12]	@ (800104c <MX_FREERTOS_Init+0x34>)
 800103e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	0800afa4 	.word	0x0800afa4
 800104c:	200001f4 	.word	0x200001f4

08001050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f003 fe27 	bl	8004cac <osDelay>
 800105e:	e7fb      	b.n	8001058 <StartDefaultTask+0x8>

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 f85f 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0xc8>)
 80010fa:	f000 fea7 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fe:	2320      	movs	r3, #32
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f000 fe98 	bl	8001e4c <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <__io_putchar+0x20>)
 800113e:	f002 fbb5 	bl	80038ac <HAL_UART_Transmit>

	return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200007b4 	.word	0x200007b4

08001150 <tache_shell>:



void tache_shell()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

	xSemaphoreTake(sem1, portMAX_DELAY);
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <tache_shell+0x34>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fe6d 	bl	8004e3c <xQueueSemaphoreTake>

	h_sh.drv.receive = drv_uart1_receive;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <tache_shell+0x38>)
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <tache_shell+0x3c>)
 8001166:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_sh.drv.transmit = drv_uart1_transmit;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <tache_shell+0x38>)
 800116c:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <tache_shell+0x40>)
 800116e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
	shell_init(&h_sh);
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <tache_shell+0x38>)
 8001174:	f000 fae6 	bl	8001744 <shell_init>
	shell_run(&h_sh);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <tache_shell+0x38>)
 800117a:	f000 fbd1 	bl	8001920 <shell_run>


}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200007ac 	.word	0x200007ac
 8001188:	20000450 	.word	0x20000450
 800118c:	08001675 	.word	0x08001675
 8001190:	0800169d 	.word	0x0800169d

08001194 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800119a:	f000 fc4b 	bl	8001a34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800119e:	f000 f821 	bl	80011e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011a2:	f7ff ff5d 	bl	8001060 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011a6:	f000 f9a7 	bl	80014f8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	xTaskCreate(tache_shell, "Shell", TASK_SHELL_STACK_SIZE, NULL, TASK_SHELL_PRIORITY, &h_task_shell);
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <main+0x44>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	4908      	ldr	r1, [pc, #32]	@ (80011dc <main+0x48>)
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <main+0x4c>)
 80011bc:	f004 f82e 	bl	800521c <xTaskCreate>


	vTaskDelay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f004 f963 	bl	800548c <vTaskDelay>

	vTaskStartScheduler();
 80011c6:	f004 f997 	bl	80054f8 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80011ca:	f7ff ff25 	bl	8001018 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80011ce:	f003 fd1a 	bl	8004c06 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80011d2:	bf00      	nop
 80011d4:	e7fd      	b.n	80011d2 <main+0x3e>
 80011d6:	bf00      	nop
 80011d8:	2000044c 	.word	0x2000044c
 80011dc:	0800afc0 	.word	0x0800afc0
 80011e0:	08001151 	.word	0x08001151

080011e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b096      	sub	sp, #88	@ 0x58
 80011e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2244      	movs	r2, #68	@ 0x44
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 faeb 	bl	80077ce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001206:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800120a:	f000 ffef 	bl	80021ec <HAL_PWREx_ControlVoltageScaling>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001214:	f000 f837 	bl	8001286 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001220:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2310      	movs	r3, #16
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001232:	230a      	movs	r3, #10
 8001234:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001236:	2307      	movs	r3, #7
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f826 	bl	8002298 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001252:	f000 f818 	bl	8001286 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2303      	movs	r3, #3
 800125c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fbee 	bl	8002a50 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800127a:	f000 f804 	bl	8001286 <Error_Handler>
	}
}
 800127e:	bf00      	nop
 8001280:	3758      	adds	r7, #88	@ 0x58
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128a:	b672      	cpsid	i
}
 800128c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800128e:	bf00      	nop
 8001290:	e7fd      	b.n	800128e <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_MspInit+0x4c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f000 fd06 	bl	8001ce2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800131e:	f000 fbe5 	bl	8001aec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001322:	f004 fcf3 	bl	8005d0c <xTaskGetSchedulerState>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d001      	beq.n	8001330 <SysTick_Handler+0x16>
	{
#endif /* INCLUDE_xTaskGetSchedulerState */
		xPortSysTickHandler();
 800132c:	f005 f84c 	bl	80063c8 <xPortSysTickHandler>
	}
#endif /* INCLUDE_xTaskGetSchedulerState */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <USART2_IRQHandler+0x10>)
 800133a:	f002 fc09 	bl	8003b50 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200007b4 	.word	0x200007b4

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_kill>:

int _kill(int pid, int sig)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001362:	f006 fa87 	bl	8007874 <__errno>
 8001366:	4603      	mov	r3, r0
 8001368:	2216      	movs	r2, #22
 800136a:	601a      	str	r2, [r3, #0]
  return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_exit>:

void _exit (int status)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffe7 	bl	8001358 <_kill>
  while (1) {}    /* Make sure we hang here */
 800138a:	bf00      	nop
 800138c:	e7fd      	b.n	800138a <_exit+0x12>

0800138e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e00a      	b.n	80013b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a0:	f3af 8000 	nop.w
 80013a4:	4601      	mov	r1, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf0      	blt.n	80013a0 <_read+0x12>
  }

  return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e009      	b.n	80013ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fea2 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbf1      	blt.n	80013da <_write+0x12>
  }
  return len;
 80013f6:	687b      	ldr	r3, [r7, #4]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_close>:

int _close(int file)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001428:	605a      	str	r2, [r3, #4]
  return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_isatty>:

int _isatty(int file)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f006 f9ec 	bl	8007874 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20018000 	.word	0x20018000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	200007b0 	.word	0x200007b0
 80014d0:	20001698 	.word	0x20001698

080014d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <MX_USART2_UART_Init+0x5c>)
 8001500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_USART2_UART_Init+0x58>)
 800153c:	f002 f968 	bl	8003810 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001546:	f7ff fe9e 	bl	8001286 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200007b4 	.word	0x200007b4
 8001554:	40004400 	.word	0x40004400

08001558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ac      	sub	sp, #176	@ 0xb0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2288      	movs	r2, #136	@ 0x88
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f006 f928 	bl	80077ce <memset>
  if(uartHandle->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <HAL_UART_MspInit+0xc0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d143      	bne.n	8001610 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001588:	2302      	movs	r3, #2
 800158a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fc7f 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a0:	f7ff fe71 	bl	8001286 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	4a16      	ldr	r2, [pc, #88]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_UART_MspInit+0xc4>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d4:	230c      	movs	r3, #12
 80015d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fc:	f000 fc26 	bl	8001e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2105      	movs	r1, #5
 8001604:	2026      	movs	r0, #38	@ 0x26
 8001606:	f000 fb6c 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800160a:	2026      	movs	r0, #38	@ 0x26
 800160c:	f000 fb85 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001610:	bf00      	nop
 8001612:	37b0      	adds	r7, #176	@ 0xb0
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004400 	.word	0x40004400
 800161c:	40021000 	.word	0x40021000

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ff56 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f006 f917 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fd9f 	bl	8001194 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001664:	0800b4e0 	.word	0x0800b4e0
  ldr r2, =_sbss
 8001668:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800166c:	20001698 	.word	0x20001698

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <drv_uart1_receive+0x24>)
 800168a:	f002 f998 	bl	80039be <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200007b4 	.word	0x200007b4

0800169c <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <drv_uart1_transmit+0x24>)
 80016b2:	f002 f8fb 	bl	80038ac <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200007b4 	.word	0x200007b4

080016c4 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e029      	b.n	800172a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3304      	adds	r3, #4
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461c      	mov	r4, r3
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	330c      	adds	r3, #12
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4623      	mov	r3, r4
 8001706:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <sh_help+0x7c>)
 8001708:	2128      	movs	r1, #40	@ 0x28
 800170a:	f005 ffc9 	bl	80076a0 <sniprintf>
 800170e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	b289      	uxth	r1, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbd0      	blt.n	80016d6 <sh_help+0x12>
	}

	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	bf00      	nop
 8001740:	0800afc8 	.word	0x0800afc8

08001744 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <shell_init+0x74>)
 800175e:	2128      	movs	r1, #40	@ 0x28
 8001760:	4618      	mov	r0, r3
 8001762:	f005 ff9d 	bl	80076a0 <sniprintf>
 8001766:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	b289      	uxth	r1, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <shell_init+0x78>)
 8001784:	2128      	movs	r1, #40	@ 0x28
 8001786:	4618      	mov	r0, r3
 8001788:	f005 ff8a 	bl	80076a0 <sniprintf>
 800178c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	b289      	uxth	r1, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <shell_init+0x7c>)
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <shell_init+0x80>)
 80017a6:	2168      	movs	r1, #104	@ 0x68
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f80d 	bl	80017c8 <shell_add>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800afd4 	.word	0x0800afd4
 80017bc:	0800affc 	.word	0x0800affc
 80017c0:	0800b020 	.word	0x0800b020
 80017c4:	080016c5 	.word	0x080016c5

080017c8 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80017de:	dc27      	bgt.n	8001830 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	7afa      	ldrb	r2, [r7, #11]
 80017f4:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68f9      	ldr	r1, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3308      	adds	r3, #8
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	330c      	adds	r3, #12
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
		return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e001      	b.n	8001834 <shell_add+0x6c>
	}

	return -1;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	@ 0x40
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001856:	e041      	b.n	80018dc <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3304      	adds	r3, #4
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800186e:	429a      	cmp	r2, r3
 8001870:	d131      	bne.n	80018d6 <shell_exec+0x96>
			argc = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
 800187e:	e013      	b.n	80018a8 <shell_exec+0x68>
				if(*p == ' ') {
 8001880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b20      	cmp	r3, #32
 8001886:	d10c      	bne.n	80018a2 <shell_exec+0x62>
					*p = '\0';
 8001888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001896:	3201      	adds	r2, #1
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	3340      	adds	r3, #64	@ 0x40
 800189c:	443b      	add	r3, r7
 800189e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80018a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a4:	3301      	adds	r3, #1
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <shell_exec+0x76>
 80018b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b2:	2b07      	cmp	r3, #7
 80018b4:	dde4      	ble.n	8001880 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f107 020c 	add.w	r2, r7, #12
 80018cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	e01d      	b.n	8001912 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80018d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018d8:	3301      	adds	r3, #1
 80018da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbb8      	blt.n	8001858 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80018ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018f0:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <shell_exec+0xdc>)
 80018f2:	2128      	movs	r1, #40	@ 0x28
 80018f4:	f005 fed4 	bl	80076a0 <sniprintf>
 80018f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001908:	b289      	uxth	r1, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4798      	blx	r3
	return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001912:	4618      	mov	r0, r3
 8001914:	3740      	adds	r7, #64	@ 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800b028 	.word	0x0800b028

08001920 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001936:	2102      	movs	r1, #2
 8001938:	483a      	ldr	r0, [pc, #232]	@ (8001a24 <shell_run+0x104>)
 800193a:	4798      	blx	r3
		reading = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]

		while(reading) {
 8001940:	e064      	b.n	8001a0c <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8001948:	f107 020b 	add.w	r2, r7, #11
 800194c:	2101      	movs	r1, #1
 800194e:	4610      	mov	r0, r2
 8001950:	4798      	blx	r3
			int size;

			switch (c) {
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d036      	beq.n	80019c6 <shell_run+0xa6>
 8001958:	2b0d      	cmp	r3, #13
 800195a:	d141      	bne.n	80019e0 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8001962:	4a31      	ldr	r2, [pc, #196]	@ (8001a28 <shell_run+0x108>)
 8001964:	2128      	movs	r1, #40	@ 0x28
 8001966:	4618      	mov	r0, r3
 8001968:	f005 fe9a 	bl	80076a0 <sniprintf>
 800196c:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	b289      	uxth	r1, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	613a      	str	r2, [r7, #16]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800199e:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <shell_run+0x10c>)
 80019a0:	2128      	movs	r1, #40	@ 0x28
 80019a2:	f005 fe7d 	bl	80076a0 <sniprintf>
 80019a6:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	b289      	uxth	r1, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4798      	blx	r3
				reading = 0;        //exit read loop
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
				break;
 80019c4:	e022      	b.n	8001a0c <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dd1e      	ble.n	8001a0a <shell_run+0xea>
					pos--;          //remove it in buffer
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80019d8:	2103      	movs	r1, #3
 80019da:	4815      	ldr	r0, [pc, #84]	@ (8001a30 <shell_run+0x110>)
 80019dc:	4798      	blx	r3
				}
				break;
 80019de:	e014      	b.n	8001a0a <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b27      	cmp	r3, #39	@ 0x27
 80019e4:	dc12      	bgt.n	8001a0c <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80019ec:	f107 020b 	add.w	r2, r7, #11
 80019f0:	2101      	movs	r1, #1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	613a      	str	r2, [r7, #16]
 80019fc:	7af9      	ldrb	r1, [r7, #11]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	460a      	mov	r2, r1
 8001a04:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001a08:	e000      	b.n	8001a0c <shell_run+0xec>
				break;
 8001a0a:	bf00      	nop
		while(reading) {
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d197      	bne.n	8001942 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff10 	bl	8001840 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8001a20:	e786      	b.n	8001930 <shell_run+0x10>
 8001a22:	bf00      	nop
 8001a24:	0800b0a0 	.word	0x0800b0a0
 8001a28:	0800b040 	.word	0x0800b040
 8001a2c:	0800b044 	.word	0x0800b044
 8001a30:	0800b09c 	.word	0x0800b09c

08001a34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_Init+0x3c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_Init+0x3c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f000 f93e 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a50:	200f      	movs	r0, #15
 8001a52:	f000 f80f 	bl	8001a74 <HAL_InitTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e001      	b.n	8001a66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a62:	f7ff fc17 	bl	8001294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_InitTick+0x70>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f949 	bl	8001d36 <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d809      	bhi.n	8001ac4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ab8:	f000 f913 	bl	8001ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e004      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e001      	b.n	8001ad4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	2000083c 	.word	0x2000083c

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000083c 	.word	0x2000083c

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e022      	b.n	8001dbe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020e 	bic.w	r2, r2, #14
 8001d86:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f003 021c 	and.w	r2, r3, #28
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d005      	beq.n	8001dee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e029      	b.n	8001e42 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020e 	bic.w	r2, r2, #14
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f003 021c 	and.w	r2, r3, #28
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
    }
  }
  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e17f      	b.n	800215c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8171 	beq.w	8002156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_GPIO_Init+0x40>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d118      	bne.n	8001f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ac 	beq.w	8002156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800217c <HAL_GPIO_Init+0x330>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <HAL_GPIO_Init+0x330>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6613      	str	r3, [r2, #96]	@ 0x60
 800200a:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <HAL_GPIO_Init+0x330>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002016:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_GPIO_Init+0x334>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x242>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x338>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	@ (8002188 <HAL_GPIO_Init+0x33c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x23a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_GPIO_Init+0x340>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x236>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_GPIO_Init+0x344>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x232>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	@ (8002194 <HAL_GPIO_Init+0x348>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4a      	ldr	r2, [pc, #296]	@ (8002198 <HAL_GPIO_Init+0x34c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x22a>
 8002072:	2306      	movs	r3, #6
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002076:	2307      	movs	r3, #7
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x244>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x244>
 800208e:	2300      	movs	r3, #0
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a0:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_GPIO_Init+0x334>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d2:	4a32      	ldr	r2, [pc, #200]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d8:	4b30      	ldr	r3, [pc, #192]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_GPIO_Init+0x350>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002102:	4b26      	ldr	r3, [pc, #152]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_GPIO_Init+0x350>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002150:	4a12      	ldr	r2, [pc, #72]	@ (800219c <HAL_GPIO_Init+0x350>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f47f ae78 	bne.w	8001e5c <HAL_GPIO_Init+0x10>
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	48000c00 	.word	0x48000c00
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	48001800 	.word	0x48001800
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40007000 	.word	0x40007000

080021ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fa:	d130      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002208:	d038      	beq.n	800227c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002214:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800221a:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2232      	movs	r2, #50	@ 0x32
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9b      	lsrs	r3, r3, #18
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002230:	e002      	b.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002244:	d102      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f2      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002258:	d110      	bne.n	800227c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e00f      	b.n	800227e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226a:	d007      	beq.n	800227c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002274:	4a05      	ldr	r2, [pc, #20]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40007000 	.word	0x40007000
 8002290:	20000000 	.word	0x20000000
 8002294:	431bde83 	.word	0x431bde83

08002298 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3ca      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022aa:	4b97      	ldr	r3, [pc, #604]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b4:	4b94      	ldr	r3, [pc, #592]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80e4 	beq.w	8002494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4a>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	f040 808b 	bne.w	80023f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	f040 8087 	bne.w	80023f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e2:	4b89      	ldr	r3, [pc, #548]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x62>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e3a2      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_RCC_OscConfig+0x7c>
 800230a:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002312:	e005      	b.n	8002320 <HAL_RCC_OscConfig+0x88>
 8002314:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002320:	4293      	cmp	r3, r2
 8002322:	d223      	bcs.n	800236c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fd55 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e383      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002338:	4b73      	ldr	r3, [pc, #460]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a72      	ldr	r2, [pc, #456]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b70      	ldr	r3, [pc, #448]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	496d      	ldr	r1, [pc, #436]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002356:	4b6c      	ldr	r3, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	4968      	ldr	r1, [pc, #416]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
 800236a:	e025      	b.n	80023b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b63      	ldr	r3, [pc, #396]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4960      	ldr	r1, [pc, #384]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238a:	4b5f      	ldr	r3, [pc, #380]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	495b      	ldr	r1, [pc, #364]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd15 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e343      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b8:	f000 fc4a 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b52      	ldr	r3, [pc, #328]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	4950      	ldr	r1, [pc, #320]	@ (800250c <HAL_RCC_OscConfig+0x274>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002510 <HAL_RCC_OscConfig+0x278>)
 80023d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fb49 	bl	8001a74 <HAL_InitTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d052      	beq.n	8002492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	e327      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d032      	beq.n	800245e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f8:	4b43      	ldr	r3, [pc, #268]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a42      	ldr	r2, [pc, #264]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002404:	f7ff fb86 	bl	8001b14 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240c:	f7ff fb82 	bl	8001b14 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e310      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241e:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a36      	ldr	r2, [pc, #216]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4931      	ldr	r1, [pc, #196]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002448:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	492c      	ldr	r1, [pc, #176]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	e01a      	b.n	8002494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246a:	f7ff fb53 	bl	8001b14 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002472:	f7ff fb4f 	bl	8001b14 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e2dd      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x1da>
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d074      	beq.n	800258a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x21a>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d10e      	bne.n	80024ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d10b      	bne.n	80024ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d064      	beq.n	8002588 <HAL_RCC_OscConfig+0x2f0>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d160      	bne.n	8002588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e2ba      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x24a>
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e026      	b.n	8002530 <HAL_RCC_OscConfig+0x298>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ea:	d115      	bne.n	8002518 <HAL_RCC_OscConfig+0x280>
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a02      	ldr	r2, [pc, #8]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x298>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	0800b054 	.word	0x0800b054
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004
 8002518:	4ba0      	ldr	r3, [pc, #640]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a9f      	ldr	r2, [pc, #636]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b9d      	ldr	r3, [pc, #628]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a9c      	ldr	r2, [pc, #624]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff faec 	bl	8001b14 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fae8 	bl	8001b14 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e276      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002552:	4b92      	ldr	r3, [pc, #584]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x2a8>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fad8 	bl	8001b14 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fad4 	bl	8001b14 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e262      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257a:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x2d0>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d060      	beq.n	8002658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x310>
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d116      	bne.n	80025d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	4b7c      	ldr	r3, [pc, #496]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x328>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e23f      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4973      	ldr	r1, [pc, #460]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	e040      	b.n	8002658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d023      	beq.n	8002626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025de:	4b6f      	ldr	r3, [pc, #444]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6e      	ldr	r2, [pc, #440]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff fa93 	bl	8001b14 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fa8f 	bl	8001b14 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e21d      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002604:	4b65      	ldr	r3, [pc, #404]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b62      	ldr	r3, [pc, #392]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	495f      	ldr	r1, [pc, #380]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e018      	b.n	8002658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5c      	ldr	r2, [pc, #368]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800262c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff fa6f 	bl	8001b14 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fa6b 	bl	8001b14 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1f9      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800264c:	4b53      	ldr	r3, [pc, #332]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03c      	beq.n	80026de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266c:	4b4b      	ldr	r3, [pc, #300]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002672:	4a4a      	ldr	r2, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff fa4a 	bl	8001b14 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff fa46 	bl	8001b14 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1d4      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x3ec>
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b3d      	ldr	r3, [pc, #244]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ac:	4a3b      	ldr	r2, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7ff fa2d 	bl	8001b14 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff fa29 	bl	8001b14 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1b7      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d0:	4b32      	ldr	r3, [pc, #200]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80a6 	beq.w	8002838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026f0:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	4a26      	ldr	r2, [pc, #152]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002706:	6593      	str	r3, [r2, #88]	@ 0x58
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002714:	2301      	movs	r3, #1
 8002716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <HAL_RCC_OscConfig+0x508>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d118      	bne.n	8002756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002724:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <HAL_RCC_OscConfig+0x508>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_RCC_OscConfig+0x508>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002730:	f7ff f9f0 	bl	8001b14 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7ff f9ec 	bl	8001b14 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e17a      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_RCC_OscConfig+0x508>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <HAL_RCC_OscConfig+0x4d8>
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	4a0d      	ldr	r2, [pc, #52]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800276e:	e029      	b.n	80027c4 <HAL_RCC_OscConfig+0x52c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_OscConfig+0x50c>
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	4a03      	ldr	r2, [pc, #12]	@ (800279c <HAL_RCC_OscConfig+0x504>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x52c>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b4:	4b98      	ldr	r3, [pc, #608]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	4a97      	ldr	r2, [pc, #604]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff f9a2 	bl	8001b14 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7ff f99e 	bl	8001b14 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e12a      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ed      	beq.n	80027d4 <HAL_RCC_OscConfig+0x53c>
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7ff f98b 	bl	8001b14 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff f987 	bl	8001b14 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e113      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002818:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ed      	bne.n	8002802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002826:	7ffb      	ldrb	r3, [r7, #31]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	4a79      	ldr	r2, [pc, #484]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002836:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80fe 	beq.w	8002a3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 80d0 	bne.w	80029ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800284c:	4b72      	ldr	r3, [pc, #456]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d130      	bne.n	80028c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	3b01      	subs	r3, #1
 800286c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d127      	bne.n	80028c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d11f      	bne.n	80028c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800288c:	2a07      	cmp	r2, #7
 800288e:	bf14      	ite	ne
 8002890:	2201      	movne	r2, #1
 8002892:	2200      	moveq	r2, #0
 8002894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002896:	4293      	cmp	r3, r2
 8002898:	d113      	bne.n	80028c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d06e      	beq.n	80029a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d069      	beq.n	800299c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c8:	4b53      	ldr	r3, [pc, #332]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028d4:	4b50      	ldr	r3, [pc, #320]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0ad      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7ff f910 	bl	8001b14 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f90c 	bl	8001b14 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e09a      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290a:	4b43      	ldr	r3, [pc, #268]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002916:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_RCC_OscConfig+0x784>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002926:	3a01      	subs	r2, #1
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002930:	0212      	lsls	r2, r2, #8
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0552      	lsls	r2, r2, #21
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002944:	0852      	lsrs	r2, r2, #1
 8002946:	3a01      	subs	r2, #1
 8002948:	0652      	lsls	r2, r2, #25
 800294a:	4311      	orrs	r1, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002950:	0912      	lsrs	r2, r2, #4
 8002952:	0452      	lsls	r2, r2, #17
 8002954:	430a      	orrs	r2, r1
 8002956:	4930      	ldr	r1, [pc, #192]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800295c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2d      	ldr	r2, [pc, #180]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002974:	f7ff f8ce 	bl	8001b14 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff f8ca 	bl	8001b14 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e058      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299a:	e050      	b.n	8002a3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04f      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d148      	bne.n	8002a3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c4:	f7ff f8a6 	bl	8001b14 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff f8a2 	bl	8001b14 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e030      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x734>
 80029ea:	e028      	b.n	8002a3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d023      	beq.n	8002a3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HAL_RCC_OscConfig+0x780>)
 80029f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7ff f889 	bl	8001b14 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a04:	e00c      	b.n	8002a20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7ff f885 	bl	8001b14 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d905      	bls.n	8002a20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e013      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_OscConfig+0x7b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ec      	bne.n	8002a06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x7b0>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4905      	ldr	r1, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x7b0>)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x7b4>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
 8002a38:	e001      	b.n	8002a3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	feeefffc 	.word	0xfeeefffc

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0e7      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b72      	ldr	r3, [pc, #456]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4970      	ldr	r1, [pc, #448]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cf      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d908      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4960      	ldr	r1, [pc, #384]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04c      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a6      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e09a      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e08e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e086      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b46      	ldr	r3, [pc, #280]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4943      	ldr	r1, [pc, #268]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fe ffec 	bl	8001b14 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe ffe8 	bl	8001b14 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e06e      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d010      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d208      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	492b      	ldr	r1, [pc, #172]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b96:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d210      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0207 	bic.w	r2, r3, #7
 8002bac:	4923      	ldr	r1, [pc, #140]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb4:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e036      	b.n	8002c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4918      	ldr	r1, [pc, #96]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4910      	ldr	r1, [pc, #64]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c04:	f000 f824 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x1f4>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_RCC_ClockConfig+0x1f8>)
 8002c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1fc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ff23 	bl	8001a74 <HAL_InitTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c32:	7afb      	ldrb	r3, [r7, #11]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800b054 	.word	0x0800b054
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11e      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cac:	4a2b      	ldr	r2, [pc, #172]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d134      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xac>
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfe:	617b      	str	r3, [r7, #20]
      break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	617b      	str	r3, [r7, #20]
      break;
 8002d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	3301      	adds	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fb03 f202 	mul.w	r2, r3, r2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	0e5b      	lsrs	r3, r3, #25
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d48:	69bb      	ldr	r3, [r7, #24]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	0800b06c 	.word	0x0800b06c
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	0800b064 	.word	0x0800b064

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db0:	f7ff ffda 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4904      	ldr	r1, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	0800b064 	.word	0x0800b064

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f9ee 	bl	80021d0 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a24      	ldr	r2, [pc, #144]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff f9de 	bl	80021d0 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d919      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e013      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e010      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e00a      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d102      	bne.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e54:	2302      	movs	r3, #2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e004      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d101      	bne.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4909      	ldr	r1, [pc, #36]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e74:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d041      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ebc:	d02a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ebe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ec2:	d824      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ece:	d81e      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed8:	d010      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eda:	e018      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002edc:	4b86      	ldr	r3, [pc, #536]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a85      	ldr	r2, [pc, #532]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee8:	e015      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fabb 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efa:	e00c      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3320      	adds	r3, #32
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fba6 	bl	8003654 <RCCEx_PLLSAI2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0c:	e003      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	74fb      	strb	r3, [r7, #19]
      break;
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1c:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f2a:	4973      	ldr	r1, [pc, #460]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d041      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f4c:	d02a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f52:	d824      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f5e:	d81e      	bhi.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f68:	d010      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f6a:	e018      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a61      	ldr	r2, [pc, #388]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa73 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8a:	e00c      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3320      	adds	r3, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb5e 	bl	8003654 <RCCEx_PLLSAI2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fac:	4b52      	ldr	r3, [pc, #328]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fba:	494f      	ldr	r1, [pc, #316]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a0 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a40      	ldr	r2, [pc, #256]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003018:	f7fe fd7c 	bl	8001b14 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe fd78 	bl	8001b14 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	74fb      	strb	r3, [r7, #19]
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003034:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003046:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	d019      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003064:	4b24      	ldr	r3, [pc, #144]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800306e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003070:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003076:	4a20      	ldr	r2, [pc, #128]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003090:	4a19      	ldr	r2, [pc, #100]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fd37 	bl	8001b14 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe fd33 	bl	8001b14 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	74fb      	strb	r3, [r7, #19]
            break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ec      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e6:	4904      	ldr	r1, [pc, #16]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7c7b      	ldrb	r3, [r7, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b9e      	ldr	r3, [pc, #632]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	4a9d      	ldr	r2, [pc, #628]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b98      	ldr	r3, [pc, #608]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	4994      	ldr	r1, [pc, #592]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003144:	4b8f      	ldr	r3, [pc, #572]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	498c      	ldr	r1, [pc, #560]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003166:	4b87      	ldr	r3, [pc, #540]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	4983      	ldr	r1, [pc, #524]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003188:	4b7e      	ldr	r3, [pc, #504]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	497b      	ldr	r1, [pc, #492]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	4972      	ldr	r1, [pc, #456]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	496a      	ldr	r1, [pc, #424]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b65      	ldr	r3, [pc, #404]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	4961      	ldr	r1, [pc, #388]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003210:	4b5c      	ldr	r3, [pc, #368]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	4959      	ldr	r1, [pc, #356]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003232:	4b54      	ldr	r3, [pc, #336]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003240:	4950      	ldr	r1, [pc, #320]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003254:	4b4b      	ldr	r3, [pc, #300]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	4948      	ldr	r1, [pc, #288]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	493f      	ldr	r1, [pc, #252]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d028      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003298:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a6:	4937      	ldr	r1, [pc, #220]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b32      	ldr	r3, [pc, #200]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a31      	ldr	r2, [pc, #196]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
 80032c4:	e011      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f8c8 	bl	800346c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f6:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	491f      	ldr	r1, [pc, #124]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003314:	d106      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003320:	60d3      	str	r3, [r2, #12]
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f899 	bl	800346c <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	4908      	ldr	r1, [pc, #32]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a02      	ldr	r2, [pc, #8]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	e014      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f867 	bl	800346c <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c6:	4928      	ldr	r1, [pc, #160]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f844 	bl	800346c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f925 	bl	8003654 <RCCEx_PLLSAI2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003432:	490d      	ldr	r1, [pc, #52]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003456:	4904      	ldr	r1, [pc, #16]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347a:	4b75      	ldr	r3, [pc, #468]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003486:	4b72      	ldr	r3, [pc, #456]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
       ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800349e:	4b6c      	ldr	r3, [pc, #432]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
       ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d047      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e044      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d018      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0x86>
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d825      	bhi.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <RCCEx_PLLSAI1_Config+0x62>
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d009      	beq.n	80034e0 <RCCEx_PLLSAI1_Config+0x74>
 80034cc:	e020      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ce:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034de:	e01a      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e013      	b.n	800351a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f2:	4b57      	ldr	r3, [pc, #348]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fe:	4b54      	ldr	r3, [pc, #336]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350e:	e006      	b.n	800351e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e004      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003526:	4b4a      	ldr	r3, [pc, #296]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	430b      	orrs	r3, r1
 800353c:	4944      	ldr	r1, [pc, #272]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d17d      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003548:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a40      	ldr	r2, [pc, #256]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fe fade 	bl	8001b14 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800355a:	e009      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800355c:	f7fe fada 	bl	8001b14 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
        break;
 800356e:	e005      	b.n	800357c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003570:	4b37      	ldr	r3, [pc, #220]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ef      	bne.n	800355c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d160      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003588:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	0211      	lsls	r1, r2, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	0912      	lsrs	r2, r2, #4
 80035a0:	0452      	lsls	r2, r2, #17
 80035a2:	430a      	orrs	r2, r1
 80035a4:	492a      	ldr	r1, [pc, #168]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]
 80035aa:	e027      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d112      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b2:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	0211      	lsls	r1, r2, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6912      	ldr	r2, [r2, #16]
 80035c8:	0852      	lsrs	r2, r2, #1
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0552      	lsls	r2, r2, #21
 80035ce:	430a      	orrs	r2, r1
 80035d0:	491f      	ldr	r1, [pc, #124]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	610b      	str	r3, [r1, #16]
 80035d6:	e011      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	0211      	lsls	r1, r2, #8
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6952      	ldr	r2, [r2, #20]
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fe fa84 	bl	8001b14 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fe fa80 	bl	8001b14 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4904      	ldr	r1, [pc, #16]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003662:	4b6a      	ldr	r3, [pc, #424]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d018      	beq.n	80036a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800366e:	4b67      	ldr	r3, [pc, #412]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0203 	and.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d10d      	bne.n	800369a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
       ||
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003686:	4b61      	ldr	r3, [pc, #388]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
       ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d047      	beq.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e044      	b.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d018      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x86>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d825      	bhi.n	80036f8 <RCCEx_PLLSAI2_Config+0xa4>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d002      	beq.n	80036b6 <RCCEx_PLLSAI2_Config+0x62>
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d009      	beq.n	80036c8 <RCCEx_PLLSAI2_Config+0x74>
 80036b4:	e020      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b6:	4b55      	ldr	r3, [pc, #340]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11d      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c6:	e01a      	b.n	80036fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d116      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d8:	e013      	b.n	8003702 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036da:	4b4c      	ldr	r3, [pc, #304]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e6:	4b49      	ldr	r3, [pc, #292]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f6:	e006      	b.n	8003706 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e004      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003706:	bf00      	nop
    }

    if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370e:	4b3f      	ldr	r3, [pc, #252]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	430b      	orrs	r3, r1
 8003724:	4939      	ldr	r1, [pc, #228]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d167      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003730:	4b36      	ldr	r3, [pc, #216]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a35      	ldr	r2, [pc, #212]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fe f9ea 	bl	8001b14 <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003742:	e009      	b.n	8003758 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003744:	f7fe f9e6 	bl	8001b14 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	73fb      	strb	r3, [r7, #15]
        break;
 8003756:	e005      	b.n	8003764 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003758:	4b2c      	ldr	r3, [pc, #176]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ef      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14a      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003770:	4b26      	ldr	r3, [pc, #152]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6892      	ldr	r2, [r2, #8]
 8003780:	0211      	lsls	r1, r2, #8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	0912      	lsrs	r2, r2, #4
 8003788:	0452      	lsls	r2, r2, #17
 800378a:	430a      	orrs	r2, r1
 800378c:	491f      	ldr	r1, [pc, #124]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	614b      	str	r3, [r1, #20]
 8003792:	e011      	b.n	80037b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003794:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800379c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	0211      	lsls	r1, r2, #8
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6912      	ldr	r2, [r2, #16]
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0652      	lsls	r2, r2, #25
 80037b0:	430a      	orrs	r2, r1
 80037b2:	4916      	ldr	r1, [pc, #88]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe f9a6 	bl	8001b14 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ca:	e009      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037cc:	f7fe f9a2 	bl	8001b14 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	73fb      	strb	r3, [r7, #15]
          break;
 80037de:	e005      	b.n	80037ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e0:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ef      	beq.n	80037cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4904      	ldr	r1, [pc, #16]	@ (800380c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e040      	b.n	80038a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fe90 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	@ 0x24
 800383c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 ff58 	bl	800470c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fc9d 	bl	800419c <UART_SetConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e01b      	b.n	80038a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800387a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800388a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 ffd7 	bl	8004850 <UART_CheckIdleState>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d177      	bne.n	80039b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Transmit+0x24>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e070      	b.n	80039b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2221      	movs	r2, #33	@ 0x21
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e2:	f7fe f917 	bl	8001b14 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003900:	d108      	bne.n	8003914 <HAL_UART_Transmit+0x68>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800391c:	e02f      	b.n	800397e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2180      	movs	r1, #128	@ 0x80
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f001 f839 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e03b      	b.n	80039b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003950:	b292      	uxth	r2, r2
 8003952:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	3302      	adds	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e007      	b.n	800396c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3301      	adds	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1c9      	bne.n	800391e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2140      	movs	r1, #64	@ 0x40
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f001 f803 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e005      	b.n	80039b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	@ 0x28
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	f040 80b6 	bne.w	8003b46 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_UART_Receive+0x28>
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ae      	b.n	8003b48 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2222      	movs	r2, #34	@ 0x22
 80039f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a00:	f7fe f888 	bl	8001b14 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1e:	d10e      	bne.n	8003a3e <HAL_UART_Receive+0x80>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <HAL_UART_Receive+0x76>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a32:	e02d      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	22ff      	movs	r2, #255	@ 0xff
 8003a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a3c:	e028      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_UART_Receive+0xa4>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Receive+0x9a>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	@ 0xff
 8003a52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a56:	e01b      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	227f      	movs	r2, #127	@ 0x7f
 8003a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a60:	e016      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a6a:	d10d      	bne.n	8003a88 <HAL_UART_Receive+0xca>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <HAL_UART_Receive+0xc0>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	227f      	movs	r2, #127	@ 0x7f
 8003a78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a7c:	e008      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	223f      	movs	r2, #63	@ 0x3f
 8003a82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003a86:	e003      	b.n	8003a90 <HAL_UART_Receive+0xd2>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Receive+0xf6>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003abc:	e037      	b.n	8003b2e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2120      	movs	r1, #32
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 ff69 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e033      	b.n	8003b48 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	8a7b      	ldrh	r3, [r7, #18]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	3302      	adds	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e00d      	b.n	8003b1c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8a7b      	ldrh	r3, [r7, #18]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1c1      	bne.n	8003abe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0ba      	sub	sp, #232	@ 0xe8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b7e:	4013      	ands	r3, r2
 8003b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d115      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 82ca 	beq.w	8004142 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
      }
      return;
 8003bb6:	e2c4      	b.n	8004142 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8117 	beq.w	8003df0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bd2:	4b85      	ldr	r3, [pc, #532]	@ (8003de8 <HAL_UART_IRQHandler+0x298>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 810a 	beq.w	8003df0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_UART_IRQHandler+0xbc>
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d011      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d011      	beq.n	8003c6c <HAL_UART_IRQHandler+0x11c>
 8003c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2208      	movs	r2, #8
 8003c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9e:	f043 0208 	orr.w	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <HAL_UART_IRQHandler+0x18a>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8230 	beq.w	8004146 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d04f      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fea1 	bl	8004a7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	d141      	bne.n	8003dca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1d9      	bne.n	8003d46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9e:	4a13      	ldr	r2, [pc, #76]	@ (8003dec <HAL_UART_IRQHandler+0x29c>)
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe f80f 	bl	8001dca <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00f      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9d4 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00b      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9d0 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e007      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9cc 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003de0:	e1b1      	b.n	8004146 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de2:	bf00      	nop
    return;
 8003de4:	e1af      	b.n	8004146 <HAL_UART_IRQHandler+0x5f6>
 8003de6:	bf00      	nop
 8003de8:	04000120 	.word	0x04000120
 8003dec:	08004b43 	.word	0x08004b43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 816a 	bne.w	80040ce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8163 	beq.w	80040ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 815c 	beq.w	80040ce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	f040 80d4 	bne.w	8003fd6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80ad 	beq.w	8003f9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f080 80a5 	bcs.w	8003f9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 8086 	bne.w	8003f7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1da      	bne.n	8003e70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4c:	f023 0310 	bic.w	r3, r3, #16
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd fee9 	bl	8001d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8f4 	bl	8004184 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f9c:	e0d5      	b.n	800414a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 80ce 	bne.w	800414a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 80c5 	bne.w	800414a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8d8 	bl	8004184 <HAL_UARTEx_RxEventCallback>
      return;
 8003fd4:	e0b9      	b.n	800414a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80ab 	beq.w	800414e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a6 	beq.w	800414e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
 8004026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800402a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e4      	bne.n	8004002 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	623b      	str	r3, [r7, #32]
   return(result);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800405c:	633a      	str	r2, [r7, #48]	@ 0x30
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	60fb      	str	r3, [r7, #12]
   return(result);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	617b      	str	r3, [r7, #20]
   return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e4      	bne.n	8004084 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f85c 	bl	8004184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040cc:	e03f      	b.n	800414e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5a8>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fd66 	bl	8004bc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040f6:	e02d      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01c      	beq.n	8004152 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    }
    return;
 8004120:	e017      	b.n	8004152 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <HAL_UART_IRQHandler+0x604>
 800412e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd17 	bl	8004b6e <UART_EndTransmit_IT>
    return;
 8004140:	e008      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 8004142:	bf00      	nop
 8004144:	e006      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
    return;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
    return;
 8004152:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004154:	37e8      	adds	r7, #232	@ 0xe8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop

0800415c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b08a      	sub	sp, #40	@ 0x28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4ba4      	ldr	r3, [pc, #656]	@ (800445c <UART_SetConfig+0x2c0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a99      	ldr	r2, [pc, #612]	@ (8004460 <UART_SetConfig+0x2c4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	4313      	orrs	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a90      	ldr	r2, [pc, #576]	@ (8004464 <UART_SetConfig+0x2c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d126      	bne.n	8004274 <UART_SetConfig+0xd8>
 8004226:	4b90      	ldr	r3, [pc, #576]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d81b      	bhi.n	800426c <UART_SetConfig+0xd0>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0xa0>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425d 	.word	0x0800425d
 8004244:	08004255 	.word	0x08004255
 8004248:	08004265 	.word	0x08004265
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004252:	e116      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004254:	2302      	movs	r3, #2
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425a:	e112      	b.n	8004482 <UART_SetConfig+0x2e6>
 800425c:	2304      	movs	r3, #4
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e10e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004264:	2308      	movs	r3, #8
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e10a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800426c:	2310      	movs	r3, #16
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e106      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <UART_SetConfig+0x2d0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d138      	bne.n	80042f0 <UART_SetConfig+0x154>
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d82d      	bhi.n	80042e8 <UART_SetConfig+0x14c>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0xf8>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e0d8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d0:	2302      	movs	r3, #2
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e0d4      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e0d0      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e0cc      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e0c8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004470 <UART_SetConfig+0x2d4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d125      	bne.n	8004346 <UART_SetConfig+0x1aa>
 80042fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004468 <UART_SetConfig+0x2cc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d016      	beq.n	8004336 <UART_SetConfig+0x19a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d818      	bhi.n	800433e <UART_SetConfig+0x1a2>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d00a      	beq.n	8004326 <UART_SetConfig+0x18a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d814      	bhi.n	800433e <UART_SetConfig+0x1a2>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x182>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d008      	beq.n	800432e <UART_SetConfig+0x192>
 800431c:	e00f      	b.n	800433e <UART_SetConfig+0x1a2>
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004324:	e0ad      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004326:	2302      	movs	r3, #2
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432c:	e0a9      	b.n	8004482 <UART_SetConfig+0x2e6>
 800432e:	2304      	movs	r3, #4
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004334:	e0a5      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004336:	2308      	movs	r3, #8
 8004338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433c:	e0a1      	b.n	8004482 <UART_SetConfig+0x2e6>
 800433e:	2310      	movs	r3, #16
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004344:	e09d      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <UART_SetConfig+0x2d8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d125      	bne.n	800439c <UART_SetConfig+0x200>
 8004350:	4b45      	ldr	r3, [pc, #276]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800435a:	2bc0      	cmp	r3, #192	@ 0xc0
 800435c:	d016      	beq.n	800438c <UART_SetConfig+0x1f0>
 800435e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004360:	d818      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d00a      	beq.n	800437c <UART_SetConfig+0x1e0>
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d814      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <UART_SetConfig+0x1d8>
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x1e8>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x1f8>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e082      	b.n	8004482 <UART_SetConfig+0x2e6>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e07e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e07a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e076      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e072      	b.n	8004482 <UART_SetConfig+0x2e6>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a35      	ldr	r2, [pc, #212]	@ (8004478 <UART_SetConfig+0x2dc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d12a      	bne.n	80043fc <UART_SetConfig+0x260>
 80043a6:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <UART_SetConfig+0x2cc>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b4:	d01a      	beq.n	80043ec <UART_SetConfig+0x250>
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	d81b      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d00c      	beq.n	80043dc <UART_SetConfig+0x240>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c6:	d815      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <UART_SetConfig+0x238>
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d008      	beq.n	80043e4 <UART_SetConfig+0x248>
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x258>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e052      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e04e      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e04a      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e046      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e042      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <UART_SetConfig+0x2c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d13a      	bne.n	800447c <UART_SetConfig+0x2e0>
 8004406:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004414:	d01a      	beq.n	800444c <UART_SetConfig+0x2b0>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800441a:	d81b      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004420:	d00c      	beq.n	800443c <UART_SetConfig+0x2a0>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004426:	d815      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x298>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d008      	beq.n	8004444 <UART_SetConfig+0x2a8>
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x2b8>
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e022      	b.n	8004482 <UART_SetConfig+0x2e6>
 800443c:	2302      	movs	r3, #2
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e01e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004444:	2304      	movs	r3, #4
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e01a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800444c:	2308      	movs	r3, #8
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e016      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e012      	b.n	8004482 <UART_SetConfig+0x2e6>
 800445c:	efff69f3 	.word	0xefff69f3
 8004460:	40008000 	.word	0x40008000
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	40004400 	.word	0x40004400
 8004470:	40004800 	.word	0x40004800
 8004474:	40004c00 	.word	0x40004c00
 8004478:	40005000 	.word	0x40005000
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a9f      	ldr	r2, [pc, #636]	@ (8004704 <UART_SetConfig+0x568>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d17a      	bne.n	8004582 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004490:	2b08      	cmp	r3, #8
 8004492:	d824      	bhi.n	80044de <UART_SetConfig+0x342>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <UART_SetConfig+0x300>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044cf 	.word	0x080044cf
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe fc5e 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004708 <UART_SetConfig+0x56c>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe fbbf 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80fb 	beq.w	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d305      	bcc.n	800450e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004514:	e0e8      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2200      	movs	r2, #0
 800451a:	461c      	mov	r4, r3
 800451c:	4615      	mov	r5, r2
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	022b      	lsls	r3, r5, #8
 8004528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800452c:	0222      	lsls	r2, r4, #8
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	0849      	lsrs	r1, r1, #1
 8004534:	2000      	movs	r0, #0
 8004536:	4688      	mov	r8, r1
 8004538:	4681      	mov	r9, r0
 800453a:	eb12 0a08 	adds.w	sl, r2, r8
 800453e:	eb43 0b09 	adc.w	fp, r3, r9
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004550:	4650      	mov	r0, sl
 8004552:	4659      	mov	r1, fp
 8004554:	f7fc fb98 	bl	8000c88 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004566:	d308      	bcc.n	800457a <UART_SetConfig+0x3de>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456e:	d204      	bcs.n	800457a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e0b6      	b.n	80046e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e0b2      	b.n	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458a:	d15e      	bne.n	800464a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800458c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x44a>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <UART_SetConfig+0x400>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fbde 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe fbf0 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004708 <UART_SetConfig+0x56c>)
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe fb3b 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d077      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005a      	lsls	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d916      	bls.n	8004642 <UART_SetConfig+0x4a6>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d212      	bcs.n	8004642 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f023 030f 	bic.w	r3, r3, #15
 8004624:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b29a      	uxth	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	4313      	orrs	r3, r2
 8004636:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	8afa      	ldrh	r2, [r7, #22]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e052      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004648:	e04e      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800464e:	2b08      	cmp	r3, #8
 8004650:	d827      	bhi.n	80046a2 <UART_SetConfig+0x506>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0x4bc>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe fb80 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004680:	61f8      	str	r0, [r7, #28]
        break;
 8004682:	e014      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fe fb92 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004688:	61f8      	str	r0, [r7, #28]
        break;
 800468a:	e010      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <UART_SetConfig+0x56c>)
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe fadd 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004696:	61f8      	str	r0, [r7, #28]
        break;
 8004698:	e009      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e005      	b.n	80046ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046ac:	bf00      	nop
    }

    if (pclk != 0U)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	085a      	lsrs	r2, r3, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d909      	bls.n	80046e2 <UART_SetConfig+0x546>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d205      	bcs.n	80046e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e002      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	40008000 	.word	0x40008000
 8004708:	00f42400 	.word	0x00f42400

0800470c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01a      	beq.n	8004822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480a:	d10a      	bne.n	8004822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b098      	sub	sp, #96	@ 0x60
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004860:	f7fd f958 	bl	8001b14 <HAL_GetTick>
 8004864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d12e      	bne.n	80048d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f88c 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e062      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d149      	bne.n	8004974 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f856 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	623b      	str	r3, [r7, #32]
   return(result);
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	60fb      	str	r3, [r7, #12]
   return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e011      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3758      	adds	r7, #88	@ 0x58
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	e04f      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b8:	d04b      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fd f8ab 	bl	8001b14 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e04e      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d037      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d034      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d031      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d110      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f838 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e029      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d111      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f81e 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0a0      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b095      	sub	sp, #84	@ 0x54
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d118      	bne.n	8004b22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e6      	bne.n	8004af0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b36:	bf00      	nop
 8004b38:	3754      	adds	r7, #84	@ 0x54
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fb05 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b088      	sub	sp, #32
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fad1 	bl	800415c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bba:	bf00      	nop
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be8:	2b84      	cmp	r3, #132	@ 0x84
 8004bea:	d005      	beq.n	8004bf8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3303      	adds	r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c0a:	f000 fc75 	bl	80054f8 <vTaskStartScheduler>
  
  return osOK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c16:	b089      	sub	sp, #36	@ 0x24
 8004c18:	af04      	add	r7, sp, #16
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <osThreadCreate+0x54>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01c      	beq.n	8004c68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685c      	ldr	r4, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691e      	ldr	r6, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ffc8 	bl	8004bd6 <makeFreeRtosPriority>
 8004c46:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c50:	9202      	str	r2, [sp, #8]
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	9100      	str	r1, [sp, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 fa7d 	bl	800515c <xTaskCreateStatic>
 8004c62:	4603      	mov	r3, r0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e01c      	b.n	8004ca2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685c      	ldr	r4, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c74:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ffaa 	bl	8004bd6 <makeFreeRtosPriority>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f107 030c 	add.w	r3, r7, #12
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	9200      	str	r2, [sp, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4632      	mov	r2, r6
 8004c90:	4629      	mov	r1, r5
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fac2 	bl	800521c <xTaskCreate>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <osDelay+0x16>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	e000      	b.n	8004cc4 <osDelay+0x18>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fbe1 	bl	800548c <vTaskDelay>
  
  return osOK;
 8004cca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f103 0208 	add.w	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f103 0208 	add.w	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 0208 	add.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d8c:	d103      	bne.n	8004d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e00c      	b.n	8004db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e002      	b.n	8004da4 <vListInsert+0x2e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d2f6      	bcs.n	8004d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6852      	ldr	r2, [r2, #4]
 8004e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d103      	bne.n	8004e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	@ 0x38
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <xQueueSemaphoreTake+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	61fb      	str	r3, [r7, #28]
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e90:	f000 ff3c 	bl	8005d0c <xTaskGetSchedulerState>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <xQueueSemaphoreTake+0x64>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <xQueueSemaphoreTake+0x68>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <xQueueSemaphoreTake+0x6a>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	61bb      	str	r3, [r7, #24]
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	e7fd      	b.n	8004ebe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ec2:	f001 f9f1 	bl	80062a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d024      	beq.n	8004f1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ee2:	f001 f837 	bl	8005f54 <pvTaskIncrementMutexHeldCount>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fd47 	bl	800598c <xTaskRemoveFromEventList>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f04:	4b54      	ldr	r3, [pc, #336]	@ (8005058 <xQueueSemaphoreTake+0x21c>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f14:	f001 f9fa 	bl	800630c <vPortExitCritical>
				return pdPASS;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e098      	b.n	800504e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d112      	bne.n	8004f48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	617b      	str	r3, [r7, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f40:	f001 f9e4 	bl	800630c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e082      	b.n	800504e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4e:	f107 030c 	add.w	r3, r7, #12
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fd7e 	bl	8005a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f5c:	f001 f9d6 	bl	800630c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f60:	f000 fb2c 	bl	80055bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f64:	f001 f9a0 	bl	80062a8 <vPortEnterCritical>
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f74:	d103      	bne.n	8004f7e <xQueueSemaphoreTake+0x142>
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f8a:	d103      	bne.n	8004f94 <xQueueSemaphoreTake+0x158>
 8004f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f94:	f001 f9ba 	bl	800630c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f98:	463a      	mov	r2, r7
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fd6d 	bl	8005a80 <xTaskCheckForTimeOut>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d132      	bne.n	8005012 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fae:	f000 f8bf 	bl	8005130 <prvIsQueueEmpty>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d026      	beq.n	8005006 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004fc0:	f001 f972 	bl	80062a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 febd 	bl	8005d48 <xTaskPriorityInherit>
 8004fce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004fd0:	f001 f99c 	bl	800630c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	3324      	adds	r3, #36	@ 0x24
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fcaf 	bl	8005940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004fe4:	f000 f852 	bl	800508c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fe8:	f000 faf6 	bl	80055d8 <xTaskResumeAll>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f47f af67 	bne.w	8004ec2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ff4:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <xQueueSemaphoreTake+0x21c>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e75d      	b.n	8004ec2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005006:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005008:	f000 f840 	bl	800508c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800500c:	f000 fae4 	bl	80055d8 <xTaskResumeAll>
 8005010:	e757      	b.n	8004ec2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005014:	f000 f83a 	bl	800508c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005018:	f000 fade 	bl	80055d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800501e:	f000 f887 	bl	8005130 <prvIsQueueEmpty>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f43f af4c 	beq.w	8004ec2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005030:	f001 f93a 	bl	80062a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005034:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005036:	f000 f811 	bl	800505c <prvGetDisinheritPriorityAfterTimeout>
 800503a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800503c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fef6 	bl	8005e34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005048:	f001 f960 	bl	800630c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800504c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800504e:	4618      	mov	r0, r3
 8005050:	3738      	adds	r7, #56	@ 0x38
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e001      	b.n	800507e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800507e:	68fb      	ldr	r3, [r7, #12]
	}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005094:	f001 f908 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800509e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050a0:	e011      	b.n	80050c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3324      	adds	r3, #36	@ 0x24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fc6c 	bl	800598c <xTaskRemoveFromEventList>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050ba:	f000 fd45 	bl	8005b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dce9      	bgt.n	80050a2 <prvUnlockQueue+0x16>
 80050ce:	e000      	b.n	80050d2 <prvUnlockQueue+0x46>
					break;
 80050d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	22ff      	movs	r2, #255	@ 0xff
 80050d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050da:	f001 f917 	bl	800630c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050de:	f001 f8e3 	bl	80062a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ea:	e011      	b.n	8005110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3310      	adds	r3, #16
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fc47 	bl	800598c <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005104:	f000 fd20 	bl	8005b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	3b01      	subs	r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005114:	2b00      	cmp	r3, #0
 8005116:	dce9      	bgt.n	80050ec <prvUnlockQueue+0x60>
 8005118:	e000      	b.n	800511c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800511a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005124:	f001 f8f2 	bl	800630c <vPortExitCritical>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005138:	f001 f8b6 	bl	80062a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e001      	b.n	800514e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f001 f8dd 	bl	800630c <vPortExitCritical>

	return xReturn;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08e      	sub	sp, #56	@ 0x38
 8005160:	af04      	add	r7, sp, #16
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61fb      	str	r3, [r7, #28]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051a6:	2354      	movs	r3, #84	@ 0x54
 80051a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b54      	cmp	r3, #84	@ 0x54
 80051ae:	d00b      	beq.n	80051c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61bb      	str	r3, [r7, #24]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <xTaskCreateStatic+0xb2>
 80051d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01b      	beq.n	800520e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051e8:	2300      	movs	r3, #0
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	f107 0314 	add.w	r3, r7, #20
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f850 	bl	80052a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005208:	f000 f8d6 	bl	80053b8 <prvAddNewTaskToReadyList>
 800520c:	e001      	b.n	8005212 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005212:	697b      	ldr	r3, [r7, #20]
	}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	@ 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	@ 0x30
 8005220:	af04      	add	r7, sp, #16
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4618      	mov	r0, r3
 8005232:	f001 f919 	bl	8006468 <pvPortMalloc>
 8005236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00e      	beq.n	800525c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800523e:	2054      	movs	r0, #84	@ 0x54
 8005240:	f001 f912 	bl	8006468 <pvPortMalloc>
 8005244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	631a      	str	r2, [r3, #48]	@ 0x30
 8005252:	e005      	b.n	8005260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005254:	6978      	ldr	r0, [r7, #20]
 8005256:	f001 f9d5 	bl	8006604 <vPortFree>
 800525a:	e001      	b.n	8005260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	2300      	movs	r3, #0
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f80e 	bl	80052a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800528a:	69f8      	ldr	r0, [r7, #28]
 800528c:	f000 f894 	bl	80053b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005290:	2301      	movs	r3, #1
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e002      	b.n	800529c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800529a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800529c:	69bb      	ldr	r3, [r7, #24]
	}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052be:	3b01      	subs	r3, #1
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f023 0307 	bic.w	r3, r3, #7
 80052cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	617b      	str	r3, [r7, #20]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01f      	beq.n	8005336 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e012      	b.n	8005322 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	7819      	ldrb	r1, [r3, #0]
 8005304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	3334      	adds	r3, #52	@ 0x34
 800530c:	460a      	mov	r2, r1
 800530e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b0f      	cmp	r3, #15
 8005326:	d9e9      	bls.n	80052fc <prvInitialiseNewTask+0x56>
 8005328:	e000      	b.n	800532c <prvInitialiseNewTask+0x86>
			{
				break;
 800532a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005334:	e003      	b.n	800533e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	2b06      	cmp	r3, #6
 8005342:	d901      	bls.n	8005348 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005344:	2306      	movs	r3, #6
 8005346:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800534c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005352:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fcd8 	bl	8004d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	3318      	adds	r3, #24
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fcd3 	bl	8004d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	f1c3 0207 	rsb	r2, r3, #7
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005382:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	69b8      	ldr	r0, [r7, #24]
 8005398:	f000 fe56 	bl	8006048 <pxPortInitialiseStack>
 800539c:	4602      	mov	r2, r0
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ae:	bf00      	nop
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c0:	f000 ff72 	bl	80062a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	4a29      	ldr	r2, [pc, #164]	@ (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ce:	4b29      	ldr	r3, [pc, #164]	@ (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053d6:	4a27      	ldr	r2, [pc, #156]	@ (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053dc:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <prvAddNewTaskToReadyList+0xb8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d110      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e4:	f000 fbd4 	bl	8005b90 <prvInitialiseTaskLists>
 80053e8:	e00d      	b.n	8005406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ea:	4b23      	ldr	r3, [pc, #140]	@ (8005478 <prvAddNewTaskToReadyList+0xc0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053f2:	4b20      	ldr	r3, [pc, #128]	@ (8005474 <prvAddNewTaskToReadyList+0xbc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d802      	bhi.n	8005406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005400:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <prvAddNewTaskToReadyList+0xbc>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005406:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <prvAddNewTaskToReadyList+0xc4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <prvAddNewTaskToReadyList+0xc4>)
 800540e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <prvAddNewTaskToReadyList+0xc8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <prvAddNewTaskToReadyList+0xc8>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a15      	ldr	r2, [pc, #84]	@ (8005484 <prvAddNewTaskToReadyList+0xcc>)
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7ff fc78 	bl	8004d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800543e:	f000 ff65 	bl	800630c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <prvAddNewTaskToReadyList+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00e      	beq.n	8005468 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800544a:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <prvAddNewTaskToReadyList+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d207      	bcs.n	8005468 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <prvAddNewTaskToReadyList+0xd0>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000940 	.word	0x20000940
 8005474:	20000840 	.word	0x20000840
 8005478:	2000094c 	.word	0x2000094c
 800547c:	2000095c 	.word	0x2000095c
 8005480:	20000948 	.word	0x20000948
 8005484:	20000844 	.word	0x20000844
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800549e:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <vTaskDelay+0x64>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <vTaskDelay+0x32>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054be:	f000 f87d 	bl	80055bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c2:	2100      	movs	r1, #0
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fd59 	bl	8005f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054ca:	f000 f885 	bl	80055d8 <xTaskResumeAll>
 80054ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054d6:	4b07      	ldr	r3, [pc, #28]	@ (80054f4 <vTaskDelay+0x68>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000968 	.word	0x20000968
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	@ 0x28
 80054fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005506:	463a      	mov	r2, r7
 8005508:	1d39      	adds	r1, r7, #4
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f7fb fd68 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	9202      	str	r2, [sp, #8]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2300      	movs	r3, #0
 8005524:	460a      	mov	r2, r1
 8005526:	491f      	ldr	r1, [pc, #124]	@ (80055a4 <vTaskStartScheduler+0xac>)
 8005528:	481f      	ldr	r0, [pc, #124]	@ (80055a8 <vTaskStartScheduler+0xb0>)
 800552a:	f7ff fe17 	bl	800515c <xTaskCreateStatic>
 800552e:	4603      	mov	r3, r0
 8005530:	4a1e      	ldr	r2, [pc, #120]	@ (80055ac <vTaskStartScheduler+0xb4>)
 8005532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005534:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <vTaskStartScheduler+0xb4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e001      	b.n	8005546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d116      	bne.n	800557a <vTaskStartScheduler+0x82>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	613b      	str	r3, [r7, #16]
}
 800555e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <vTaskStartScheduler+0xb8>)
 8005562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005566:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005568:	4b12      	ldr	r3, [pc, #72]	@ (80055b4 <vTaskStartScheduler+0xbc>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800556e:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <vTaskStartScheduler+0xc0>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005574:	f000 fdf4 	bl	8006160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005578:	e00f      	b.n	800559a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005580:	d10b      	bne.n	800559a <vTaskStartScheduler+0xa2>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <vTaskStartScheduler+0x9e>
}
 800559a:	bf00      	nop
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800b04c 	.word	0x0800b04c
 80055a8:	08005b61 	.word	0x08005b61
 80055ac:	20000964 	.word	0x20000964
 80055b0:	20000960 	.word	0x20000960
 80055b4:	2000094c 	.word	0x2000094c
 80055b8:	20000944 	.word	0x20000944

080055bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c0:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <vTaskSuspendAll+0x18>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a03      	ldr	r2, [pc, #12]	@ (80055d4 <vTaskSuspendAll+0x18>)
 80055c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20000968 	.word	0x20000968

080055d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055e6:	4b42      	ldr	r3, [pc, #264]	@ (80056f0 <xTaskResumeAll+0x118>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <xTaskResumeAll+0x2e>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	603b      	str	r3, [r7, #0]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005606:	f000 fe4f 	bl	80062a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800560a:	4b39      	ldr	r3, [pc, #228]	@ (80056f0 <xTaskResumeAll+0x118>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	4a37      	ldr	r2, [pc, #220]	@ (80056f0 <xTaskResumeAll+0x118>)
 8005612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005614:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <xTaskResumeAll+0x118>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d161      	bne.n	80056e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800561c:	4b35      	ldr	r3, [pc, #212]	@ (80056f4 <xTaskResumeAll+0x11c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05d      	beq.n	80056e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005624:	e02e      	b.n	8005684 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005626:	4b34      	ldr	r3, [pc, #208]	@ (80056f8 <xTaskResumeAll+0x120>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3318      	adds	r3, #24
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fbd8 	bl	8004de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fbd3 	bl	8004de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	4b2c      	ldr	r3, [pc, #176]	@ (80056fc <xTaskResumeAll+0x124>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <xTaskResumeAll+0x124>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <xTaskResumeAll+0x128>)
 8005662:	441a      	add	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7ff fb5f 	bl	8004d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005674:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <xTaskResumeAll+0x12c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800567e:	4b22      	ldr	r3, [pc, #136]	@ (8005708 <xTaskResumeAll+0x130>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005684:	4b1c      	ldr	r3, [pc, #112]	@ (80056f8 <xTaskResumeAll+0x120>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1cc      	bne.n	8005626 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005692:	f000 fb1b 	bl	8005ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005696:	4b1d      	ldr	r3, [pc, #116]	@ (800570c <xTaskResumeAll+0x134>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f000 f837 	bl	8005714 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056ac:	4b16      	ldr	r3, [pc, #88]	@ (8005708 <xTaskResumeAll+0x130>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f1      	bne.n	80056a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <xTaskResumeAll+0x134>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056c4:	4b10      	ldr	r3, [pc, #64]	@ (8005708 <xTaskResumeAll+0x130>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <xTaskResumeAll+0x138>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e0:	f000 fe14 	bl	800630c <vPortExitCritical>

	return xAlreadyYielded;
 80056e4:	68bb      	ldr	r3, [r7, #8]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000968 	.word	0x20000968
 80056f4:	20000940 	.word	0x20000940
 80056f8:	20000900 	.word	0x20000900
 80056fc:	20000948 	.word	0x20000948
 8005700:	20000844 	.word	0x20000844
 8005704:	20000840 	.word	0x20000840
 8005708:	20000954 	.word	0x20000954
 800570c:	20000950 	.word	0x20000950
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571e:	4b4f      	ldr	r3, [pc, #316]	@ (800585c <xTaskIncrementTick+0x148>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 808f 	bne.w	8005846 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005728:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <xTaskIncrementTick+0x14c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005730:	4a4b      	ldr	r2, [pc, #300]	@ (8005860 <xTaskIncrementTick+0x14c>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d121      	bne.n	8005780 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800573c:	4b49      	ldr	r3, [pc, #292]	@ (8005864 <xTaskIncrementTick+0x150>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	603b      	str	r3, [r7, #0]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <xTaskIncrementTick+0x46>
 800575e:	4b41      	ldr	r3, [pc, #260]	@ (8005864 <xTaskIncrementTick+0x150>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	4b40      	ldr	r3, [pc, #256]	@ (8005868 <xTaskIncrementTick+0x154>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a3e      	ldr	r2, [pc, #248]	@ (8005864 <xTaskIncrementTick+0x150>)
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	4a3e      	ldr	r2, [pc, #248]	@ (8005868 <xTaskIncrementTick+0x154>)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b3e      	ldr	r3, [pc, #248]	@ (800586c <xTaskIncrementTick+0x158>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a3c      	ldr	r2, [pc, #240]	@ (800586c <xTaskIncrementTick+0x158>)
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	f000 faa6 	bl	8005ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005780:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <xTaskIncrementTick+0x15c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d348      	bcc.n	800581c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800578a:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <xTaskIncrementTick+0x150>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005794:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <xTaskIncrementTick+0x15c>)
 8005796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800579a:	601a      	str	r2, [r3, #0]
					break;
 800579c:	e03e      	b.n	800581c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <xTaskIncrementTick+0x150>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d203      	bcs.n	80057be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005870 <xTaskIncrementTick+0x15c>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057bc:	e02e      	b.n	800581c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fb10 	bl	8004de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3318      	adds	r3, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fb07 	bl	8004de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	2201      	movs	r2, #1
 80057e0:	409a      	lsls	r2, r3
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <xTaskIncrementTick+0x160>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	4a22      	ldr	r2, [pc, #136]	@ (8005874 <xTaskIncrementTick+0x160>)
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005878 <xTaskIncrementTick+0x164>)
 80057fa:	441a      	add	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7ff fa93 	bl	8004d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <xTaskIncrementTick+0x168>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	429a      	cmp	r2, r3
 8005814:	d3b9      	bcc.n	800578a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005816:	2301      	movs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	e7b6      	b.n	800578a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800581c:	4b17      	ldr	r3, [pc, #92]	@ (800587c <xTaskIncrementTick+0x168>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005822:	4915      	ldr	r1, [pc, #84]	@ (8005878 <xTaskIncrementTick+0x164>)
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d901      	bls.n	8005838 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <xTaskIncrementTick+0x16c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e004      	b.n	8005850 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005846:	4b0f      	ldr	r3, [pc, #60]	@ (8005884 <xTaskIncrementTick+0x170>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	4a0d      	ldr	r2, [pc, #52]	@ (8005884 <xTaskIncrementTick+0x170>)
 800584e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005850:	697b      	ldr	r3, [r7, #20]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000968 	.word	0x20000968
 8005860:	20000944 	.word	0x20000944
 8005864:	200008f8 	.word	0x200008f8
 8005868:	200008fc 	.word	0x200008fc
 800586c:	20000958 	.word	0x20000958
 8005870:	20000960 	.word	0x20000960
 8005874:	20000948 	.word	0x20000948
 8005878:	20000844 	.word	0x20000844
 800587c:	20000840 	.word	0x20000840
 8005880:	20000954 	.word	0x20000954
 8005884:	20000950 	.word	0x20000950

08005888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800588e:	4b27      	ldr	r3, [pc, #156]	@ (800592c <vTaskSwitchContext+0xa4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005896:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <vTaskSwitchContext+0xa8>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800589c:	e040      	b.n	8005920 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800589e:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <vTaskSwitchContext+0xa8>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a4:	4b23      	ldr	r3, [pc, #140]	@ (8005934 <vTaskSwitchContext+0xac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	f1c3 031f 	rsb	r3, r3, #31
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	491f      	ldr	r1, [pc, #124]	@ (8005938 <vTaskSwitchContext+0xb0>)
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <vTaskSwitchContext+0x5a>
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4a11      	ldr	r2, [pc, #68]	@ (8005938 <vTaskSwitchContext+0xb0>)
 80058f2:	4413      	add	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3308      	adds	r3, #8
 8005908:	429a      	cmp	r2, r3
 800590a:	d104      	bne.n	8005916 <vTaskSwitchContext+0x8e>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a07      	ldr	r2, [pc, #28]	@ (800593c <vTaskSwitchContext+0xb4>)
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000968 	.word	0x20000968
 8005930:	20000954 	.word	0x20000954
 8005934:	20000948 	.word	0x20000948
 8005938:	20000844 	.word	0x20000844
 800593c:	20000840 	.word	0x20000840

08005940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005968:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <vTaskPlaceOnEventList+0x48>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3318      	adds	r3, #24
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fa00 	bl	8004d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005976:	2101      	movs	r1, #1
 8005978:	6838      	ldr	r0, [r7, #0]
 800597a:	f000 faff 	bl	8005f7c <prvAddCurrentTaskToDelayedList>
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000840 	.word	0x20000840

0800598c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3318      	adds	r3, #24
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fa12 	bl	8004de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a3c <xTaskRemoveFromEventList+0xb0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11c      	bne.n	8005a06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff fa09 	bl	8004de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	2201      	movs	r2, #1
 80059dc:	409a      	lsls	r2, r3
 80059de:	4b18      	ldr	r3, [pc, #96]	@ (8005a40 <xTaskRemoveFromEventList+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	4a16      	ldr	r2, [pc, #88]	@ (8005a40 <xTaskRemoveFromEventList+0xb4>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <xTaskRemoveFromEventList+0xb8>)
 80059f6:	441a      	add	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f7ff f995 	bl	8004d2e <vListInsertEnd>
 8005a04:	e005      	b.n	8005a12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3318      	adds	r3, #24
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	480e      	ldr	r0, [pc, #56]	@ (8005a48 <xTaskRemoveFromEventList+0xbc>)
 8005a0e:	f7ff f98e 	bl	8004d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a16:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <xTaskRemoveFromEventList+0xc0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d905      	bls.n	8005a2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a24:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <xTaskRemoveFromEventList+0xc4>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e001      	b.n	8005a30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000968 	.word	0x20000968
 8005a40:	20000948 	.word	0x20000948
 8005a44:	20000844 	.word	0x20000844
 8005a48:	20000900 	.word	0x20000900
 8005a4c:	20000840 	.word	0x20000840
 8005a50:	20000954 	.word	0x20000954

08005a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <vTaskInternalSetTimeOutState+0x24>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <vTaskInternalSetTimeOutState+0x28>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000958 	.word	0x20000958
 8005a7c:	20000944 	.word	0x20000944

08005a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ac6:	f000 fbef 	bl	80062a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <xTaskCheckForTimeOut+0xc0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae2:	d102      	bne.n	8005aea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e023      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b15      	ldr	r3, [pc, #84]	@ (8005b44 <xTaskCheckForTimeOut+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d007      	beq.n	8005b06 <xTaskCheckForTimeOut+0x86>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e015      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d20b      	bcs.n	8005b28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff99 	bl	8005a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e004      	b.n	8005b32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b32:	f000 fbeb 	bl	800630c <vPortExitCritical>

	return xReturn;
 8005b36:	69fb      	ldr	r3, [r7, #28]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000944 	.word	0x20000944
 8005b44:	20000958 	.word	0x20000958

08005b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <vTaskMissedYield+0x14>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20000954 	.word	0x20000954

08005b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b68:	f000 f852 	bl	8005c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <prvIdleTask+0x28>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d9f9      	bls.n	8005b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <prvIdleTask+0x2c>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b84:	e7f0      	b.n	8005b68 <prvIdleTask+0x8>
 8005b86:	bf00      	nop
 8005b88:	20000844 	.word	0x20000844
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	e00c      	b.n	8005bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <prvInitialiseTaskLists+0x60>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f892 	bl	8004cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d9ef      	bls.n	8005b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bbc:	480d      	ldr	r0, [pc, #52]	@ (8005bf4 <prvInitialiseTaskLists+0x64>)
 8005bbe:	f7ff f889 	bl	8004cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bc2:	480d      	ldr	r0, [pc, #52]	@ (8005bf8 <prvInitialiseTaskLists+0x68>)
 8005bc4:	f7ff f886 	bl	8004cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc8:	480c      	ldr	r0, [pc, #48]	@ (8005bfc <prvInitialiseTaskLists+0x6c>)
 8005bca:	f7ff f883 	bl	8004cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bce:	480c      	ldr	r0, [pc, #48]	@ (8005c00 <prvInitialiseTaskLists+0x70>)
 8005bd0:	f7ff f880 	bl	8004cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd4:	480b      	ldr	r0, [pc, #44]	@ (8005c04 <prvInitialiseTaskLists+0x74>)
 8005bd6:	f7ff f87d 	bl	8004cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <prvInitialiseTaskLists+0x78>)
 8005bdc:	4a05      	ldr	r2, [pc, #20]	@ (8005bf4 <prvInitialiseTaskLists+0x64>)
 8005bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <prvInitialiseTaskLists+0x7c>)
 8005be2:	4a05      	ldr	r2, [pc, #20]	@ (8005bf8 <prvInitialiseTaskLists+0x68>)
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000844 	.word	0x20000844
 8005bf4:	200008d0 	.word	0x200008d0
 8005bf8:	200008e4 	.word	0x200008e4
 8005bfc:	20000900 	.word	0x20000900
 8005c00:	20000914 	.word	0x20000914
 8005c04:	2000092c 	.word	0x2000092c
 8005c08:	200008f8 	.word	0x200008f8
 8005c0c:	200008fc 	.word	0x200008fc

08005c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c16:	e019      	b.n	8005c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c18:	f000 fb46 	bl	80062a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	4b10      	ldr	r3, [pc, #64]	@ (8005c60 <prvCheckTasksWaitingTermination+0x50>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f8dd 	bl	8004de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <prvCheckTasksWaitingTermination+0x54>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	4a0b      	ldr	r2, [pc, #44]	@ (8005c64 <prvCheckTasksWaitingTermination+0x54>)
 8005c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c38:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c42:	f000 fb63 	bl	800630c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f810 	bl	8005c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4c:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <prvCheckTasksWaitingTermination+0x58>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e1      	bne.n	8005c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000914 	.word	0x20000914
 8005c64:	20000940 	.word	0x20000940
 8005c68:	20000928 	.word	0x20000928

08005c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fcbe 	bl	8006604 <vPortFree>
				vPortFree( pxTCB );
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fcbb 	bl	8006604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c8e:	e019      	b.n	8005cc4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d103      	bne.n	8005ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fcb2 	bl	8006604 <vPortFree>
	}
 8005ca0:	e010      	b.n	8005cc4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d00b      	beq.n	8005cc4 <prvDeleteTCB+0x58>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60fb      	str	r3, [r7, #12]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <prvDeleteTCB+0x54>
	}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce4:	e008      	b.n	8005cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	200008f8 	.word	0x200008f8
 8005d08:	20000960 	.word	0x20000960

08005d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <xTaskGetSchedulerState+0x34>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e008      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d20:	4b08      	ldr	r3, [pc, #32]	@ (8005d44 <xTaskGetSchedulerState+0x38>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e001      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d32:	687b      	ldr	r3, [r7, #4]
	}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	2000094c 	.word	0x2000094c
 8005d44:	20000968 	.word	0x20000968

08005d48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d05e      	beq.n	8005e1c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	4b31      	ldr	r3, [pc, #196]	@ (8005e28 <xTaskPriorityInherit+0xe0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d24e      	bcs.n	8005e0a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db06      	blt.n	8005d82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d74:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <xTaskPriorityInherit+0xe0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7a:	f1c3 0207 	rsb	r2, r3, #7
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6959      	ldr	r1, [r3, #20]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a26      	ldr	r2, [pc, #152]	@ (8005e2c <xTaskPriorityInherit+0xe4>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4299      	cmp	r1, r3
 8005d98:	d12f      	bne.n	8005dfa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff f822 	bl	8004de8 <uxListRemove>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	2201      	movs	r2, #1
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43da      	mvns	r2, r3
 8005db6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e30 <xTaskPriorityInherit+0xe8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <xTaskPriorityInherit+0xe8>)
 8005dbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dc0:	4b19      	ldr	r3, [pc, #100]	@ (8005e28 <xTaskPriorityInherit+0xe0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	2201      	movs	r2, #1
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	4b17      	ldr	r3, [pc, #92]	@ (8005e30 <xTaskPriorityInherit+0xe8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	4a15      	ldr	r2, [pc, #84]	@ (8005e30 <xTaskPriorityInherit+0xe8>)
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4a10      	ldr	r2, [pc, #64]	@ (8005e2c <xTaskPriorityInherit+0xe4>)
 8005dea:	441a      	add	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe ff9b 	bl	8004d2e <vListInsertEnd>
 8005df8:	e004      	b.n	8005e04 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <xTaskPriorityInherit+0xe0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e008      	b.n	8005e1c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <xTaskPriorityInherit+0xe0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d201      	bcs.n	8005e1c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000840 	.word	0x20000840
 8005e2c:	20000844 	.word	0x20000844
 8005e30:	20000948 	.word	0x20000948

08005e34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e42:	2301      	movs	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d079      	beq.n	8005f40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	60fb      	str	r3, [r7, #12]
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d902      	bls.n	8005e7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	e002      	b.n	8005e82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d059      	beq.n	8005f40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d154      	bne.n	8005f40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e96:	4b2c      	ldr	r3, [pc, #176]	@ (8005f48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d10b      	bne.n	8005eb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	60bb      	str	r3, [r7, #8]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db04      	blt.n	8005ed6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f1c3 0207 	rsb	r2, r3, #7
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6959      	ldr	r1, [r3, #20]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	d129      	bne.n	8005f40 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe ff79 	bl	8004de8 <uxListRemove>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	2201      	movs	r2, #1
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43da      	mvns	r2, r3
 8005f08:	4b11      	ldr	r3, [pc, #68]	@ (8005f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	4a10      	ldr	r2, [pc, #64]	@ (8005f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	4a0b      	ldr	r2, [pc, #44]	@ (8005f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4a06      	ldr	r2, [pc, #24]	@ (8005f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f32:	441a      	add	r2, r3
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe fef7 	bl	8004d2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f40:	bf00      	nop
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000840 	.word	0x20000840
 8005f4c:	20000844 	.word	0x20000844
 8005f50:	20000948 	.word	0x20000948

08005f54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f58:	4b07      	ldr	r3, [pc, #28]	@ (8005f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f66:	3201      	adds	r2, #1
 8005f68:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005f6a:	4b03      	ldr	r3, [pc, #12]	@ (8005f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000840 	.word	0x20000840

08005f7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f86:	4b29      	ldr	r3, [pc, #164]	@ (800602c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8c:	4b28      	ldr	r3, [pc, #160]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe ff28 	bl	8004de8 <uxListRemove>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f9e:	4b24      	ldr	r3, [pc, #144]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43da      	mvns	r2, r3
 8005fac:	4b21      	ldr	r3, [pc, #132]	@ (8006034 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	4a20      	ldr	r2, [pc, #128]	@ (8006034 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fbc:	d10a      	bne.n	8005fd4 <prvAddCurrentTaskToDelayedList+0x58>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	481a      	ldr	r0, [pc, #104]	@ (8006038 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fce:	f7fe feae 	bl	8004d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fd2:	e026      	b.n	8006022 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fdc:	4b14      	ldr	r3, [pc, #80]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d209      	bcs.n	8006000 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fec:	4b13      	ldr	r3, [pc, #76]	@ (800603c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe febc 	bl	8004d76 <vListInsert>
}
 8005ffe:	e010      	b.n	8006022 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006000:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fe feb2 	bl	8004d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006012:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	429a      	cmp	r2, r3
 800601a:	d202      	bcs.n	8006022 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800601c:	4a09      	ldr	r2, [pc, #36]	@ (8006044 <prvAddCurrentTaskToDelayedList+0xc8>)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6013      	str	r3, [r2, #0]
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000944 	.word	0x20000944
 8006030:	20000840 	.word	0x20000840
 8006034:	20000948 	.word	0x20000948
 8006038:	2000092c 	.word	0x2000092c
 800603c:	200008fc 	.word	0x200008fc
 8006040:	200008f8 	.word	0x200008f8
 8006044:	20000960 	.word	0x20000960

08006048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3b04      	subs	r3, #4
 8006058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3b04      	subs	r3, #4
 8006066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3b04      	subs	r3, #4
 8006076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006078:	4a0c      	ldr	r2, [pc, #48]	@ (80060ac <pxPortInitialiseStack+0x64>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b14      	subs	r3, #20
 8006082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b04      	subs	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f06f 0202 	mvn.w	r2, #2
 8006096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3b20      	subs	r3, #32
 800609c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800609e:	68fb      	ldr	r3, [r7, #12]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	080060b1 	.word	0x080060b1

080060b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060ba:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <prvTaskExitError+0x58>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c2:	d00b      	beq.n	80060dc <prvTaskExitError+0x2c>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <prvTaskExitError+0x28>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60bb      	str	r3, [r7, #8]
}
 80060ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060f0:	bf00      	nop
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0fc      	beq.n	80060f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	2000000c 	.word	0x2000000c
 800610c:	00000000 	.word	0x00000000

08006110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006110:	4b07      	ldr	r3, [pc, #28]	@ (8006130 <pxCurrentTCBConst2>)
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	6808      	ldr	r0, [r1, #0]
 8006116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	f380 8809 	msr	PSP, r0
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f380 8811 	msr	BASEPRI, r0
 800612a:	4770      	bx	lr
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst2>:
 8006130:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006138:	4808      	ldr	r0, [pc, #32]	@ (800615c <prvPortStartFirstTask+0x24>)
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	6800      	ldr	r0, [r0, #0]
 800613e:	f380 8808 	msr	MSP, r0
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8814 	msr	CONTROL, r0
 800614a:	b662      	cpsie	i
 800614c:	b661      	cpsie	f
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	df00      	svc	0
 8006158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800615a:	bf00      	nop
 800615c:	e000ed08 	.word	0xe000ed08

08006160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006166:	4b47      	ldr	r3, [pc, #284]	@ (8006284 <xPortStartScheduler+0x124>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a47      	ldr	r2, [pc, #284]	@ (8006288 <xPortStartScheduler+0x128>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10b      	bne.n	8006188 <xPortStartScheduler+0x28>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	613b      	str	r3, [r7, #16]
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006188:	4b3e      	ldr	r3, [pc, #248]	@ (8006284 <xPortStartScheduler+0x124>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a3f      	ldr	r2, [pc, #252]	@ (800628c <xPortStartScheduler+0x12c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d10b      	bne.n	80061aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60fb      	str	r3, [r7, #12]
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	e7fd      	b.n	80061a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061aa:	4b39      	ldr	r3, [pc, #228]	@ (8006290 <xPortStartScheduler+0x130>)
 80061ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	22ff      	movs	r2, #255	@ 0xff
 80061ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b31      	ldr	r3, [pc, #196]	@ (8006294 <xPortStartScheduler+0x134>)
 80061d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061d2:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <xPortStartScheduler+0x138>)
 80061d4:	2207      	movs	r2, #7
 80061d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061d8:	e009      	b.n	80061ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061da:	4b2f      	ldr	r3, [pc, #188]	@ (8006298 <xPortStartScheduler+0x138>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006298 <xPortStartScheduler+0x138>)
 80061e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f6:	2b80      	cmp	r3, #128	@ 0x80
 80061f8:	d0ef      	beq.n	80061da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061fa:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <xPortStartScheduler+0x138>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1c3 0307 	rsb	r3, r3, #7
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00b      	beq.n	800621e <xPortStartScheduler+0xbe>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800621e:	4b1e      	ldr	r3, [pc, #120]	@ (8006298 <xPortStartScheduler+0x138>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <xPortStartScheduler+0x138>)
 8006226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006228:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <xPortStartScheduler+0x138>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <xPortStartScheduler+0x138>)
 8006232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800623c:	4b17      	ldr	r3, [pc, #92]	@ (800629c <xPortStartScheduler+0x13c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a16      	ldr	r2, [pc, #88]	@ (800629c <xPortStartScheduler+0x13c>)
 8006242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006248:	4b14      	ldr	r3, [pc, #80]	@ (800629c <xPortStartScheduler+0x13c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a13      	ldr	r2, [pc, #76]	@ (800629c <xPortStartScheduler+0x13c>)
 800624e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006254:	f000 f8da 	bl	800640c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006258:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <xPortStartScheduler+0x140>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800625e:	f000 f8f9 	bl	8006454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006262:	4b10      	ldr	r3, [pc, #64]	@ (80062a4 <xPortStartScheduler+0x144>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a0f      	ldr	r2, [pc, #60]	@ (80062a4 <xPortStartScheduler+0x144>)
 8006268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800626c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800626e:	f7ff ff63 	bl	8006138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006272:	f7ff fb09 	bl	8005888 <vTaskSwitchContext>
	prvTaskExitError();
 8006276:	f7ff ff1b 	bl	80060b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	e000ed00 	.word	0xe000ed00
 8006288:	410fc271 	.word	0x410fc271
 800628c:	410fc270 	.word	0x410fc270
 8006290:	e000e400 	.word	0xe000e400
 8006294:	2000096c 	.word	0x2000096c
 8006298:	20000970 	.word	0x20000970
 800629c:	e000ed20 	.word	0xe000ed20
 80062a0:	2000000c 	.word	0x2000000c
 80062a4:	e000ef34 	.word	0xe000ef34

080062a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <vPortEnterCritical+0x5c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d110      	bne.n	80062f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <vPortEnterCritical+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <vPortEnterCritical+0x4a>
	}
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	2000000c 	.word	0x2000000c
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <vPortExitCritical+0x50>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <vPortExitCritical+0x26>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a08      	ldr	r2, [pc, #32]	@ (800635c <vPortExitCritical+0x50>)
 800633a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <vPortExitCritical+0x50>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <vPortExitCritical+0x44>
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	2000000c 	.word	0x2000000c

08006360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006360:	f3ef 8009 	mrs	r0, PSP
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <pxCurrentTCBConst>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	f01e 0f10 	tst.w	lr, #16
 8006370:	bf08      	it	eq
 8006372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	6010      	str	r0, [r2, #0]
 800637c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006384:	f380 8811 	msr	BASEPRI, r0
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f7ff fa7a 	bl	8005888 <vTaskSwitchContext>
 8006394:	f04f 0000 	mov.w	r0, #0
 8006398:	f380 8811 	msr	BASEPRI, r0
 800639c:	bc09      	pop	{r0, r3}
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a6:	f01e 0f10 	tst.w	lr, #16
 80063aa:	bf08      	it	eq
 80063ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063b0:	f380 8809 	msr	PSP, r0
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst>:
 80063c0:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
}
 80063e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063e2:	f7ff f997 	bl	8005714 <xTaskIncrementTick>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <xPortSysTickHandler+0x40>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006410:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <vPortSetupTimerInterrupt+0x34>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <vPortSetupTimerInterrupt+0x38>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <vPortSetupTimerInterrupt+0x3c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <vPortSetupTimerInterrupt+0x40>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	099b      	lsrs	r3, r3, #6
 8006428:	4a09      	ldr	r2, [pc, #36]	@ (8006450 <vPortSetupTimerInterrupt+0x44>)
 800642a:	3b01      	subs	r3, #1
 800642c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800642e:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <vPortSetupTimerInterrupt+0x34>)
 8006430:	2207      	movs	r2, #7
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	e000e010 	.word	0xe000e010
 8006444:	e000e018 	.word	0xe000e018
 8006448:	20000000 	.word	0x20000000
 800644c:	10624dd3 	.word	0x10624dd3
 8006450:	e000e014 	.word	0xe000e014

08006454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006464 <vPortEnableVFP+0x10>
 8006458:	6801      	ldr	r1, [r0, #0]
 800645a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800645e:	6001      	str	r1, [r0, #0]
 8006460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006462:	bf00      	nop
 8006464:	e000ed88 	.word	0xe000ed88

08006468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	@ 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006474:	f7ff f8a2 	bl	80055bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006478:	4b5c      	ldr	r3, [pc, #368]	@ (80065ec <pvPortMalloc+0x184>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006480:	f000 f924 	bl	80066cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006484:	4b5a      	ldr	r3, [pc, #360]	@ (80065f0 <pvPortMalloc+0x188>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 8095 	bne.w	80065bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01e      	beq.n	80064d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006498:	2208      	movs	r2, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d015      	beq.n	80064d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	3308      	adds	r3, #8
 80064b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <pvPortMalloc+0x6e>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	617b      	str	r3, [r7, #20]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d06f      	beq.n	80065bc <pvPortMalloc+0x154>
 80064dc:	4b45      	ldr	r3, [pc, #276]	@ (80065f4 <pvPortMalloc+0x18c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d86a      	bhi.n	80065bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064e6:	4b44      	ldr	r3, [pc, #272]	@ (80065f8 <pvPortMalloc+0x190>)
 80064e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ea:	4b43      	ldr	r3, [pc, #268]	@ (80065f8 <pvPortMalloc+0x190>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f0:	e004      	b.n	80064fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d903      	bls.n	800650e <pvPortMalloc+0xa6>
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f1      	bne.n	80064f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800650e:	4b37      	ldr	r3, [pc, #220]	@ (80065ec <pvPortMalloc+0x184>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006514:	429a      	cmp	r2, r3
 8006516:	d051      	beq.n	80065bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2208      	movs	r2, #8
 800651e:	4413      	add	r3, r2
 8006520:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	2308      	movs	r3, #8
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	429a      	cmp	r2, r3
 8006538:	d920      	bls.n	800657c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <pvPortMalloc+0xfc>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	613b      	str	r3, [r7, #16]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad2      	subs	r2, r2, r3
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006576:	69b8      	ldr	r0, [r7, #24]
 8006578:	f000 f90a 	bl	8006790 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800657c:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <pvPortMalloc+0x18c>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <pvPortMalloc+0x18c>)
 8006588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658a:	4b1a      	ldr	r3, [pc, #104]	@ (80065f4 <pvPortMalloc+0x18c>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b1b      	ldr	r3, [pc, #108]	@ (80065fc <pvPortMalloc+0x194>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d203      	bcs.n	800659e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006596:	4b17      	ldr	r3, [pc, #92]	@ (80065f4 <pvPortMalloc+0x18c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a18      	ldr	r2, [pc, #96]	@ (80065fc <pvPortMalloc+0x194>)
 800659c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <pvPortMalloc+0x188>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <pvPortMalloc+0x198>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	4a11      	ldr	r2, [pc, #68]	@ (8006600 <pvPortMalloc+0x198>)
 80065ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065bc:	f7ff f80c 	bl	80055d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <pvPortMalloc+0x17a>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <pvPortMalloc+0x176>
	return pvReturn;
 80065e2:	69fb      	ldr	r3, [r7, #28]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3728      	adds	r7, #40	@ 0x28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20001534 	.word	0x20001534
 80065f0:	20001548 	.word	0x20001548
 80065f4:	20001538 	.word	0x20001538
 80065f8:	2000152c 	.word	0x2000152c
 80065fc:	2000153c 	.word	0x2000153c
 8006600:	20001540 	.word	0x20001540

08006604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d04f      	beq.n	80066b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006616:	2308      	movs	r3, #8
 8006618:	425b      	negs	r3, r3
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4413      	add	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b25      	ldr	r3, [pc, #148]	@ (80066c0 <vPortFree+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <vPortFree+0x46>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <vPortFree+0x66>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60bb      	str	r3, [r7, #8]
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	e7fd      	b.n	8006666 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <vPortFree+0xbc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01e      	beq.n	80066b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d11a      	bne.n	80066b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <vPortFree+0xbc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	43db      	mvns	r3, r3
 800668a:	401a      	ands	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006690:	f7fe ff94 	bl	80055bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <vPortFree+0xc0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4413      	add	r3, r2
 800669e:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <vPortFree+0xc0>)
 80066a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066a2:	6938      	ldr	r0, [r7, #16]
 80066a4:	f000 f874 	bl	8006790 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066a8:	4b07      	ldr	r3, [pc, #28]	@ (80066c8 <vPortFree+0xc4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	4a06      	ldr	r2, [pc, #24]	@ (80066c8 <vPortFree+0xc4>)
 80066b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066b2:	f7fe ff91 	bl	80055d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20001548 	.word	0x20001548
 80066c4:	20001538 	.word	0x20001538
 80066c8:	20001544 	.word	0x20001544

080066cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066d2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80066d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066d8:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <prvHeapInit+0xac>)
 80066da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3307      	adds	r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0307 	bic.w	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006778 <prvHeapInit+0xac>)
 80066fc:	4413      	add	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006704:	4a1d      	ldr	r2, [pc, #116]	@ (800677c <prvHeapInit+0xb0>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800670a:	4b1c      	ldr	r3, [pc, #112]	@ (800677c <prvHeapInit+0xb0>)
 800670c:	2200      	movs	r2, #0
 800670e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006718:	2208      	movs	r2, #8
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <prvHeapInit+0xb4>)
 800672c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800672e:	4b14      	ldr	r3, [pc, #80]	@ (8006780 <prvHeapInit+0xb4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006736:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <prvHeapInit+0xb4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <prvHeapInit+0xb4>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <prvHeapInit+0xb8>)
 800675a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a09      	ldr	r2, [pc, #36]	@ (8006788 <prvHeapInit+0xbc>)
 8006762:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006764:	4b09      	ldr	r3, [pc, #36]	@ (800678c <prvHeapInit+0xc0>)
 8006766:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800676a:	601a      	str	r2, [r3, #0]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000974 	.word	0x20000974
 800677c:	2000152c 	.word	0x2000152c
 8006780:	20001534 	.word	0x20001534
 8006784:	2000153c 	.word	0x2000153c
 8006788:	20001538 	.word	0x20001538
 800678c:	20001548 	.word	0x20001548

08006790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006798:	4b28      	ldr	r3, [pc, #160]	@ (800683c <prvInsertBlockIntoFreeList+0xac>)
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e002      	b.n	80067a4 <prvInsertBlockIntoFreeList+0x14>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d8f7      	bhi.n	800679e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d108      	bne.n	80067d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	441a      	add	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d118      	bne.n	8006818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <prvInsertBlockIntoFreeList+0xb0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d00d      	beq.n	800680e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e008      	b.n	8006820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800680e:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <prvInsertBlockIntoFreeList+0xb0>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e003      	b.n	8006820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d002      	beq.n	800682e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	2000152c 	.word	0x2000152c
 8006840:	20001534 	.word	0x20001534

08006844 <__cvt>:
 8006844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	ec57 6b10 	vmov	r6, r7, d0
 800684c:	2f00      	cmp	r7, #0
 800684e:	460c      	mov	r4, r1
 8006850:	4619      	mov	r1, r3
 8006852:	463b      	mov	r3, r7
 8006854:	bfbb      	ittet	lt
 8006856:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800685a:	461f      	movlt	r7, r3
 800685c:	2300      	movge	r3, #0
 800685e:	232d      	movlt	r3, #45	@ 0x2d
 8006860:	700b      	strb	r3, [r1, #0]
 8006862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006864:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006868:	4691      	mov	r9, r2
 800686a:	f023 0820 	bic.w	r8, r3, #32
 800686e:	bfbc      	itt	lt
 8006870:	4632      	movlt	r2, r6
 8006872:	4616      	movlt	r6, r2
 8006874:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006878:	d005      	beq.n	8006886 <__cvt+0x42>
 800687a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800687e:	d100      	bne.n	8006882 <__cvt+0x3e>
 8006880:	3401      	adds	r4, #1
 8006882:	2102      	movs	r1, #2
 8006884:	e000      	b.n	8006888 <__cvt+0x44>
 8006886:	2103      	movs	r1, #3
 8006888:	ab03      	add	r3, sp, #12
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	ab02      	add	r3, sp, #8
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	ec47 6b10 	vmov	d0, r6, r7
 8006894:	4653      	mov	r3, sl
 8006896:	4622      	mov	r2, r4
 8006898:	f001 f8b6 	bl	8007a08 <_dtoa_r>
 800689c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068a0:	4605      	mov	r5, r0
 80068a2:	d119      	bne.n	80068d8 <__cvt+0x94>
 80068a4:	f019 0f01 	tst.w	r9, #1
 80068a8:	d00e      	beq.n	80068c8 <__cvt+0x84>
 80068aa:	eb00 0904 	add.w	r9, r0, r4
 80068ae:	2200      	movs	r2, #0
 80068b0:	2300      	movs	r3, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7fa f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ba:	b108      	cbz	r0, 80068c0 <__cvt+0x7c>
 80068bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80068c0:	2230      	movs	r2, #48	@ 0x30
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	454b      	cmp	r3, r9
 80068c6:	d31e      	bcc.n	8006906 <__cvt+0xc2>
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068cc:	1b5b      	subs	r3, r3, r5
 80068ce:	4628      	mov	r0, r5
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	b004      	add	sp, #16
 80068d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068dc:	eb00 0904 	add.w	r9, r0, r4
 80068e0:	d1e5      	bne.n	80068ae <__cvt+0x6a>
 80068e2:	7803      	ldrb	r3, [r0, #0]
 80068e4:	2b30      	cmp	r3, #48	@ 0x30
 80068e6:	d10a      	bne.n	80068fe <__cvt+0xba>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7fa f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f4:	b918      	cbnz	r0, 80068fe <__cvt+0xba>
 80068f6:	f1c4 0401 	rsb	r4, r4, #1
 80068fa:	f8ca 4000 	str.w	r4, [sl]
 80068fe:	f8da 3000 	ldr.w	r3, [sl]
 8006902:	4499      	add	r9, r3
 8006904:	e7d3      	b.n	80068ae <__cvt+0x6a>
 8006906:	1c59      	adds	r1, r3, #1
 8006908:	9103      	str	r1, [sp, #12]
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e7d9      	b.n	80068c2 <__cvt+0x7e>

0800690e <__exponent>:
 800690e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006910:	2900      	cmp	r1, #0
 8006912:	bfba      	itte	lt
 8006914:	4249      	neglt	r1, r1
 8006916:	232d      	movlt	r3, #45	@ 0x2d
 8006918:	232b      	movge	r3, #43	@ 0x2b
 800691a:	2909      	cmp	r1, #9
 800691c:	7002      	strb	r2, [r0, #0]
 800691e:	7043      	strb	r3, [r0, #1]
 8006920:	dd29      	ble.n	8006976 <__exponent+0x68>
 8006922:	f10d 0307 	add.w	r3, sp, #7
 8006926:	461d      	mov	r5, r3
 8006928:	270a      	movs	r7, #10
 800692a:	461a      	mov	r2, r3
 800692c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006930:	fb07 1416 	mls	r4, r7, r6, r1
 8006934:	3430      	adds	r4, #48	@ 0x30
 8006936:	f802 4c01 	strb.w	r4, [r2, #-1]
 800693a:	460c      	mov	r4, r1
 800693c:	2c63      	cmp	r4, #99	@ 0x63
 800693e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006942:	4631      	mov	r1, r6
 8006944:	dcf1      	bgt.n	800692a <__exponent+0x1c>
 8006946:	3130      	adds	r1, #48	@ 0x30
 8006948:	1e94      	subs	r4, r2, #2
 800694a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800694e:	1c41      	adds	r1, r0, #1
 8006950:	4623      	mov	r3, r4
 8006952:	42ab      	cmp	r3, r5
 8006954:	d30a      	bcc.n	800696c <__exponent+0x5e>
 8006956:	f10d 0309 	add.w	r3, sp, #9
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ac      	cmp	r4, r5
 800695e:	bf88      	it	hi
 8006960:	2300      	movhi	r3, #0
 8006962:	3302      	adds	r3, #2
 8006964:	4403      	add	r3, r0
 8006966:	1a18      	subs	r0, r3, r0
 8006968:	b003      	add	sp, #12
 800696a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006970:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006974:	e7ed      	b.n	8006952 <__exponent+0x44>
 8006976:	2330      	movs	r3, #48	@ 0x30
 8006978:	3130      	adds	r1, #48	@ 0x30
 800697a:	7083      	strb	r3, [r0, #2]
 800697c:	70c1      	strb	r1, [r0, #3]
 800697e:	1d03      	adds	r3, r0, #4
 8006980:	e7f1      	b.n	8006966 <__exponent+0x58>
	...

08006984 <_printf_float>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	b08d      	sub	sp, #52	@ 0x34
 800698a:	460c      	mov	r4, r1
 800698c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006990:	4616      	mov	r6, r2
 8006992:	461f      	mov	r7, r3
 8006994:	4605      	mov	r5, r0
 8006996:	f000 ff23 	bl	80077e0 <_localeconv_r>
 800699a:	6803      	ldr	r3, [r0, #0]
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7f9 fc66 	bl	8000270 <strlen>
 80069a4:	2300      	movs	r3, #0
 80069a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a8:	f8d8 3000 	ldr.w	r3, [r8]
 80069ac:	9005      	str	r0, [sp, #20]
 80069ae:	3307      	adds	r3, #7
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	f103 0208 	add.w	r2, r3, #8
 80069b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069bc:	f8d4 b000 	ldr.w	fp, [r4]
 80069c0:	f8c8 2000 	str.w	r2, [r8]
 80069c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069cc:	9307      	str	r3, [sp, #28]
 80069ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80069d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069da:	4b9c      	ldr	r3, [pc, #624]	@ (8006c4c <_printf_float+0x2c8>)
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069e0:	f7fa f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80069e4:	bb70      	cbnz	r0, 8006a44 <_printf_float+0xc0>
 80069e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ea:	4b98      	ldr	r3, [pc, #608]	@ (8006c4c <_printf_float+0x2c8>)
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069f0:	f7fa f87e 	bl	8000af0 <__aeabi_dcmple>
 80069f4:	bb30      	cbnz	r0, 8006a44 <_printf_float+0xc0>
 80069f6:	2200      	movs	r2, #0
 80069f8:	2300      	movs	r3, #0
 80069fa:	4640      	mov	r0, r8
 80069fc:	4649      	mov	r1, r9
 80069fe:	f7fa f86d 	bl	8000adc <__aeabi_dcmplt>
 8006a02:	b110      	cbz	r0, 8006a0a <_printf_float+0x86>
 8006a04:	232d      	movs	r3, #45	@ 0x2d
 8006a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0a:	4a91      	ldr	r2, [pc, #580]	@ (8006c50 <_printf_float+0x2cc>)
 8006a0c:	4b91      	ldr	r3, [pc, #580]	@ (8006c54 <_printf_float+0x2d0>)
 8006a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a12:	bf94      	ite	ls
 8006a14:	4690      	movls	r8, r2
 8006a16:	4698      	movhi	r8, r3
 8006a18:	2303      	movs	r3, #3
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	f02b 0304 	bic.w	r3, fp, #4
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	f04f 0900 	mov.w	r9, #0
 8006a26:	9700      	str	r7, [sp, #0]
 8006a28:	4633      	mov	r3, r6
 8006a2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 f9d2 	bl	8006dd8 <_printf_common>
 8006a34:	3001      	adds	r0, #1
 8006a36:	f040 808d 	bne.w	8006b54 <_printf_float+0x1d0>
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a3e:	b00d      	add	sp, #52	@ 0x34
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	f7fa f86e 	bl	8000b2c <__aeabi_dcmpun>
 8006a50:	b140      	cbz	r0, 8006a64 <_printf_float+0xe0>
 8006a52:	464b      	mov	r3, r9
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bfbc      	itt	lt
 8006a58:	232d      	movlt	r3, #45	@ 0x2d
 8006a5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <_printf_float+0x2d4>)
 8006a60:	4b7e      	ldr	r3, [pc, #504]	@ (8006c5c <_printf_float+0x2d8>)
 8006a62:	e7d4      	b.n	8006a0e <_printf_float+0x8a>
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a6a:	9206      	str	r2, [sp, #24]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	d13b      	bne.n	8006ae8 <_printf_float+0x164>
 8006a70:	2306      	movs	r3, #6
 8006a72:	6063      	str	r3, [r4, #4]
 8006a74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a78:	2300      	movs	r3, #0
 8006a7a:	6022      	str	r2, [r4, #0]
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a84:	ab09      	add	r3, sp, #36	@ 0x24
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	ec49 8b10 	vmov	d0, r8, r9
 8006a8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7ff fed6 	bl	8006844 <__cvt>
 8006a98:	9b06      	ldr	r3, [sp, #24]
 8006a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a9c:	2b47      	cmp	r3, #71	@ 0x47
 8006a9e:	4680      	mov	r8, r0
 8006aa0:	d129      	bne.n	8006af6 <_printf_float+0x172>
 8006aa2:	1cc8      	adds	r0, r1, #3
 8006aa4:	db02      	blt.n	8006aac <_printf_float+0x128>
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	dd41      	ble.n	8006b30 <_printf_float+0x1ac>
 8006aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ab4:	3901      	subs	r1, #1
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006abc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006abe:	f7ff ff26 	bl	800690e <__exponent>
 8006ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ac4:	1813      	adds	r3, r2, r0
 8006ac6:	2a01      	cmp	r2, #1
 8006ac8:	4681      	mov	r9, r0
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	dc02      	bgt.n	8006ad4 <_printf_float+0x150>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_float+0x154>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0a2      	beq.n	8006a26 <_printf_float+0xa2>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae6:	e79e      	b.n	8006a26 <_printf_float+0xa2>
 8006ae8:	9a06      	ldr	r2, [sp, #24]
 8006aea:	2a47      	cmp	r2, #71	@ 0x47
 8006aec:	d1c2      	bne.n	8006a74 <_printf_float+0xf0>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1c0      	bne.n	8006a74 <_printf_float+0xf0>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e7bd      	b.n	8006a72 <_printf_float+0xee>
 8006af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006afa:	d9db      	bls.n	8006ab4 <_printf_float+0x130>
 8006afc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b00:	d118      	bne.n	8006b34 <_printf_float+0x1b0>
 8006b02:	2900      	cmp	r1, #0
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	dd0b      	ble.n	8006b20 <_printf_float+0x19c>
 8006b08:	6121      	str	r1, [r4, #16]
 8006b0a:	b913      	cbnz	r3, 8006b12 <_printf_float+0x18e>
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	07d0      	lsls	r0, r2, #31
 8006b10:	d502      	bpl.n	8006b18 <_printf_float+0x194>
 8006b12:	3301      	adds	r3, #1
 8006b14:	440b      	add	r3, r1
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	e7db      	b.n	8006ad8 <_printf_float+0x154>
 8006b20:	b913      	cbnz	r3, 8006b28 <_printf_float+0x1a4>
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	07d2      	lsls	r2, r2, #31
 8006b26:	d501      	bpl.n	8006b2c <_printf_float+0x1a8>
 8006b28:	3302      	adds	r3, #2
 8006b2a:	e7f4      	b.n	8006b16 <_printf_float+0x192>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e7f2      	b.n	8006b16 <_printf_float+0x192>
 8006b30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	4299      	cmp	r1, r3
 8006b38:	db05      	blt.n	8006b46 <_printf_float+0x1c2>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	6121      	str	r1, [r4, #16]
 8006b3e:	07d8      	lsls	r0, r3, #31
 8006b40:	d5ea      	bpl.n	8006b18 <_printf_float+0x194>
 8006b42:	1c4b      	adds	r3, r1, #1
 8006b44:	e7e7      	b.n	8006b16 <_printf_float+0x192>
 8006b46:	2900      	cmp	r1, #0
 8006b48:	bfd4      	ite	le
 8006b4a:	f1c1 0202 	rsble	r2, r1, #2
 8006b4e:	2201      	movgt	r2, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	e7e0      	b.n	8006b16 <_printf_float+0x192>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	055a      	lsls	r2, r3, #21
 8006b58:	d407      	bmi.n	8006b6a <_printf_float+0x1e6>
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	d12b      	bne.n	8006bc0 <_printf_float+0x23c>
 8006b68:	e767      	b.n	8006a3a <_printf_float+0xb6>
 8006b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b6e:	f240 80dd 	bls.w	8006d2c <_printf_float+0x3a8>
 8006b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b76:	2200      	movs	r2, #0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f7f9 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d033      	beq.n	8006bea <_printf_float+0x266>
 8006b82:	4a37      	ldr	r2, [pc, #220]	@ (8006c60 <_printf_float+0x2dc>)
 8006b84:	2301      	movs	r3, #1
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f af54 	beq.w	8006a3a <_printf_float+0xb6>
 8006b92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b96:	4543      	cmp	r3, r8
 8006b98:	db02      	blt.n	8006ba0 <_printf_float+0x21c>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	07d8      	lsls	r0, r3, #31
 8006b9e:	d50f      	bpl.n	8006bc0 <_printf_float+0x23c>
 8006ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f af45 	beq.w	8006a3a <_printf_float+0xb6>
 8006bb0:	f04f 0900 	mov.w	r9, #0
 8006bb4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006bb8:	f104 0a1a 	add.w	sl, r4, #26
 8006bbc:	45c8      	cmp	r8, r9
 8006bbe:	dc09      	bgt.n	8006bd4 <_printf_float+0x250>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	079b      	lsls	r3, r3, #30
 8006bc4:	f100 8103 	bmi.w	8006dce <_printf_float+0x44a>
 8006bc8:	68e0      	ldr	r0, [r4, #12]
 8006bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bcc:	4298      	cmp	r0, r3
 8006bce:	bfb8      	it	lt
 8006bd0:	4618      	movlt	r0, r3
 8006bd2:	e734      	b.n	8006a3e <_printf_float+0xba>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f af2b 	beq.w	8006a3a <_printf_float+0xb6>
 8006be4:	f109 0901 	add.w	r9, r9, #1
 8006be8:	e7e8      	b.n	8006bbc <_printf_float+0x238>
 8006bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc39      	bgt.n	8006c64 <_printf_float+0x2e0>
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c60 <_printf_float+0x2dc>)
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f af1d 	beq.w	8006a3a <_printf_float+0xb6>
 8006c00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c04:	ea59 0303 	orrs.w	r3, r9, r3
 8006c08:	d102      	bne.n	8006c10 <_printf_float+0x28c>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	07d9      	lsls	r1, r3, #31
 8006c0e:	d5d7      	bpl.n	8006bc0 <_printf_float+0x23c>
 8006c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f af0d 	beq.w	8006a3a <_printf_float+0xb6>
 8006c20:	f04f 0a00 	mov.w	sl, #0
 8006c24:	f104 0b1a 	add.w	fp, r4, #26
 8006c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2a:	425b      	negs	r3, r3
 8006c2c:	4553      	cmp	r3, sl
 8006c2e:	dc01      	bgt.n	8006c34 <_printf_float+0x2b0>
 8006c30:	464b      	mov	r3, r9
 8006c32:	e793      	b.n	8006b5c <_printf_float+0x1d8>
 8006c34:	2301      	movs	r3, #1
 8006c36:	465a      	mov	r2, fp
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f aefb 	beq.w	8006a3a <_printf_float+0xb6>
 8006c44:	f10a 0a01 	add.w	sl, sl, #1
 8006c48:	e7ee      	b.n	8006c28 <_printf_float+0x2a4>
 8006c4a:	bf00      	nop
 8006c4c:	7fefffff 	.word	0x7fefffff
 8006c50:	0800b0a3 	.word	0x0800b0a3
 8006c54:	0800b0a7 	.word	0x0800b0a7
 8006c58:	0800b0ab 	.word	0x0800b0ab
 8006c5c:	0800b0af 	.word	0x0800b0af
 8006c60:	0800b0b3 	.word	0x0800b0b3
 8006c64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c6a:	4553      	cmp	r3, sl
 8006c6c:	bfa8      	it	ge
 8006c6e:	4653      	movge	r3, sl
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	4699      	mov	r9, r3
 8006c74:	dc36      	bgt.n	8006ce4 <_printf_float+0x360>
 8006c76:	f04f 0b00 	mov.w	fp, #0
 8006c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c7e:	f104 021a 	add.w	r2, r4, #26
 8006c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c84:	9306      	str	r3, [sp, #24]
 8006c86:	eba3 0309 	sub.w	r3, r3, r9
 8006c8a:	455b      	cmp	r3, fp
 8006c8c:	dc31      	bgt.n	8006cf2 <_printf_float+0x36e>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c90:	459a      	cmp	sl, r3
 8006c92:	dc3a      	bgt.n	8006d0a <_printf_float+0x386>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	07da      	lsls	r2, r3, #31
 8006c98:	d437      	bmi.n	8006d0a <_printf_float+0x386>
 8006c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9c:	ebaa 0903 	sub.w	r9, sl, r3
 8006ca0:	9b06      	ldr	r3, [sp, #24]
 8006ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ca6:	4599      	cmp	r9, r3
 8006ca8:	bfa8      	it	ge
 8006caa:	4699      	movge	r9, r3
 8006cac:	f1b9 0f00 	cmp.w	r9, #0
 8006cb0:	dc33      	bgt.n	8006d1a <_printf_float+0x396>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cba:	f104 0b1a 	add.w	fp, r4, #26
 8006cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8006cc4:	eba3 0309 	sub.w	r3, r3, r9
 8006cc8:	4543      	cmp	r3, r8
 8006cca:	f77f af79 	ble.w	8006bc0 <_printf_float+0x23c>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	465a      	mov	r2, fp
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f43f aeae 	beq.w	8006a3a <_printf_float+0xb6>
 8006cde:	f108 0801 	add.w	r8, r8, #1
 8006ce2:	e7ec      	b.n	8006cbe <_printf_float+0x33a>
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	d1c2      	bne.n	8006c76 <_printf_float+0x2f2>
 8006cf0:	e6a3      	b.n	8006a3a <_printf_float+0xb6>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	9206      	str	r2, [sp, #24]
 8006cfa:	47b8      	blx	r7
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f43f ae9c 	beq.w	8006a3a <_printf_float+0xb6>
 8006d02:	9a06      	ldr	r2, [sp, #24]
 8006d04:	f10b 0b01 	add.w	fp, fp, #1
 8006d08:	e7bb      	b.n	8006c82 <_printf_float+0x2fe>
 8006d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	d1c0      	bne.n	8006c9a <_printf_float+0x316>
 8006d18:	e68f      	b.n	8006a3a <_printf_float+0xb6>
 8006d1a:	9a06      	ldr	r2, [sp, #24]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	4442      	add	r2, r8
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	d1c3      	bne.n	8006cb2 <_printf_float+0x32e>
 8006d2a:	e686      	b.n	8006a3a <_printf_float+0xb6>
 8006d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d30:	f1ba 0f01 	cmp.w	sl, #1
 8006d34:	dc01      	bgt.n	8006d3a <_printf_float+0x3b6>
 8006d36:	07db      	lsls	r3, r3, #31
 8006d38:	d536      	bpl.n	8006da8 <_printf_float+0x424>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae78 	beq.w	8006a3a <_printf_float+0xb6>
 8006d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f ae70 	beq.w	8006a3a <_printf_float+0xb6>
 8006d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006d66:	f7f9 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6a:	b9c0      	cbnz	r0, 8006d9e <_printf_float+0x41a>
 8006d6c:	4653      	mov	r3, sl
 8006d6e:	f108 0201 	add.w	r2, r8, #1
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d10c      	bne.n	8006d96 <_printf_float+0x412>
 8006d7c:	e65d      	b.n	8006a3a <_printf_float+0xb6>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	465a      	mov	r2, fp
 8006d82:	4631      	mov	r1, r6
 8006d84:	4628      	mov	r0, r5
 8006d86:	47b8      	blx	r7
 8006d88:	3001      	adds	r0, #1
 8006d8a:	f43f ae56 	beq.w	8006a3a <_printf_float+0xb6>
 8006d8e:	f108 0801 	add.w	r8, r8, #1
 8006d92:	45d0      	cmp	r8, sl
 8006d94:	dbf3      	blt.n	8006d7e <_printf_float+0x3fa>
 8006d96:	464b      	mov	r3, r9
 8006d98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d9c:	e6df      	b.n	8006b5e <_printf_float+0x1da>
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	f104 0b1a 	add.w	fp, r4, #26
 8006da6:	e7f4      	b.n	8006d92 <_printf_float+0x40e>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4642      	mov	r2, r8
 8006dac:	e7e1      	b.n	8006d72 <_printf_float+0x3ee>
 8006dae:	2301      	movs	r3, #1
 8006db0:	464a      	mov	r2, r9
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	f43f ae3e 	beq.w	8006a3a <_printf_float+0xb6>
 8006dbe:	f108 0801 	add.w	r8, r8, #1
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	4543      	cmp	r3, r8
 8006dca:	dcf0      	bgt.n	8006dae <_printf_float+0x42a>
 8006dcc:	e6fc      	b.n	8006bc8 <_printf_float+0x244>
 8006dce:	f04f 0800 	mov.w	r8, #0
 8006dd2:	f104 0919 	add.w	r9, r4, #25
 8006dd6:	e7f4      	b.n	8006dc2 <_printf_float+0x43e>

08006dd8 <_printf_common>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	4616      	mov	r6, r2
 8006dde:	4698      	mov	r8, r3
 8006de0:	688a      	ldr	r2, [r1, #8]
 8006de2:	690b      	ldr	r3, [r1, #16]
 8006de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	bfb8      	it	lt
 8006dec:	4613      	movlt	r3, r2
 8006dee:	6033      	str	r3, [r6, #0]
 8006df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006df4:	4607      	mov	r7, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	b10a      	cbz	r2, 8006dfe <_printf_common+0x26>
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	0699      	lsls	r1, r3, #26
 8006e02:	bf42      	ittt	mi
 8006e04:	6833      	ldrmi	r3, [r6, #0]
 8006e06:	3302      	addmi	r3, #2
 8006e08:	6033      	strmi	r3, [r6, #0]
 8006e0a:	6825      	ldr	r5, [r4, #0]
 8006e0c:	f015 0506 	ands.w	r5, r5, #6
 8006e10:	d106      	bne.n	8006e20 <_printf_common+0x48>
 8006e12:	f104 0a19 	add.w	sl, r4, #25
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	6832      	ldr	r2, [r6, #0]
 8006e1a:	1a9b      	subs	r3, r3, r2
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dc26      	bgt.n	8006e6e <_printf_common+0x96>
 8006e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	3b00      	subs	r3, #0
 8006e28:	bf18      	it	ne
 8006e2a:	2301      	movne	r3, #1
 8006e2c:	0692      	lsls	r2, r2, #26
 8006e2e:	d42b      	bmi.n	8006e88 <_printf_common+0xb0>
 8006e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e34:	4641      	mov	r1, r8
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c8      	blx	r9
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d01e      	beq.n	8006e7c <_printf_common+0xa4>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	6922      	ldr	r2, [r4, #16]
 8006e42:	f003 0306 	and.w	r3, r3, #6
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	bf02      	ittt	eq
 8006e4a:	68e5      	ldreq	r5, [r4, #12]
 8006e4c:	6833      	ldreq	r3, [r6, #0]
 8006e4e:	1aed      	subeq	r5, r5, r3
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	bf0c      	ite	eq
 8006e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e58:	2500      	movne	r5, #0
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bfc4      	itt	gt
 8006e5e:	1a9b      	subgt	r3, r3, r2
 8006e60:	18ed      	addgt	r5, r5, r3
 8006e62:	2600      	movs	r6, #0
 8006e64:	341a      	adds	r4, #26
 8006e66:	42b5      	cmp	r5, r6
 8006e68:	d11a      	bne.n	8006ea0 <_printf_common+0xc8>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e008      	b.n	8006e80 <_printf_common+0xa8>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4652      	mov	r2, sl
 8006e72:	4641      	mov	r1, r8
 8006e74:	4638      	mov	r0, r7
 8006e76:	47c8      	blx	r9
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d103      	bne.n	8006e84 <_printf_common+0xac>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	3501      	adds	r5, #1
 8006e86:	e7c6      	b.n	8006e16 <_printf_common+0x3e>
 8006e88:	18e1      	adds	r1, r4, r3
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	2030      	movs	r0, #48	@ 0x30
 8006e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e92:	4422      	add	r2, r4
 8006e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	e7c7      	b.n	8006e30 <_printf_common+0x58>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	47c8      	blx	r9
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d0e6      	beq.n	8006e7c <_printf_common+0xa4>
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7d9      	b.n	8006e66 <_printf_common+0x8e>
	...

08006eb4 <_printf_i>:
 8006eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	7e0f      	ldrb	r7, [r1, #24]
 8006eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ebc:	2f78      	cmp	r7, #120	@ 0x78
 8006ebe:	4691      	mov	r9, r2
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	469a      	mov	sl, r3
 8006ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eca:	d807      	bhi.n	8006edc <_printf_i+0x28>
 8006ecc:	2f62      	cmp	r7, #98	@ 0x62
 8006ece:	d80a      	bhi.n	8006ee6 <_printf_i+0x32>
 8006ed0:	2f00      	cmp	r7, #0
 8006ed2:	f000 80d2 	beq.w	800707a <_printf_i+0x1c6>
 8006ed6:	2f58      	cmp	r7, #88	@ 0x58
 8006ed8:	f000 80b9 	beq.w	800704e <_printf_i+0x19a>
 8006edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ee4:	e03a      	b.n	8006f5c <_printf_i+0xa8>
 8006ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eea:	2b15      	cmp	r3, #21
 8006eec:	d8f6      	bhi.n	8006edc <_printf_i+0x28>
 8006eee:	a101      	add	r1, pc, #4	@ (adr r1, 8006ef4 <_printf_i+0x40>)
 8006ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f61 	.word	0x08006f61
 8006efc:	08006edd 	.word	0x08006edd
 8006f00:	08006edd 	.word	0x08006edd
 8006f04:	08006edd 	.word	0x08006edd
 8006f08:	08006edd 	.word	0x08006edd
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	08006edd 	.word	0x08006edd
 8006f14:	08006edd 	.word	0x08006edd
 8006f18:	08006edd 	.word	0x08006edd
 8006f1c:	08006edd 	.word	0x08006edd
 8006f20:	08007061 	.word	0x08007061
 8006f24:	08006f8b 	.word	0x08006f8b
 8006f28:	0800701b 	.word	0x0800701b
 8006f2c:	08006edd 	.word	0x08006edd
 8006f30:	08006edd 	.word	0x08006edd
 8006f34:	08007083 	.word	0x08007083
 8006f38:	08006edd 	.word	0x08006edd
 8006f3c:	08006f8b 	.word	0x08006f8b
 8006f40:	08006edd 	.word	0x08006edd
 8006f44:	08006edd 	.word	0x08006edd
 8006f48:	08007023 	.word	0x08007023
 8006f4c:	6833      	ldr	r3, [r6, #0]
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6032      	str	r2, [r6, #0]
 8006f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e09d      	b.n	800709c <_printf_i+0x1e8>
 8006f60:	6833      	ldr	r3, [r6, #0]
 8006f62:	6820      	ldr	r0, [r4, #0]
 8006f64:	1d19      	adds	r1, r3, #4
 8006f66:	6031      	str	r1, [r6, #0]
 8006f68:	0606      	lsls	r6, r0, #24
 8006f6a:	d501      	bpl.n	8006f70 <_printf_i+0xbc>
 8006f6c:	681d      	ldr	r5, [r3, #0]
 8006f6e:	e003      	b.n	8006f78 <_printf_i+0xc4>
 8006f70:	0645      	lsls	r5, r0, #25
 8006f72:	d5fb      	bpl.n	8006f6c <_printf_i+0xb8>
 8006f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	da03      	bge.n	8006f84 <_printf_i+0xd0>
 8006f7c:	232d      	movs	r3, #45	@ 0x2d
 8006f7e:	426d      	negs	r5, r5
 8006f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f84:	4859      	ldr	r0, [pc, #356]	@ (80070ec <_printf_i+0x238>)
 8006f86:	230a      	movs	r3, #10
 8006f88:	e011      	b.n	8006fae <_printf_i+0xfa>
 8006f8a:	6821      	ldr	r1, [r4, #0]
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	0608      	lsls	r0, r1, #24
 8006f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f94:	d402      	bmi.n	8006f9c <_printf_i+0xe8>
 8006f96:	0649      	lsls	r1, r1, #25
 8006f98:	bf48      	it	mi
 8006f9a:	b2ad      	uxthmi	r5, r5
 8006f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f9e:	4853      	ldr	r0, [pc, #332]	@ (80070ec <_printf_i+0x238>)
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	bf14      	ite	ne
 8006fa4:	230a      	movne	r3, #10
 8006fa6:	2308      	moveq	r3, #8
 8006fa8:	2100      	movs	r1, #0
 8006faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fae:	6866      	ldr	r6, [r4, #4]
 8006fb0:	60a6      	str	r6, [r4, #8]
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	bfa2      	ittt	ge
 8006fb6:	6821      	ldrge	r1, [r4, #0]
 8006fb8:	f021 0104 	bicge.w	r1, r1, #4
 8006fbc:	6021      	strge	r1, [r4, #0]
 8006fbe:	b90d      	cbnz	r5, 8006fc4 <_printf_i+0x110>
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	d04b      	beq.n	800705c <_printf_i+0x1a8>
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fca:	fb03 5711 	mls	r7, r3, r1, r5
 8006fce:	5dc7      	ldrb	r7, [r0, r7]
 8006fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fd4:	462f      	mov	r7, r5
 8006fd6:	42bb      	cmp	r3, r7
 8006fd8:	460d      	mov	r5, r1
 8006fda:	d9f4      	bls.n	8006fc6 <_printf_i+0x112>
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d10b      	bne.n	8006ff8 <_printf_i+0x144>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	07df      	lsls	r7, r3, #31
 8006fe4:	d508      	bpl.n	8006ff8 <_printf_i+0x144>
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	4299      	cmp	r1, r3
 8006fec:	bfde      	ittt	le
 8006fee:	2330      	movle	r3, #48	@ 0x30
 8006ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ff4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ff8:	1b92      	subs	r2, r2, r6
 8006ffa:	6122      	str	r2, [r4, #16]
 8006ffc:	f8cd a000 	str.w	sl, [sp]
 8007000:	464b      	mov	r3, r9
 8007002:	aa03      	add	r2, sp, #12
 8007004:	4621      	mov	r1, r4
 8007006:	4640      	mov	r0, r8
 8007008:	f7ff fee6 	bl	8006dd8 <_printf_common>
 800700c:	3001      	adds	r0, #1
 800700e:	d14a      	bne.n	80070a6 <_printf_i+0x1f2>
 8007010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007014:	b004      	add	sp, #16
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f043 0320 	orr.w	r3, r3, #32
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	4833      	ldr	r0, [pc, #204]	@ (80070f0 <_printf_i+0x23c>)
 8007024:	2778      	movs	r7, #120	@ 0x78
 8007026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	6831      	ldr	r1, [r6, #0]
 800702e:	061f      	lsls	r7, r3, #24
 8007030:	f851 5b04 	ldr.w	r5, [r1], #4
 8007034:	d402      	bmi.n	800703c <_printf_i+0x188>
 8007036:	065f      	lsls	r7, r3, #25
 8007038:	bf48      	it	mi
 800703a:	b2ad      	uxthmi	r5, r5
 800703c:	6031      	str	r1, [r6, #0]
 800703e:	07d9      	lsls	r1, r3, #31
 8007040:	bf44      	itt	mi
 8007042:	f043 0320 	orrmi.w	r3, r3, #32
 8007046:	6023      	strmi	r3, [r4, #0]
 8007048:	b11d      	cbz	r5, 8007052 <_printf_i+0x19e>
 800704a:	2310      	movs	r3, #16
 800704c:	e7ac      	b.n	8006fa8 <_printf_i+0xf4>
 800704e:	4827      	ldr	r0, [pc, #156]	@ (80070ec <_printf_i+0x238>)
 8007050:	e7e9      	b.n	8007026 <_printf_i+0x172>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f023 0320 	bic.w	r3, r3, #32
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	e7f6      	b.n	800704a <_printf_i+0x196>
 800705c:	4616      	mov	r6, r2
 800705e:	e7bd      	b.n	8006fdc <_printf_i+0x128>
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	6825      	ldr	r5, [r4, #0]
 8007064:	6961      	ldr	r1, [r4, #20]
 8007066:	1d18      	adds	r0, r3, #4
 8007068:	6030      	str	r0, [r6, #0]
 800706a:	062e      	lsls	r6, r5, #24
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	d501      	bpl.n	8007074 <_printf_i+0x1c0>
 8007070:	6019      	str	r1, [r3, #0]
 8007072:	e002      	b.n	800707a <_printf_i+0x1c6>
 8007074:	0668      	lsls	r0, r5, #25
 8007076:	d5fb      	bpl.n	8007070 <_printf_i+0x1bc>
 8007078:	8019      	strh	r1, [r3, #0]
 800707a:	2300      	movs	r3, #0
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	4616      	mov	r6, r2
 8007080:	e7bc      	b.n	8006ffc <_printf_i+0x148>
 8007082:	6833      	ldr	r3, [r6, #0]
 8007084:	1d1a      	adds	r2, r3, #4
 8007086:	6032      	str	r2, [r6, #0]
 8007088:	681e      	ldr	r6, [r3, #0]
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	2100      	movs	r1, #0
 800708e:	4630      	mov	r0, r6
 8007090:	f7f9 f89e 	bl	80001d0 <memchr>
 8007094:	b108      	cbz	r0, 800709a <_printf_i+0x1e6>
 8007096:	1b80      	subs	r0, r0, r6
 8007098:	6060      	str	r0, [r4, #4]
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	2300      	movs	r3, #0
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070a4:	e7aa      	b.n	8006ffc <_printf_i+0x148>
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	4632      	mov	r2, r6
 80070aa:	4649      	mov	r1, r9
 80070ac:	4640      	mov	r0, r8
 80070ae:	47d0      	blx	sl
 80070b0:	3001      	adds	r0, #1
 80070b2:	d0ad      	beq.n	8007010 <_printf_i+0x15c>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	079b      	lsls	r3, r3, #30
 80070b8:	d413      	bmi.n	80070e2 <_printf_i+0x22e>
 80070ba:	68e0      	ldr	r0, [r4, #12]
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	4298      	cmp	r0, r3
 80070c0:	bfb8      	it	lt
 80070c2:	4618      	movlt	r0, r3
 80070c4:	e7a6      	b.n	8007014 <_printf_i+0x160>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4632      	mov	r2, r6
 80070ca:	4649      	mov	r1, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	47d0      	blx	sl
 80070d0:	3001      	adds	r0, #1
 80070d2:	d09d      	beq.n	8007010 <_printf_i+0x15c>
 80070d4:	3501      	adds	r5, #1
 80070d6:	68e3      	ldr	r3, [r4, #12]
 80070d8:	9903      	ldr	r1, [sp, #12]
 80070da:	1a5b      	subs	r3, r3, r1
 80070dc:	42ab      	cmp	r3, r5
 80070de:	dcf2      	bgt.n	80070c6 <_printf_i+0x212>
 80070e0:	e7eb      	b.n	80070ba <_printf_i+0x206>
 80070e2:	2500      	movs	r5, #0
 80070e4:	f104 0619 	add.w	r6, r4, #25
 80070e8:	e7f5      	b.n	80070d6 <_printf_i+0x222>
 80070ea:	bf00      	nop
 80070ec:	0800b0b5 	.word	0x0800b0b5
 80070f0:	0800b0c6 	.word	0x0800b0c6

080070f4 <_scanf_float>:
 80070f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	b087      	sub	sp, #28
 80070fa:	4617      	mov	r7, r2
 80070fc:	9303      	str	r3, [sp, #12]
 80070fe:	688b      	ldr	r3, [r1, #8]
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007106:	bf81      	itttt	hi
 8007108:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800710c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007110:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007114:	608b      	strhi	r3, [r1, #8]
 8007116:	680b      	ldr	r3, [r1, #0]
 8007118:	460a      	mov	r2, r1
 800711a:	f04f 0500 	mov.w	r5, #0
 800711e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007122:	f842 3b1c 	str.w	r3, [r2], #28
 8007126:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800712a:	4680      	mov	r8, r0
 800712c:	460c      	mov	r4, r1
 800712e:	bf98      	it	ls
 8007130:	f04f 0b00 	movls.w	fp, #0
 8007134:	9201      	str	r2, [sp, #4]
 8007136:	4616      	mov	r6, r2
 8007138:	46aa      	mov	sl, r5
 800713a:	46a9      	mov	r9, r5
 800713c:	9502      	str	r5, [sp, #8]
 800713e:	68a2      	ldr	r2, [r4, #8]
 8007140:	b152      	cbz	r2, 8007158 <_scanf_float+0x64>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b4e      	cmp	r3, #78	@ 0x4e
 8007148:	d864      	bhi.n	8007214 <_scanf_float+0x120>
 800714a:	2b40      	cmp	r3, #64	@ 0x40
 800714c:	d83c      	bhi.n	80071c8 <_scanf_float+0xd4>
 800714e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007152:	b2c8      	uxtb	r0, r1
 8007154:	280e      	cmp	r0, #14
 8007156:	d93a      	bls.n	80071ce <_scanf_float+0xda>
 8007158:	f1b9 0f00 	cmp.w	r9, #0
 800715c:	d003      	beq.n	8007166 <_scanf_float+0x72>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800716a:	f1ba 0f01 	cmp.w	sl, #1
 800716e:	f200 8117 	bhi.w	80073a0 <_scanf_float+0x2ac>
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	429e      	cmp	r6, r3
 8007176:	f200 8108 	bhi.w	800738a <_scanf_float+0x296>
 800717a:	2001      	movs	r0, #1
 800717c:	b007      	add	sp, #28
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007186:	2a0d      	cmp	r2, #13
 8007188:	d8e6      	bhi.n	8007158 <_scanf_float+0x64>
 800718a:	a101      	add	r1, pc, #4	@ (adr r1, 8007190 <_scanf_float+0x9c>)
 800718c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007190:	080072d7 	.word	0x080072d7
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	08007159 	.word	0x08007159
 80071a0:	08007337 	.word	0x08007337
 80071a4:	0800730f 	.word	0x0800730f
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	080072e5 	.word	0x080072e5
 80071b4:	08007159 	.word	0x08007159
 80071b8:	08007159 	.word	0x08007159
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	0800729d 	.word	0x0800729d
 80071c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80071cc:	e7db      	b.n	8007186 <_scanf_float+0x92>
 80071ce:	290e      	cmp	r1, #14
 80071d0:	d8c2      	bhi.n	8007158 <_scanf_float+0x64>
 80071d2:	a001      	add	r0, pc, #4	@ (adr r0, 80071d8 <_scanf_float+0xe4>)
 80071d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071d8:	0800728d 	.word	0x0800728d
 80071dc:	08007159 	.word	0x08007159
 80071e0:	0800728d 	.word	0x0800728d
 80071e4:	08007323 	.word	0x08007323
 80071e8:	08007159 	.word	0x08007159
 80071ec:	08007235 	.word	0x08007235
 80071f0:	08007273 	.word	0x08007273
 80071f4:	08007273 	.word	0x08007273
 80071f8:	08007273 	.word	0x08007273
 80071fc:	08007273 	.word	0x08007273
 8007200:	08007273 	.word	0x08007273
 8007204:	08007273 	.word	0x08007273
 8007208:	08007273 	.word	0x08007273
 800720c:	08007273 	.word	0x08007273
 8007210:	08007273 	.word	0x08007273
 8007214:	2b6e      	cmp	r3, #110	@ 0x6e
 8007216:	d809      	bhi.n	800722c <_scanf_float+0x138>
 8007218:	2b60      	cmp	r3, #96	@ 0x60
 800721a:	d8b2      	bhi.n	8007182 <_scanf_float+0x8e>
 800721c:	2b54      	cmp	r3, #84	@ 0x54
 800721e:	d07b      	beq.n	8007318 <_scanf_float+0x224>
 8007220:	2b59      	cmp	r3, #89	@ 0x59
 8007222:	d199      	bne.n	8007158 <_scanf_float+0x64>
 8007224:	2d07      	cmp	r5, #7
 8007226:	d197      	bne.n	8007158 <_scanf_float+0x64>
 8007228:	2508      	movs	r5, #8
 800722a:	e02c      	b.n	8007286 <_scanf_float+0x192>
 800722c:	2b74      	cmp	r3, #116	@ 0x74
 800722e:	d073      	beq.n	8007318 <_scanf_float+0x224>
 8007230:	2b79      	cmp	r3, #121	@ 0x79
 8007232:	e7f6      	b.n	8007222 <_scanf_float+0x12e>
 8007234:	6821      	ldr	r1, [r4, #0]
 8007236:	05c8      	lsls	r0, r1, #23
 8007238:	d51b      	bpl.n	8007272 <_scanf_float+0x17e>
 800723a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800723e:	6021      	str	r1, [r4, #0]
 8007240:	f109 0901 	add.w	r9, r9, #1
 8007244:	f1bb 0f00 	cmp.w	fp, #0
 8007248:	d003      	beq.n	8007252 <_scanf_float+0x15e>
 800724a:	3201      	adds	r2, #1
 800724c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007250:	60a2      	str	r2, [r4, #8]
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	3b01      	subs	r3, #1
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	3301      	adds	r3, #1
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3b01      	subs	r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	f340 8087 	ble.w	8007378 <_scanf_float+0x284>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	e765      	b.n	800713e <_scanf_float+0x4a>
 8007272:	eb1a 0105 	adds.w	r1, sl, r5
 8007276:	f47f af6f 	bne.w	8007158 <_scanf_float+0x64>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	460d      	mov	r5, r1
 8007284:	468a      	mov	sl, r1
 8007286:	f806 3b01 	strb.w	r3, [r6], #1
 800728a:	e7e2      	b.n	8007252 <_scanf_float+0x15e>
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	0610      	lsls	r0, r2, #24
 8007290:	f57f af62 	bpl.w	8007158 <_scanf_float+0x64>
 8007294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	e7f4      	b.n	8007286 <_scanf_float+0x192>
 800729c:	f1ba 0f00 	cmp.w	sl, #0
 80072a0:	d10e      	bne.n	80072c0 <_scanf_float+0x1cc>
 80072a2:	f1b9 0f00 	cmp.w	r9, #0
 80072a6:	d10e      	bne.n	80072c6 <_scanf_float+0x1d2>
 80072a8:	6822      	ldr	r2, [r4, #0]
 80072aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072b2:	d108      	bne.n	80072c6 <_scanf_float+0x1d2>
 80072b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	f04f 0a01 	mov.w	sl, #1
 80072be:	e7e2      	b.n	8007286 <_scanf_float+0x192>
 80072c0:	f1ba 0f02 	cmp.w	sl, #2
 80072c4:	d055      	beq.n	8007372 <_scanf_float+0x27e>
 80072c6:	2d01      	cmp	r5, #1
 80072c8:	d002      	beq.n	80072d0 <_scanf_float+0x1dc>
 80072ca:	2d04      	cmp	r5, #4
 80072cc:	f47f af44 	bne.w	8007158 <_scanf_float+0x64>
 80072d0:	3501      	adds	r5, #1
 80072d2:	b2ed      	uxtb	r5, r5
 80072d4:	e7d7      	b.n	8007286 <_scanf_float+0x192>
 80072d6:	f1ba 0f01 	cmp.w	sl, #1
 80072da:	f47f af3d 	bne.w	8007158 <_scanf_float+0x64>
 80072de:	f04f 0a02 	mov.w	sl, #2
 80072e2:	e7d0      	b.n	8007286 <_scanf_float+0x192>
 80072e4:	b97d      	cbnz	r5, 8007306 <_scanf_float+0x212>
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	f47f af38 	bne.w	800715e <_scanf_float+0x6a>
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072f8:	f040 8108 	bne.w	800750c <_scanf_float+0x418>
 80072fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007300:	6022      	str	r2, [r4, #0]
 8007302:	2501      	movs	r5, #1
 8007304:	e7bf      	b.n	8007286 <_scanf_float+0x192>
 8007306:	2d03      	cmp	r5, #3
 8007308:	d0e2      	beq.n	80072d0 <_scanf_float+0x1dc>
 800730a:	2d05      	cmp	r5, #5
 800730c:	e7de      	b.n	80072cc <_scanf_float+0x1d8>
 800730e:	2d02      	cmp	r5, #2
 8007310:	f47f af22 	bne.w	8007158 <_scanf_float+0x64>
 8007314:	2503      	movs	r5, #3
 8007316:	e7b6      	b.n	8007286 <_scanf_float+0x192>
 8007318:	2d06      	cmp	r5, #6
 800731a:	f47f af1d 	bne.w	8007158 <_scanf_float+0x64>
 800731e:	2507      	movs	r5, #7
 8007320:	e7b1      	b.n	8007286 <_scanf_float+0x192>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	0591      	lsls	r1, r2, #22
 8007326:	f57f af17 	bpl.w	8007158 <_scanf_float+0x64>
 800732a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	f8cd 9008 	str.w	r9, [sp, #8]
 8007334:	e7a7      	b.n	8007286 <_scanf_float+0x192>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800733c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007340:	d006      	beq.n	8007350 <_scanf_float+0x25c>
 8007342:	0550      	lsls	r0, r2, #21
 8007344:	f57f af08 	bpl.w	8007158 <_scanf_float+0x64>
 8007348:	f1b9 0f00 	cmp.w	r9, #0
 800734c:	f000 80de 	beq.w	800750c <_scanf_float+0x418>
 8007350:	0591      	lsls	r1, r2, #22
 8007352:	bf58      	it	pl
 8007354:	9902      	ldrpl	r1, [sp, #8]
 8007356:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800735a:	bf58      	it	pl
 800735c:	eba9 0101 	subpl.w	r1, r9, r1
 8007360:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007364:	bf58      	it	pl
 8007366:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	f04f 0900 	mov.w	r9, #0
 8007370:	e789      	b.n	8007286 <_scanf_float+0x192>
 8007372:	f04f 0a03 	mov.w	sl, #3
 8007376:	e786      	b.n	8007286 <_scanf_float+0x192>
 8007378:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800737c:	4639      	mov	r1, r7
 800737e:	4640      	mov	r0, r8
 8007380:	4798      	blx	r3
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f aedb 	beq.w	800713e <_scanf_float+0x4a>
 8007388:	e6e6      	b.n	8007158 <_scanf_float+0x64>
 800738a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800738e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007392:	463a      	mov	r2, r7
 8007394:	4640      	mov	r0, r8
 8007396:	4798      	blx	r3
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	3b01      	subs	r3, #1
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	e6e8      	b.n	8007172 <_scanf_float+0x7e>
 80073a0:	1e6b      	subs	r3, r5, #1
 80073a2:	2b06      	cmp	r3, #6
 80073a4:	d824      	bhi.n	80073f0 <_scanf_float+0x2fc>
 80073a6:	2d02      	cmp	r5, #2
 80073a8:	d836      	bhi.n	8007418 <_scanf_float+0x324>
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	429e      	cmp	r6, r3
 80073ae:	f67f aee4 	bls.w	800717a <_scanf_float+0x86>
 80073b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ba:	463a      	mov	r2, r7
 80073bc:	4640      	mov	r0, r8
 80073be:	4798      	blx	r3
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	e7f0      	b.n	80073aa <_scanf_float+0x2b6>
 80073c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073d0:	463a      	mov	r2, r7
 80073d2:	4640      	mov	r0, r8
 80073d4:	4798      	blx	r3
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	3b01      	subs	r3, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80073e0:	fa5f fa8a 	uxtb.w	sl, sl
 80073e4:	f1ba 0f02 	cmp.w	sl, #2
 80073e8:	d1ee      	bne.n	80073c8 <_scanf_float+0x2d4>
 80073ea:	3d03      	subs	r5, #3
 80073ec:	b2ed      	uxtb	r5, r5
 80073ee:	1b76      	subs	r6, r6, r5
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	05da      	lsls	r2, r3, #23
 80073f4:	d530      	bpl.n	8007458 <_scanf_float+0x364>
 80073f6:	055b      	lsls	r3, r3, #21
 80073f8:	d511      	bpl.n	800741e <_scanf_float+0x32a>
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	429e      	cmp	r6, r3
 80073fe:	f67f aebc 	bls.w	800717a <_scanf_float+0x86>
 8007402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800740a:	463a      	mov	r2, r7
 800740c:	4640      	mov	r0, r8
 800740e:	4798      	blx	r3
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	e7f0      	b.n	80073fa <_scanf_float+0x306>
 8007418:	46aa      	mov	sl, r5
 800741a:	46b3      	mov	fp, r6
 800741c:	e7de      	b.n	80073dc <_scanf_float+0x2e8>
 800741e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	2965      	cmp	r1, #101	@ 0x65
 8007426:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800742a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	d00c      	beq.n	800744c <_scanf_float+0x358>
 8007432:	2945      	cmp	r1, #69	@ 0x45
 8007434:	d00a      	beq.n	800744c <_scanf_float+0x358>
 8007436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800743a:	463a      	mov	r2, r7
 800743c:	4640      	mov	r0, r8
 800743e:	4798      	blx	r3
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007446:	3b01      	subs	r3, #1
 8007448:	1eb5      	subs	r5, r6, #2
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007450:	463a      	mov	r2, r7
 8007452:	4640      	mov	r0, r8
 8007454:	4798      	blx	r3
 8007456:	462e      	mov	r6, r5
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	f012 0210 	ands.w	r2, r2, #16
 800745e:	d001      	beq.n	8007464 <_scanf_float+0x370>
 8007460:	2000      	movs	r0, #0
 8007462:	e68b      	b.n	800717c <_scanf_float+0x88>
 8007464:	7032      	strb	r2, [r6, #0]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800746c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007470:	d11c      	bne.n	80074ac <_scanf_float+0x3b8>
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	454b      	cmp	r3, r9
 8007476:	eba3 0209 	sub.w	r2, r3, r9
 800747a:	d123      	bne.n	80074c4 <_scanf_float+0x3d0>
 800747c:	9901      	ldr	r1, [sp, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	4640      	mov	r0, r8
 8007482:	f002 fc39 	bl	8009cf8 <_strtod_r>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	6821      	ldr	r1, [r4, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f011 0f02 	tst.w	r1, #2
 8007490:	ec57 6b10 	vmov	r6, r7, d0
 8007494:	f103 0204 	add.w	r2, r3, #4
 8007498:	d01f      	beq.n	80074da <_scanf_float+0x3e6>
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	600a      	str	r2, [r1, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	e9c3 6700 	strd	r6, r7, [r3]
 80074a4:	68e3      	ldr	r3, [r4, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60e3      	str	r3, [r4, #12]
 80074aa:	e7d9      	b.n	8007460 <_scanf_float+0x36c>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0e4      	beq.n	800747c <_scanf_float+0x388>
 80074b2:	9905      	ldr	r1, [sp, #20]
 80074b4:	230a      	movs	r3, #10
 80074b6:	3101      	adds	r1, #1
 80074b8:	4640      	mov	r0, r8
 80074ba:	f002 fc9d 	bl	8009df8 <_strtol_r>
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	9e05      	ldr	r6, [sp, #20]
 80074c2:	1ac2      	subs	r2, r0, r3
 80074c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80074c8:	429e      	cmp	r6, r3
 80074ca:	bf28      	it	cs
 80074cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80074d0:	4910      	ldr	r1, [pc, #64]	@ (8007514 <_scanf_float+0x420>)
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 f918 	bl	8007708 <siprintf>
 80074d8:	e7d0      	b.n	800747c <_scanf_float+0x388>
 80074da:	f011 0f04 	tst.w	r1, #4
 80074de:	9903      	ldr	r1, [sp, #12]
 80074e0:	600a      	str	r2, [r1, #0]
 80074e2:	d1dc      	bne.n	800749e <_scanf_float+0x3aa>
 80074e4:	681d      	ldr	r5, [r3, #0]
 80074e6:	4632      	mov	r2, r6
 80074e8:	463b      	mov	r3, r7
 80074ea:	4630      	mov	r0, r6
 80074ec:	4639      	mov	r1, r7
 80074ee:	f7f9 fb1d 	bl	8000b2c <__aeabi_dcmpun>
 80074f2:	b128      	cbz	r0, 8007500 <_scanf_float+0x40c>
 80074f4:	4808      	ldr	r0, [pc, #32]	@ (8007518 <_scanf_float+0x424>)
 80074f6:	f000 f9f9 	bl	80078ec <nanf>
 80074fa:	ed85 0a00 	vstr	s0, [r5]
 80074fe:	e7d1      	b.n	80074a4 <_scanf_float+0x3b0>
 8007500:	4630      	mov	r0, r6
 8007502:	4639      	mov	r1, r7
 8007504:	f7f9 fb70 	bl	8000be8 <__aeabi_d2f>
 8007508:	6028      	str	r0, [r5, #0]
 800750a:	e7cb      	b.n	80074a4 <_scanf_float+0x3b0>
 800750c:	f04f 0900 	mov.w	r9, #0
 8007510:	e629      	b.n	8007166 <_scanf_float+0x72>
 8007512:	bf00      	nop
 8007514:	0800b0d7 	.word	0x0800b0d7
 8007518:	0800b46d 	.word	0x0800b46d

0800751c <std>:
 800751c:	2300      	movs	r3, #0
 800751e:	b510      	push	{r4, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	e9c0 3300 	strd	r3, r3, [r0]
 8007526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800752a:	6083      	str	r3, [r0, #8]
 800752c:	8181      	strh	r1, [r0, #12]
 800752e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007530:	81c2      	strh	r2, [r0, #14]
 8007532:	6183      	str	r3, [r0, #24]
 8007534:	4619      	mov	r1, r3
 8007536:	2208      	movs	r2, #8
 8007538:	305c      	adds	r0, #92	@ 0x5c
 800753a:	f000 f948 	bl	80077ce <memset>
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <std+0x58>)
 8007540:	6263      	str	r3, [r4, #36]	@ 0x24
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <std+0x5c>)
 8007544:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <std+0x60>)
 8007548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <std+0x64>)
 800754c:	6323      	str	r3, [r4, #48]	@ 0x30
 800754e:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <std+0x68>)
 8007550:	6224      	str	r4, [r4, #32]
 8007552:	429c      	cmp	r4, r3
 8007554:	d006      	beq.n	8007564 <std+0x48>
 8007556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800755a:	4294      	cmp	r4, r2
 800755c:	d002      	beq.n	8007564 <std+0x48>
 800755e:	33d0      	adds	r3, #208	@ 0xd0
 8007560:	429c      	cmp	r4, r3
 8007562:	d105      	bne.n	8007570 <std+0x54>
 8007564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f000 b9ac 	b.w	80078c8 <__retarget_lock_init_recursive>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	08007749 	.word	0x08007749
 8007578:	0800776b 	.word	0x0800776b
 800757c:	080077a3 	.word	0x080077a3
 8007580:	080077c7 	.word	0x080077c7
 8007584:	2000154c 	.word	0x2000154c

08007588 <stdio_exit_handler>:
 8007588:	4a02      	ldr	r2, [pc, #8]	@ (8007594 <stdio_exit_handler+0xc>)
 800758a:	4903      	ldr	r1, [pc, #12]	@ (8007598 <stdio_exit_handler+0x10>)
 800758c:	4803      	ldr	r0, [pc, #12]	@ (800759c <stdio_exit_handler+0x14>)
 800758e:	f000 b869 	b.w	8007664 <_fwalk_sglue>
 8007592:	bf00      	nop
 8007594:	20000010 	.word	0x20000010
 8007598:	0800a1b5 	.word	0x0800a1b5
 800759c:	20000020 	.word	0x20000020

080075a0 <cleanup_stdio>:
 80075a0:	6841      	ldr	r1, [r0, #4]
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <cleanup_stdio+0x34>)
 80075a4:	4299      	cmp	r1, r3
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	d001      	beq.n	80075b0 <cleanup_stdio+0x10>
 80075ac:	f002 fe02 	bl	800a1b4 <_fflush_r>
 80075b0:	68a1      	ldr	r1, [r4, #8]
 80075b2:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <cleanup_stdio+0x38>)
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d002      	beq.n	80075be <cleanup_stdio+0x1e>
 80075b8:	4620      	mov	r0, r4
 80075ba:	f002 fdfb 	bl	800a1b4 <_fflush_r>
 80075be:	68e1      	ldr	r1, [r4, #12]
 80075c0:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <cleanup_stdio+0x3c>)
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d004      	beq.n	80075d0 <cleanup_stdio+0x30>
 80075c6:	4620      	mov	r0, r4
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f002 bdf2 	b.w	800a1b4 <_fflush_r>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	2000154c 	.word	0x2000154c
 80075d8:	200015b4 	.word	0x200015b4
 80075dc:	2000161c 	.word	0x2000161c

080075e0 <global_stdio_init.part.0>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <global_stdio_init.part.0+0x30>)
 80075e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007614 <global_stdio_init.part.0+0x34>)
 80075e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007618 <global_stdio_init.part.0+0x38>)
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	4620      	mov	r0, r4
 80075ec:	2200      	movs	r2, #0
 80075ee:	2104      	movs	r1, #4
 80075f0:	f7ff ff94 	bl	800751c <std>
 80075f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075f8:	2201      	movs	r2, #1
 80075fa:	2109      	movs	r1, #9
 80075fc:	f7ff ff8e 	bl	800751c <std>
 8007600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007604:	2202      	movs	r2, #2
 8007606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760a:	2112      	movs	r1, #18
 800760c:	f7ff bf86 	b.w	800751c <std>
 8007610:	20001684 	.word	0x20001684
 8007614:	2000154c 	.word	0x2000154c
 8007618:	08007589 	.word	0x08007589

0800761c <__sfp_lock_acquire>:
 800761c:	4801      	ldr	r0, [pc, #4]	@ (8007624 <__sfp_lock_acquire+0x8>)
 800761e:	f000 b954 	b.w	80078ca <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	2000168d 	.word	0x2000168d

08007628 <__sfp_lock_release>:
 8007628:	4801      	ldr	r0, [pc, #4]	@ (8007630 <__sfp_lock_release+0x8>)
 800762a:	f000 b94f 	b.w	80078cc <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	2000168d 	.word	0x2000168d

08007634 <__sinit>:
 8007634:	b510      	push	{r4, lr}
 8007636:	4604      	mov	r4, r0
 8007638:	f7ff fff0 	bl	800761c <__sfp_lock_acquire>
 800763c:	6a23      	ldr	r3, [r4, #32]
 800763e:	b11b      	cbz	r3, 8007648 <__sinit+0x14>
 8007640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007644:	f7ff bff0 	b.w	8007628 <__sfp_lock_release>
 8007648:	4b04      	ldr	r3, [pc, #16]	@ (800765c <__sinit+0x28>)
 800764a:	6223      	str	r3, [r4, #32]
 800764c:	4b04      	ldr	r3, [pc, #16]	@ (8007660 <__sinit+0x2c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f5      	bne.n	8007640 <__sinit+0xc>
 8007654:	f7ff ffc4 	bl	80075e0 <global_stdio_init.part.0>
 8007658:	e7f2      	b.n	8007640 <__sinit+0xc>
 800765a:	bf00      	nop
 800765c:	080075a1 	.word	0x080075a1
 8007660:	20001684 	.word	0x20001684

08007664 <_fwalk_sglue>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	4607      	mov	r7, r0
 800766a:	4688      	mov	r8, r1
 800766c:	4614      	mov	r4, r2
 800766e:	2600      	movs	r6, #0
 8007670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007674:	f1b9 0901 	subs.w	r9, r9, #1
 8007678:	d505      	bpl.n	8007686 <_fwalk_sglue+0x22>
 800767a:	6824      	ldr	r4, [r4, #0]
 800767c:	2c00      	cmp	r4, #0
 800767e:	d1f7      	bne.n	8007670 <_fwalk_sglue+0xc>
 8007680:	4630      	mov	r0, r6
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d907      	bls.n	800769c <_fwalk_sglue+0x38>
 800768c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007690:	3301      	adds	r3, #1
 8007692:	d003      	beq.n	800769c <_fwalk_sglue+0x38>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	47c0      	blx	r8
 800769a:	4306      	orrs	r6, r0
 800769c:	3568      	adds	r5, #104	@ 0x68
 800769e:	e7e9      	b.n	8007674 <_fwalk_sglue+0x10>

080076a0 <sniprintf>:
 80076a0:	b40c      	push	{r2, r3}
 80076a2:	b530      	push	{r4, r5, lr}
 80076a4:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <sniprintf+0x64>)
 80076a6:	1e0c      	subs	r4, r1, #0
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	b09d      	sub	sp, #116	@ 0x74
 80076ac:	da08      	bge.n	80076c0 <sniprintf+0x20>
 80076ae:	238b      	movs	r3, #139	@ 0x8b
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076b6:	b01d      	add	sp, #116	@ 0x74
 80076b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076bc:	b002      	add	sp, #8
 80076be:	4770      	bx	lr
 80076c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076c8:	bf14      	ite	ne
 80076ca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80076ce:	4623      	moveq	r3, r4
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076d8:	9002      	str	r0, [sp, #8]
 80076da:	9006      	str	r0, [sp, #24]
 80076dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076e2:	ab21      	add	r3, sp, #132	@ 0x84
 80076e4:	a902      	add	r1, sp, #8
 80076e6:	4628      	mov	r0, r5
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	f002 fbe3 	bl	8009eb4 <_svfiprintf_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	bfbc      	itt	lt
 80076f2:	238b      	movlt	r3, #139	@ 0x8b
 80076f4:	602b      	strlt	r3, [r5, #0]
 80076f6:	2c00      	cmp	r4, #0
 80076f8:	d0dd      	beq.n	80076b6 <sniprintf+0x16>
 80076fa:	9b02      	ldr	r3, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e7d9      	b.n	80076b6 <sniprintf+0x16>
 8007702:	bf00      	nop
 8007704:	2000001c 	.word	0x2000001c

08007708 <siprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b500      	push	{lr}
 800770c:	b09c      	sub	sp, #112	@ 0x70
 800770e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007710:	9002      	str	r0, [sp, #8]
 8007712:	9006      	str	r0, [sp, #24]
 8007714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007718:	4809      	ldr	r0, [pc, #36]	@ (8007740 <siprintf+0x38>)
 800771a:	9107      	str	r1, [sp, #28]
 800771c:	9104      	str	r1, [sp, #16]
 800771e:	4909      	ldr	r1, [pc, #36]	@ (8007744 <siprintf+0x3c>)
 8007720:	f853 2b04 	ldr.w	r2, [r3], #4
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	a902      	add	r1, sp, #8
 800772c:	f002 fbc2 	bl	8009eb4 <_svfiprintf_r>
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	b01c      	add	sp, #112	@ 0x70
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b003      	add	sp, #12
 800773e:	4770      	bx	lr
 8007740:	2000001c 	.word	0x2000001c
 8007744:	ffff0208 	.word	0xffff0208

08007748 <__sread>:
 8007748:	b510      	push	{r4, lr}
 800774a:	460c      	mov	r4, r1
 800774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007750:	f000 f86c 	bl	800782c <_read_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	bfab      	itete	ge
 8007758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800775a:	89a3      	ldrhlt	r3, [r4, #12]
 800775c:	181b      	addge	r3, r3, r0
 800775e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007762:	bfac      	ite	ge
 8007764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007766:	81a3      	strhlt	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__swrite>:
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	461f      	mov	r7, r3
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	05db      	lsls	r3, r3, #23
 8007774:	4605      	mov	r5, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4616      	mov	r6, r2
 800777a:	d505      	bpl.n	8007788 <__swrite+0x1e>
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	2302      	movs	r3, #2
 8007782:	2200      	movs	r2, #0
 8007784:	f000 f840 	bl	8007808 <_lseek_r>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	4628      	mov	r0, r5
 800779a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	f000 b857 	b.w	8007850 <_write_r>

080077a2 <__sseek>:
 80077a2:	b510      	push	{r4, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	f000 f82d 	bl	8007808 <_lseek_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	bf15      	itete	ne
 80077b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077be:	81a3      	strheq	r3, [r4, #12]
 80077c0:	bf18      	it	ne
 80077c2:	81a3      	strhne	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__sclose>:
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 b80d 	b.w	80077e8 <_close_r>

080077ce <memset>:
 80077ce:	4402      	add	r2, r0
 80077d0:	4603      	mov	r3, r0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <memset+0xa>
 80077d6:	4770      	bx	lr
 80077d8:	f803 1b01 	strb.w	r1, [r3], #1
 80077dc:	e7f9      	b.n	80077d2 <memset+0x4>
	...

080077e0 <_localeconv_r>:
 80077e0:	4800      	ldr	r0, [pc, #0]	@ (80077e4 <_localeconv_r+0x4>)
 80077e2:	4770      	bx	lr
 80077e4:	2000015c 	.word	0x2000015c

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	@ (8007804 <_close_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7f9 fe04 	bl	8001400 <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20001688 	.word	0x20001688

08007808 <_lseek_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d07      	ldr	r5, [pc, #28]	@ (8007828 <_lseek_r+0x20>)
 800780c:	4604      	mov	r4, r0
 800780e:	4608      	mov	r0, r1
 8007810:	4611      	mov	r1, r2
 8007812:	2200      	movs	r2, #0
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7f9 fe19 	bl	800144e <_lseek>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_lseek_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_lseek_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	20001688 	.word	0x20001688

0800782c <_read_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	@ (800784c <_read_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7f9 fda7 	bl	800138e <_read>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_read_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_read_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20001688 	.word	0x20001688

08007850 <_write_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	@ (8007870 <_write_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 fdb2 	bl	80013c8 <_write>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_write_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_write_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20001688 	.word	0x20001688

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	@ (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000001c 	.word	0x2000001c

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	@ (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	@ (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	@ (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	@ (80078c4 <__libc_init_array+0x44>)
 8007894:	f003 fb72 	bl	800af7c <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	0800b4d8 	.word	0x0800b4d8
 80078bc:	0800b4d8 	.word	0x0800b4d8
 80078c0:	0800b4d8 	.word	0x0800b4d8
 80078c4:	0800b4dc 	.word	0x0800b4dc

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr

080078ce <memcpy>:
 80078ce:	440a      	add	r2, r1
 80078d0:	4291      	cmp	r1, r2
 80078d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80078d6:	d100      	bne.n	80078da <memcpy+0xc>
 80078d8:	4770      	bx	lr
 80078da:	b510      	push	{r4, lr}
 80078dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e4:	4291      	cmp	r1, r2
 80078e6:	d1f9      	bne.n	80078dc <memcpy+0xe>
 80078e8:	bd10      	pop	{r4, pc}
	...

080078ec <nanf>:
 80078ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80078f4 <nanf+0x8>
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	7fc00000 	.word	0x7fc00000

080078f8 <quorem>:
 80078f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	6903      	ldr	r3, [r0, #16]
 80078fe:	690c      	ldr	r4, [r1, #16]
 8007900:	42a3      	cmp	r3, r4
 8007902:	4607      	mov	r7, r0
 8007904:	db7e      	blt.n	8007a04 <quorem+0x10c>
 8007906:	3c01      	subs	r4, #1
 8007908:	f101 0814 	add.w	r8, r1, #20
 800790c:	00a3      	lsls	r3, r4, #2
 800790e:	f100 0514 	add.w	r5, r0, #20
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800791e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007922:	3301      	adds	r3, #1
 8007924:	429a      	cmp	r2, r3
 8007926:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800792a:	fbb2 f6f3 	udiv	r6, r2, r3
 800792e:	d32e      	bcc.n	800798e <quorem+0x96>
 8007930:	f04f 0a00 	mov.w	sl, #0
 8007934:	46c4      	mov	ip, r8
 8007936:	46ae      	mov	lr, r5
 8007938:	46d3      	mov	fp, sl
 800793a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800793e:	b298      	uxth	r0, r3
 8007940:	fb06 a000 	mla	r0, r6, r0, sl
 8007944:	0c02      	lsrs	r2, r0, #16
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	fb06 2303 	mla	r3, r6, r3, r2
 800794c:	f8de 2000 	ldr.w	r2, [lr]
 8007950:	b280      	uxth	r0, r0
 8007952:	b292      	uxth	r2, r2
 8007954:	1a12      	subs	r2, r2, r0
 8007956:	445a      	add	r2, fp
 8007958:	f8de 0000 	ldr.w	r0, [lr]
 800795c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007960:	b29b      	uxth	r3, r3
 8007962:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007966:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800796a:	b292      	uxth	r2, r2
 800796c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007970:	45e1      	cmp	r9, ip
 8007972:	f84e 2b04 	str.w	r2, [lr], #4
 8007976:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800797a:	d2de      	bcs.n	800793a <quorem+0x42>
 800797c:	9b00      	ldr	r3, [sp, #0]
 800797e:	58eb      	ldr	r3, [r5, r3]
 8007980:	b92b      	cbnz	r3, 800798e <quorem+0x96>
 8007982:	9b01      	ldr	r3, [sp, #4]
 8007984:	3b04      	subs	r3, #4
 8007986:	429d      	cmp	r5, r3
 8007988:	461a      	mov	r2, r3
 800798a:	d32f      	bcc.n	80079ec <quorem+0xf4>
 800798c:	613c      	str	r4, [r7, #16]
 800798e:	4638      	mov	r0, r7
 8007990:	f001 f9c2 	bl	8008d18 <__mcmp>
 8007994:	2800      	cmp	r0, #0
 8007996:	db25      	blt.n	80079e4 <quorem+0xec>
 8007998:	4629      	mov	r1, r5
 800799a:	2000      	movs	r0, #0
 800799c:	f858 2b04 	ldr.w	r2, [r8], #4
 80079a0:	f8d1 c000 	ldr.w	ip, [r1]
 80079a4:	fa1f fe82 	uxth.w	lr, r2
 80079a8:	fa1f f38c 	uxth.w	r3, ip
 80079ac:	eba3 030e 	sub.w	r3, r3, lr
 80079b0:	4403      	add	r3, r0
 80079b2:	0c12      	lsrs	r2, r2, #16
 80079b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079bc:	b29b      	uxth	r3, r3
 80079be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c2:	45c1      	cmp	r9, r8
 80079c4:	f841 3b04 	str.w	r3, [r1], #4
 80079c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079cc:	d2e6      	bcs.n	800799c <quorem+0xa4>
 80079ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079d6:	b922      	cbnz	r2, 80079e2 <quorem+0xea>
 80079d8:	3b04      	subs	r3, #4
 80079da:	429d      	cmp	r5, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	d30b      	bcc.n	80079f8 <quorem+0x100>
 80079e0:	613c      	str	r4, [r7, #16]
 80079e2:	3601      	adds	r6, #1
 80079e4:	4630      	mov	r0, r6
 80079e6:	b003      	add	sp, #12
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	3b04      	subs	r3, #4
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	d1cb      	bne.n	800798c <quorem+0x94>
 80079f4:	3c01      	subs	r4, #1
 80079f6:	e7c6      	b.n	8007986 <quorem+0x8e>
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	3b04      	subs	r3, #4
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	d1ef      	bne.n	80079e0 <quorem+0xe8>
 8007a00:	3c01      	subs	r4, #1
 8007a02:	e7ea      	b.n	80079da <quorem+0xe2>
 8007a04:	2000      	movs	r0, #0
 8007a06:	e7ee      	b.n	80079e6 <quorem+0xee>

08007a08 <_dtoa_r>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	69c7      	ldr	r7, [r0, #28]
 8007a0e:	b099      	sub	sp, #100	@ 0x64
 8007a10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a14:	ec55 4b10 	vmov	r4, r5, d0
 8007a18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a1c:	4683      	mov	fp, r0
 8007a1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a22:	b97f      	cbnz	r7, 8007a44 <_dtoa_r+0x3c>
 8007a24:	2010      	movs	r0, #16
 8007a26:	f000 fdfd 	bl	8008624 <malloc>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a30:	b920      	cbnz	r0, 8007a3c <_dtoa_r+0x34>
 8007a32:	4ba7      	ldr	r3, [pc, #668]	@ (8007cd0 <_dtoa_r+0x2c8>)
 8007a34:	21ef      	movs	r1, #239	@ 0xef
 8007a36:	48a7      	ldr	r0, [pc, #668]	@ (8007cd4 <_dtoa_r+0x2cc>)
 8007a38:	f002 fc2a 	bl	800a290 <__assert_func>
 8007a3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a40:	6007      	str	r7, [r0, #0]
 8007a42:	60c7      	str	r7, [r0, #12]
 8007a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	b159      	cbz	r1, 8007a64 <_dtoa_r+0x5c>
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	604a      	str	r2, [r1, #4]
 8007a50:	2301      	movs	r3, #1
 8007a52:	4093      	lsls	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 feda 	bl	8008810 <_Bfree>
 8007a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	1e2b      	subs	r3, r5, #0
 8007a66:	bfb9      	ittee	lt
 8007a68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a6c:	9303      	strlt	r3, [sp, #12]
 8007a6e:	2300      	movge	r3, #0
 8007a70:	6033      	strge	r3, [r6, #0]
 8007a72:	9f03      	ldr	r7, [sp, #12]
 8007a74:	4b98      	ldr	r3, [pc, #608]	@ (8007cd8 <_dtoa_r+0x2d0>)
 8007a76:	bfbc      	itt	lt
 8007a78:	2201      	movlt	r2, #1
 8007a7a:	6032      	strlt	r2, [r6, #0]
 8007a7c:	43bb      	bics	r3, r7
 8007a7e:	d112      	bne.n	8007aa6 <_dtoa_r+0x9e>
 8007a80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a8c:	4323      	orrs	r3, r4
 8007a8e:	f000 854d 	beq.w	800852c <_dtoa_r+0xb24>
 8007a92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007cec <_dtoa_r+0x2e4>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 854f 	beq.w	800853c <_dtoa_r+0xb34>
 8007a9e:	f10a 0303 	add.w	r3, sl, #3
 8007aa2:	f000 bd49 	b.w	8008538 <_dtoa_r+0xb30>
 8007aa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	ec51 0b17 	vmov	r0, r1, d7
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ab6:	f7f9 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aba:	4680      	mov	r8, r0
 8007abc:	b158      	cbz	r0, 8007ad6 <_dtoa_r+0xce>
 8007abe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ac6:	b113      	cbz	r3, 8007ace <_dtoa_r+0xc6>
 8007ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007aca:	4b84      	ldr	r3, [pc, #528]	@ (8007cdc <_dtoa_r+0x2d4>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007cf0 <_dtoa_r+0x2e8>
 8007ad2:	f000 bd33 	b.w	800853c <_dtoa_r+0xb34>
 8007ad6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ada:	aa16      	add	r2, sp, #88	@ 0x58
 8007adc:	a917      	add	r1, sp, #92	@ 0x5c
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f001 fa3a 	bl	8008f58 <__d2b>
 8007ae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ae8:	4681      	mov	r9, r0
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	d077      	beq.n	8007bde <_dtoa_r+0x1d6>
 8007aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007afc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b08:	4619      	mov	r1, r3
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4b74      	ldr	r3, [pc, #464]	@ (8007ce0 <_dtoa_r+0x2d8>)
 8007b0e:	f7f8 fbbb 	bl	8000288 <__aeabi_dsub>
 8007b12:	a369      	add	r3, pc, #420	@ (adr r3, 8007cb8 <_dtoa_r+0x2b0>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	a368      	add	r3, pc, #416	@ (adr r3, 8007cc0 <_dtoa_r+0x2b8>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f7f8 fbb3 	bl	800028c <__adddf3>
 8007b26:	4604      	mov	r4, r0
 8007b28:	4630      	mov	r0, r6
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	f7f8 fcfa 	bl	8000524 <__aeabi_i2d>
 8007b30:	a365      	add	r3, pc, #404	@ (adr r3, 8007cc8 <_dtoa_r+0x2c0>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fba3 	bl	800028c <__adddf3>
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	f7f9 f805 	bl	8000b58 <__aeabi_d2iz>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4620      	mov	r0, r4
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7f8 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8007b5c:	b140      	cbz	r0, 8007b70 <_dtoa_r+0x168>
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7f8 fce0 	bl	8000524 <__aeabi_i2d>
 8007b64:	4622      	mov	r2, r4
 8007b66:	462b      	mov	r3, r5
 8007b68:	f7f8 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b6c:	b900      	cbnz	r0, 8007b70 <_dtoa_r+0x168>
 8007b6e:	3f01      	subs	r7, #1
 8007b70:	2f16      	cmp	r7, #22
 8007b72:	d851      	bhi.n	8007c18 <_dtoa_r+0x210>
 8007b74:	4b5b      	ldr	r3, [pc, #364]	@ (8007ce4 <_dtoa_r+0x2dc>)
 8007b76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b82:	f7f8 ffab 	bl	8000adc <__aeabi_dcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d048      	beq.n	8007c1c <_dtoa_r+0x214>
 8007b8a:	3f01      	subs	r7, #1
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b92:	1b9b      	subs	r3, r3, r6
 8007b94:	1e5a      	subs	r2, r3, #1
 8007b96:	bf44      	itt	mi
 8007b98:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b9c:	2300      	movmi	r3, #0
 8007b9e:	9208      	str	r2, [sp, #32]
 8007ba0:	bf54      	ite	pl
 8007ba2:	f04f 0800 	movpl.w	r8, #0
 8007ba6:	9308      	strmi	r3, [sp, #32]
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	db39      	blt.n	8007c20 <_dtoa_r+0x218>
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007bb0:	443b      	add	r3, r7
 8007bb2:	9308      	str	r3, [sp, #32]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d864      	bhi.n	8007c88 <_dtoa_r+0x280>
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	bfc4      	itt	gt
 8007bc2:	3b04      	subgt	r3, #4
 8007bc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc8:	f1a3 0302 	sub.w	r3, r3, #2
 8007bcc:	bfcc      	ite	gt
 8007bce:	2400      	movgt	r4, #0
 8007bd0:	2401      	movle	r4, #1
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d863      	bhi.n	8007c9e <_dtoa_r+0x296>
 8007bd6:	e8df f003 	tbb	[pc, r3]
 8007bda:	372a      	.short	0x372a
 8007bdc:	5535      	.short	0x5535
 8007bde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007be2:	441e      	add	r6, r3
 8007be4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	bfc1      	itttt	gt
 8007bec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bf0:	409f      	lslgt	r7, r3
 8007bf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bfa:	bfd6      	itet	le
 8007bfc:	f1c3 0320 	rsble	r3, r3, #32
 8007c00:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c04:	fa04 f003 	lslle.w	r0, r4, r3
 8007c08:	f7f8 fc7c 	bl	8000504 <__aeabi_ui2d>
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c12:	3e01      	subs	r6, #1
 8007c14:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c16:	e777      	b.n	8007b08 <_dtoa_r+0x100>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e7b8      	b.n	8007b8e <_dtoa_r+0x186>
 8007c1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c1e:	e7b7      	b.n	8007b90 <_dtoa_r+0x188>
 8007c20:	427b      	negs	r3, r7
 8007c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c24:	2300      	movs	r3, #0
 8007c26:	eba8 0807 	sub.w	r8, r8, r7
 8007c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c2c:	e7c4      	b.n	8007bb8 <_dtoa_r+0x1b0>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dc35      	bgt.n	8007ca4 <_dtoa_r+0x29c>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	9307      	str	r3, [sp, #28]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c42:	e00b      	b.n	8007c5c <_dtoa_r+0x254>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e7f3      	b.n	8007c30 <_dtoa_r+0x228>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	bfb8      	it	lt
 8007c5a:	2301      	movlt	r3, #1
 8007c5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c60:	2100      	movs	r1, #0
 8007c62:	2204      	movs	r2, #4
 8007c64:	f102 0514 	add.w	r5, r2, #20
 8007c68:	429d      	cmp	r5, r3
 8007c6a:	d91f      	bls.n	8007cac <_dtoa_r+0x2a4>
 8007c6c:	6041      	str	r1, [r0, #4]
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f000 fd8e 	bl	8008790 <_Balloc>
 8007c74:	4682      	mov	sl, r0
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d13c      	bne.n	8007cf4 <_dtoa_r+0x2ec>
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce8 <_dtoa_r+0x2e0>)
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c82:	e6d8      	b.n	8007a36 <_dtoa_r+0x2e>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e7e0      	b.n	8007c4a <_dtoa_r+0x242>
 8007c88:	2401      	movs	r4, #1
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2312      	movs	r3, #18
 8007c9c:	e7d0      	b.n	8007c40 <_dtoa_r+0x238>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ca2:	e7f5      	b.n	8007c90 <_dtoa_r+0x288>
 8007ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	9307      	str	r3, [sp, #28]
 8007caa:	e7d7      	b.n	8007c5c <_dtoa_r+0x254>
 8007cac:	3101      	adds	r1, #1
 8007cae:	0052      	lsls	r2, r2, #1
 8007cb0:	e7d8      	b.n	8007c64 <_dtoa_r+0x25c>
 8007cb2:	bf00      	nop
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	636f4361 	.word	0x636f4361
 8007cbc:	3fd287a7 	.word	0x3fd287a7
 8007cc0:	8b60c8b3 	.word	0x8b60c8b3
 8007cc4:	3fc68a28 	.word	0x3fc68a28
 8007cc8:	509f79fb 	.word	0x509f79fb
 8007ccc:	3fd34413 	.word	0x3fd34413
 8007cd0:	0800b0e9 	.word	0x0800b0e9
 8007cd4:	0800b100 	.word	0x0800b100
 8007cd8:	7ff00000 	.word	0x7ff00000
 8007cdc:	0800b0b4 	.word	0x0800b0b4
 8007ce0:	3ff80000 	.word	0x3ff80000
 8007ce4:	0800b1f8 	.word	0x0800b1f8
 8007ce8:	0800b158 	.word	0x0800b158
 8007cec:	0800b0e5 	.word	0x0800b0e5
 8007cf0:	0800b0b3 	.word	0x0800b0b3
 8007cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cf8:	6018      	str	r0, [r3, #0]
 8007cfa:	9b07      	ldr	r3, [sp, #28]
 8007cfc:	2b0e      	cmp	r3, #14
 8007cfe:	f200 80a4 	bhi.w	8007e4a <_dtoa_r+0x442>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	f000 80a1 	beq.w	8007e4a <_dtoa_r+0x442>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	dd33      	ble.n	8007d74 <_dtoa_r+0x36c>
 8007d0c:	4bad      	ldr	r3, [pc, #692]	@ (8007fc4 <_dtoa_r+0x5bc>)
 8007d0e:	f007 020f 	and.w	r2, r7, #15
 8007d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d16:	ed93 7b00 	vldr	d7, [r3]
 8007d1a:	05f8      	lsls	r0, r7, #23
 8007d1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d24:	d516      	bpl.n	8007d54 <_dtoa_r+0x34c>
 8007d26:	4ba8      	ldr	r3, [pc, #672]	@ (8007fc8 <_dtoa_r+0x5c0>)
 8007d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d30:	f7f8 fd8c 	bl	800084c <__aeabi_ddiv>
 8007d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d38:	f004 040f 	and.w	r4, r4, #15
 8007d3c:	2603      	movs	r6, #3
 8007d3e:	4da2      	ldr	r5, [pc, #648]	@ (8007fc8 <_dtoa_r+0x5c0>)
 8007d40:	b954      	cbnz	r4, 8007d58 <_dtoa_r+0x350>
 8007d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4a:	f7f8 fd7f 	bl	800084c <__aeabi_ddiv>
 8007d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d52:	e028      	b.n	8007da6 <_dtoa_r+0x39e>
 8007d54:	2602      	movs	r6, #2
 8007d56:	e7f2      	b.n	8007d3e <_dtoa_r+0x336>
 8007d58:	07e1      	lsls	r1, r4, #31
 8007d5a:	d508      	bpl.n	8007d6e <_dtoa_r+0x366>
 8007d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d64:	f7f8 fc48 	bl	80005f8 <__aeabi_dmul>
 8007d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	1064      	asrs	r4, r4, #1
 8007d70:	3508      	adds	r5, #8
 8007d72:	e7e5      	b.n	8007d40 <_dtoa_r+0x338>
 8007d74:	f000 80d2 	beq.w	8007f1c <_dtoa_r+0x514>
 8007d78:	427c      	negs	r4, r7
 8007d7a:	4b92      	ldr	r3, [pc, #584]	@ (8007fc4 <_dtoa_r+0x5bc>)
 8007d7c:	4d92      	ldr	r5, [pc, #584]	@ (8007fc8 <_dtoa_r+0x5c0>)
 8007d7e:	f004 020f 	and.w	r2, r4, #15
 8007d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d8e:	f7f8 fc33 	bl	80005f8 <__aeabi_dmul>
 8007d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d96:	1124      	asrs	r4, r4, #4
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2602      	movs	r6, #2
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	f040 80b2 	bne.w	8007f06 <_dtoa_r+0x4fe>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1d3      	bne.n	8007d4e <_dtoa_r+0x346>
 8007da6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007da8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80b7 	beq.w	8007f20 <_dtoa_r+0x518>
 8007db2:	4b86      	ldr	r3, [pc, #536]	@ (8007fcc <_dtoa_r+0x5c4>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f000 80ae 	beq.w	8007f20 <_dtoa_r+0x518>
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80aa 	beq.w	8007f20 <_dtoa_r+0x518>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd37      	ble.n	8007e42 <_dtoa_r+0x43a>
 8007dd2:	1e7b      	subs	r3, r7, #1
 8007dd4:	9304      	str	r3, [sp, #16]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8007fd0 <_dtoa_r+0x5c8>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fc0b 	bl	80005f8 <__aeabi_dmul>
 8007de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de6:	9c00      	ldr	r4, [sp, #0]
 8007de8:	3601      	adds	r6, #1
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7f8 fb9a 	bl	8000524 <__aeabi_i2d>
 8007df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df4:	f7f8 fc00 	bl	80005f8 <__aeabi_dmul>
 8007df8:	4b76      	ldr	r3, [pc, #472]	@ (8007fd4 <_dtoa_r+0x5cc>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f7f8 fa46 	bl	800028c <__adddf3>
 8007e00:	4605      	mov	r5, r0
 8007e02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	f040 808d 	bne.w	8007f26 <_dtoa_r+0x51e>
 8007e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e10:	4b71      	ldr	r3, [pc, #452]	@ (8007fd8 <_dtoa_r+0x5d0>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fa38 	bl	8000288 <__aeabi_dsub>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e20:	462a      	mov	r2, r5
 8007e22:	4633      	mov	r3, r6
 8007e24:	f7f8 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	f040 828b 	bne.w	8008344 <_dtoa_r+0x93c>
 8007e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e32:	462a      	mov	r2, r5
 8007e34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e38:	f7f8 fe50 	bl	8000adc <__aeabi_dcmplt>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	f040 8128 	bne.w	8008092 <_dtoa_r+0x68a>
 8007e42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f2c0 815a 	blt.w	8008106 <_dtoa_r+0x6fe>
 8007e52:	2f0e      	cmp	r7, #14
 8007e54:	f300 8157 	bgt.w	8008106 <_dtoa_r+0x6fe>
 8007e58:	4b5a      	ldr	r3, [pc, #360]	@ (8007fc4 <_dtoa_r+0x5bc>)
 8007e5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e5e:	ed93 7b00 	vldr	d7, [r3]
 8007e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	ed8d 7b00 	vstr	d7, [sp]
 8007e6a:	da03      	bge.n	8007e74 <_dtoa_r+0x46c>
 8007e6c:	9b07      	ldr	r3, [sp, #28]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f340 8101 	ble.w	8008076 <_dtoa_r+0x66e>
 8007e74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e78:	4656      	mov	r6, sl
 8007e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fce3 	bl	800084c <__aeabi_ddiv>
 8007e86:	f7f8 fe67 	bl	8000b58 <__aeabi_d2iz>
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	f7f8 fb4a 	bl	8000524 <__aeabi_i2d>
 8007e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	f806 4b01 	strb.w	r4, [r6], #1
 8007eac:	9d07      	ldr	r5, [sp, #28]
 8007eae:	eba6 040a 	sub.w	r4, r6, sl
 8007eb2:	42a5      	cmp	r5, r4
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	f040 8117 	bne.w	80080ea <_dtoa_r+0x6e2>
 8007ebc:	f7f8 f9e6 	bl	800028c <__adddf3>
 8007ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	f7f8 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f040 80f9 	bne.w	80080c4 <_dtoa_r+0x6bc>
 8007ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7f8 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ede:	b118      	cbz	r0, 8007ee8 <_dtoa_r+0x4e0>
 8007ee0:	f018 0f01 	tst.w	r8, #1
 8007ee4:	f040 80ee 	bne.w	80080c4 <_dtoa_r+0x6bc>
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fc90 	bl	8008810 <_Bfree>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	7033      	strb	r3, [r6, #0]
 8007ef4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ef6:	3701      	adds	r7, #1
 8007ef8:	601f      	str	r7, [r3, #0]
 8007efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 831d 	beq.w	800853c <_dtoa_r+0xb34>
 8007f02:	601e      	str	r6, [r3, #0]
 8007f04:	e31a      	b.n	800853c <_dtoa_r+0xb34>
 8007f06:	07e2      	lsls	r2, r4, #31
 8007f08:	d505      	bpl.n	8007f16 <_dtoa_r+0x50e>
 8007f0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f0e:	f7f8 fb73 	bl	80005f8 <__aeabi_dmul>
 8007f12:	3601      	adds	r6, #1
 8007f14:	2301      	movs	r3, #1
 8007f16:	1064      	asrs	r4, r4, #1
 8007f18:	3508      	adds	r5, #8
 8007f1a:	e73f      	b.n	8007d9c <_dtoa_r+0x394>
 8007f1c:	2602      	movs	r6, #2
 8007f1e:	e742      	b.n	8007da6 <_dtoa_r+0x39e>
 8007f20:	9c07      	ldr	r4, [sp, #28]
 8007f22:	9704      	str	r7, [sp, #16]
 8007f24:	e761      	b.n	8007dea <_dtoa_r+0x3e2>
 8007f26:	4b27      	ldr	r3, [pc, #156]	@ (8007fc4 <_dtoa_r+0x5bc>)
 8007f28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f32:	4454      	add	r4, sl
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d053      	beq.n	8007fe0 <_dtoa_r+0x5d8>
 8007f38:	4928      	ldr	r1, [pc, #160]	@ (8007fdc <_dtoa_r+0x5d4>)
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f7f8 fc86 	bl	800084c <__aeabi_ddiv>
 8007f40:	4633      	mov	r3, r6
 8007f42:	462a      	mov	r2, r5
 8007f44:	f7f8 f9a0 	bl	8000288 <__aeabi_dsub>
 8007f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f4c:	4656      	mov	r6, sl
 8007f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f52:	f7f8 fe01 	bl	8000b58 <__aeabi_d2iz>
 8007f56:	4605      	mov	r5, r0
 8007f58:	f7f8 fae4 	bl	8000524 <__aeabi_i2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f64:	f7f8 f990 	bl	8000288 <__aeabi_dsub>
 8007f68:	3530      	adds	r5, #48	@ 0x30
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f72:	f806 5b01 	strb.w	r5, [r6], #1
 8007f76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f7a:	f7f8 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d171      	bne.n	8008066 <_dtoa_r+0x65e>
 8007f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f86:	4911      	ldr	r1, [pc, #68]	@ (8007fcc <_dtoa_r+0x5c4>)
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f7f8 f97d 	bl	8000288 <__aeabi_dsub>
 8007f8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f92:	f7f8 fda3 	bl	8000adc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8095 	bne.w	80080c6 <_dtoa_r+0x6be>
 8007f9c:	42a6      	cmp	r6, r4
 8007f9e:	f43f af50 	beq.w	8007e42 <_dtoa_r+0x43a>
 8007fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd0 <_dtoa_r+0x5c8>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 fb25 	bl	80005f8 <__aeabi_dmul>
 8007fae:	4b08      	ldr	r3, [pc, #32]	@ (8007fd0 <_dtoa_r+0x5c8>)
 8007fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fba:	f7f8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	e7c4      	b.n	8007f4e <_dtoa_r+0x546>
 8007fc4:	0800b1f8 	.word	0x0800b1f8
 8007fc8:	0800b1d0 	.word	0x0800b1d0
 8007fcc:	3ff00000 	.word	0x3ff00000
 8007fd0:	40240000 	.word	0x40240000
 8007fd4:	401c0000 	.word	0x401c0000
 8007fd8:	40140000 	.word	0x40140000
 8007fdc:	3fe00000 	.word	0x3fe00000
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fec:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fee:	4656      	mov	r6, sl
 8007ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff4:	f7f8 fdb0 	bl	8000b58 <__aeabi_d2iz>
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	f7f8 fa93 	bl	8000524 <__aeabi_i2d>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008006:	f7f8 f93f 	bl	8000288 <__aeabi_dsub>
 800800a:	3530      	adds	r5, #48	@ 0x30
 800800c:	f806 5b01 	strb.w	r5, [r6], #1
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	42a6      	cmp	r6, r4
 8008016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	d124      	bne.n	800806a <_dtoa_r+0x662>
 8008020:	4bac      	ldr	r3, [pc, #688]	@ (80082d4 <_dtoa_r+0x8cc>)
 8008022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008026:	f7f8 f931 	bl	800028c <__adddf3>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	f7f8 fd71 	bl	8000b18 <__aeabi_dcmpgt>
 8008036:	2800      	cmp	r0, #0
 8008038:	d145      	bne.n	80080c6 <_dtoa_r+0x6be>
 800803a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800803e:	49a5      	ldr	r1, [pc, #660]	@ (80082d4 <_dtoa_r+0x8cc>)
 8008040:	2000      	movs	r0, #0
 8008042:	f7f8 f921 	bl	8000288 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804e:	f7f8 fd45 	bl	8000adc <__aeabi_dcmplt>
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f aef5 	beq.w	8007e42 <_dtoa_r+0x43a>
 8008058:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800805a:	1e73      	subs	r3, r6, #1
 800805c:	9315      	str	r3, [sp, #84]	@ 0x54
 800805e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008062:	2b30      	cmp	r3, #48	@ 0x30
 8008064:	d0f8      	beq.n	8008058 <_dtoa_r+0x650>
 8008066:	9f04      	ldr	r7, [sp, #16]
 8008068:	e73e      	b.n	8007ee8 <_dtoa_r+0x4e0>
 800806a:	4b9b      	ldr	r3, [pc, #620]	@ (80082d8 <_dtoa_r+0x8d0>)
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008074:	e7bc      	b.n	8007ff0 <_dtoa_r+0x5e8>
 8008076:	d10c      	bne.n	8008092 <_dtoa_r+0x68a>
 8008078:	4b98      	ldr	r3, [pc, #608]	@ (80082dc <_dtoa_r+0x8d4>)
 800807a:	2200      	movs	r2, #0
 800807c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008080:	f7f8 faba 	bl	80005f8 <__aeabi_dmul>
 8008084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008088:	f7f8 fd3c 	bl	8000b04 <__aeabi_dcmpge>
 800808c:	2800      	cmp	r0, #0
 800808e:	f000 8157 	beq.w	8008340 <_dtoa_r+0x938>
 8008092:	2400      	movs	r4, #0
 8008094:	4625      	mov	r5, r4
 8008096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008098:	43db      	mvns	r3, r3
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	4656      	mov	r6, sl
 800809e:	2700      	movs	r7, #0
 80080a0:	4621      	mov	r1, r4
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fbb4 	bl	8008810 <_Bfree>
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	d0dc      	beq.n	8008066 <_dtoa_r+0x65e>
 80080ac:	b12f      	cbz	r7, 80080ba <_dtoa_r+0x6b2>
 80080ae:	42af      	cmp	r7, r5
 80080b0:	d003      	beq.n	80080ba <_dtoa_r+0x6b2>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4658      	mov	r0, fp
 80080b6:	f000 fbab 	bl	8008810 <_Bfree>
 80080ba:	4629      	mov	r1, r5
 80080bc:	4658      	mov	r0, fp
 80080be:	f000 fba7 	bl	8008810 <_Bfree>
 80080c2:	e7d0      	b.n	8008066 <_dtoa_r+0x65e>
 80080c4:	9704      	str	r7, [sp, #16]
 80080c6:	4633      	mov	r3, r6
 80080c8:	461e      	mov	r6, r3
 80080ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ce:	2a39      	cmp	r2, #57	@ 0x39
 80080d0:	d107      	bne.n	80080e2 <_dtoa_r+0x6da>
 80080d2:	459a      	cmp	sl, r3
 80080d4:	d1f8      	bne.n	80080c8 <_dtoa_r+0x6c0>
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	3201      	adds	r2, #1
 80080da:	9204      	str	r2, [sp, #16]
 80080dc:	2230      	movs	r2, #48	@ 0x30
 80080de:	f88a 2000 	strb.w	r2, [sl]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	3201      	adds	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	e7bd      	b.n	8008066 <_dtoa_r+0x65e>
 80080ea:	4b7b      	ldr	r3, [pc, #492]	@ (80082d8 <_dtoa_r+0x8d0>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	f7f8 fa83 	bl	80005f8 <__aeabi_dmul>
 80080f2:	2200      	movs	r2, #0
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	460d      	mov	r5, r1
 80080fa:	f7f8 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f43f aebb 	beq.w	8007e7a <_dtoa_r+0x472>
 8008104:	e6f0      	b.n	8007ee8 <_dtoa_r+0x4e0>
 8008106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008108:	2a00      	cmp	r2, #0
 800810a:	f000 80db 	beq.w	80082c4 <_dtoa_r+0x8bc>
 800810e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008110:	2a01      	cmp	r2, #1
 8008112:	f300 80bf 	bgt.w	8008294 <_dtoa_r+0x88c>
 8008116:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008118:	2a00      	cmp	r2, #0
 800811a:	f000 80b7 	beq.w	800828c <_dtoa_r+0x884>
 800811e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008122:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008124:	4646      	mov	r6, r8
 8008126:	9a08      	ldr	r2, [sp, #32]
 8008128:	2101      	movs	r1, #1
 800812a:	441a      	add	r2, r3
 800812c:	4658      	mov	r0, fp
 800812e:	4498      	add	r8, r3
 8008130:	9208      	str	r2, [sp, #32]
 8008132:	f000 fc6b 	bl	8008a0c <__i2b>
 8008136:	4605      	mov	r5, r0
 8008138:	b15e      	cbz	r6, 8008152 <_dtoa_r+0x74a>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dd08      	ble.n	8008152 <_dtoa_r+0x74a>
 8008140:	42b3      	cmp	r3, r6
 8008142:	9a08      	ldr	r2, [sp, #32]
 8008144:	bfa8      	it	ge
 8008146:	4633      	movge	r3, r6
 8008148:	eba8 0803 	sub.w	r8, r8, r3
 800814c:	1af6      	subs	r6, r6, r3
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	9308      	str	r3, [sp, #32]
 8008152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008154:	b1f3      	cbz	r3, 8008194 <_dtoa_r+0x78c>
 8008156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80b7 	beq.w	80082cc <_dtoa_r+0x8c4>
 800815e:	b18c      	cbz	r4, 8008184 <_dtoa_r+0x77c>
 8008160:	4629      	mov	r1, r5
 8008162:	4622      	mov	r2, r4
 8008164:	4658      	mov	r0, fp
 8008166:	f000 fd11 	bl	8008b8c <__pow5mult>
 800816a:	464a      	mov	r2, r9
 800816c:	4601      	mov	r1, r0
 800816e:	4605      	mov	r5, r0
 8008170:	4658      	mov	r0, fp
 8008172:	f000 fc61 	bl	8008a38 <__multiply>
 8008176:	4649      	mov	r1, r9
 8008178:	9004      	str	r0, [sp, #16]
 800817a:	4658      	mov	r0, fp
 800817c:	f000 fb48 	bl	8008810 <_Bfree>
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	4699      	mov	r9, r3
 8008184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008186:	1b1a      	subs	r2, r3, r4
 8008188:	d004      	beq.n	8008194 <_dtoa_r+0x78c>
 800818a:	4649      	mov	r1, r9
 800818c:	4658      	mov	r0, fp
 800818e:	f000 fcfd 	bl	8008b8c <__pow5mult>
 8008192:	4681      	mov	r9, r0
 8008194:	2101      	movs	r1, #1
 8008196:	4658      	mov	r0, fp
 8008198:	f000 fc38 	bl	8008a0c <__i2b>
 800819c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800819e:	4604      	mov	r4, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 81cf 	beq.w	8008544 <_dtoa_r+0xb3c>
 80081a6:	461a      	mov	r2, r3
 80081a8:	4601      	mov	r1, r0
 80081aa:	4658      	mov	r0, fp
 80081ac:	f000 fcee 	bl	8008b8c <__pow5mult>
 80081b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	4604      	mov	r4, r0
 80081b6:	f300 8095 	bgt.w	80082e4 <_dtoa_r+0x8dc>
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f040 8087 	bne.w	80082d0 <_dtoa_r+0x8c8>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 8089 	bne.w	80082e0 <_dtoa_r+0x8d8>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081d4:	0d1b      	lsrs	r3, r3, #20
 80081d6:	051b      	lsls	r3, r3, #20
 80081d8:	b12b      	cbz	r3, 80081e6 <_dtoa_r+0x7de>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	3301      	adds	r3, #1
 80081de:	9308      	str	r3, [sp, #32]
 80081e0:	f108 0801 	add.w	r8, r8, #1
 80081e4:	2301      	movs	r3, #1
 80081e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 81b0 	beq.w	8008550 <_dtoa_r+0xb48>
 80081f0:	6923      	ldr	r3, [r4, #16]
 80081f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081f6:	6918      	ldr	r0, [r3, #16]
 80081f8:	f000 fbbc 	bl	8008974 <__hi0bits>
 80081fc:	f1c0 0020 	rsb	r0, r0, #32
 8008200:	9b08      	ldr	r3, [sp, #32]
 8008202:	4418      	add	r0, r3
 8008204:	f010 001f 	ands.w	r0, r0, #31
 8008208:	d077      	beq.n	80082fa <_dtoa_r+0x8f2>
 800820a:	f1c0 0320 	rsb	r3, r0, #32
 800820e:	2b04      	cmp	r3, #4
 8008210:	dd6b      	ble.n	80082ea <_dtoa_r+0x8e2>
 8008212:	9b08      	ldr	r3, [sp, #32]
 8008214:	f1c0 001c 	rsb	r0, r0, #28
 8008218:	4403      	add	r3, r0
 800821a:	4480      	add	r8, r0
 800821c:	4406      	add	r6, r0
 800821e:	9308      	str	r3, [sp, #32]
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	dd05      	ble.n	8008232 <_dtoa_r+0x82a>
 8008226:	4649      	mov	r1, r9
 8008228:	4642      	mov	r2, r8
 800822a:	4658      	mov	r0, fp
 800822c:	f000 fd08 	bl	8008c40 <__lshift>
 8008230:	4681      	mov	r9, r0
 8008232:	9b08      	ldr	r3, [sp, #32]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd05      	ble.n	8008244 <_dtoa_r+0x83c>
 8008238:	4621      	mov	r1, r4
 800823a:	461a      	mov	r2, r3
 800823c:	4658      	mov	r0, fp
 800823e:	f000 fcff 	bl	8008c40 <__lshift>
 8008242:	4604      	mov	r4, r0
 8008244:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d059      	beq.n	80082fe <_dtoa_r+0x8f6>
 800824a:	4621      	mov	r1, r4
 800824c:	4648      	mov	r0, r9
 800824e:	f000 fd63 	bl	8008d18 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	da53      	bge.n	80082fe <_dtoa_r+0x8f6>
 8008256:	1e7b      	subs	r3, r7, #1
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	4649      	mov	r1, r9
 800825c:	2300      	movs	r3, #0
 800825e:	220a      	movs	r2, #10
 8008260:	4658      	mov	r0, fp
 8008262:	f000 faf7 	bl	8008854 <__multadd>
 8008266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008268:	4681      	mov	r9, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8172 	beq.w	8008554 <_dtoa_r+0xb4c>
 8008270:	2300      	movs	r3, #0
 8008272:	4629      	mov	r1, r5
 8008274:	220a      	movs	r2, #10
 8008276:	4658      	mov	r0, fp
 8008278:	f000 faec 	bl	8008854 <__multadd>
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	4605      	mov	r5, r0
 8008282:	dc67      	bgt.n	8008354 <_dtoa_r+0x94c>
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	2b02      	cmp	r3, #2
 8008288:	dc41      	bgt.n	800830e <_dtoa_r+0x906>
 800828a:	e063      	b.n	8008354 <_dtoa_r+0x94c>
 800828c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800828e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008292:	e746      	b.n	8008122 <_dtoa_r+0x71a>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	1e5c      	subs	r4, r3, #1
 8008298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800829a:	42a3      	cmp	r3, r4
 800829c:	bfbf      	itttt	lt
 800829e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80082a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80082a4:	1ae3      	sublt	r3, r4, r3
 80082a6:	bfb4      	ite	lt
 80082a8:	18d2      	addlt	r2, r2, r3
 80082aa:	1b1c      	subge	r4, r3, r4
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	bfbc      	itt	lt
 80082b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80082b2:	2400      	movlt	r4, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfb5      	itete	lt
 80082b8:	eba8 0603 	sublt.w	r6, r8, r3
 80082bc:	9b07      	ldrge	r3, [sp, #28]
 80082be:	2300      	movlt	r3, #0
 80082c0:	4646      	movge	r6, r8
 80082c2:	e730      	b.n	8008126 <_dtoa_r+0x71e>
 80082c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082c8:	4646      	mov	r6, r8
 80082ca:	e735      	b.n	8008138 <_dtoa_r+0x730>
 80082cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082ce:	e75c      	b.n	800818a <_dtoa_r+0x782>
 80082d0:	2300      	movs	r3, #0
 80082d2:	e788      	b.n	80081e6 <_dtoa_r+0x7de>
 80082d4:	3fe00000 	.word	0x3fe00000
 80082d8:	40240000 	.word	0x40240000
 80082dc:	40140000 	.word	0x40140000
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	e780      	b.n	80081e6 <_dtoa_r+0x7de>
 80082e4:	2300      	movs	r3, #0
 80082e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082e8:	e782      	b.n	80081f0 <_dtoa_r+0x7e8>
 80082ea:	d099      	beq.n	8008220 <_dtoa_r+0x818>
 80082ec:	9a08      	ldr	r2, [sp, #32]
 80082ee:	331c      	adds	r3, #28
 80082f0:	441a      	add	r2, r3
 80082f2:	4498      	add	r8, r3
 80082f4:	441e      	add	r6, r3
 80082f6:	9208      	str	r2, [sp, #32]
 80082f8:	e792      	b.n	8008220 <_dtoa_r+0x818>
 80082fa:	4603      	mov	r3, r0
 80082fc:	e7f6      	b.n	80082ec <_dtoa_r+0x8e4>
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	9704      	str	r7, [sp, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	dc20      	bgt.n	8008348 <_dtoa_r+0x940>
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830a:	2b02      	cmp	r3, #2
 800830c:	dd1e      	ble.n	800834c <_dtoa_r+0x944>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f47f aec0 	bne.w	8008096 <_dtoa_r+0x68e>
 8008316:	4621      	mov	r1, r4
 8008318:	2205      	movs	r2, #5
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fa9a 	bl	8008854 <__multadd>
 8008320:	4601      	mov	r1, r0
 8008322:	4604      	mov	r4, r0
 8008324:	4648      	mov	r0, r9
 8008326:	f000 fcf7 	bl	8008d18 <__mcmp>
 800832a:	2800      	cmp	r0, #0
 800832c:	f77f aeb3 	ble.w	8008096 <_dtoa_r+0x68e>
 8008330:	4656      	mov	r6, sl
 8008332:	2331      	movs	r3, #49	@ 0x31
 8008334:	f806 3b01 	strb.w	r3, [r6], #1
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	3301      	adds	r3, #1
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	e6ae      	b.n	800809e <_dtoa_r+0x696>
 8008340:	9c07      	ldr	r4, [sp, #28]
 8008342:	9704      	str	r7, [sp, #16]
 8008344:	4625      	mov	r5, r4
 8008346:	e7f3      	b.n	8008330 <_dtoa_r+0x928>
 8008348:	9b07      	ldr	r3, [sp, #28]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8104 	beq.w	800855c <_dtoa_r+0xb54>
 8008354:	2e00      	cmp	r6, #0
 8008356:	dd05      	ble.n	8008364 <_dtoa_r+0x95c>
 8008358:	4629      	mov	r1, r5
 800835a:	4632      	mov	r2, r6
 800835c:	4658      	mov	r0, fp
 800835e:	f000 fc6f 	bl	8008c40 <__lshift>
 8008362:	4605      	mov	r5, r0
 8008364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d05a      	beq.n	8008420 <_dtoa_r+0xa18>
 800836a:	6869      	ldr	r1, [r5, #4]
 800836c:	4658      	mov	r0, fp
 800836e:	f000 fa0f 	bl	8008790 <_Balloc>
 8008372:	4606      	mov	r6, r0
 8008374:	b928      	cbnz	r0, 8008382 <_dtoa_r+0x97a>
 8008376:	4b84      	ldr	r3, [pc, #528]	@ (8008588 <_dtoa_r+0xb80>)
 8008378:	4602      	mov	r2, r0
 800837a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800837e:	f7ff bb5a 	b.w	8007a36 <_dtoa_r+0x2e>
 8008382:	692a      	ldr	r2, [r5, #16]
 8008384:	3202      	adds	r2, #2
 8008386:	0092      	lsls	r2, r2, #2
 8008388:	f105 010c 	add.w	r1, r5, #12
 800838c:	300c      	adds	r0, #12
 800838e:	f7ff fa9e 	bl	80078ce <memcpy>
 8008392:	2201      	movs	r2, #1
 8008394:	4631      	mov	r1, r6
 8008396:	4658      	mov	r0, fp
 8008398:	f000 fc52 	bl	8008c40 <__lshift>
 800839c:	f10a 0301 	add.w	r3, sl, #1
 80083a0:	9307      	str	r3, [sp, #28]
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	4453      	add	r3, sl
 80083a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	462f      	mov	r7, r5
 80083b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b2:	4605      	mov	r5, r0
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	4621      	mov	r1, r4
 80083b8:	3b01      	subs	r3, #1
 80083ba:	4648      	mov	r0, r9
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	f7ff fa9b 	bl	80078f8 <quorem>
 80083c2:	4639      	mov	r1, r7
 80083c4:	9002      	str	r0, [sp, #8]
 80083c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083ca:	4648      	mov	r0, r9
 80083cc:	f000 fca4 	bl	8008d18 <__mcmp>
 80083d0:	462a      	mov	r2, r5
 80083d2:	9008      	str	r0, [sp, #32]
 80083d4:	4621      	mov	r1, r4
 80083d6:	4658      	mov	r0, fp
 80083d8:	f000 fcba 	bl	8008d50 <__mdiff>
 80083dc:	68c2      	ldr	r2, [r0, #12]
 80083de:	4606      	mov	r6, r0
 80083e0:	bb02      	cbnz	r2, 8008424 <_dtoa_r+0xa1c>
 80083e2:	4601      	mov	r1, r0
 80083e4:	4648      	mov	r0, r9
 80083e6:	f000 fc97 	bl	8008d18 <__mcmp>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4631      	mov	r1, r6
 80083ee:	4658      	mov	r0, fp
 80083f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083f2:	f000 fa0d 	bl	8008810 <_Bfree>
 80083f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083fa:	9e07      	ldr	r6, [sp, #28]
 80083fc:	ea43 0102 	orr.w	r1, r3, r2
 8008400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008402:	4319      	orrs	r1, r3
 8008404:	d110      	bne.n	8008428 <_dtoa_r+0xa20>
 8008406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800840a:	d029      	beq.n	8008460 <_dtoa_r+0xa58>
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd02      	ble.n	8008418 <_dtoa_r+0xa10>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008418:	9b00      	ldr	r3, [sp, #0]
 800841a:	f883 8000 	strb.w	r8, [r3]
 800841e:	e63f      	b.n	80080a0 <_dtoa_r+0x698>
 8008420:	4628      	mov	r0, r5
 8008422:	e7bb      	b.n	800839c <_dtoa_r+0x994>
 8008424:	2201      	movs	r2, #1
 8008426:	e7e1      	b.n	80083ec <_dtoa_r+0x9e4>
 8008428:	9b08      	ldr	r3, [sp, #32]
 800842a:	2b00      	cmp	r3, #0
 800842c:	db04      	blt.n	8008438 <_dtoa_r+0xa30>
 800842e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008430:	430b      	orrs	r3, r1
 8008432:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008434:	430b      	orrs	r3, r1
 8008436:	d120      	bne.n	800847a <_dtoa_r+0xa72>
 8008438:	2a00      	cmp	r2, #0
 800843a:	dded      	ble.n	8008418 <_dtoa_r+0xa10>
 800843c:	4649      	mov	r1, r9
 800843e:	2201      	movs	r2, #1
 8008440:	4658      	mov	r0, fp
 8008442:	f000 fbfd 	bl	8008c40 <__lshift>
 8008446:	4621      	mov	r1, r4
 8008448:	4681      	mov	r9, r0
 800844a:	f000 fc65 	bl	8008d18 <__mcmp>
 800844e:	2800      	cmp	r0, #0
 8008450:	dc03      	bgt.n	800845a <_dtoa_r+0xa52>
 8008452:	d1e1      	bne.n	8008418 <_dtoa_r+0xa10>
 8008454:	f018 0f01 	tst.w	r8, #1
 8008458:	d0de      	beq.n	8008418 <_dtoa_r+0xa10>
 800845a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800845e:	d1d8      	bne.n	8008412 <_dtoa_r+0xa0a>
 8008460:	9a00      	ldr	r2, [sp, #0]
 8008462:	2339      	movs	r3, #57	@ 0x39
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	4633      	mov	r3, r6
 8008468:	461e      	mov	r6, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008470:	2a39      	cmp	r2, #57	@ 0x39
 8008472:	d052      	beq.n	800851a <_dtoa_r+0xb12>
 8008474:	3201      	adds	r2, #1
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	e612      	b.n	80080a0 <_dtoa_r+0x698>
 800847a:	2a00      	cmp	r2, #0
 800847c:	dd07      	ble.n	800848e <_dtoa_r+0xa86>
 800847e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008482:	d0ed      	beq.n	8008460 <_dtoa_r+0xa58>
 8008484:	9a00      	ldr	r2, [sp, #0]
 8008486:	f108 0301 	add.w	r3, r8, #1
 800848a:	7013      	strb	r3, [r2, #0]
 800848c:	e608      	b.n	80080a0 <_dtoa_r+0x698>
 800848e:	9b07      	ldr	r3, [sp, #28]
 8008490:	9a07      	ldr	r2, [sp, #28]
 8008492:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008498:	4293      	cmp	r3, r2
 800849a:	d028      	beq.n	80084ee <_dtoa_r+0xae6>
 800849c:	4649      	mov	r1, r9
 800849e:	2300      	movs	r3, #0
 80084a0:	220a      	movs	r2, #10
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 f9d6 	bl	8008854 <__multadd>
 80084a8:	42af      	cmp	r7, r5
 80084aa:	4681      	mov	r9, r0
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	f04f 020a 	mov.w	r2, #10
 80084b4:	4639      	mov	r1, r7
 80084b6:	4658      	mov	r0, fp
 80084b8:	d107      	bne.n	80084ca <_dtoa_r+0xac2>
 80084ba:	f000 f9cb 	bl	8008854 <__multadd>
 80084be:	4607      	mov	r7, r0
 80084c0:	4605      	mov	r5, r0
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	3301      	adds	r3, #1
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	e774      	b.n	80083b4 <_dtoa_r+0x9ac>
 80084ca:	f000 f9c3 	bl	8008854 <__multadd>
 80084ce:	4629      	mov	r1, r5
 80084d0:	4607      	mov	r7, r0
 80084d2:	2300      	movs	r3, #0
 80084d4:	220a      	movs	r2, #10
 80084d6:	4658      	mov	r0, fp
 80084d8:	f000 f9bc 	bl	8008854 <__multadd>
 80084dc:	4605      	mov	r5, r0
 80084de:	e7f0      	b.n	80084c2 <_dtoa_r+0xaba>
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfcc      	ite	gt
 80084e6:	461e      	movgt	r6, r3
 80084e8:	2601      	movle	r6, #1
 80084ea:	4456      	add	r6, sl
 80084ec:	2700      	movs	r7, #0
 80084ee:	4649      	mov	r1, r9
 80084f0:	2201      	movs	r2, #1
 80084f2:	4658      	mov	r0, fp
 80084f4:	f000 fba4 	bl	8008c40 <__lshift>
 80084f8:	4621      	mov	r1, r4
 80084fa:	4681      	mov	r9, r0
 80084fc:	f000 fc0c 	bl	8008d18 <__mcmp>
 8008500:	2800      	cmp	r0, #0
 8008502:	dcb0      	bgt.n	8008466 <_dtoa_r+0xa5e>
 8008504:	d102      	bne.n	800850c <_dtoa_r+0xb04>
 8008506:	f018 0f01 	tst.w	r8, #1
 800850a:	d1ac      	bne.n	8008466 <_dtoa_r+0xa5e>
 800850c:	4633      	mov	r3, r6
 800850e:	461e      	mov	r6, r3
 8008510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008514:	2a30      	cmp	r2, #48	@ 0x30
 8008516:	d0fa      	beq.n	800850e <_dtoa_r+0xb06>
 8008518:	e5c2      	b.n	80080a0 <_dtoa_r+0x698>
 800851a:	459a      	cmp	sl, r3
 800851c:	d1a4      	bne.n	8008468 <_dtoa_r+0xa60>
 800851e:	9b04      	ldr	r3, [sp, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	2331      	movs	r3, #49	@ 0x31
 8008526:	f88a 3000 	strb.w	r3, [sl]
 800852a:	e5b9      	b.n	80080a0 <_dtoa_r+0x698>
 800852c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800852e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800858c <_dtoa_r+0xb84>
 8008532:	b11b      	cbz	r3, 800853c <_dtoa_r+0xb34>
 8008534:	f10a 0308 	add.w	r3, sl, #8
 8008538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	4650      	mov	r0, sl
 800853e:	b019      	add	sp, #100	@ 0x64
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008546:	2b01      	cmp	r3, #1
 8008548:	f77f ae37 	ble.w	80081ba <_dtoa_r+0x7b2>
 800854c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800854e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008550:	2001      	movs	r0, #1
 8008552:	e655      	b.n	8008200 <_dtoa_r+0x7f8>
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f77f aed6 	ble.w	8008308 <_dtoa_r+0x900>
 800855c:	4656      	mov	r6, sl
 800855e:	4621      	mov	r1, r4
 8008560:	4648      	mov	r0, r9
 8008562:	f7ff f9c9 	bl	80078f8 <quorem>
 8008566:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800856a:	f806 8b01 	strb.w	r8, [r6], #1
 800856e:	9b00      	ldr	r3, [sp, #0]
 8008570:	eba6 020a 	sub.w	r2, r6, sl
 8008574:	4293      	cmp	r3, r2
 8008576:	ddb3      	ble.n	80084e0 <_dtoa_r+0xad8>
 8008578:	4649      	mov	r1, r9
 800857a:	2300      	movs	r3, #0
 800857c:	220a      	movs	r2, #10
 800857e:	4658      	mov	r0, fp
 8008580:	f000 f968 	bl	8008854 <__multadd>
 8008584:	4681      	mov	r9, r0
 8008586:	e7ea      	b.n	800855e <_dtoa_r+0xb56>
 8008588:	0800b158 	.word	0x0800b158
 800858c:	0800b0dc 	.word	0x0800b0dc

08008590 <_free_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4605      	mov	r5, r0
 8008594:	2900      	cmp	r1, #0
 8008596:	d041      	beq.n	800861c <_free_r+0x8c>
 8008598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859c:	1f0c      	subs	r4, r1, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfb8      	it	lt
 80085a2:	18e4      	addlt	r4, r4, r3
 80085a4:	f000 f8e8 	bl	8008778 <__malloc_lock>
 80085a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008620 <_free_r+0x90>)
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	b933      	cbnz	r3, 80085bc <_free_r+0x2c>
 80085ae:	6063      	str	r3, [r4, #4]
 80085b0:	6014      	str	r4, [r2, #0]
 80085b2:	4628      	mov	r0, r5
 80085b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b8:	f000 b8e4 	b.w	8008784 <__malloc_unlock>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d908      	bls.n	80085d2 <_free_r+0x42>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	1821      	adds	r1, r4, r0
 80085c4:	428b      	cmp	r3, r1
 80085c6:	bf01      	itttt	eq
 80085c8:	6819      	ldreq	r1, [r3, #0]
 80085ca:	685b      	ldreq	r3, [r3, #4]
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	e7ed      	b.n	80085ae <_free_r+0x1e>
 80085d2:	461a      	mov	r2, r3
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	b10b      	cbz	r3, 80085dc <_free_r+0x4c>
 80085d8:	42a3      	cmp	r3, r4
 80085da:	d9fa      	bls.n	80085d2 <_free_r+0x42>
 80085dc:	6811      	ldr	r1, [r2, #0]
 80085de:	1850      	adds	r0, r2, r1
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d10b      	bne.n	80085fc <_free_r+0x6c>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	4401      	add	r1, r0
 80085e8:	1850      	adds	r0, r2, r1
 80085ea:	4283      	cmp	r3, r0
 80085ec:	6011      	str	r1, [r2, #0]
 80085ee:	d1e0      	bne.n	80085b2 <_free_r+0x22>
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	6053      	str	r3, [r2, #4]
 80085f6:	4408      	add	r0, r1
 80085f8:	6010      	str	r0, [r2, #0]
 80085fa:	e7da      	b.n	80085b2 <_free_r+0x22>
 80085fc:	d902      	bls.n	8008604 <_free_r+0x74>
 80085fe:	230c      	movs	r3, #12
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	e7d6      	b.n	80085b2 <_free_r+0x22>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	1821      	adds	r1, r4, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	bf04      	itt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	6063      	str	r3, [r4, #4]
 8008612:	bf04      	itt	eq
 8008614:	1809      	addeq	r1, r1, r0
 8008616:	6021      	streq	r1, [r4, #0]
 8008618:	6054      	str	r4, [r2, #4]
 800861a:	e7ca      	b.n	80085b2 <_free_r+0x22>
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	20001694 	.word	0x20001694

08008624 <malloc>:
 8008624:	4b02      	ldr	r3, [pc, #8]	@ (8008630 <malloc+0xc>)
 8008626:	4601      	mov	r1, r0
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f000 b825 	b.w	8008678 <_malloc_r>
 800862e:	bf00      	nop
 8008630:	2000001c 	.word	0x2000001c

08008634 <sbrk_aligned>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	4e0f      	ldr	r6, [pc, #60]	@ (8008674 <sbrk_aligned+0x40>)
 8008638:	460c      	mov	r4, r1
 800863a:	6831      	ldr	r1, [r6, #0]
 800863c:	4605      	mov	r5, r0
 800863e:	b911      	cbnz	r1, 8008646 <sbrk_aligned+0x12>
 8008640:	f001 fe0c 	bl	800a25c <_sbrk_r>
 8008644:	6030      	str	r0, [r6, #0]
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f001 fe07 	bl	800a25c <_sbrk_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d103      	bne.n	800865a <sbrk_aligned+0x26>
 8008652:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008656:	4620      	mov	r0, r4
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	1cc4      	adds	r4, r0, #3
 800865c:	f024 0403 	bic.w	r4, r4, #3
 8008660:	42a0      	cmp	r0, r4
 8008662:	d0f8      	beq.n	8008656 <sbrk_aligned+0x22>
 8008664:	1a21      	subs	r1, r4, r0
 8008666:	4628      	mov	r0, r5
 8008668:	f001 fdf8 	bl	800a25c <_sbrk_r>
 800866c:	3001      	adds	r0, #1
 800866e:	d1f2      	bne.n	8008656 <sbrk_aligned+0x22>
 8008670:	e7ef      	b.n	8008652 <sbrk_aligned+0x1e>
 8008672:	bf00      	nop
 8008674:	20001690 	.word	0x20001690

08008678 <_malloc_r>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	1ccd      	adds	r5, r1, #3
 800867e:	f025 0503 	bic.w	r5, r5, #3
 8008682:	3508      	adds	r5, #8
 8008684:	2d0c      	cmp	r5, #12
 8008686:	bf38      	it	cc
 8008688:	250c      	movcc	r5, #12
 800868a:	2d00      	cmp	r5, #0
 800868c:	4606      	mov	r6, r0
 800868e:	db01      	blt.n	8008694 <_malloc_r+0x1c>
 8008690:	42a9      	cmp	r1, r5
 8008692:	d904      	bls.n	800869e <_malloc_r+0x26>
 8008694:	230c      	movs	r3, #12
 8008696:	6033      	str	r3, [r6, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008774 <_malloc_r+0xfc>
 80086a2:	f000 f869 	bl	8008778 <__malloc_lock>
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	461c      	mov	r4, r3
 80086ac:	bb44      	cbnz	r4, 8008700 <_malloc_r+0x88>
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffbf 	bl	8008634 <sbrk_aligned>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	4604      	mov	r4, r0
 80086ba:	d158      	bne.n	800876e <_malloc_r+0xf6>
 80086bc:	f8d8 4000 	ldr.w	r4, [r8]
 80086c0:	4627      	mov	r7, r4
 80086c2:	2f00      	cmp	r7, #0
 80086c4:	d143      	bne.n	800874e <_malloc_r+0xd6>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	d04b      	beq.n	8008762 <_malloc_r+0xea>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	4639      	mov	r1, r7
 80086ce:	4630      	mov	r0, r6
 80086d0:	eb04 0903 	add.w	r9, r4, r3
 80086d4:	f001 fdc2 	bl	800a25c <_sbrk_r>
 80086d8:	4581      	cmp	r9, r0
 80086da:	d142      	bne.n	8008762 <_malloc_r+0xea>
 80086dc:	6821      	ldr	r1, [r4, #0]
 80086de:	1a6d      	subs	r5, r5, r1
 80086e0:	4629      	mov	r1, r5
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ffa6 	bl	8008634 <sbrk_aligned>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d03a      	beq.n	8008762 <_malloc_r+0xea>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	442b      	add	r3, r5
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	f8d8 3000 	ldr.w	r3, [r8]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	bb62      	cbnz	r2, 8008754 <_malloc_r+0xdc>
 80086fa:	f8c8 7000 	str.w	r7, [r8]
 80086fe:	e00f      	b.n	8008720 <_malloc_r+0xa8>
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	1b52      	subs	r2, r2, r5
 8008704:	d420      	bmi.n	8008748 <_malloc_r+0xd0>
 8008706:	2a0b      	cmp	r2, #11
 8008708:	d917      	bls.n	800873a <_malloc_r+0xc2>
 800870a:	1961      	adds	r1, r4, r5
 800870c:	42a3      	cmp	r3, r4
 800870e:	6025      	str	r5, [r4, #0]
 8008710:	bf18      	it	ne
 8008712:	6059      	strne	r1, [r3, #4]
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	bf08      	it	eq
 8008718:	f8c8 1000 	streq.w	r1, [r8]
 800871c:	5162      	str	r2, [r4, r5]
 800871e:	604b      	str	r3, [r1, #4]
 8008720:	4630      	mov	r0, r6
 8008722:	f000 f82f 	bl	8008784 <__malloc_unlock>
 8008726:	f104 000b 	add.w	r0, r4, #11
 800872a:	1d23      	adds	r3, r4, #4
 800872c:	f020 0007 	bic.w	r0, r0, #7
 8008730:	1ac2      	subs	r2, r0, r3
 8008732:	bf1c      	itt	ne
 8008734:	1a1b      	subne	r3, r3, r0
 8008736:	50a3      	strne	r3, [r4, r2]
 8008738:	e7af      	b.n	800869a <_malloc_r+0x22>
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	42a3      	cmp	r3, r4
 800873e:	bf0c      	ite	eq
 8008740:	f8c8 2000 	streq.w	r2, [r8]
 8008744:	605a      	strne	r2, [r3, #4]
 8008746:	e7eb      	b.n	8008720 <_malloc_r+0xa8>
 8008748:	4623      	mov	r3, r4
 800874a:	6864      	ldr	r4, [r4, #4]
 800874c:	e7ae      	b.n	80086ac <_malloc_r+0x34>
 800874e:	463c      	mov	r4, r7
 8008750:	687f      	ldr	r7, [r7, #4]
 8008752:	e7b6      	b.n	80086c2 <_malloc_r+0x4a>
 8008754:	461a      	mov	r2, r3
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	42a3      	cmp	r3, r4
 800875a:	d1fb      	bne.n	8008754 <_malloc_r+0xdc>
 800875c:	2300      	movs	r3, #0
 800875e:	6053      	str	r3, [r2, #4]
 8008760:	e7de      	b.n	8008720 <_malloc_r+0xa8>
 8008762:	230c      	movs	r3, #12
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f80c 	bl	8008784 <__malloc_unlock>
 800876c:	e794      	b.n	8008698 <_malloc_r+0x20>
 800876e:	6005      	str	r5, [r0, #0]
 8008770:	e7d6      	b.n	8008720 <_malloc_r+0xa8>
 8008772:	bf00      	nop
 8008774:	20001694 	.word	0x20001694

08008778 <__malloc_lock>:
 8008778:	4801      	ldr	r0, [pc, #4]	@ (8008780 <__malloc_lock+0x8>)
 800877a:	f7ff b8a6 	b.w	80078ca <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	2000168c 	.word	0x2000168c

08008784 <__malloc_unlock>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__malloc_unlock+0x8>)
 8008786:	f7ff b8a1 	b.w	80078cc <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	2000168c 	.word	0x2000168c

08008790 <_Balloc>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	69c6      	ldr	r6, [r0, #28]
 8008794:	4604      	mov	r4, r0
 8008796:	460d      	mov	r5, r1
 8008798:	b976      	cbnz	r6, 80087b8 <_Balloc+0x28>
 800879a:	2010      	movs	r0, #16
 800879c:	f7ff ff42 	bl	8008624 <malloc>
 80087a0:	4602      	mov	r2, r0
 80087a2:	61e0      	str	r0, [r4, #28]
 80087a4:	b920      	cbnz	r0, 80087b0 <_Balloc+0x20>
 80087a6:	4b18      	ldr	r3, [pc, #96]	@ (8008808 <_Balloc+0x78>)
 80087a8:	4818      	ldr	r0, [pc, #96]	@ (800880c <_Balloc+0x7c>)
 80087aa:	216b      	movs	r1, #107	@ 0x6b
 80087ac:	f001 fd70 	bl	800a290 <__assert_func>
 80087b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087b4:	6006      	str	r6, [r0, #0]
 80087b6:	60c6      	str	r6, [r0, #12]
 80087b8:	69e6      	ldr	r6, [r4, #28]
 80087ba:	68f3      	ldr	r3, [r6, #12]
 80087bc:	b183      	cbz	r3, 80087e0 <_Balloc+0x50>
 80087be:	69e3      	ldr	r3, [r4, #28]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087c6:	b9b8      	cbnz	r0, 80087f8 <_Balloc+0x68>
 80087c8:	2101      	movs	r1, #1
 80087ca:	fa01 f605 	lsl.w	r6, r1, r5
 80087ce:	1d72      	adds	r2, r6, #5
 80087d0:	0092      	lsls	r2, r2, #2
 80087d2:	4620      	mov	r0, r4
 80087d4:	f001 fd7a 	bl	800a2cc <_calloc_r>
 80087d8:	b160      	cbz	r0, 80087f4 <_Balloc+0x64>
 80087da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087de:	e00e      	b.n	80087fe <_Balloc+0x6e>
 80087e0:	2221      	movs	r2, #33	@ 0x21
 80087e2:	2104      	movs	r1, #4
 80087e4:	4620      	mov	r0, r4
 80087e6:	f001 fd71 	bl	800a2cc <_calloc_r>
 80087ea:	69e3      	ldr	r3, [r4, #28]
 80087ec:	60f0      	str	r0, [r6, #12]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e4      	bne.n	80087be <_Balloc+0x2e>
 80087f4:	2000      	movs	r0, #0
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	6802      	ldr	r2, [r0, #0]
 80087fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087fe:	2300      	movs	r3, #0
 8008800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008804:	e7f7      	b.n	80087f6 <_Balloc+0x66>
 8008806:	bf00      	nop
 8008808:	0800b0e9 	.word	0x0800b0e9
 800880c:	0800b169 	.word	0x0800b169

08008810 <_Bfree>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	69c6      	ldr	r6, [r0, #28]
 8008814:	4605      	mov	r5, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b976      	cbnz	r6, 8008838 <_Bfree+0x28>
 800881a:	2010      	movs	r0, #16
 800881c:	f7ff ff02 	bl	8008624 <malloc>
 8008820:	4602      	mov	r2, r0
 8008822:	61e8      	str	r0, [r5, #28]
 8008824:	b920      	cbnz	r0, 8008830 <_Bfree+0x20>
 8008826:	4b09      	ldr	r3, [pc, #36]	@ (800884c <_Bfree+0x3c>)
 8008828:	4809      	ldr	r0, [pc, #36]	@ (8008850 <_Bfree+0x40>)
 800882a:	218f      	movs	r1, #143	@ 0x8f
 800882c:	f001 fd30 	bl	800a290 <__assert_func>
 8008830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008834:	6006      	str	r6, [r0, #0]
 8008836:	60c6      	str	r6, [r0, #12]
 8008838:	b13c      	cbz	r4, 800884a <_Bfree+0x3a>
 800883a:	69eb      	ldr	r3, [r5, #28]
 800883c:	6862      	ldr	r2, [r4, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008844:	6021      	str	r1, [r4, #0]
 8008846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	0800b0e9 	.word	0x0800b0e9
 8008850:	0800b169 	.word	0x0800b169

08008854 <__multadd>:
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	690d      	ldr	r5, [r1, #16]
 800885a:	4607      	mov	r7, r0
 800885c:	460c      	mov	r4, r1
 800885e:	461e      	mov	r6, r3
 8008860:	f101 0c14 	add.w	ip, r1, #20
 8008864:	2000      	movs	r0, #0
 8008866:	f8dc 3000 	ldr.w	r3, [ip]
 800886a:	b299      	uxth	r1, r3
 800886c:	fb02 6101 	mla	r1, r2, r1, r6
 8008870:	0c1e      	lsrs	r6, r3, #16
 8008872:	0c0b      	lsrs	r3, r1, #16
 8008874:	fb02 3306 	mla	r3, r2, r6, r3
 8008878:	b289      	uxth	r1, r1
 800887a:	3001      	adds	r0, #1
 800887c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008880:	4285      	cmp	r5, r0
 8008882:	f84c 1b04 	str.w	r1, [ip], #4
 8008886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800888a:	dcec      	bgt.n	8008866 <__multadd+0x12>
 800888c:	b30e      	cbz	r6, 80088d2 <__multadd+0x7e>
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	42ab      	cmp	r3, r5
 8008892:	dc19      	bgt.n	80088c8 <__multadd+0x74>
 8008894:	6861      	ldr	r1, [r4, #4]
 8008896:	4638      	mov	r0, r7
 8008898:	3101      	adds	r1, #1
 800889a:	f7ff ff79 	bl	8008790 <_Balloc>
 800889e:	4680      	mov	r8, r0
 80088a0:	b928      	cbnz	r0, 80088ae <__multadd+0x5a>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b0c      	ldr	r3, [pc, #48]	@ (80088d8 <__multadd+0x84>)
 80088a6:	480d      	ldr	r0, [pc, #52]	@ (80088dc <__multadd+0x88>)
 80088a8:	21ba      	movs	r1, #186	@ 0xba
 80088aa:	f001 fcf1 	bl	800a290 <__assert_func>
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	3202      	adds	r2, #2
 80088b2:	f104 010c 	add.w	r1, r4, #12
 80088b6:	0092      	lsls	r2, r2, #2
 80088b8:	300c      	adds	r0, #12
 80088ba:	f7ff f808 	bl	80078ce <memcpy>
 80088be:	4621      	mov	r1, r4
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7ff ffa5 	bl	8008810 <_Bfree>
 80088c6:	4644      	mov	r4, r8
 80088c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088cc:	3501      	adds	r5, #1
 80088ce:	615e      	str	r6, [r3, #20]
 80088d0:	6125      	str	r5, [r4, #16]
 80088d2:	4620      	mov	r0, r4
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d8:	0800b158 	.word	0x0800b158
 80088dc:	0800b169 	.word	0x0800b169

080088e0 <__s2b>:
 80088e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	4615      	mov	r5, r2
 80088e8:	461f      	mov	r7, r3
 80088ea:	2209      	movs	r2, #9
 80088ec:	3308      	adds	r3, #8
 80088ee:	4606      	mov	r6, r0
 80088f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088f4:	2100      	movs	r1, #0
 80088f6:	2201      	movs	r2, #1
 80088f8:	429a      	cmp	r2, r3
 80088fa:	db09      	blt.n	8008910 <__s2b+0x30>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff ff47 	bl	8008790 <_Balloc>
 8008902:	b940      	cbnz	r0, 8008916 <__s2b+0x36>
 8008904:	4602      	mov	r2, r0
 8008906:	4b19      	ldr	r3, [pc, #100]	@ (800896c <__s2b+0x8c>)
 8008908:	4819      	ldr	r0, [pc, #100]	@ (8008970 <__s2b+0x90>)
 800890a:	21d3      	movs	r1, #211	@ 0xd3
 800890c:	f001 fcc0 	bl	800a290 <__assert_func>
 8008910:	0052      	lsls	r2, r2, #1
 8008912:	3101      	adds	r1, #1
 8008914:	e7f0      	b.n	80088f8 <__s2b+0x18>
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	6143      	str	r3, [r0, #20]
 800891a:	2d09      	cmp	r5, #9
 800891c:	f04f 0301 	mov.w	r3, #1
 8008920:	6103      	str	r3, [r0, #16]
 8008922:	dd16      	ble.n	8008952 <__s2b+0x72>
 8008924:	f104 0909 	add.w	r9, r4, #9
 8008928:	46c8      	mov	r8, r9
 800892a:	442c      	add	r4, r5
 800892c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008930:	4601      	mov	r1, r0
 8008932:	3b30      	subs	r3, #48	@ 0x30
 8008934:	220a      	movs	r2, #10
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff ff8c 	bl	8008854 <__multadd>
 800893c:	45a0      	cmp	r8, r4
 800893e:	d1f5      	bne.n	800892c <__s2b+0x4c>
 8008940:	f1a5 0408 	sub.w	r4, r5, #8
 8008944:	444c      	add	r4, r9
 8008946:	1b2d      	subs	r5, r5, r4
 8008948:	1963      	adds	r3, r4, r5
 800894a:	42bb      	cmp	r3, r7
 800894c:	db04      	blt.n	8008958 <__s2b+0x78>
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008952:	340a      	adds	r4, #10
 8008954:	2509      	movs	r5, #9
 8008956:	e7f6      	b.n	8008946 <__s2b+0x66>
 8008958:	f814 3b01 	ldrb.w	r3, [r4], #1
 800895c:	4601      	mov	r1, r0
 800895e:	3b30      	subs	r3, #48	@ 0x30
 8008960:	220a      	movs	r2, #10
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff ff76 	bl	8008854 <__multadd>
 8008968:	e7ee      	b.n	8008948 <__s2b+0x68>
 800896a:	bf00      	nop
 800896c:	0800b158 	.word	0x0800b158
 8008970:	0800b169 	.word	0x0800b169

08008974 <__hi0bits>:
 8008974:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008978:	4603      	mov	r3, r0
 800897a:	bf36      	itet	cc
 800897c:	0403      	lslcc	r3, r0, #16
 800897e:	2000      	movcs	r0, #0
 8008980:	2010      	movcc	r0, #16
 8008982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008986:	bf3c      	itt	cc
 8008988:	021b      	lslcc	r3, r3, #8
 800898a:	3008      	addcc	r0, #8
 800898c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008990:	bf3c      	itt	cc
 8008992:	011b      	lslcc	r3, r3, #4
 8008994:	3004      	addcc	r0, #4
 8008996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800899a:	bf3c      	itt	cc
 800899c:	009b      	lslcc	r3, r3, #2
 800899e:	3002      	addcc	r0, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	db05      	blt.n	80089b0 <__hi0bits+0x3c>
 80089a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089a8:	f100 0001 	add.w	r0, r0, #1
 80089ac:	bf08      	it	eq
 80089ae:	2020      	moveq	r0, #32
 80089b0:	4770      	bx	lr

080089b2 <__lo0bits>:
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	4602      	mov	r2, r0
 80089b6:	f013 0007 	ands.w	r0, r3, #7
 80089ba:	d00b      	beq.n	80089d4 <__lo0bits+0x22>
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	d421      	bmi.n	8008a04 <__lo0bits+0x52>
 80089c0:	0798      	lsls	r0, r3, #30
 80089c2:	bf49      	itett	mi
 80089c4:	085b      	lsrmi	r3, r3, #1
 80089c6:	089b      	lsrpl	r3, r3, #2
 80089c8:	2001      	movmi	r0, #1
 80089ca:	6013      	strmi	r3, [r2, #0]
 80089cc:	bf5c      	itt	pl
 80089ce:	6013      	strpl	r3, [r2, #0]
 80089d0:	2002      	movpl	r0, #2
 80089d2:	4770      	bx	lr
 80089d4:	b299      	uxth	r1, r3
 80089d6:	b909      	cbnz	r1, 80089dc <__lo0bits+0x2a>
 80089d8:	0c1b      	lsrs	r3, r3, #16
 80089da:	2010      	movs	r0, #16
 80089dc:	b2d9      	uxtb	r1, r3
 80089de:	b909      	cbnz	r1, 80089e4 <__lo0bits+0x32>
 80089e0:	3008      	adds	r0, #8
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	0719      	lsls	r1, r3, #28
 80089e6:	bf04      	itt	eq
 80089e8:	091b      	lsreq	r3, r3, #4
 80089ea:	3004      	addeq	r0, #4
 80089ec:	0799      	lsls	r1, r3, #30
 80089ee:	bf04      	itt	eq
 80089f0:	089b      	lsreq	r3, r3, #2
 80089f2:	3002      	addeq	r0, #2
 80089f4:	07d9      	lsls	r1, r3, #31
 80089f6:	d403      	bmi.n	8008a00 <__lo0bits+0x4e>
 80089f8:	085b      	lsrs	r3, r3, #1
 80089fa:	f100 0001 	add.w	r0, r0, #1
 80089fe:	d003      	beq.n	8008a08 <__lo0bits+0x56>
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	4770      	bx	lr
 8008a04:	2000      	movs	r0, #0
 8008a06:	4770      	bx	lr
 8008a08:	2020      	movs	r0, #32
 8008a0a:	4770      	bx	lr

08008a0c <__i2b>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	460c      	mov	r4, r1
 8008a10:	2101      	movs	r1, #1
 8008a12:	f7ff febd 	bl	8008790 <_Balloc>
 8008a16:	4602      	mov	r2, r0
 8008a18:	b928      	cbnz	r0, 8008a26 <__i2b+0x1a>
 8008a1a:	4b05      	ldr	r3, [pc, #20]	@ (8008a30 <__i2b+0x24>)
 8008a1c:	4805      	ldr	r0, [pc, #20]	@ (8008a34 <__i2b+0x28>)
 8008a1e:	f240 1145 	movw	r1, #325	@ 0x145
 8008a22:	f001 fc35 	bl	800a290 <__assert_func>
 8008a26:	2301      	movs	r3, #1
 8008a28:	6144      	str	r4, [r0, #20]
 8008a2a:	6103      	str	r3, [r0, #16]
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800b158 	.word	0x0800b158
 8008a34:	0800b169 	.word	0x0800b169

08008a38 <__multiply>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	690a      	ldr	r2, [r1, #16]
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	bfa8      	it	ge
 8008a46:	4623      	movge	r3, r4
 8008a48:	460f      	mov	r7, r1
 8008a4a:	bfa4      	itt	ge
 8008a4c:	460c      	movge	r4, r1
 8008a4e:	461f      	movge	r7, r3
 8008a50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	6861      	ldr	r1, [r4, #4]
 8008a5c:	eb0a 0609 	add.w	r6, sl, r9
 8008a60:	42b3      	cmp	r3, r6
 8008a62:	b085      	sub	sp, #20
 8008a64:	bfb8      	it	lt
 8008a66:	3101      	addlt	r1, #1
 8008a68:	f7ff fe92 	bl	8008790 <_Balloc>
 8008a6c:	b930      	cbnz	r0, 8008a7c <__multiply+0x44>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b44      	ldr	r3, [pc, #272]	@ (8008b84 <__multiply+0x14c>)
 8008a72:	4845      	ldr	r0, [pc, #276]	@ (8008b88 <__multiply+0x150>)
 8008a74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a78:	f001 fc0a 	bl	800a290 <__assert_func>
 8008a7c:	f100 0514 	add.w	r5, r0, #20
 8008a80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a84:	462b      	mov	r3, r5
 8008a86:	2200      	movs	r2, #0
 8008a88:	4543      	cmp	r3, r8
 8008a8a:	d321      	bcc.n	8008ad0 <__multiply+0x98>
 8008a8c:	f107 0114 	add.w	r1, r7, #20
 8008a90:	f104 0214 	add.w	r2, r4, #20
 8008a94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a9c:	9302      	str	r3, [sp, #8]
 8008a9e:	1b13      	subs	r3, r2, r4
 8008aa0:	3b15      	subs	r3, #21
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	f104 0715 	add.w	r7, r4, #21
 8008aac:	42ba      	cmp	r2, r7
 8008aae:	bf38      	it	cc
 8008ab0:	2304      	movcc	r3, #4
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	9103      	str	r1, [sp, #12]
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	d80c      	bhi.n	8008ad6 <__multiply+0x9e>
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	dd03      	ble.n	8008ac8 <__multiply+0x90>
 8008ac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05b      	beq.n	8008b80 <__multiply+0x148>
 8008ac8:	6106      	str	r6, [r0, #16]
 8008aca:	b005      	add	sp, #20
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	f843 2b04 	str.w	r2, [r3], #4
 8008ad4:	e7d8      	b.n	8008a88 <__multiply+0x50>
 8008ad6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ada:	f1ba 0f00 	cmp.w	sl, #0
 8008ade:	d024      	beq.n	8008b2a <__multiply+0xf2>
 8008ae0:	f104 0e14 	add.w	lr, r4, #20
 8008ae4:	46a9      	mov	r9, r5
 8008ae6:	f04f 0c00 	mov.w	ip, #0
 8008aea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aee:	f8d9 3000 	ldr.w	r3, [r9]
 8008af2:	fa1f fb87 	uxth.w	fp, r7
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008afc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b00:	f8d9 7000 	ldr.w	r7, [r9]
 8008b04:	4463      	add	r3, ip
 8008b06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b0a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b18:	4572      	cmp	r2, lr
 8008b1a:	f849 3b04 	str.w	r3, [r9], #4
 8008b1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b22:	d8e2      	bhi.n	8008aea <__multiply+0xb2>
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	f845 c003 	str.w	ip, [r5, r3]
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b30:	3104      	adds	r1, #4
 8008b32:	f1b9 0f00 	cmp.w	r9, #0
 8008b36:	d021      	beq.n	8008b7c <__multiply+0x144>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	f104 0c14 	add.w	ip, r4, #20
 8008b3e:	46ae      	mov	lr, r5
 8008b40:	f04f 0a00 	mov.w	sl, #0
 8008b44:	f8bc b000 	ldrh.w	fp, [ip]
 8008b48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b4c:	fb09 770b 	mla	r7, r9, fp, r7
 8008b50:	4457      	add	r7, sl
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b58:	f84e 3b04 	str.w	r3, [lr], #4
 8008b5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b64:	f8be 3000 	ldrh.w	r3, [lr]
 8008b68:	fb09 330a 	mla	r3, r9, sl, r3
 8008b6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b70:	4562      	cmp	r2, ip
 8008b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b76:	d8e5      	bhi.n	8008b44 <__multiply+0x10c>
 8008b78:	9f01      	ldr	r7, [sp, #4]
 8008b7a:	51eb      	str	r3, [r5, r7]
 8008b7c:	3504      	adds	r5, #4
 8008b7e:	e799      	b.n	8008ab4 <__multiply+0x7c>
 8008b80:	3e01      	subs	r6, #1
 8008b82:	e79b      	b.n	8008abc <__multiply+0x84>
 8008b84:	0800b158 	.word	0x0800b158
 8008b88:	0800b169 	.word	0x0800b169

08008b8c <__pow5mult>:
 8008b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b90:	4615      	mov	r5, r2
 8008b92:	f012 0203 	ands.w	r2, r2, #3
 8008b96:	4607      	mov	r7, r0
 8008b98:	460e      	mov	r6, r1
 8008b9a:	d007      	beq.n	8008bac <__pow5mult+0x20>
 8008b9c:	4c25      	ldr	r4, [pc, #148]	@ (8008c34 <__pow5mult+0xa8>)
 8008b9e:	3a01      	subs	r2, #1
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ba6:	f7ff fe55 	bl	8008854 <__multadd>
 8008baa:	4606      	mov	r6, r0
 8008bac:	10ad      	asrs	r5, r5, #2
 8008bae:	d03d      	beq.n	8008c2c <__pow5mult+0xa0>
 8008bb0:	69fc      	ldr	r4, [r7, #28]
 8008bb2:	b97c      	cbnz	r4, 8008bd4 <__pow5mult+0x48>
 8008bb4:	2010      	movs	r0, #16
 8008bb6:	f7ff fd35 	bl	8008624 <malloc>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	61f8      	str	r0, [r7, #28]
 8008bbe:	b928      	cbnz	r0, 8008bcc <__pow5mult+0x40>
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c38 <__pow5mult+0xac>)
 8008bc2:	481e      	ldr	r0, [pc, #120]	@ (8008c3c <__pow5mult+0xb0>)
 8008bc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bc8:	f001 fb62 	bl	800a290 <__assert_func>
 8008bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd0:	6004      	str	r4, [r0, #0]
 8008bd2:	60c4      	str	r4, [r0, #12]
 8008bd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bdc:	b94c      	cbnz	r4, 8008bf2 <__pow5mult+0x66>
 8008bde:	f240 2171 	movw	r1, #625	@ 0x271
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff ff12 	bl	8008a0c <__i2b>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bee:	4604      	mov	r4, r0
 8008bf0:	6003      	str	r3, [r0, #0]
 8008bf2:	f04f 0900 	mov.w	r9, #0
 8008bf6:	07eb      	lsls	r3, r5, #31
 8008bf8:	d50a      	bpl.n	8008c10 <__pow5mult+0x84>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7ff ff1a 	bl	8008a38 <__multiply>
 8008c04:	4631      	mov	r1, r6
 8008c06:	4680      	mov	r8, r0
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff fe01 	bl	8008810 <_Bfree>
 8008c0e:	4646      	mov	r6, r8
 8008c10:	106d      	asrs	r5, r5, #1
 8008c12:	d00b      	beq.n	8008c2c <__pow5mult+0xa0>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	b938      	cbnz	r0, 8008c28 <__pow5mult+0x9c>
 8008c18:	4622      	mov	r2, r4
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7ff ff0b 	bl	8008a38 <__multiply>
 8008c22:	6020      	str	r0, [r4, #0]
 8008c24:	f8c0 9000 	str.w	r9, [r0]
 8008c28:	4604      	mov	r4, r0
 8008c2a:	e7e4      	b.n	8008bf6 <__pow5mult+0x6a>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c32:	bf00      	nop
 8008c34:	0800b1c4 	.word	0x0800b1c4
 8008c38:	0800b0e9 	.word	0x0800b0e9
 8008c3c:	0800b169 	.word	0x0800b169

08008c40 <__lshift>:
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	460c      	mov	r4, r1
 8008c46:	6849      	ldr	r1, [r1, #4]
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	4607      	mov	r7, r0
 8008c52:	4691      	mov	r9, r2
 8008c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c58:	f108 0601 	add.w	r6, r8, #1
 8008c5c:	42b3      	cmp	r3, r6
 8008c5e:	db0b      	blt.n	8008c78 <__lshift+0x38>
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff fd95 	bl	8008790 <_Balloc>
 8008c66:	4605      	mov	r5, r0
 8008c68:	b948      	cbnz	r0, 8008c7e <__lshift+0x3e>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b28      	ldr	r3, [pc, #160]	@ (8008d10 <__lshift+0xd0>)
 8008c6e:	4829      	ldr	r0, [pc, #164]	@ (8008d14 <__lshift+0xd4>)
 8008c70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c74:	f001 fb0c 	bl	800a290 <__assert_func>
 8008c78:	3101      	adds	r1, #1
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	e7ee      	b.n	8008c5c <__lshift+0x1c>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f100 0114 	add.w	r1, r0, #20
 8008c84:	f100 0210 	add.w	r2, r0, #16
 8008c88:	4618      	mov	r0, r3
 8008c8a:	4553      	cmp	r3, sl
 8008c8c:	db33      	blt.n	8008cf6 <__lshift+0xb6>
 8008c8e:	6920      	ldr	r0, [r4, #16]
 8008c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c94:	f104 0314 	add.w	r3, r4, #20
 8008c98:	f019 091f 	ands.w	r9, r9, #31
 8008c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ca4:	d02b      	beq.n	8008cfe <__lshift+0xbe>
 8008ca6:	f1c9 0e20 	rsb	lr, r9, #32
 8008caa:	468a      	mov	sl, r1
 8008cac:	2200      	movs	r2, #0
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8008cb4:	4310      	orrs	r0, r2
 8008cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8008cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbe:	459c      	cmp	ip, r3
 8008cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cc4:	d8f3      	bhi.n	8008cae <__lshift+0x6e>
 8008cc6:	ebac 0304 	sub.w	r3, ip, r4
 8008cca:	3b15      	subs	r3, #21
 8008ccc:	f023 0303 	bic.w	r3, r3, #3
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	f104 0015 	add.w	r0, r4, #21
 8008cd6:	4584      	cmp	ip, r0
 8008cd8:	bf38      	it	cc
 8008cda:	2304      	movcc	r3, #4
 8008cdc:	50ca      	str	r2, [r1, r3]
 8008cde:	b10a      	cbz	r2, 8008ce4 <__lshift+0xa4>
 8008ce0:	f108 0602 	add.w	r6, r8, #2
 8008ce4:	3e01      	subs	r6, #1
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	612e      	str	r6, [r5, #16]
 8008cea:	4621      	mov	r1, r4
 8008cec:	f7ff fd90 	bl	8008810 <_Bfree>
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	e7c5      	b.n	8008c8a <__lshift+0x4a>
 8008cfe:	3904      	subs	r1, #4
 8008d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d08:	459c      	cmp	ip, r3
 8008d0a:	d8f9      	bhi.n	8008d00 <__lshift+0xc0>
 8008d0c:	e7ea      	b.n	8008ce4 <__lshift+0xa4>
 8008d0e:	bf00      	nop
 8008d10:	0800b158 	.word	0x0800b158
 8008d14:	0800b169 	.word	0x0800b169

08008d18 <__mcmp>:
 8008d18:	690a      	ldr	r2, [r1, #16]
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6900      	ldr	r0, [r0, #16]
 8008d1e:	1a80      	subs	r0, r0, r2
 8008d20:	b530      	push	{r4, r5, lr}
 8008d22:	d10e      	bne.n	8008d42 <__mcmp+0x2a>
 8008d24:	3314      	adds	r3, #20
 8008d26:	3114      	adds	r1, #20
 8008d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d38:	4295      	cmp	r5, r2
 8008d3a:	d003      	beq.n	8008d44 <__mcmp+0x2c>
 8008d3c:	d205      	bcs.n	8008d4a <__mcmp+0x32>
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d42:	bd30      	pop	{r4, r5, pc}
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d3f3      	bcc.n	8008d30 <__mcmp+0x18>
 8008d48:	e7fb      	b.n	8008d42 <__mcmp+0x2a>
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e7f9      	b.n	8008d42 <__mcmp+0x2a>
	...

08008d50 <__mdiff>:
 8008d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	4689      	mov	r9, r1
 8008d56:	4606      	mov	r6, r0
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4648      	mov	r0, r9
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	f7ff ffdb 	bl	8008d18 <__mcmp>
 8008d62:	1e05      	subs	r5, r0, #0
 8008d64:	d112      	bne.n	8008d8c <__mdiff+0x3c>
 8008d66:	4629      	mov	r1, r5
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff fd11 	bl	8008790 <_Balloc>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	b928      	cbnz	r0, 8008d7e <__mdiff+0x2e>
 8008d72:	4b3f      	ldr	r3, [pc, #252]	@ (8008e70 <__mdiff+0x120>)
 8008d74:	f240 2137 	movw	r1, #567	@ 0x237
 8008d78:	483e      	ldr	r0, [pc, #248]	@ (8008e74 <__mdiff+0x124>)
 8008d7a:	f001 fa89 	bl	800a290 <__assert_func>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d84:	4610      	mov	r0, r2
 8008d86:	b003      	add	sp, #12
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	bfbc      	itt	lt
 8008d8e:	464b      	movlt	r3, r9
 8008d90:	46a1      	movlt	r9, r4
 8008d92:	4630      	mov	r0, r6
 8008d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d98:	bfba      	itte	lt
 8008d9a:	461c      	movlt	r4, r3
 8008d9c:	2501      	movlt	r5, #1
 8008d9e:	2500      	movge	r5, #0
 8008da0:	f7ff fcf6 	bl	8008790 <_Balloc>
 8008da4:	4602      	mov	r2, r0
 8008da6:	b918      	cbnz	r0, 8008db0 <__mdiff+0x60>
 8008da8:	4b31      	ldr	r3, [pc, #196]	@ (8008e70 <__mdiff+0x120>)
 8008daa:	f240 2145 	movw	r1, #581	@ 0x245
 8008dae:	e7e3      	b.n	8008d78 <__mdiff+0x28>
 8008db0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008db4:	6926      	ldr	r6, [r4, #16]
 8008db6:	60c5      	str	r5, [r0, #12]
 8008db8:	f109 0310 	add.w	r3, r9, #16
 8008dbc:	f109 0514 	add.w	r5, r9, #20
 8008dc0:	f104 0e14 	add.w	lr, r4, #20
 8008dc4:	f100 0b14 	add.w	fp, r0, #20
 8008dc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	46d9      	mov	r9, fp
 8008dd4:	f04f 0c00 	mov.w	ip, #0
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	fa1f f38a 	uxth.w	r3, sl
 8008de8:	4619      	mov	r1, r3
 8008dea:	b283      	uxth	r3, r0
 8008dec:	1acb      	subs	r3, r1, r3
 8008dee:	0c00      	lsrs	r0, r0, #16
 8008df0:	4463      	add	r3, ip
 8008df2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008df6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e00:	4576      	cmp	r6, lr
 8008e02:	f849 3b04 	str.w	r3, [r9], #4
 8008e06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e0a:	d8e5      	bhi.n	8008dd8 <__mdiff+0x88>
 8008e0c:	1b33      	subs	r3, r6, r4
 8008e0e:	3b15      	subs	r3, #21
 8008e10:	f023 0303 	bic.w	r3, r3, #3
 8008e14:	3415      	adds	r4, #21
 8008e16:	3304      	adds	r3, #4
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	bf38      	it	cc
 8008e1c:	2304      	movcc	r3, #4
 8008e1e:	441d      	add	r5, r3
 8008e20:	445b      	add	r3, fp
 8008e22:	461e      	mov	r6, r3
 8008e24:	462c      	mov	r4, r5
 8008e26:	4544      	cmp	r4, r8
 8008e28:	d30e      	bcc.n	8008e48 <__mdiff+0xf8>
 8008e2a:	f108 0103 	add.w	r1, r8, #3
 8008e2e:	1b49      	subs	r1, r1, r5
 8008e30:	f021 0103 	bic.w	r1, r1, #3
 8008e34:	3d03      	subs	r5, #3
 8008e36:	45a8      	cmp	r8, r5
 8008e38:	bf38      	it	cc
 8008e3a:	2100      	movcc	r1, #0
 8008e3c:	440b      	add	r3, r1
 8008e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e42:	b191      	cbz	r1, 8008e6a <__mdiff+0x11a>
 8008e44:	6117      	str	r7, [r2, #16]
 8008e46:	e79d      	b.n	8008d84 <__mdiff+0x34>
 8008e48:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e4c:	46e6      	mov	lr, ip
 8008e4e:	0c08      	lsrs	r0, r1, #16
 8008e50:	fa1c fc81 	uxtah	ip, ip, r1
 8008e54:	4471      	add	r1, lr
 8008e56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e5a:	b289      	uxth	r1, r1
 8008e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e60:	f846 1b04 	str.w	r1, [r6], #4
 8008e64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e68:	e7dd      	b.n	8008e26 <__mdiff+0xd6>
 8008e6a:	3f01      	subs	r7, #1
 8008e6c:	e7e7      	b.n	8008e3e <__mdiff+0xee>
 8008e6e:	bf00      	nop
 8008e70:	0800b158 	.word	0x0800b158
 8008e74:	0800b169 	.word	0x0800b169

08008e78 <__ulp>:
 8008e78:	b082      	sub	sp, #8
 8008e7a:	ed8d 0b00 	vstr	d0, [sp]
 8008e7e:	9a01      	ldr	r2, [sp, #4]
 8008e80:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec0 <__ulp+0x48>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc08      	bgt.n	8008e9e <__ulp+0x26>
 8008e8c:	425b      	negs	r3, r3
 8008e8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e96:	da04      	bge.n	8008ea2 <__ulp+0x2a>
 8008e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e9c:	4113      	asrs	r3, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	e008      	b.n	8008eb4 <__ulp+0x3c>
 8008ea2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ea6:	2b1e      	cmp	r3, #30
 8008ea8:	bfda      	itte	le
 8008eaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008eae:	40da      	lsrle	r2, r3
 8008eb0:	2201      	movgt	r2, #1
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	ec41 0b10 	vmov	d0, r0, r1
 8008ebc:	b002      	add	sp, #8
 8008ebe:	4770      	bx	lr
 8008ec0:	7ff00000 	.word	0x7ff00000

08008ec4 <__b2d>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	6906      	ldr	r6, [r0, #16]
 8008eca:	f100 0814 	add.w	r8, r0, #20
 8008ece:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008ed2:	1f37      	subs	r7, r6, #4
 8008ed4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f7ff fd4b 	bl	8008974 <__hi0bits>
 8008ede:	f1c0 0320 	rsb	r3, r0, #32
 8008ee2:	280a      	cmp	r0, #10
 8008ee4:	600b      	str	r3, [r1, #0]
 8008ee6:	491b      	ldr	r1, [pc, #108]	@ (8008f54 <__b2d+0x90>)
 8008ee8:	dc15      	bgt.n	8008f16 <__b2d+0x52>
 8008eea:	f1c0 0c0b 	rsb	ip, r0, #11
 8008eee:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ef2:	45b8      	cmp	r8, r7
 8008ef4:	ea43 0501 	orr.w	r5, r3, r1
 8008ef8:	bf34      	ite	cc
 8008efa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008efe:	2300      	movcs	r3, #0
 8008f00:	3015      	adds	r0, #21
 8008f02:	fa02 f000 	lsl.w	r0, r2, r0
 8008f06:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f0a:	4303      	orrs	r3, r0
 8008f0c:	461c      	mov	r4, r3
 8008f0e:	ec45 4b10 	vmov	d0, r4, r5
 8008f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f16:	45b8      	cmp	r8, r7
 8008f18:	bf3a      	itte	cc
 8008f1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f1e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f22:	2300      	movcs	r3, #0
 8008f24:	380b      	subs	r0, #11
 8008f26:	d012      	beq.n	8008f4e <__b2d+0x8a>
 8008f28:	f1c0 0120 	rsb	r1, r0, #32
 8008f2c:	fa23 f401 	lsr.w	r4, r3, r1
 8008f30:	4082      	lsls	r2, r0
 8008f32:	4322      	orrs	r2, r4
 8008f34:	4547      	cmp	r7, r8
 8008f36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f3a:	bf8c      	ite	hi
 8008f3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f40:	2200      	movls	r2, #0
 8008f42:	4083      	lsls	r3, r0
 8008f44:	40ca      	lsrs	r2, r1
 8008f46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	e7de      	b.n	8008f0c <__b2d+0x48>
 8008f4e:	ea42 0501 	orr.w	r5, r2, r1
 8008f52:	e7db      	b.n	8008f0c <__b2d+0x48>
 8008f54:	3ff00000 	.word	0x3ff00000

08008f58 <__d2b>:
 8008f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	2101      	movs	r1, #1
 8008f60:	ec59 8b10 	vmov	r8, r9, d0
 8008f64:	4616      	mov	r6, r2
 8008f66:	f7ff fc13 	bl	8008790 <_Balloc>
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	b930      	cbnz	r0, 8008f7c <__d2b+0x24>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b23      	ldr	r3, [pc, #140]	@ (8009000 <__d2b+0xa8>)
 8008f72:	4824      	ldr	r0, [pc, #144]	@ (8009004 <__d2b+0xac>)
 8008f74:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f78:	f001 f98a 	bl	800a290 <__assert_func>
 8008f7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f84:	b10d      	cbz	r5, 8008f8a <__d2b+0x32>
 8008f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f90:	d023      	beq.n	8008fda <__d2b+0x82>
 8008f92:	4668      	mov	r0, sp
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	f7ff fd0c 	bl	80089b2 <__lo0bits>
 8008f9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f9e:	b1d0      	cbz	r0, 8008fd6 <__d2b+0x7e>
 8008fa0:	f1c0 0320 	rsb	r3, r0, #32
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	40c2      	lsrs	r2, r0
 8008fac:	6163      	str	r3, [r4, #20]
 8008fae:	9201      	str	r2, [sp, #4]
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	61a3      	str	r3, [r4, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bf0c      	ite	eq
 8008fb8:	2201      	moveq	r2, #1
 8008fba:	2202      	movne	r2, #2
 8008fbc:	6122      	str	r2, [r4, #16]
 8008fbe:	b1a5      	cbz	r5, 8008fea <__d2b+0x92>
 8008fc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fc4:	4405      	add	r5, r0
 8008fc6:	603d      	str	r5, [r7, #0]
 8008fc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fcc:	6030      	str	r0, [r6, #0]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	b003      	add	sp, #12
 8008fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	6161      	str	r1, [r4, #20]
 8008fd8:	e7ea      	b.n	8008fb0 <__d2b+0x58>
 8008fda:	a801      	add	r0, sp, #4
 8008fdc:	f7ff fce9 	bl	80089b2 <__lo0bits>
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	6163      	str	r3, [r4, #20]
 8008fe4:	3020      	adds	r0, #32
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	e7e8      	b.n	8008fbc <__d2b+0x64>
 8008fea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ff2:	6038      	str	r0, [r7, #0]
 8008ff4:	6918      	ldr	r0, [r3, #16]
 8008ff6:	f7ff fcbd 	bl	8008974 <__hi0bits>
 8008ffa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ffe:	e7e5      	b.n	8008fcc <__d2b+0x74>
 8009000:	0800b158 	.word	0x0800b158
 8009004:	0800b169 	.word	0x0800b169

08009008 <__ratio>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	b085      	sub	sp, #20
 800900e:	e9cd 1000 	strd	r1, r0, [sp]
 8009012:	a902      	add	r1, sp, #8
 8009014:	f7ff ff56 	bl	8008ec4 <__b2d>
 8009018:	9800      	ldr	r0, [sp, #0]
 800901a:	a903      	add	r1, sp, #12
 800901c:	ec55 4b10 	vmov	r4, r5, d0
 8009020:	f7ff ff50 	bl	8008ec4 <__b2d>
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	6919      	ldr	r1, [r3, #16]
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	1ac9      	subs	r1, r1, r3
 800902e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	ec5b ab10 	vmov	sl, fp, d0
 8009038:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfce      	itee	gt
 8009040:	462a      	movgt	r2, r5
 8009042:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009046:	465a      	movle	r2, fp
 8009048:	462f      	mov	r7, r5
 800904a:	46d9      	mov	r9, fp
 800904c:	bfcc      	ite	gt
 800904e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009052:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009056:	464b      	mov	r3, r9
 8009058:	4652      	mov	r2, sl
 800905a:	4620      	mov	r0, r4
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 fbf5 	bl	800084c <__aeabi_ddiv>
 8009062:	ec41 0b10 	vmov	d0, r0, r1
 8009066:	b005      	add	sp, #20
 8009068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800906c <__copybits>:
 800906c:	3901      	subs	r1, #1
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	1149      	asrs	r1, r1, #5
 8009072:	6914      	ldr	r4, [r2, #16]
 8009074:	3101      	adds	r1, #1
 8009076:	f102 0314 	add.w	r3, r2, #20
 800907a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800907e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009082:	1f05      	subs	r5, r0, #4
 8009084:	42a3      	cmp	r3, r4
 8009086:	d30c      	bcc.n	80090a2 <__copybits+0x36>
 8009088:	1aa3      	subs	r3, r4, r2
 800908a:	3b11      	subs	r3, #17
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	3211      	adds	r2, #17
 8009092:	42a2      	cmp	r2, r4
 8009094:	bf88      	it	hi
 8009096:	2300      	movhi	r3, #0
 8009098:	4418      	add	r0, r3
 800909a:	2300      	movs	r3, #0
 800909c:	4288      	cmp	r0, r1
 800909e:	d305      	bcc.n	80090ac <__copybits+0x40>
 80090a0:	bd70      	pop	{r4, r5, r6, pc}
 80090a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090aa:	e7eb      	b.n	8009084 <__copybits+0x18>
 80090ac:	f840 3b04 	str.w	r3, [r0], #4
 80090b0:	e7f4      	b.n	800909c <__copybits+0x30>

080090b2 <__any_on>:
 80090b2:	f100 0214 	add.w	r2, r0, #20
 80090b6:	6900      	ldr	r0, [r0, #16]
 80090b8:	114b      	asrs	r3, r1, #5
 80090ba:	4298      	cmp	r0, r3
 80090bc:	b510      	push	{r4, lr}
 80090be:	db11      	blt.n	80090e4 <__any_on+0x32>
 80090c0:	dd0a      	ble.n	80090d8 <__any_on+0x26>
 80090c2:	f011 011f 	ands.w	r1, r1, #31
 80090c6:	d007      	beq.n	80090d8 <__any_on+0x26>
 80090c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090cc:	fa24 f001 	lsr.w	r0, r4, r1
 80090d0:	fa00 f101 	lsl.w	r1, r0, r1
 80090d4:	428c      	cmp	r4, r1
 80090d6:	d10b      	bne.n	80090f0 <__any_on+0x3e>
 80090d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090dc:	4293      	cmp	r3, r2
 80090de:	d803      	bhi.n	80090e8 <__any_on+0x36>
 80090e0:	2000      	movs	r0, #0
 80090e2:	bd10      	pop	{r4, pc}
 80090e4:	4603      	mov	r3, r0
 80090e6:	e7f7      	b.n	80090d8 <__any_on+0x26>
 80090e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d0f5      	beq.n	80090dc <__any_on+0x2a>
 80090f0:	2001      	movs	r0, #1
 80090f2:	e7f6      	b.n	80090e2 <__any_on+0x30>

080090f4 <sulp>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	ec45 4b10 	vmov	d0, r4, r5
 80090fe:	4616      	mov	r6, r2
 8009100:	f7ff feba 	bl	8008e78 <__ulp>
 8009104:	ec51 0b10 	vmov	r0, r1, d0
 8009108:	b17e      	cbz	r6, 800912a <sulp+0x36>
 800910a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800910e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd09      	ble.n	800912a <sulp+0x36>
 8009116:	051b      	lsls	r3, r3, #20
 8009118:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800911c:	2400      	movs	r4, #0
 800911e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009122:	4622      	mov	r2, r4
 8009124:	462b      	mov	r3, r5
 8009126:	f7f7 fa67 	bl	80005f8 <__aeabi_dmul>
 800912a:	ec41 0b10 	vmov	d0, r0, r1
 800912e:	bd70      	pop	{r4, r5, r6, pc}

08009130 <_strtod_l>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	b09f      	sub	sp, #124	@ 0x7c
 8009136:	460c      	mov	r4, r1
 8009138:	9217      	str	r2, [sp, #92]	@ 0x5c
 800913a:	2200      	movs	r2, #0
 800913c:	921a      	str	r2, [sp, #104]	@ 0x68
 800913e:	9005      	str	r0, [sp, #20]
 8009140:	f04f 0a00 	mov.w	sl, #0
 8009144:	f04f 0b00 	mov.w	fp, #0
 8009148:	460a      	mov	r2, r1
 800914a:	9219      	str	r2, [sp, #100]	@ 0x64
 800914c:	7811      	ldrb	r1, [r2, #0]
 800914e:	292b      	cmp	r1, #43	@ 0x2b
 8009150:	d04a      	beq.n	80091e8 <_strtod_l+0xb8>
 8009152:	d838      	bhi.n	80091c6 <_strtod_l+0x96>
 8009154:	290d      	cmp	r1, #13
 8009156:	d832      	bhi.n	80091be <_strtod_l+0x8e>
 8009158:	2908      	cmp	r1, #8
 800915a:	d832      	bhi.n	80091c2 <_strtod_l+0x92>
 800915c:	2900      	cmp	r1, #0
 800915e:	d03b      	beq.n	80091d8 <_strtod_l+0xa8>
 8009160:	2200      	movs	r2, #0
 8009162:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009166:	782a      	ldrb	r2, [r5, #0]
 8009168:	2a30      	cmp	r2, #48	@ 0x30
 800916a:	f040 80b3 	bne.w	80092d4 <_strtod_l+0x1a4>
 800916e:	786a      	ldrb	r2, [r5, #1]
 8009170:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009174:	2a58      	cmp	r2, #88	@ 0x58
 8009176:	d16e      	bne.n	8009256 <_strtod_l+0x126>
 8009178:	9302      	str	r3, [sp, #8]
 800917a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4a8e      	ldr	r2, [pc, #568]	@ (80093bc <_strtod_l+0x28c>)
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009188:	a919      	add	r1, sp, #100	@ 0x64
 800918a:	f001 f91b 	bl	800a3c4 <__gethex>
 800918e:	f010 060f 	ands.w	r6, r0, #15
 8009192:	4604      	mov	r4, r0
 8009194:	d005      	beq.n	80091a2 <_strtod_l+0x72>
 8009196:	2e06      	cmp	r6, #6
 8009198:	d128      	bne.n	80091ec <_strtod_l+0xbc>
 800919a:	3501      	adds	r5, #1
 800919c:	2300      	movs	r3, #0
 800919e:	9519      	str	r5, [sp, #100]	@ 0x64
 80091a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f040 858e 	bne.w	8009cc6 <_strtod_l+0xb96>
 80091aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ac:	b1cb      	cbz	r3, 80091e2 <_strtod_l+0xb2>
 80091ae:	4652      	mov	r2, sl
 80091b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091b4:	ec43 2b10 	vmov	d0, r2, r3
 80091b8:	b01f      	add	sp, #124	@ 0x7c
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	2920      	cmp	r1, #32
 80091c0:	d1ce      	bne.n	8009160 <_strtod_l+0x30>
 80091c2:	3201      	adds	r2, #1
 80091c4:	e7c1      	b.n	800914a <_strtod_l+0x1a>
 80091c6:	292d      	cmp	r1, #45	@ 0x2d
 80091c8:	d1ca      	bne.n	8009160 <_strtod_l+0x30>
 80091ca:	2101      	movs	r1, #1
 80091cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091ce:	1c51      	adds	r1, r2, #1
 80091d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80091d2:	7852      	ldrb	r2, [r2, #1]
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	d1c5      	bne.n	8009164 <_strtod_l+0x34>
 80091d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091da:	9419      	str	r4, [sp, #100]	@ 0x64
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 8570 	bne.w	8009cc2 <_strtod_l+0xb92>
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	e7e5      	b.n	80091b4 <_strtod_l+0x84>
 80091e8:	2100      	movs	r1, #0
 80091ea:	e7ef      	b.n	80091cc <_strtod_l+0x9c>
 80091ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091ee:	b13a      	cbz	r2, 8009200 <_strtod_l+0xd0>
 80091f0:	2135      	movs	r1, #53	@ 0x35
 80091f2:	a81c      	add	r0, sp, #112	@ 0x70
 80091f4:	f7ff ff3a 	bl	800906c <__copybits>
 80091f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091fa:	9805      	ldr	r0, [sp, #20]
 80091fc:	f7ff fb08 	bl	8008810 <_Bfree>
 8009200:	3e01      	subs	r6, #1
 8009202:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009204:	2e04      	cmp	r6, #4
 8009206:	d806      	bhi.n	8009216 <_strtod_l+0xe6>
 8009208:	e8df f006 	tbb	[pc, r6]
 800920c:	201d0314 	.word	0x201d0314
 8009210:	14          	.byte	0x14
 8009211:	00          	.byte	0x00
 8009212:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009216:	05e1      	lsls	r1, r4, #23
 8009218:	bf48      	it	mi
 800921a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800921e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009222:	0d1b      	lsrs	r3, r3, #20
 8009224:	051b      	lsls	r3, r3, #20
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1bb      	bne.n	80091a2 <_strtod_l+0x72>
 800922a:	f7fe fb23 	bl	8007874 <__errno>
 800922e:	2322      	movs	r3, #34	@ 0x22
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e7b6      	b.n	80091a2 <_strtod_l+0x72>
 8009234:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009238:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800923c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009240:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009244:	e7e7      	b.n	8009216 <_strtod_l+0xe6>
 8009246:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80093c4 <_strtod_l+0x294>
 800924a:	e7e4      	b.n	8009216 <_strtod_l+0xe6>
 800924c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009250:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009254:	e7df      	b.n	8009216 <_strtod_l+0xe6>
 8009256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	9219      	str	r2, [sp, #100]	@ 0x64
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	2b30      	cmp	r3, #48	@ 0x30
 8009260:	d0f9      	beq.n	8009256 <_strtod_l+0x126>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d09d      	beq.n	80091a2 <_strtod_l+0x72>
 8009266:	2301      	movs	r3, #1
 8009268:	9309      	str	r3, [sp, #36]	@ 0x24
 800926a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800926c:	930c      	str	r3, [sp, #48]	@ 0x30
 800926e:	2300      	movs	r3, #0
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	930a      	str	r3, [sp, #40]	@ 0x28
 8009274:	461f      	mov	r7, r3
 8009276:	220a      	movs	r2, #10
 8009278:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800927a:	7805      	ldrb	r5, [r0, #0]
 800927c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009280:	b2d9      	uxtb	r1, r3
 8009282:	2909      	cmp	r1, #9
 8009284:	d928      	bls.n	80092d8 <_strtod_l+0x1a8>
 8009286:	494e      	ldr	r1, [pc, #312]	@ (80093c0 <_strtod_l+0x290>)
 8009288:	2201      	movs	r2, #1
 800928a:	f000 ffd5 	bl	800a238 <strncmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	d032      	beq.n	80092f8 <_strtod_l+0x1c8>
 8009292:	2000      	movs	r0, #0
 8009294:	462a      	mov	r2, r5
 8009296:	4681      	mov	r9, r0
 8009298:	463d      	mov	r5, r7
 800929a:	4603      	mov	r3, r0
 800929c:	2a65      	cmp	r2, #101	@ 0x65
 800929e:	d001      	beq.n	80092a4 <_strtod_l+0x174>
 80092a0:	2a45      	cmp	r2, #69	@ 0x45
 80092a2:	d114      	bne.n	80092ce <_strtod_l+0x19e>
 80092a4:	b91d      	cbnz	r5, 80092ae <_strtod_l+0x17e>
 80092a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a8:	4302      	orrs	r2, r0
 80092aa:	d095      	beq.n	80091d8 <_strtod_l+0xa8>
 80092ac:	2500      	movs	r5, #0
 80092ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092b0:	1c62      	adds	r2, r4, #1
 80092b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092b4:	7862      	ldrb	r2, [r4, #1]
 80092b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80092b8:	d077      	beq.n	80093aa <_strtod_l+0x27a>
 80092ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80092bc:	d07b      	beq.n	80093b6 <_strtod_l+0x286>
 80092be:	f04f 0c00 	mov.w	ip, #0
 80092c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092c6:	2909      	cmp	r1, #9
 80092c8:	f240 8082 	bls.w	80093d0 <_strtod_l+0x2a0>
 80092cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	e0a2      	b.n	800941a <_strtod_l+0x2ea>
 80092d4:	2300      	movs	r3, #0
 80092d6:	e7c7      	b.n	8009268 <_strtod_l+0x138>
 80092d8:	2f08      	cmp	r7, #8
 80092da:	bfd5      	itete	le
 80092dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092de:	9908      	ldrgt	r1, [sp, #32]
 80092e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80092e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092e8:	f100 0001 	add.w	r0, r0, #1
 80092ec:	bfd4      	ite	le
 80092ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092f0:	9308      	strgt	r3, [sp, #32]
 80092f2:	3701      	adds	r7, #1
 80092f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80092f6:	e7bf      	b.n	8009278 <_strtod_l+0x148>
 80092f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80092fe:	785a      	ldrb	r2, [r3, #1]
 8009300:	b37f      	cbz	r7, 8009362 <_strtod_l+0x232>
 8009302:	4681      	mov	r9, r0
 8009304:	463d      	mov	r5, r7
 8009306:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800930a:	2b09      	cmp	r3, #9
 800930c:	d912      	bls.n	8009334 <_strtod_l+0x204>
 800930e:	2301      	movs	r3, #1
 8009310:	e7c4      	b.n	800929c <_strtod_l+0x16c>
 8009312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	9219      	str	r2, [sp, #100]	@ 0x64
 8009318:	785a      	ldrb	r2, [r3, #1]
 800931a:	3001      	adds	r0, #1
 800931c:	2a30      	cmp	r2, #48	@ 0x30
 800931e:	d0f8      	beq.n	8009312 <_strtod_l+0x1e2>
 8009320:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009324:	2b08      	cmp	r3, #8
 8009326:	f200 84d3 	bhi.w	8009cd0 <_strtod_l+0xba0>
 800932a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800932c:	930c      	str	r3, [sp, #48]	@ 0x30
 800932e:	4681      	mov	r9, r0
 8009330:	2000      	movs	r0, #0
 8009332:	4605      	mov	r5, r0
 8009334:	3a30      	subs	r2, #48	@ 0x30
 8009336:	f100 0301 	add.w	r3, r0, #1
 800933a:	d02a      	beq.n	8009392 <_strtod_l+0x262>
 800933c:	4499      	add	r9, r3
 800933e:	eb00 0c05 	add.w	ip, r0, r5
 8009342:	462b      	mov	r3, r5
 8009344:	210a      	movs	r1, #10
 8009346:	4563      	cmp	r3, ip
 8009348:	d10d      	bne.n	8009366 <_strtod_l+0x236>
 800934a:	1c69      	adds	r1, r5, #1
 800934c:	4401      	add	r1, r0
 800934e:	4428      	add	r0, r5
 8009350:	2808      	cmp	r0, #8
 8009352:	dc16      	bgt.n	8009382 <_strtod_l+0x252>
 8009354:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009356:	230a      	movs	r3, #10
 8009358:	fb03 2300 	mla	r3, r3, r0, r2
 800935c:	930a      	str	r3, [sp, #40]	@ 0x28
 800935e:	2300      	movs	r3, #0
 8009360:	e018      	b.n	8009394 <_strtod_l+0x264>
 8009362:	4638      	mov	r0, r7
 8009364:	e7da      	b.n	800931c <_strtod_l+0x1ec>
 8009366:	2b08      	cmp	r3, #8
 8009368:	f103 0301 	add.w	r3, r3, #1
 800936c:	dc03      	bgt.n	8009376 <_strtod_l+0x246>
 800936e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009370:	434e      	muls	r6, r1
 8009372:	960a      	str	r6, [sp, #40]	@ 0x28
 8009374:	e7e7      	b.n	8009346 <_strtod_l+0x216>
 8009376:	2b10      	cmp	r3, #16
 8009378:	bfde      	ittt	le
 800937a:	9e08      	ldrle	r6, [sp, #32]
 800937c:	434e      	mulle	r6, r1
 800937e:	9608      	strle	r6, [sp, #32]
 8009380:	e7e1      	b.n	8009346 <_strtod_l+0x216>
 8009382:	280f      	cmp	r0, #15
 8009384:	dceb      	bgt.n	800935e <_strtod_l+0x22e>
 8009386:	9808      	ldr	r0, [sp, #32]
 8009388:	230a      	movs	r3, #10
 800938a:	fb03 2300 	mla	r3, r3, r0, r2
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	e7e5      	b.n	800935e <_strtod_l+0x22e>
 8009392:	4629      	mov	r1, r5
 8009394:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009396:	1c50      	adds	r0, r2, #1
 8009398:	9019      	str	r0, [sp, #100]	@ 0x64
 800939a:	7852      	ldrb	r2, [r2, #1]
 800939c:	4618      	mov	r0, r3
 800939e:	460d      	mov	r5, r1
 80093a0:	e7b1      	b.n	8009306 <_strtod_l+0x1d6>
 80093a2:	f04f 0900 	mov.w	r9, #0
 80093a6:	2301      	movs	r3, #1
 80093a8:	e77d      	b.n	80092a6 <_strtod_l+0x176>
 80093aa:	f04f 0c00 	mov.w	ip, #0
 80093ae:	1ca2      	adds	r2, r4, #2
 80093b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80093b2:	78a2      	ldrb	r2, [r4, #2]
 80093b4:	e785      	b.n	80092c2 <_strtod_l+0x192>
 80093b6:	f04f 0c01 	mov.w	ip, #1
 80093ba:	e7f8      	b.n	80093ae <_strtod_l+0x27e>
 80093bc:	0800b2d8 	.word	0x0800b2d8
 80093c0:	0800b2c0 	.word	0x0800b2c0
 80093c4:	7ff00000 	.word	0x7ff00000
 80093c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093ca:	1c51      	adds	r1, r2, #1
 80093cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ce:	7852      	ldrb	r2, [r2, #1]
 80093d0:	2a30      	cmp	r2, #48	@ 0x30
 80093d2:	d0f9      	beq.n	80093c8 <_strtod_l+0x298>
 80093d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093d8:	2908      	cmp	r1, #8
 80093da:	f63f af78 	bhi.w	80092ce <_strtod_l+0x19e>
 80093de:	3a30      	subs	r2, #48	@ 0x30
 80093e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093e6:	f04f 080a 	mov.w	r8, #10
 80093ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093ec:	1c56      	adds	r6, r2, #1
 80093ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80093f0:	7852      	ldrb	r2, [r2, #1]
 80093f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093f6:	f1be 0f09 	cmp.w	lr, #9
 80093fa:	d939      	bls.n	8009470 <_strtod_l+0x340>
 80093fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093fe:	1a76      	subs	r6, r6, r1
 8009400:	2e08      	cmp	r6, #8
 8009402:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009406:	dc03      	bgt.n	8009410 <_strtod_l+0x2e0>
 8009408:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800940a:	4588      	cmp	r8, r1
 800940c:	bfa8      	it	ge
 800940e:	4688      	movge	r8, r1
 8009410:	f1bc 0f00 	cmp.w	ip, #0
 8009414:	d001      	beq.n	800941a <_strtod_l+0x2ea>
 8009416:	f1c8 0800 	rsb	r8, r8, #0
 800941a:	2d00      	cmp	r5, #0
 800941c:	d14e      	bne.n	80094bc <_strtod_l+0x38c>
 800941e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009420:	4308      	orrs	r0, r1
 8009422:	f47f aebe 	bne.w	80091a2 <_strtod_l+0x72>
 8009426:	2b00      	cmp	r3, #0
 8009428:	f47f aed6 	bne.w	80091d8 <_strtod_l+0xa8>
 800942c:	2a69      	cmp	r2, #105	@ 0x69
 800942e:	d028      	beq.n	8009482 <_strtod_l+0x352>
 8009430:	dc25      	bgt.n	800947e <_strtod_l+0x34e>
 8009432:	2a49      	cmp	r2, #73	@ 0x49
 8009434:	d025      	beq.n	8009482 <_strtod_l+0x352>
 8009436:	2a4e      	cmp	r2, #78	@ 0x4e
 8009438:	f47f aece 	bne.w	80091d8 <_strtod_l+0xa8>
 800943c:	499b      	ldr	r1, [pc, #620]	@ (80096ac <_strtod_l+0x57c>)
 800943e:	a819      	add	r0, sp, #100	@ 0x64
 8009440:	f001 f9e2 	bl	800a808 <__match>
 8009444:	2800      	cmp	r0, #0
 8009446:	f43f aec7 	beq.w	80091d8 <_strtod_l+0xa8>
 800944a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b28      	cmp	r3, #40	@ 0x28
 8009450:	d12e      	bne.n	80094b0 <_strtod_l+0x380>
 8009452:	4997      	ldr	r1, [pc, #604]	@ (80096b0 <_strtod_l+0x580>)
 8009454:	aa1c      	add	r2, sp, #112	@ 0x70
 8009456:	a819      	add	r0, sp, #100	@ 0x64
 8009458:	f001 f9ea 	bl	800a830 <__hexnan>
 800945c:	2805      	cmp	r0, #5
 800945e:	d127      	bne.n	80094b0 <_strtod_l+0x380>
 8009460:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009462:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009466:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800946a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800946e:	e698      	b.n	80091a2 <_strtod_l+0x72>
 8009470:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009472:	fb08 2101 	mla	r1, r8, r1, r2
 8009476:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800947a:	920e      	str	r2, [sp, #56]	@ 0x38
 800947c:	e7b5      	b.n	80093ea <_strtod_l+0x2ba>
 800947e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009480:	e7da      	b.n	8009438 <_strtod_l+0x308>
 8009482:	498c      	ldr	r1, [pc, #560]	@ (80096b4 <_strtod_l+0x584>)
 8009484:	a819      	add	r0, sp, #100	@ 0x64
 8009486:	f001 f9bf 	bl	800a808 <__match>
 800948a:	2800      	cmp	r0, #0
 800948c:	f43f aea4 	beq.w	80091d8 <_strtod_l+0xa8>
 8009490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009492:	4989      	ldr	r1, [pc, #548]	@ (80096b8 <_strtod_l+0x588>)
 8009494:	3b01      	subs	r3, #1
 8009496:	a819      	add	r0, sp, #100	@ 0x64
 8009498:	9319      	str	r3, [sp, #100]	@ 0x64
 800949a:	f001 f9b5 	bl	800a808 <__match>
 800949e:	b910      	cbnz	r0, 80094a6 <_strtod_l+0x376>
 80094a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a2:	3301      	adds	r3, #1
 80094a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80094a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80096c8 <_strtod_l+0x598>
 80094aa:	f04f 0a00 	mov.w	sl, #0
 80094ae:	e678      	b.n	80091a2 <_strtod_l+0x72>
 80094b0:	4882      	ldr	r0, [pc, #520]	@ (80096bc <_strtod_l+0x58c>)
 80094b2:	f000 fee5 	bl	800a280 <nan>
 80094b6:	ec5b ab10 	vmov	sl, fp, d0
 80094ba:	e672      	b.n	80091a2 <_strtod_l+0x72>
 80094bc:	eba8 0309 	sub.w	r3, r8, r9
 80094c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c4:	2f00      	cmp	r7, #0
 80094c6:	bf08      	it	eq
 80094c8:	462f      	moveq	r7, r5
 80094ca:	2d10      	cmp	r5, #16
 80094cc:	462c      	mov	r4, r5
 80094ce:	bfa8      	it	ge
 80094d0:	2410      	movge	r4, #16
 80094d2:	f7f7 f817 	bl	8000504 <__aeabi_ui2d>
 80094d6:	2d09      	cmp	r5, #9
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	dc13      	bgt.n	8009506 <_strtod_l+0x3d6>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f ae5e 	beq.w	80091a2 <_strtod_l+0x72>
 80094e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e8:	dd78      	ble.n	80095dc <_strtod_l+0x4ac>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	dc5f      	bgt.n	80095ae <_strtod_l+0x47e>
 80094ee:	4974      	ldr	r1, [pc, #464]	@ (80096c0 <_strtod_l+0x590>)
 80094f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	4682      	mov	sl, r0
 8009502:	468b      	mov	fp, r1
 8009504:	e64d      	b.n	80091a2 <_strtod_l+0x72>
 8009506:	4b6e      	ldr	r3, [pc, #440]	@ (80096c0 <_strtod_l+0x590>)
 8009508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800950c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	4682      	mov	sl, r0
 8009516:	9808      	ldr	r0, [sp, #32]
 8009518:	468b      	mov	fp, r1
 800951a:	f7f6 fff3 	bl	8000504 <__aeabi_ui2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f6 feb1 	bl	800028c <__adddf3>
 800952a:	2d0f      	cmp	r5, #15
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	ddd5      	ble.n	80094de <_strtod_l+0x3ae>
 8009532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009534:	1b2c      	subs	r4, r5, r4
 8009536:	441c      	add	r4, r3
 8009538:	2c00      	cmp	r4, #0
 800953a:	f340 8096 	ble.w	800966a <_strtod_l+0x53a>
 800953e:	f014 030f 	ands.w	r3, r4, #15
 8009542:	d00a      	beq.n	800955a <_strtod_l+0x42a>
 8009544:	495e      	ldr	r1, [pc, #376]	@ (80096c0 <_strtod_l+0x590>)
 8009546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	f7f7 f851 	bl	80005f8 <__aeabi_dmul>
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	f034 040f 	bics.w	r4, r4, #15
 800955e:	d073      	beq.n	8009648 <_strtod_l+0x518>
 8009560:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009564:	dd48      	ble.n	80095f8 <_strtod_l+0x4c8>
 8009566:	2400      	movs	r4, #0
 8009568:	46a0      	mov	r8, r4
 800956a:	940a      	str	r4, [sp, #40]	@ 0x28
 800956c:	46a1      	mov	r9, r4
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80096c8 <_strtod_l+0x598>
 8009574:	2322      	movs	r3, #34	@ 0x22
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	f43f ae0f 	beq.w	80091a2 <_strtod_l+0x72>
 8009584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7ff f942 	bl	8008810 <_Bfree>
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	4649      	mov	r1, r9
 8009590:	f7ff f93e 	bl	8008810 <_Bfree>
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	4641      	mov	r1, r8
 8009598:	f7ff f93a 	bl	8008810 <_Bfree>
 800959c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f936 	bl	8008810 <_Bfree>
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	4621      	mov	r1, r4
 80095a8:	f7ff f932 	bl	8008810 <_Bfree>
 80095ac:	e5f9      	b.n	80091a2 <_strtod_l+0x72>
 80095ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dbbc      	blt.n	8009532 <_strtod_l+0x402>
 80095b8:	4c41      	ldr	r4, [pc, #260]	@ (80096c0 <_strtod_l+0x590>)
 80095ba:	f1c5 050f 	rsb	r5, r5, #15
 80095be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	1b5d      	subs	r5, r3, r5
 80095d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095da:	e78f      	b.n	80094fc <_strtod_l+0x3cc>
 80095dc:	3316      	adds	r3, #22
 80095de:	dba8      	blt.n	8009532 <_strtod_l+0x402>
 80095e0:	4b37      	ldr	r3, [pc, #220]	@ (80096c0 <_strtod_l+0x590>)
 80095e2:	eba9 0808 	sub.w	r8, r9, r8
 80095e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095ee:	4650      	mov	r0, sl
 80095f0:	4659      	mov	r1, fp
 80095f2:	f7f7 f92b 	bl	800084c <__aeabi_ddiv>
 80095f6:	e783      	b.n	8009500 <_strtod_l+0x3d0>
 80095f8:	4b32      	ldr	r3, [pc, #200]	@ (80096c4 <_strtod_l+0x594>)
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	2300      	movs	r3, #0
 80095fe:	1124      	asrs	r4, r4, #4
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	461e      	mov	r6, r3
 8009606:	2c01      	cmp	r4, #1
 8009608:	dc21      	bgt.n	800964e <_strtod_l+0x51e>
 800960a:	b10b      	cbz	r3, 8009610 <_strtod_l+0x4e0>
 800960c:	4682      	mov	sl, r0
 800960e:	468b      	mov	fp, r1
 8009610:	492c      	ldr	r1, [pc, #176]	@ (80096c4 <_strtod_l+0x594>)
 8009612:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009616:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4b28      	ldr	r3, [pc, #160]	@ (80096c8 <_strtod_l+0x598>)
 8009628:	460a      	mov	r2, r1
 800962a:	400b      	ands	r3, r1
 800962c:	4927      	ldr	r1, [pc, #156]	@ (80096cc <_strtod_l+0x59c>)
 800962e:	428b      	cmp	r3, r1
 8009630:	4682      	mov	sl, r0
 8009632:	d898      	bhi.n	8009566 <_strtod_l+0x436>
 8009634:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009638:	428b      	cmp	r3, r1
 800963a:	bf86      	itte	hi
 800963c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80096d0 <_strtod_l+0x5a0>
 8009640:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009644:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009648:	2300      	movs	r3, #0
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	e07a      	b.n	8009744 <_strtod_l+0x614>
 800964e:	07e2      	lsls	r2, r4, #31
 8009650:	d505      	bpl.n	800965e <_strtod_l+0x52e>
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 ffce 	bl	80005f8 <__aeabi_dmul>
 800965c:	2301      	movs	r3, #1
 800965e:	9a08      	ldr	r2, [sp, #32]
 8009660:	3208      	adds	r2, #8
 8009662:	3601      	adds	r6, #1
 8009664:	1064      	asrs	r4, r4, #1
 8009666:	9208      	str	r2, [sp, #32]
 8009668:	e7cd      	b.n	8009606 <_strtod_l+0x4d6>
 800966a:	d0ed      	beq.n	8009648 <_strtod_l+0x518>
 800966c:	4264      	negs	r4, r4
 800966e:	f014 020f 	ands.w	r2, r4, #15
 8009672:	d00a      	beq.n	800968a <_strtod_l+0x55a>
 8009674:	4b12      	ldr	r3, [pc, #72]	@ (80096c0 <_strtod_l+0x590>)
 8009676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800967a:	4650      	mov	r0, sl
 800967c:	4659      	mov	r1, fp
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	f7f7 f8e3 	bl	800084c <__aeabi_ddiv>
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	1124      	asrs	r4, r4, #4
 800968c:	d0dc      	beq.n	8009648 <_strtod_l+0x518>
 800968e:	2c1f      	cmp	r4, #31
 8009690:	dd20      	ble.n	80096d4 <_strtod_l+0x5a4>
 8009692:	2400      	movs	r4, #0
 8009694:	46a0      	mov	r8, r4
 8009696:	940a      	str	r4, [sp, #40]	@ 0x28
 8009698:	46a1      	mov	r9, r4
 800969a:	9a05      	ldr	r2, [sp, #20]
 800969c:	2322      	movs	r3, #34	@ 0x22
 800969e:	f04f 0a00 	mov.w	sl, #0
 80096a2:	f04f 0b00 	mov.w	fp, #0
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	e768      	b.n	800957c <_strtod_l+0x44c>
 80096aa:	bf00      	nop
 80096ac:	0800b0b0 	.word	0x0800b0b0
 80096b0:	0800b2c4 	.word	0x0800b2c4
 80096b4:	0800b0a8 	.word	0x0800b0a8
 80096b8:	0800b0df 	.word	0x0800b0df
 80096bc:	0800b46d 	.word	0x0800b46d
 80096c0:	0800b1f8 	.word	0x0800b1f8
 80096c4:	0800b1d0 	.word	0x0800b1d0
 80096c8:	7ff00000 	.word	0x7ff00000
 80096cc:	7ca00000 	.word	0x7ca00000
 80096d0:	7fefffff 	.word	0x7fefffff
 80096d4:	f014 0310 	ands.w	r3, r4, #16
 80096d8:	bf18      	it	ne
 80096da:	236a      	movne	r3, #106	@ 0x6a
 80096dc:	4ea9      	ldr	r6, [pc, #676]	@ (8009984 <_strtod_l+0x854>)
 80096de:	9308      	str	r3, [sp, #32]
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	2300      	movs	r3, #0
 80096e6:	07e2      	lsls	r2, r4, #31
 80096e8:	d504      	bpl.n	80096f4 <_strtod_l+0x5c4>
 80096ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	2301      	movs	r3, #1
 80096f4:	1064      	asrs	r4, r4, #1
 80096f6:	f106 0608 	add.w	r6, r6, #8
 80096fa:	d1f4      	bne.n	80096e6 <_strtod_l+0x5b6>
 80096fc:	b10b      	cbz	r3, 8009702 <_strtod_l+0x5d2>
 80096fe:	4682      	mov	sl, r0
 8009700:	468b      	mov	fp, r1
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	b1b3      	cbz	r3, 8009734 <_strtod_l+0x604>
 8009706:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800970a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800970e:	2b00      	cmp	r3, #0
 8009710:	4659      	mov	r1, fp
 8009712:	dd0f      	ble.n	8009734 <_strtod_l+0x604>
 8009714:	2b1f      	cmp	r3, #31
 8009716:	dd55      	ble.n	80097c4 <_strtod_l+0x694>
 8009718:	2b34      	cmp	r3, #52	@ 0x34
 800971a:	bfde      	ittt	le
 800971c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009720:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009724:	4093      	lslle	r3, r2
 8009726:	f04f 0a00 	mov.w	sl, #0
 800972a:	bfcc      	ite	gt
 800972c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009730:	ea03 0b01 	andle.w	fp, r3, r1
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f7 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009740:	2800      	cmp	r0, #0
 8009742:	d1a6      	bne.n	8009692 <_strtod_l+0x562>
 8009744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	462b      	mov	r3, r5
 800974e:	463a      	mov	r2, r7
 8009750:	f7ff f8c6 	bl	80088e0 <__s2b>
 8009754:	900a      	str	r0, [sp, #40]	@ 0x28
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f af05 	beq.w	8009566 <_strtod_l+0x436>
 800975c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800975e:	2a00      	cmp	r2, #0
 8009760:	eba9 0308 	sub.w	r3, r9, r8
 8009764:	bfa8      	it	ge
 8009766:	2300      	movge	r3, #0
 8009768:	9312      	str	r3, [sp, #72]	@ 0x48
 800976a:	2400      	movs	r4, #0
 800976c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009770:	9316      	str	r3, [sp, #88]	@ 0x58
 8009772:	46a0      	mov	r8, r4
 8009774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009776:	9805      	ldr	r0, [sp, #20]
 8009778:	6859      	ldr	r1, [r3, #4]
 800977a:	f7ff f809 	bl	8008790 <_Balloc>
 800977e:	4681      	mov	r9, r0
 8009780:	2800      	cmp	r0, #0
 8009782:	f43f aef4 	beq.w	800956e <_strtod_l+0x43e>
 8009786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009788:	691a      	ldr	r2, [r3, #16]
 800978a:	3202      	adds	r2, #2
 800978c:	f103 010c 	add.w	r1, r3, #12
 8009790:	0092      	lsls	r2, r2, #2
 8009792:	300c      	adds	r0, #12
 8009794:	f7fe f89b 	bl	80078ce <memcpy>
 8009798:	ec4b ab10 	vmov	d0, sl, fp
 800979c:	9805      	ldr	r0, [sp, #20]
 800979e:	aa1c      	add	r2, sp, #112	@ 0x70
 80097a0:	a91b      	add	r1, sp, #108	@ 0x6c
 80097a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097a6:	f7ff fbd7 	bl	8008f58 <__d2b>
 80097aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80097ac:	2800      	cmp	r0, #0
 80097ae:	f43f aede 	beq.w	800956e <_strtod_l+0x43e>
 80097b2:	9805      	ldr	r0, [sp, #20]
 80097b4:	2101      	movs	r1, #1
 80097b6:	f7ff f929 	bl	8008a0c <__i2b>
 80097ba:	4680      	mov	r8, r0
 80097bc:	b948      	cbnz	r0, 80097d2 <_strtod_l+0x6a2>
 80097be:	f04f 0800 	mov.w	r8, #0
 80097c2:	e6d4      	b.n	800956e <_strtod_l+0x43e>
 80097c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	ea03 0a0a 	and.w	sl, r3, sl
 80097d0:	e7b0      	b.n	8009734 <_strtod_l+0x604>
 80097d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097d6:	2d00      	cmp	r5, #0
 80097d8:	bfab      	itete	ge
 80097da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097e2:	bfac      	ite	ge
 80097e4:	18ef      	addge	r7, r5, r3
 80097e6:	1b5e      	sublt	r6, r3, r5
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	1aed      	subs	r5, r5, r3
 80097ec:	4415      	add	r5, r2
 80097ee:	4b66      	ldr	r3, [pc, #408]	@ (8009988 <_strtod_l+0x858>)
 80097f0:	3d01      	subs	r5, #1
 80097f2:	429d      	cmp	r5, r3
 80097f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097f8:	da50      	bge.n	800989c <_strtod_l+0x76c>
 80097fa:	1b5b      	subs	r3, r3, r5
 80097fc:	2b1f      	cmp	r3, #31
 80097fe:	eba2 0203 	sub.w	r2, r2, r3
 8009802:	f04f 0101 	mov.w	r1, #1
 8009806:	dc3d      	bgt.n	8009884 <_strtod_l+0x754>
 8009808:	fa01 f303 	lsl.w	r3, r1, r3
 800980c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800980e:	2300      	movs	r3, #0
 8009810:	9310      	str	r3, [sp, #64]	@ 0x40
 8009812:	18bd      	adds	r5, r7, r2
 8009814:	9b08      	ldr	r3, [sp, #32]
 8009816:	42af      	cmp	r7, r5
 8009818:	4416      	add	r6, r2
 800981a:	441e      	add	r6, r3
 800981c:	463b      	mov	r3, r7
 800981e:	bfa8      	it	ge
 8009820:	462b      	movge	r3, r5
 8009822:	42b3      	cmp	r3, r6
 8009824:	bfa8      	it	ge
 8009826:	4633      	movge	r3, r6
 8009828:	2b00      	cmp	r3, #0
 800982a:	bfc2      	ittt	gt
 800982c:	1aed      	subgt	r5, r5, r3
 800982e:	1af6      	subgt	r6, r6, r3
 8009830:	1aff      	subgt	r7, r7, r3
 8009832:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd16      	ble.n	8009866 <_strtod_l+0x736>
 8009838:	4641      	mov	r1, r8
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	461a      	mov	r2, r3
 800983e:	f7ff f9a5 	bl	8008b8c <__pow5mult>
 8009842:	4680      	mov	r8, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d0ba      	beq.n	80097be <_strtod_l+0x68e>
 8009848:	4601      	mov	r1, r0
 800984a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800984c:	9805      	ldr	r0, [sp, #20]
 800984e:	f7ff f8f3 	bl	8008a38 <__multiply>
 8009852:	900e      	str	r0, [sp, #56]	@ 0x38
 8009854:	2800      	cmp	r0, #0
 8009856:	f43f ae8a 	beq.w	800956e <_strtod_l+0x43e>
 800985a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800985c:	9805      	ldr	r0, [sp, #20]
 800985e:	f7fe ffd7 	bl	8008810 <_Bfree>
 8009862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009864:	931a      	str	r3, [sp, #104]	@ 0x68
 8009866:	2d00      	cmp	r5, #0
 8009868:	dc1d      	bgt.n	80098a6 <_strtod_l+0x776>
 800986a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	dd23      	ble.n	80098b8 <_strtod_l+0x788>
 8009870:	4649      	mov	r1, r9
 8009872:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009874:	9805      	ldr	r0, [sp, #20]
 8009876:	f7ff f989 	bl	8008b8c <__pow5mult>
 800987a:	4681      	mov	r9, r0
 800987c:	b9e0      	cbnz	r0, 80098b8 <_strtod_l+0x788>
 800987e:	f04f 0900 	mov.w	r9, #0
 8009882:	e674      	b.n	800956e <_strtod_l+0x43e>
 8009884:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009888:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800988c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009890:	35e2      	adds	r5, #226	@ 0xe2
 8009892:	fa01 f305 	lsl.w	r3, r1, r5
 8009896:	9310      	str	r3, [sp, #64]	@ 0x40
 8009898:	9113      	str	r1, [sp, #76]	@ 0x4c
 800989a:	e7ba      	b.n	8009812 <_strtod_l+0x6e2>
 800989c:	2300      	movs	r3, #0
 800989e:	9310      	str	r3, [sp, #64]	@ 0x40
 80098a0:	2301      	movs	r3, #1
 80098a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098a4:	e7b5      	b.n	8009812 <_strtod_l+0x6e2>
 80098a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098a8:	9805      	ldr	r0, [sp, #20]
 80098aa:	462a      	mov	r2, r5
 80098ac:	f7ff f9c8 	bl	8008c40 <__lshift>
 80098b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d1d9      	bne.n	800986a <_strtod_l+0x73a>
 80098b6:	e65a      	b.n	800956e <_strtod_l+0x43e>
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	dd07      	ble.n	80098cc <_strtod_l+0x79c>
 80098bc:	4649      	mov	r1, r9
 80098be:	9805      	ldr	r0, [sp, #20]
 80098c0:	4632      	mov	r2, r6
 80098c2:	f7ff f9bd 	bl	8008c40 <__lshift>
 80098c6:	4681      	mov	r9, r0
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0d8      	beq.n	800987e <_strtod_l+0x74e>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	dd08      	ble.n	80098e2 <_strtod_l+0x7b2>
 80098d0:	4641      	mov	r1, r8
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	463a      	mov	r2, r7
 80098d6:	f7ff f9b3 	bl	8008c40 <__lshift>
 80098da:	4680      	mov	r8, r0
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f ae46 	beq.w	800956e <_strtod_l+0x43e>
 80098e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098e4:	9805      	ldr	r0, [sp, #20]
 80098e6:	464a      	mov	r2, r9
 80098e8:	f7ff fa32 	bl	8008d50 <__mdiff>
 80098ec:	4604      	mov	r4, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae3d 	beq.w	800956e <_strtod_l+0x43e>
 80098f4:	68c3      	ldr	r3, [r0, #12]
 80098f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098f8:	2300      	movs	r3, #0
 80098fa:	60c3      	str	r3, [r0, #12]
 80098fc:	4641      	mov	r1, r8
 80098fe:	f7ff fa0b 	bl	8008d18 <__mcmp>
 8009902:	2800      	cmp	r0, #0
 8009904:	da46      	bge.n	8009994 <_strtod_l+0x864>
 8009906:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009908:	ea53 030a 	orrs.w	r3, r3, sl
 800990c:	d16c      	bne.n	80099e8 <_strtod_l+0x8b8>
 800990e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009912:	2b00      	cmp	r3, #0
 8009914:	d168      	bne.n	80099e8 <_strtod_l+0x8b8>
 8009916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800991a:	0d1b      	lsrs	r3, r3, #20
 800991c:	051b      	lsls	r3, r3, #20
 800991e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009922:	d961      	bls.n	80099e8 <_strtod_l+0x8b8>
 8009924:	6963      	ldr	r3, [r4, #20]
 8009926:	b913      	cbnz	r3, 800992e <_strtod_l+0x7fe>
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	2b01      	cmp	r3, #1
 800992c:	dd5c      	ble.n	80099e8 <_strtod_l+0x8b8>
 800992e:	4621      	mov	r1, r4
 8009930:	2201      	movs	r2, #1
 8009932:	9805      	ldr	r0, [sp, #20]
 8009934:	f7ff f984 	bl	8008c40 <__lshift>
 8009938:	4641      	mov	r1, r8
 800993a:	4604      	mov	r4, r0
 800993c:	f7ff f9ec 	bl	8008d18 <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	dd51      	ble.n	80099e8 <_strtod_l+0x8b8>
 8009944:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009948:	9a08      	ldr	r2, [sp, #32]
 800994a:	0d1b      	lsrs	r3, r3, #20
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	2a00      	cmp	r2, #0
 8009950:	d06b      	beq.n	8009a2a <_strtod_l+0x8fa>
 8009952:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009956:	d868      	bhi.n	8009a2a <_strtod_l+0x8fa>
 8009958:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800995c:	f67f ae9d 	bls.w	800969a <_strtod_l+0x56a>
 8009960:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <_strtod_l+0x85c>)
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	2200      	movs	r2, #0
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	4b08      	ldr	r3, [pc, #32]	@ (8009990 <_strtod_l+0x860>)
 800996e:	400b      	ands	r3, r1
 8009970:	4682      	mov	sl, r0
 8009972:	468b      	mov	fp, r1
 8009974:	2b00      	cmp	r3, #0
 8009976:	f47f ae05 	bne.w	8009584 <_strtod_l+0x454>
 800997a:	9a05      	ldr	r2, [sp, #20]
 800997c:	2322      	movs	r3, #34	@ 0x22
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	e600      	b.n	8009584 <_strtod_l+0x454>
 8009982:	bf00      	nop
 8009984:	0800b2f0 	.word	0x0800b2f0
 8009988:	fffffc02 	.word	0xfffffc02
 800998c:	39500000 	.word	0x39500000
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009998:	d165      	bne.n	8009a66 <_strtod_l+0x936>
 800999a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800999c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099a0:	b35a      	cbz	r2, 80099fa <_strtod_l+0x8ca>
 80099a2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c20 <_strtod_l+0xaf0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d12b      	bne.n	8009a00 <_strtod_l+0x8d0>
 80099a8:	9b08      	ldr	r3, [sp, #32]
 80099aa:	4651      	mov	r1, sl
 80099ac:	b303      	cbz	r3, 80099f0 <_strtod_l+0x8c0>
 80099ae:	4b9d      	ldr	r3, [pc, #628]	@ (8009c24 <_strtod_l+0xaf4>)
 80099b0:	465a      	mov	r2, fp
 80099b2:	4013      	ands	r3, r2
 80099b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099bc:	d81b      	bhi.n	80099f6 <_strtod_l+0x8c6>
 80099be:	0d1b      	lsrs	r3, r3, #20
 80099c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	4299      	cmp	r1, r3
 80099ca:	d119      	bne.n	8009a00 <_strtod_l+0x8d0>
 80099cc:	4b96      	ldr	r3, [pc, #600]	@ (8009c28 <_strtod_l+0xaf8>)
 80099ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d102      	bne.n	80099da <_strtod_l+0x8aa>
 80099d4:	3101      	adds	r1, #1
 80099d6:	f43f adca 	beq.w	800956e <_strtod_l+0x43e>
 80099da:	4b92      	ldr	r3, [pc, #584]	@ (8009c24 <_strtod_l+0xaf4>)
 80099dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099de:	401a      	ands	r2, r3
 80099e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099e4:	f04f 0a00 	mov.w	sl, #0
 80099e8:	9b08      	ldr	r3, [sp, #32]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1b8      	bne.n	8009960 <_strtod_l+0x830>
 80099ee:	e5c9      	b.n	8009584 <_strtod_l+0x454>
 80099f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099f4:	e7e8      	b.n	80099c8 <_strtod_l+0x898>
 80099f6:	4613      	mov	r3, r2
 80099f8:	e7e6      	b.n	80099c8 <_strtod_l+0x898>
 80099fa:	ea53 030a 	orrs.w	r3, r3, sl
 80099fe:	d0a1      	beq.n	8009944 <_strtod_l+0x814>
 8009a00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a02:	b1db      	cbz	r3, 8009a3c <_strtod_l+0x90c>
 8009a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a06:	4213      	tst	r3, r2
 8009a08:	d0ee      	beq.n	80099e8 <_strtod_l+0x8b8>
 8009a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a0c:	9a08      	ldr	r2, [sp, #32]
 8009a0e:	4650      	mov	r0, sl
 8009a10:	4659      	mov	r1, fp
 8009a12:	b1bb      	cbz	r3, 8009a44 <_strtod_l+0x914>
 8009a14:	f7ff fb6e 	bl	80090f4 <sulp>
 8009a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a1c:	ec53 2b10 	vmov	r2, r3, d0
 8009a20:	f7f6 fc34 	bl	800028c <__adddf3>
 8009a24:	4682      	mov	sl, r0
 8009a26:	468b      	mov	fp, r1
 8009a28:	e7de      	b.n	80099e8 <_strtod_l+0x8b8>
 8009a2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a36:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009a3a:	e7d5      	b.n	80099e8 <_strtod_l+0x8b8>
 8009a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a3e:	ea13 0f0a 	tst.w	r3, sl
 8009a42:	e7e1      	b.n	8009a08 <_strtod_l+0x8d8>
 8009a44:	f7ff fb56 	bl	80090f4 <sulp>
 8009a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a4c:	ec53 2b10 	vmov	r2, r3, d0
 8009a50:	f7f6 fc1a 	bl	8000288 <__aeabi_dsub>
 8009a54:	2200      	movs	r2, #0
 8009a56:	2300      	movs	r3, #0
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	f7f7 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0c1      	beq.n	80099e8 <_strtod_l+0x8b8>
 8009a64:	e619      	b.n	800969a <_strtod_l+0x56a>
 8009a66:	4641      	mov	r1, r8
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7ff facd 	bl	8009008 <__ratio>
 8009a6e:	ec57 6b10 	vmov	r6, r7, d0
 8009a72:	2200      	movs	r2, #0
 8009a74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f7 f838 	bl	8000af0 <__aeabi_dcmple>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d06f      	beq.n	8009b64 <_strtod_l+0xa34>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d17a      	bne.n	8009b80 <_strtod_l+0xa50>
 8009a8a:	f1ba 0f00 	cmp.w	sl, #0
 8009a8e:	d158      	bne.n	8009b42 <_strtod_l+0xa12>
 8009a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d15a      	bne.n	8009b50 <_strtod_l+0xa20>
 8009a9a:	4b64      	ldr	r3, [pc, #400]	@ (8009c2c <_strtod_l+0xafc>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f7 f81b 	bl	8000adc <__aeabi_dcmplt>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d159      	bne.n	8009b5e <_strtod_l+0xa2e>
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	4b60      	ldr	r3, [pc, #384]	@ (8009c30 <_strtod_l+0xb00>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009abe:	9606      	str	r6, [sp, #24]
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ac6:	4d57      	ldr	r5, [pc, #348]	@ (8009c24 <_strtod_l+0xaf4>)
 8009ac8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ace:	401d      	ands	r5, r3
 8009ad0:	4b58      	ldr	r3, [pc, #352]	@ (8009c34 <_strtod_l+0xb04>)
 8009ad2:	429d      	cmp	r5, r3
 8009ad4:	f040 80b2 	bne.w	8009c3c <_strtod_l+0xb0c>
 8009ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ada:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ade:	ec4b ab10 	vmov	d0, sl, fp
 8009ae2:	f7ff f9c9 	bl	8008e78 <__ulp>
 8009ae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aea:	ec51 0b10 	vmov	r0, r1, d0
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	4652      	mov	r2, sl
 8009af4:	465b      	mov	r3, fp
 8009af6:	f7f6 fbc9 	bl	800028c <__adddf3>
 8009afa:	460b      	mov	r3, r1
 8009afc:	4949      	ldr	r1, [pc, #292]	@ (8009c24 <_strtod_l+0xaf4>)
 8009afe:	4a4e      	ldr	r2, [pc, #312]	@ (8009c38 <_strtod_l+0xb08>)
 8009b00:	4019      	ands	r1, r3
 8009b02:	4291      	cmp	r1, r2
 8009b04:	4682      	mov	sl, r0
 8009b06:	d942      	bls.n	8009b8e <_strtod_l+0xa5e>
 8009b08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b0a:	4b47      	ldr	r3, [pc, #284]	@ (8009c28 <_strtod_l+0xaf8>)
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d103      	bne.n	8009b18 <_strtod_l+0x9e8>
 8009b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b12:	3301      	adds	r3, #1
 8009b14:	f43f ad2b 	beq.w	800956e <_strtod_l+0x43e>
 8009b18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c28 <_strtod_l+0xaf8>
 8009b1c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009b20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b22:	9805      	ldr	r0, [sp, #20]
 8009b24:	f7fe fe74 	bl	8008810 <_Bfree>
 8009b28:	9805      	ldr	r0, [sp, #20]
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	f7fe fe70 	bl	8008810 <_Bfree>
 8009b30:	9805      	ldr	r0, [sp, #20]
 8009b32:	4641      	mov	r1, r8
 8009b34:	f7fe fe6c 	bl	8008810 <_Bfree>
 8009b38:	9805      	ldr	r0, [sp, #20]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f7fe fe68 	bl	8008810 <_Bfree>
 8009b40:	e618      	b.n	8009774 <_strtod_l+0x644>
 8009b42:	f1ba 0f01 	cmp.w	sl, #1
 8009b46:	d103      	bne.n	8009b50 <_strtod_l+0xa20>
 8009b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f43f ada5 	beq.w	800969a <_strtod_l+0x56a>
 8009b50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c00 <_strtod_l+0xad0>
 8009b54:	4f35      	ldr	r7, [pc, #212]	@ (8009c2c <_strtod_l+0xafc>)
 8009b56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	e7b1      	b.n	8009ac2 <_strtod_l+0x992>
 8009b5e:	4f34      	ldr	r7, [pc, #208]	@ (8009c30 <_strtod_l+0xb00>)
 8009b60:	2600      	movs	r6, #0
 8009b62:	e7aa      	b.n	8009aba <_strtod_l+0x98a>
 8009b64:	4b32      	ldr	r3, [pc, #200]	@ (8009c30 <_strtod_l+0xb00>)
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f7f6 fd44 	bl	80005f8 <__aeabi_dmul>
 8009b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b72:	4606      	mov	r6, r0
 8009b74:	460f      	mov	r7, r1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d09f      	beq.n	8009aba <_strtod_l+0x98a>
 8009b7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b7e:	e7a0      	b.n	8009ac2 <_strtod_l+0x992>
 8009b80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c08 <_strtod_l+0xad8>
 8009b84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b88:	ec57 6b17 	vmov	r6, r7, d7
 8009b8c:	e799      	b.n	8009ac2 <_strtod_l+0x992>
 8009b8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b92:	9b08      	ldr	r3, [sp, #32]
 8009b94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1c1      	bne.n	8009b20 <_strtod_l+0x9f0>
 8009b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ba0:	0d1b      	lsrs	r3, r3, #20
 8009ba2:	051b      	lsls	r3, r3, #20
 8009ba4:	429d      	cmp	r5, r3
 8009ba6:	d1bb      	bne.n	8009b20 <_strtod_l+0x9f0>
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f7 f884 	bl	8000cb8 <__aeabi_d2lz>
 8009bb0:	f7f6 fcf4 	bl	800059c <__aeabi_l2d>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 fb64 	bl	8000288 <__aeabi_dsub>
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bc8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bce:	ea46 060a 	orr.w	r6, r6, sl
 8009bd2:	431e      	orrs	r6, r3
 8009bd4:	d06f      	beq.n	8009cb6 <_strtod_l+0xb86>
 8009bd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c10 <_strtod_l+0xae0>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f47f accf 	bne.w	8009584 <_strtod_l+0x454>
 8009be6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c18 <_strtod_l+0xae8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bf0:	f7f6 ff92 	bl	8000b18 <__aeabi_dcmpgt>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d093      	beq.n	8009b20 <_strtod_l+0x9f0>
 8009bf8:	e4c4      	b.n	8009584 <_strtod_l+0x454>
 8009bfa:	bf00      	nop
 8009bfc:	f3af 8000 	nop.w
 8009c00:	00000000 	.word	0x00000000
 8009c04:	bff00000 	.word	0xbff00000
 8009c08:	00000000 	.word	0x00000000
 8009c0c:	3ff00000 	.word	0x3ff00000
 8009c10:	94a03595 	.word	0x94a03595
 8009c14:	3fdfffff 	.word	0x3fdfffff
 8009c18:	35afe535 	.word	0x35afe535
 8009c1c:	3fe00000 	.word	0x3fe00000
 8009c20:	000fffff 	.word	0x000fffff
 8009c24:	7ff00000 	.word	0x7ff00000
 8009c28:	7fefffff 	.word	0x7fefffff
 8009c2c:	3ff00000 	.word	0x3ff00000
 8009c30:	3fe00000 	.word	0x3fe00000
 8009c34:	7fe00000 	.word	0x7fe00000
 8009c38:	7c9fffff 	.word	0x7c9fffff
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	b323      	cbz	r3, 8009c8a <_strtod_l+0xb5a>
 8009c40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c44:	d821      	bhi.n	8009c8a <_strtod_l+0xb5a>
 8009c46:	a328      	add	r3, pc, #160	@ (adr r3, 8009ce8 <_strtod_l+0xbb8>)
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	4639      	mov	r1, r7
 8009c50:	f7f6 ff4e 	bl	8000af0 <__aeabi_dcmple>
 8009c54:	b1a0      	cbz	r0, 8009c80 <_strtod_l+0xb50>
 8009c56:	4639      	mov	r1, r7
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7f6 ffa5 	bl	8000ba8 <__aeabi_d2uiz>
 8009c5e:	2801      	cmp	r0, #1
 8009c60:	bf38      	it	cc
 8009c62:	2001      	movcc	r0, #1
 8009c64:	f7f6 fc4e 	bl	8000504 <__aeabi_ui2d>
 8009c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460f      	mov	r7, r1
 8009c6e:	b9fb      	cbnz	r3, 8009cb0 <_strtod_l+0xb80>
 8009c70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c74:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c76:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c86:	1b5b      	subs	r3, r3, r5
 8009c88:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c92:	f7ff f8f1 	bl	8008e78 <__ulp>
 8009c96:	4650      	mov	r0, sl
 8009c98:	ec53 2b10 	vmov	r2, r3, d0
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ca6:	f7f6 faf1 	bl	800028c <__adddf3>
 8009caa:	4682      	mov	sl, r0
 8009cac:	468b      	mov	fp, r1
 8009cae:	e770      	b.n	8009b92 <_strtod_l+0xa62>
 8009cb0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cb4:	e7e0      	b.n	8009c78 <_strtod_l+0xb48>
 8009cb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009cf0 <_strtod_l+0xbc0>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 ff0e 	bl	8000adc <__aeabi_dcmplt>
 8009cc0:	e798      	b.n	8009bf4 <_strtod_l+0xac4>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	f7ff ba6d 	b.w	80091aa <_strtod_l+0x7a>
 8009cd0:	2a65      	cmp	r2, #101	@ 0x65
 8009cd2:	f43f ab66 	beq.w	80093a2 <_strtod_l+0x272>
 8009cd6:	2a45      	cmp	r2, #69	@ 0x45
 8009cd8:	f43f ab63 	beq.w	80093a2 <_strtod_l+0x272>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f7ff bb9e 	b.w	800941e <_strtod_l+0x2ee>
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	ffc00000 	.word	0xffc00000
 8009cec:	41dfffff 	.word	0x41dfffff
 8009cf0:	94a03595 	.word	0x94a03595
 8009cf4:	3fcfffff 	.word	0x3fcfffff

08009cf8 <_strtod_r>:
 8009cf8:	4b01      	ldr	r3, [pc, #4]	@ (8009d00 <_strtod_r+0x8>)
 8009cfa:	f7ff ba19 	b.w	8009130 <_strtod_l>
 8009cfe:	bf00      	nop
 8009d00:	2000006c 	.word	0x2000006c

08009d04 <_strtol_l.constprop.0>:
 8009d04:	2b24      	cmp	r3, #36	@ 0x24
 8009d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0a:	4686      	mov	lr, r0
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	d801      	bhi.n	8009d14 <_strtol_l.constprop.0+0x10>
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d106      	bne.n	8009d22 <_strtol_l.constprop.0+0x1e>
 8009d14:	f7fd fdae 	bl	8007874 <__errno>
 8009d18:	2316      	movs	r3, #22
 8009d1a:	6003      	str	r3, [r0, #0]
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d22:	4834      	ldr	r0, [pc, #208]	@ (8009df4 <_strtol_l.constprop.0+0xf0>)
 8009d24:	460d      	mov	r5, r1
 8009d26:	462a      	mov	r2, r5
 8009d28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d2c:	5d06      	ldrb	r6, [r0, r4]
 8009d2e:	f016 0608 	ands.w	r6, r6, #8
 8009d32:	d1f8      	bne.n	8009d26 <_strtol_l.constprop.0+0x22>
 8009d34:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d36:	d12d      	bne.n	8009d94 <_strtol_l.constprop.0+0x90>
 8009d38:	782c      	ldrb	r4, [r5, #0]
 8009d3a:	2601      	movs	r6, #1
 8009d3c:	1c95      	adds	r5, r2, #2
 8009d3e:	f033 0210 	bics.w	r2, r3, #16
 8009d42:	d109      	bne.n	8009d58 <_strtol_l.constprop.0+0x54>
 8009d44:	2c30      	cmp	r4, #48	@ 0x30
 8009d46:	d12a      	bne.n	8009d9e <_strtol_l.constprop.0+0x9a>
 8009d48:	782a      	ldrb	r2, [r5, #0]
 8009d4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d4e:	2a58      	cmp	r2, #88	@ 0x58
 8009d50:	d125      	bne.n	8009d9e <_strtol_l.constprop.0+0x9a>
 8009d52:	786c      	ldrb	r4, [r5, #1]
 8009d54:	2310      	movs	r3, #16
 8009d56:	3502      	adds	r5, #2
 8009d58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d5c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009d60:	2200      	movs	r2, #0
 8009d62:	fbbc f9f3 	udiv	r9, ip, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d70:	2f09      	cmp	r7, #9
 8009d72:	d81b      	bhi.n	8009dac <_strtol_l.constprop.0+0xa8>
 8009d74:	463c      	mov	r4, r7
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	dd27      	ble.n	8009dca <_strtol_l.constprop.0+0xc6>
 8009d7a:	1c57      	adds	r7, r2, #1
 8009d7c:	d007      	beq.n	8009d8e <_strtol_l.constprop.0+0x8a>
 8009d7e:	4581      	cmp	r9, r0
 8009d80:	d320      	bcc.n	8009dc4 <_strtol_l.constprop.0+0xc0>
 8009d82:	d101      	bne.n	8009d88 <_strtol_l.constprop.0+0x84>
 8009d84:	45a2      	cmp	sl, r4
 8009d86:	db1d      	blt.n	8009dc4 <_strtol_l.constprop.0+0xc0>
 8009d88:	fb00 4003 	mla	r0, r0, r3, r4
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d92:	e7eb      	b.n	8009d6c <_strtol_l.constprop.0+0x68>
 8009d94:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d96:	bf04      	itt	eq
 8009d98:	782c      	ldrbeq	r4, [r5, #0]
 8009d9a:	1c95      	addeq	r5, r2, #2
 8009d9c:	e7cf      	b.n	8009d3e <_strtol_l.constprop.0+0x3a>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1da      	bne.n	8009d58 <_strtol_l.constprop.0+0x54>
 8009da2:	2c30      	cmp	r4, #48	@ 0x30
 8009da4:	bf0c      	ite	eq
 8009da6:	2308      	moveq	r3, #8
 8009da8:	230a      	movne	r3, #10
 8009daa:	e7d5      	b.n	8009d58 <_strtol_l.constprop.0+0x54>
 8009dac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009db0:	2f19      	cmp	r7, #25
 8009db2:	d801      	bhi.n	8009db8 <_strtol_l.constprop.0+0xb4>
 8009db4:	3c37      	subs	r4, #55	@ 0x37
 8009db6:	e7de      	b.n	8009d76 <_strtol_l.constprop.0+0x72>
 8009db8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009dbc:	2f19      	cmp	r7, #25
 8009dbe:	d804      	bhi.n	8009dca <_strtol_l.constprop.0+0xc6>
 8009dc0:	3c57      	subs	r4, #87	@ 0x57
 8009dc2:	e7d8      	b.n	8009d76 <_strtol_l.constprop.0+0x72>
 8009dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dc8:	e7e1      	b.n	8009d8e <_strtol_l.constprop.0+0x8a>
 8009dca:	1c53      	adds	r3, r2, #1
 8009dcc:	d108      	bne.n	8009de0 <_strtol_l.constprop.0+0xdc>
 8009dce:	2322      	movs	r3, #34	@ 0x22
 8009dd0:	f8ce 3000 	str.w	r3, [lr]
 8009dd4:	4660      	mov	r0, ip
 8009dd6:	f1b8 0f00 	cmp.w	r8, #0
 8009dda:	d0a0      	beq.n	8009d1e <_strtol_l.constprop.0+0x1a>
 8009ddc:	1e69      	subs	r1, r5, #1
 8009dde:	e006      	b.n	8009dee <_strtol_l.constprop.0+0xea>
 8009de0:	b106      	cbz	r6, 8009de4 <_strtol_l.constprop.0+0xe0>
 8009de2:	4240      	negs	r0, r0
 8009de4:	f1b8 0f00 	cmp.w	r8, #0
 8009de8:	d099      	beq.n	8009d1e <_strtol_l.constprop.0+0x1a>
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	d1f6      	bne.n	8009ddc <_strtol_l.constprop.0+0xd8>
 8009dee:	f8c8 1000 	str.w	r1, [r8]
 8009df2:	e794      	b.n	8009d1e <_strtol_l.constprop.0+0x1a>
 8009df4:	0800b319 	.word	0x0800b319

08009df8 <_strtol_r>:
 8009df8:	f7ff bf84 	b.w	8009d04 <_strtol_l.constprop.0>

08009dfc <__ssputs_r>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	688e      	ldr	r6, [r1, #8]
 8009e02:	461f      	mov	r7, r3
 8009e04:	42be      	cmp	r6, r7
 8009e06:	680b      	ldr	r3, [r1, #0]
 8009e08:	4682      	mov	sl, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	4690      	mov	r8, r2
 8009e0e:	d82d      	bhi.n	8009e6c <__ssputs_r+0x70>
 8009e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e18:	d026      	beq.n	8009e68 <__ssputs_r+0x6c>
 8009e1a:	6965      	ldr	r5, [r4, #20]
 8009e1c:	6909      	ldr	r1, [r1, #16]
 8009e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e22:	eba3 0901 	sub.w	r9, r3, r1
 8009e26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e2a:	1c7b      	adds	r3, r7, #1
 8009e2c:	444b      	add	r3, r9
 8009e2e:	106d      	asrs	r5, r5, #1
 8009e30:	429d      	cmp	r5, r3
 8009e32:	bf38      	it	cc
 8009e34:	461d      	movcc	r5, r3
 8009e36:	0553      	lsls	r3, r2, #21
 8009e38:	d527      	bpl.n	8009e8a <__ssputs_r+0x8e>
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f7fe fc1c 	bl	8008678 <_malloc_r>
 8009e40:	4606      	mov	r6, r0
 8009e42:	b360      	cbz	r0, 8009e9e <__ssputs_r+0xa2>
 8009e44:	6921      	ldr	r1, [r4, #16]
 8009e46:	464a      	mov	r2, r9
 8009e48:	f7fd fd41 	bl	80078ce <memcpy>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	6126      	str	r6, [r4, #16]
 8009e5a:	6165      	str	r5, [r4, #20]
 8009e5c:	444e      	add	r6, r9
 8009e5e:	eba5 0509 	sub.w	r5, r5, r9
 8009e62:	6026      	str	r6, [r4, #0]
 8009e64:	60a5      	str	r5, [r4, #8]
 8009e66:	463e      	mov	r6, r7
 8009e68:	42be      	cmp	r6, r7
 8009e6a:	d900      	bls.n	8009e6e <__ssputs_r+0x72>
 8009e6c:	463e      	mov	r6, r7
 8009e6e:	6820      	ldr	r0, [r4, #0]
 8009e70:	4632      	mov	r2, r6
 8009e72:	4641      	mov	r1, r8
 8009e74:	f000 f9c6 	bl	800a204 <memmove>
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	1b9b      	subs	r3, r3, r6
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	4433      	add	r3, r6
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	2000      	movs	r0, #0
 8009e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	f000 fd7d 	bl	800a98a <_realloc_r>
 8009e90:	4606      	mov	r6, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d1e0      	bne.n	8009e58 <__ssputs_r+0x5c>
 8009e96:	6921      	ldr	r1, [r4, #16]
 8009e98:	4650      	mov	r0, sl
 8009e9a:	f7fe fb79 	bl	8008590 <_free_r>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	f8ca 3000 	str.w	r3, [sl]
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eb0:	e7e9      	b.n	8009e86 <__ssputs_r+0x8a>
	...

08009eb4 <_svfiprintf_r>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	4698      	mov	r8, r3
 8009eba:	898b      	ldrh	r3, [r1, #12]
 8009ebc:	061b      	lsls	r3, r3, #24
 8009ebe:	b09d      	sub	sp, #116	@ 0x74
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	d510      	bpl.n	8009eea <_svfiprintf_r+0x36>
 8009ec8:	690b      	ldr	r3, [r1, #16]
 8009eca:	b973      	cbnz	r3, 8009eea <_svfiprintf_r+0x36>
 8009ecc:	2140      	movs	r1, #64	@ 0x40
 8009ece:	f7fe fbd3 	bl	8008678 <_malloc_r>
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	6128      	str	r0, [r5, #16]
 8009ed6:	b930      	cbnz	r0, 8009ee6 <_svfiprintf_r+0x32>
 8009ed8:	230c      	movs	r3, #12
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ee0:	b01d      	add	sp, #116	@ 0x74
 8009ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee6:	2340      	movs	r3, #64	@ 0x40
 8009ee8:	616b      	str	r3, [r5, #20]
 8009eea:	2300      	movs	r3, #0
 8009eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eee:	2320      	movs	r3, #32
 8009ef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef8:	2330      	movs	r3, #48	@ 0x30
 8009efa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a098 <_svfiprintf_r+0x1e4>
 8009efe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f02:	f04f 0901 	mov.w	r9, #1
 8009f06:	4623      	mov	r3, r4
 8009f08:	469a      	mov	sl, r3
 8009f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0e:	b10a      	cbz	r2, 8009f14 <_svfiprintf_r+0x60>
 8009f10:	2a25      	cmp	r2, #37	@ 0x25
 8009f12:	d1f9      	bne.n	8009f08 <_svfiprintf_r+0x54>
 8009f14:	ebba 0b04 	subs.w	fp, sl, r4
 8009f18:	d00b      	beq.n	8009f32 <_svfiprintf_r+0x7e>
 8009f1a:	465b      	mov	r3, fp
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	4638      	mov	r0, r7
 8009f22:	f7ff ff6b 	bl	8009dfc <__ssputs_r>
 8009f26:	3001      	adds	r0, #1
 8009f28:	f000 80a7 	beq.w	800a07a <_svfiprintf_r+0x1c6>
 8009f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f2e:	445a      	add	r2, fp
 8009f30:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f32:	f89a 3000 	ldrb.w	r3, [sl]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 809f 	beq.w	800a07a <_svfiprintf_r+0x1c6>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f46:	f10a 0a01 	add.w	sl, sl, #1
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f52:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f54:	4654      	mov	r4, sl
 8009f56:	2205      	movs	r2, #5
 8009f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5c:	484e      	ldr	r0, [pc, #312]	@ (800a098 <_svfiprintf_r+0x1e4>)
 8009f5e:	f7f6 f937 	bl	80001d0 <memchr>
 8009f62:	9a04      	ldr	r2, [sp, #16]
 8009f64:	b9d8      	cbnz	r0, 8009f9e <_svfiprintf_r+0xea>
 8009f66:	06d0      	lsls	r0, r2, #27
 8009f68:	bf44      	itt	mi
 8009f6a:	2320      	movmi	r3, #32
 8009f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f70:	0711      	lsls	r1, r2, #28
 8009f72:	bf44      	itt	mi
 8009f74:	232b      	movmi	r3, #43	@ 0x2b
 8009f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f80:	d015      	beq.n	8009fae <_svfiprintf_r+0xfa>
 8009f82:	9a07      	ldr	r2, [sp, #28]
 8009f84:	4654      	mov	r4, sl
 8009f86:	2000      	movs	r0, #0
 8009f88:	f04f 0c0a 	mov.w	ip, #10
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f92:	3b30      	subs	r3, #48	@ 0x30
 8009f94:	2b09      	cmp	r3, #9
 8009f96:	d94b      	bls.n	800a030 <_svfiprintf_r+0x17c>
 8009f98:	b1b0      	cbz	r0, 8009fc8 <_svfiprintf_r+0x114>
 8009f9a:	9207      	str	r2, [sp, #28]
 8009f9c:	e014      	b.n	8009fc8 <_svfiprintf_r+0x114>
 8009f9e:	eba0 0308 	sub.w	r3, r0, r8
 8009fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	46a2      	mov	sl, r4
 8009fac:	e7d2      	b.n	8009f54 <_svfiprintf_r+0xa0>
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	1d19      	adds	r1, r3, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	9103      	str	r1, [sp, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bfbb      	ittet	lt
 8009fba:	425b      	neglt	r3, r3
 8009fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8009fc0:	9307      	strge	r3, [sp, #28]
 8009fc2:	9307      	strlt	r3, [sp, #28]
 8009fc4:	bfb8      	it	lt
 8009fc6:	9204      	strlt	r2, [sp, #16]
 8009fc8:	7823      	ldrb	r3, [r4, #0]
 8009fca:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fcc:	d10a      	bne.n	8009fe4 <_svfiprintf_r+0x130>
 8009fce:	7863      	ldrb	r3, [r4, #1]
 8009fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fd2:	d132      	bne.n	800a03a <_svfiprintf_r+0x186>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9203      	str	r2, [sp, #12]
 8009fdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fe0:	3402      	adds	r4, #2
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0a8 <_svfiprintf_r+0x1f4>
 8009fe8:	7821      	ldrb	r1, [r4, #0]
 8009fea:	2203      	movs	r2, #3
 8009fec:	4650      	mov	r0, sl
 8009fee:	f7f6 f8ef 	bl	80001d0 <memchr>
 8009ff2:	b138      	cbz	r0, 800a004 <_svfiprintf_r+0x150>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	eba0 000a 	sub.w	r0, r0, sl
 8009ffa:	2240      	movs	r2, #64	@ 0x40
 8009ffc:	4082      	lsls	r2, r0
 8009ffe:	4313      	orrs	r3, r2
 800a000:	3401      	adds	r4, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a008:	4824      	ldr	r0, [pc, #144]	@ (800a09c <_svfiprintf_r+0x1e8>)
 800a00a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a00e:	2206      	movs	r2, #6
 800a010:	f7f6 f8de 	bl	80001d0 <memchr>
 800a014:	2800      	cmp	r0, #0
 800a016:	d036      	beq.n	800a086 <_svfiprintf_r+0x1d2>
 800a018:	4b21      	ldr	r3, [pc, #132]	@ (800a0a0 <_svfiprintf_r+0x1ec>)
 800a01a:	bb1b      	cbnz	r3, 800a064 <_svfiprintf_r+0x1b0>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	3307      	adds	r3, #7
 800a020:	f023 0307 	bic.w	r3, r3, #7
 800a024:	3308      	adds	r3, #8
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a02a:	4433      	add	r3, r6
 800a02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02e:	e76a      	b.n	8009f06 <_svfiprintf_r+0x52>
 800a030:	fb0c 3202 	mla	r2, ip, r2, r3
 800a034:	460c      	mov	r4, r1
 800a036:	2001      	movs	r0, #1
 800a038:	e7a8      	b.n	8009f8c <_svfiprintf_r+0xd8>
 800a03a:	2300      	movs	r3, #0
 800a03c:	3401      	adds	r4, #1
 800a03e:	9305      	str	r3, [sp, #20]
 800a040:	4619      	mov	r1, r3
 800a042:	f04f 0c0a 	mov.w	ip, #10
 800a046:	4620      	mov	r0, r4
 800a048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04c:	3a30      	subs	r2, #48	@ 0x30
 800a04e:	2a09      	cmp	r2, #9
 800a050:	d903      	bls.n	800a05a <_svfiprintf_r+0x1a6>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0c6      	beq.n	8009fe4 <_svfiprintf_r+0x130>
 800a056:	9105      	str	r1, [sp, #20]
 800a058:	e7c4      	b.n	8009fe4 <_svfiprintf_r+0x130>
 800a05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a05e:	4604      	mov	r4, r0
 800a060:	2301      	movs	r3, #1
 800a062:	e7f0      	b.n	800a046 <_svfiprintf_r+0x192>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	462a      	mov	r2, r5
 800a06a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a4 <_svfiprintf_r+0x1f0>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4638      	mov	r0, r7
 800a070:	f7fc fc88 	bl	8006984 <_printf_float>
 800a074:	1c42      	adds	r2, r0, #1
 800a076:	4606      	mov	r6, r0
 800a078:	d1d6      	bne.n	800a028 <_svfiprintf_r+0x174>
 800a07a:	89ab      	ldrh	r3, [r5, #12]
 800a07c:	065b      	lsls	r3, r3, #25
 800a07e:	f53f af2d 	bmi.w	8009edc <_svfiprintf_r+0x28>
 800a082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a084:	e72c      	b.n	8009ee0 <_svfiprintf_r+0x2c>
 800a086:	ab03      	add	r3, sp, #12
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	462a      	mov	r2, r5
 800a08c:	4b05      	ldr	r3, [pc, #20]	@ (800a0a4 <_svfiprintf_r+0x1f0>)
 800a08e:	a904      	add	r1, sp, #16
 800a090:	4638      	mov	r0, r7
 800a092:	f7fc ff0f 	bl	8006eb4 <_printf_i>
 800a096:	e7ed      	b.n	800a074 <_svfiprintf_r+0x1c0>
 800a098:	0800b419 	.word	0x0800b419
 800a09c:	0800b423 	.word	0x0800b423
 800a0a0:	08006985 	.word	0x08006985
 800a0a4:	08009dfd 	.word	0x08009dfd
 800a0a8:	0800b41f 	.word	0x0800b41f

0800a0ac <__sflush_r>:
 800a0ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b4:	0716      	lsls	r6, r2, #28
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	d454      	bmi.n	800a166 <__sflush_r+0xba>
 800a0bc:	684b      	ldr	r3, [r1, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dc02      	bgt.n	800a0c8 <__sflush_r+0x1c>
 800a0c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd48      	ble.n	800a15a <__sflush_r+0xae>
 800a0c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	d045      	beq.n	800a15a <__sflush_r+0xae>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0d4:	682f      	ldr	r7, [r5, #0]
 800a0d6:	6a21      	ldr	r1, [r4, #32]
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	d030      	beq.n	800a13e <__sflush_r+0x92>
 800a0dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	0759      	lsls	r1, r3, #29
 800a0e2:	d505      	bpl.n	800a0f0 <__sflush_r+0x44>
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0ea:	b10b      	cbz	r3, 800a0f0 <__sflush_r+0x44>
 800a0ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0f4:	6a21      	ldr	r1, [r4, #32]
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	47b0      	blx	r6
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	d106      	bne.n	800a10e <__sflush_r+0x62>
 800a100:	6829      	ldr	r1, [r5, #0]
 800a102:	291d      	cmp	r1, #29
 800a104:	d82b      	bhi.n	800a15e <__sflush_r+0xb2>
 800a106:	4a2a      	ldr	r2, [pc, #168]	@ (800a1b0 <__sflush_r+0x104>)
 800a108:	410a      	asrs	r2, r1
 800a10a:	07d6      	lsls	r6, r2, #31
 800a10c:	d427      	bmi.n	800a15e <__sflush_r+0xb2>
 800a10e:	2200      	movs	r2, #0
 800a110:	6062      	str	r2, [r4, #4]
 800a112:	04d9      	lsls	r1, r3, #19
 800a114:	6922      	ldr	r2, [r4, #16]
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	d504      	bpl.n	800a124 <__sflush_r+0x78>
 800a11a:	1c42      	adds	r2, r0, #1
 800a11c:	d101      	bne.n	800a122 <__sflush_r+0x76>
 800a11e:	682b      	ldr	r3, [r5, #0]
 800a120:	b903      	cbnz	r3, 800a124 <__sflush_r+0x78>
 800a122:	6560      	str	r0, [r4, #84]	@ 0x54
 800a124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a126:	602f      	str	r7, [r5, #0]
 800a128:	b1b9      	cbz	r1, 800a15a <__sflush_r+0xae>
 800a12a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a12e:	4299      	cmp	r1, r3
 800a130:	d002      	beq.n	800a138 <__sflush_r+0x8c>
 800a132:	4628      	mov	r0, r5
 800a134:	f7fe fa2c 	bl	8008590 <_free_r>
 800a138:	2300      	movs	r3, #0
 800a13a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a13c:	e00d      	b.n	800a15a <__sflush_r+0xae>
 800a13e:	2301      	movs	r3, #1
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	4602      	mov	r2, r0
 800a146:	1c50      	adds	r0, r2, #1
 800a148:	d1c9      	bne.n	800a0de <__sflush_r+0x32>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0c6      	beq.n	800a0de <__sflush_r+0x32>
 800a150:	2b1d      	cmp	r3, #29
 800a152:	d001      	beq.n	800a158 <__sflush_r+0xac>
 800a154:	2b16      	cmp	r3, #22
 800a156:	d11e      	bne.n	800a196 <__sflush_r+0xea>
 800a158:	602f      	str	r7, [r5, #0]
 800a15a:	2000      	movs	r0, #0
 800a15c:	e022      	b.n	800a1a4 <__sflush_r+0xf8>
 800a15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a162:	b21b      	sxth	r3, r3
 800a164:	e01b      	b.n	800a19e <__sflush_r+0xf2>
 800a166:	690f      	ldr	r7, [r1, #16]
 800a168:	2f00      	cmp	r7, #0
 800a16a:	d0f6      	beq.n	800a15a <__sflush_r+0xae>
 800a16c:	0793      	lsls	r3, r2, #30
 800a16e:	680e      	ldr	r6, [r1, #0]
 800a170:	bf08      	it	eq
 800a172:	694b      	ldreq	r3, [r1, #20]
 800a174:	600f      	str	r7, [r1, #0]
 800a176:	bf18      	it	ne
 800a178:	2300      	movne	r3, #0
 800a17a:	eba6 0807 	sub.w	r8, r6, r7
 800a17e:	608b      	str	r3, [r1, #8]
 800a180:	f1b8 0f00 	cmp.w	r8, #0
 800a184:	dde9      	ble.n	800a15a <__sflush_r+0xae>
 800a186:	6a21      	ldr	r1, [r4, #32]
 800a188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a18a:	4643      	mov	r3, r8
 800a18c:	463a      	mov	r2, r7
 800a18e:	4628      	mov	r0, r5
 800a190:	47b0      	blx	r6
 800a192:	2800      	cmp	r0, #0
 800a194:	dc08      	bgt.n	800a1a8 <__sflush_r+0xfc>
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a8:	4407      	add	r7, r0
 800a1aa:	eba8 0800 	sub.w	r8, r8, r0
 800a1ae:	e7e7      	b.n	800a180 <__sflush_r+0xd4>
 800a1b0:	dfbffffe 	.word	0xdfbffffe

0800a1b4 <_fflush_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	690b      	ldr	r3, [r1, #16]
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	b913      	cbnz	r3, 800a1c4 <_fflush_r+0x10>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	b118      	cbz	r0, 800a1ce <_fflush_r+0x1a>
 800a1c6:	6a03      	ldr	r3, [r0, #32]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <_fflush_r+0x1a>
 800a1ca:	f7fd fa33 	bl	8007634 <__sinit>
 800a1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0f3      	beq.n	800a1be <_fflush_r+0xa>
 800a1d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1d8:	07d0      	lsls	r0, r2, #31
 800a1da:	d404      	bmi.n	800a1e6 <_fflush_r+0x32>
 800a1dc:	0599      	lsls	r1, r3, #22
 800a1de:	d402      	bmi.n	800a1e6 <_fflush_r+0x32>
 800a1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1e2:	f7fd fb72 	bl	80078ca <__retarget_lock_acquire_recursive>
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	f7ff ff5f 	bl	800a0ac <__sflush_r>
 800a1ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1f0:	07da      	lsls	r2, r3, #31
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	d4e4      	bmi.n	800a1c0 <_fflush_r+0xc>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	059b      	lsls	r3, r3, #22
 800a1fa:	d4e1      	bmi.n	800a1c0 <_fflush_r+0xc>
 800a1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fe:	f7fd fb65 	bl	80078cc <__retarget_lock_release_recursive>
 800a202:	e7dd      	b.n	800a1c0 <_fflush_r+0xc>

0800a204 <memmove>:
 800a204:	4288      	cmp	r0, r1
 800a206:	b510      	push	{r4, lr}
 800a208:	eb01 0402 	add.w	r4, r1, r2
 800a20c:	d902      	bls.n	800a214 <memmove+0x10>
 800a20e:	4284      	cmp	r4, r0
 800a210:	4623      	mov	r3, r4
 800a212:	d807      	bhi.n	800a224 <memmove+0x20>
 800a214:	1e43      	subs	r3, r0, #1
 800a216:	42a1      	cmp	r1, r4
 800a218:	d008      	beq.n	800a22c <memmove+0x28>
 800a21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a222:	e7f8      	b.n	800a216 <memmove+0x12>
 800a224:	4402      	add	r2, r0
 800a226:	4601      	mov	r1, r0
 800a228:	428a      	cmp	r2, r1
 800a22a:	d100      	bne.n	800a22e <memmove+0x2a>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a236:	e7f7      	b.n	800a228 <memmove+0x24>

0800a238 <strncmp>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	b16a      	cbz	r2, 800a258 <strncmp+0x20>
 800a23c:	3901      	subs	r1, #1
 800a23e:	1884      	adds	r4, r0, r2
 800a240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a248:	429a      	cmp	r2, r3
 800a24a:	d103      	bne.n	800a254 <strncmp+0x1c>
 800a24c:	42a0      	cmp	r0, r4
 800a24e:	d001      	beq.n	800a254 <strncmp+0x1c>
 800a250:	2a00      	cmp	r2, #0
 800a252:	d1f5      	bne.n	800a240 <strncmp+0x8>
 800a254:	1ad0      	subs	r0, r2, r3
 800a256:	bd10      	pop	{r4, pc}
 800a258:	4610      	mov	r0, r2
 800a25a:	e7fc      	b.n	800a256 <strncmp+0x1e>

0800a25c <_sbrk_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d06      	ldr	r5, [pc, #24]	@ (800a278 <_sbrk_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	f7f7 f8fe 	bl	8001468 <_sbrk>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_sbrk_r+0x1a>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_sbrk_r+0x1a>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	20001688 	.word	0x20001688
 800a27c:	00000000 	.word	0x00000000

0800a280 <nan>:
 800a280:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a288 <nan+0x8>
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	00000000 	.word	0x00000000
 800a28c:	7ff80000 	.word	0x7ff80000

0800a290 <__assert_func>:
 800a290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a292:	4614      	mov	r4, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <__assert_func+0x2c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4605      	mov	r5, r0
 800a29c:	68d8      	ldr	r0, [r3, #12]
 800a29e:	b954      	cbnz	r4, 800a2b6 <__assert_func+0x26>
 800a2a0:	4b07      	ldr	r3, [pc, #28]	@ (800a2c0 <__assert_func+0x30>)
 800a2a2:	461c      	mov	r4, r3
 800a2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a8:	9100      	str	r1, [sp, #0]
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	4905      	ldr	r1, [pc, #20]	@ (800a2c4 <__assert_func+0x34>)
 800a2ae:	f000 fba7 	bl	800aa00 <fiprintf>
 800a2b2:	f000 fbb7 	bl	800aa24 <abort>
 800a2b6:	4b04      	ldr	r3, [pc, #16]	@ (800a2c8 <__assert_func+0x38>)
 800a2b8:	e7f4      	b.n	800a2a4 <__assert_func+0x14>
 800a2ba:	bf00      	nop
 800a2bc:	2000001c 	.word	0x2000001c
 800a2c0:	0800b46d 	.word	0x0800b46d
 800a2c4:	0800b43f 	.word	0x0800b43f
 800a2c8:	0800b432 	.word	0x0800b432

0800a2cc <_calloc_r>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	fba1 5402 	umull	r5, r4, r1, r2
 800a2d2:	b93c      	cbnz	r4, 800a2e4 <_calloc_r+0x18>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	f7fe f9cf 	bl	8008678 <_malloc_r>
 800a2da:	4606      	mov	r6, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <_calloc_r+0x1e>
 800a2de:	2600      	movs	r6, #0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	220c      	movs	r2, #12
 800a2e6:	6002      	str	r2, [r0, #0]
 800a2e8:	e7f9      	b.n	800a2de <_calloc_r+0x12>
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	f7fd fa6e 	bl	80077ce <memset>
 800a2f2:	e7f5      	b.n	800a2e0 <_calloc_r+0x14>

0800a2f4 <rshift>:
 800a2f4:	6903      	ldr	r3, [r0, #16]
 800a2f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a302:	f100 0414 	add.w	r4, r0, #20
 800a306:	dd45      	ble.n	800a394 <rshift+0xa0>
 800a308:	f011 011f 	ands.w	r1, r1, #31
 800a30c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a310:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a314:	d10c      	bne.n	800a330 <rshift+0x3c>
 800a316:	f100 0710 	add.w	r7, r0, #16
 800a31a:	4629      	mov	r1, r5
 800a31c:	42b1      	cmp	r1, r6
 800a31e:	d334      	bcc.n	800a38a <rshift+0x96>
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	1eea      	subs	r2, r5, #3
 800a326:	4296      	cmp	r6, r2
 800a328:	bf38      	it	cc
 800a32a:	2300      	movcc	r3, #0
 800a32c:	4423      	add	r3, r4
 800a32e:	e015      	b.n	800a35c <rshift+0x68>
 800a330:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a334:	f1c1 0820 	rsb	r8, r1, #32
 800a338:	40cf      	lsrs	r7, r1
 800a33a:	f105 0e04 	add.w	lr, r5, #4
 800a33e:	46a1      	mov	r9, r4
 800a340:	4576      	cmp	r6, lr
 800a342:	46f4      	mov	ip, lr
 800a344:	d815      	bhi.n	800a372 <rshift+0x7e>
 800a346:	1a9a      	subs	r2, r3, r2
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	3a04      	subs	r2, #4
 800a34c:	3501      	adds	r5, #1
 800a34e:	42ae      	cmp	r6, r5
 800a350:	bf38      	it	cc
 800a352:	2200      	movcc	r2, #0
 800a354:	18a3      	adds	r3, r4, r2
 800a356:	50a7      	str	r7, [r4, r2]
 800a358:	b107      	cbz	r7, 800a35c <rshift+0x68>
 800a35a:	3304      	adds	r3, #4
 800a35c:	1b1a      	subs	r2, r3, r4
 800a35e:	42a3      	cmp	r3, r4
 800a360:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a364:	bf08      	it	eq
 800a366:	2300      	moveq	r3, #0
 800a368:	6102      	str	r2, [r0, #16]
 800a36a:	bf08      	it	eq
 800a36c:	6143      	streq	r3, [r0, #20]
 800a36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a372:	f8dc c000 	ldr.w	ip, [ip]
 800a376:	fa0c fc08 	lsl.w	ip, ip, r8
 800a37a:	ea4c 0707 	orr.w	r7, ip, r7
 800a37e:	f849 7b04 	str.w	r7, [r9], #4
 800a382:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a386:	40cf      	lsrs	r7, r1
 800a388:	e7da      	b.n	800a340 <rshift+0x4c>
 800a38a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a38e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a392:	e7c3      	b.n	800a31c <rshift+0x28>
 800a394:	4623      	mov	r3, r4
 800a396:	e7e1      	b.n	800a35c <rshift+0x68>

0800a398 <__hexdig_fun>:
 800a398:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a39c:	2b09      	cmp	r3, #9
 800a39e:	d802      	bhi.n	800a3a6 <__hexdig_fun+0xe>
 800a3a0:	3820      	subs	r0, #32
 800a3a2:	b2c0      	uxtb	r0, r0
 800a3a4:	4770      	bx	lr
 800a3a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d801      	bhi.n	800a3b2 <__hexdig_fun+0x1a>
 800a3ae:	3847      	subs	r0, #71	@ 0x47
 800a3b0:	e7f7      	b.n	800a3a2 <__hexdig_fun+0xa>
 800a3b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a3b6:	2b05      	cmp	r3, #5
 800a3b8:	d801      	bhi.n	800a3be <__hexdig_fun+0x26>
 800a3ba:	3827      	subs	r0, #39	@ 0x27
 800a3bc:	e7f1      	b.n	800a3a2 <__hexdig_fun+0xa>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <__gethex>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	468a      	mov	sl, r1
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	680b      	ldr	r3, [r1, #0]
 800a3d0:	9001      	str	r0, [sp, #4]
 800a3d2:	4690      	mov	r8, r2
 800a3d4:	1c9c      	adds	r4, r3, #2
 800a3d6:	46a1      	mov	r9, r4
 800a3d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3dc:	2830      	cmp	r0, #48	@ 0x30
 800a3de:	d0fa      	beq.n	800a3d6 <__gethex+0x12>
 800a3e0:	eba9 0303 	sub.w	r3, r9, r3
 800a3e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3e8:	f7ff ffd6 	bl	800a398 <__hexdig_fun>
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d168      	bne.n	800a4c4 <__gethex+0x100>
 800a3f2:	49a0      	ldr	r1, [pc, #640]	@ (800a674 <__gethex+0x2b0>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	4648      	mov	r0, r9
 800a3f8:	f7ff ff1e 	bl	800a238 <strncmp>
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d167      	bne.n	800a4d2 <__gethex+0x10e>
 800a402:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a406:	4626      	mov	r6, r4
 800a408:	f7ff ffc6 	bl	800a398 <__hexdig_fun>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d062      	beq.n	800a4d6 <__gethex+0x112>
 800a410:	4623      	mov	r3, r4
 800a412:	7818      	ldrb	r0, [r3, #0]
 800a414:	2830      	cmp	r0, #48	@ 0x30
 800a416:	4699      	mov	r9, r3
 800a418:	f103 0301 	add.w	r3, r3, #1
 800a41c:	d0f9      	beq.n	800a412 <__gethex+0x4e>
 800a41e:	f7ff ffbb 	bl	800a398 <__hexdig_fun>
 800a422:	fab0 f580 	clz	r5, r0
 800a426:	096d      	lsrs	r5, r5, #5
 800a428:	f04f 0b01 	mov.w	fp, #1
 800a42c:	464a      	mov	r2, r9
 800a42e:	4616      	mov	r6, r2
 800a430:	3201      	adds	r2, #1
 800a432:	7830      	ldrb	r0, [r6, #0]
 800a434:	f7ff ffb0 	bl	800a398 <__hexdig_fun>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1f8      	bne.n	800a42e <__gethex+0x6a>
 800a43c:	498d      	ldr	r1, [pc, #564]	@ (800a674 <__gethex+0x2b0>)
 800a43e:	2201      	movs	r2, #1
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff fef9 	bl	800a238 <strncmp>
 800a446:	2800      	cmp	r0, #0
 800a448:	d13f      	bne.n	800a4ca <__gethex+0x106>
 800a44a:	b944      	cbnz	r4, 800a45e <__gethex+0x9a>
 800a44c:	1c74      	adds	r4, r6, #1
 800a44e:	4622      	mov	r2, r4
 800a450:	4616      	mov	r6, r2
 800a452:	3201      	adds	r2, #1
 800a454:	7830      	ldrb	r0, [r6, #0]
 800a456:	f7ff ff9f 	bl	800a398 <__hexdig_fun>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1f8      	bne.n	800a450 <__gethex+0x8c>
 800a45e:	1ba4      	subs	r4, r4, r6
 800a460:	00a7      	lsls	r7, r4, #2
 800a462:	7833      	ldrb	r3, [r6, #0]
 800a464:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a468:	2b50      	cmp	r3, #80	@ 0x50
 800a46a:	d13e      	bne.n	800a4ea <__gethex+0x126>
 800a46c:	7873      	ldrb	r3, [r6, #1]
 800a46e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a470:	d033      	beq.n	800a4da <__gethex+0x116>
 800a472:	2b2d      	cmp	r3, #45	@ 0x2d
 800a474:	d034      	beq.n	800a4e0 <__gethex+0x11c>
 800a476:	1c71      	adds	r1, r6, #1
 800a478:	2400      	movs	r4, #0
 800a47a:	7808      	ldrb	r0, [r1, #0]
 800a47c:	f7ff ff8c 	bl	800a398 <__hexdig_fun>
 800a480:	1e43      	subs	r3, r0, #1
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b18      	cmp	r3, #24
 800a486:	d830      	bhi.n	800a4ea <__gethex+0x126>
 800a488:	f1a0 0210 	sub.w	r2, r0, #16
 800a48c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a490:	f7ff ff82 	bl	800a398 <__hexdig_fun>
 800a494:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a498:	fa5f fc8c 	uxtb.w	ip, ip
 800a49c:	f1bc 0f18 	cmp.w	ip, #24
 800a4a0:	f04f 030a 	mov.w	r3, #10
 800a4a4:	d91e      	bls.n	800a4e4 <__gethex+0x120>
 800a4a6:	b104      	cbz	r4, 800a4aa <__gethex+0xe6>
 800a4a8:	4252      	negs	r2, r2
 800a4aa:	4417      	add	r7, r2
 800a4ac:	f8ca 1000 	str.w	r1, [sl]
 800a4b0:	b1ed      	cbz	r5, 800a4ee <__gethex+0x12a>
 800a4b2:	f1bb 0f00 	cmp.w	fp, #0
 800a4b6:	bf0c      	ite	eq
 800a4b8:	2506      	moveq	r5, #6
 800a4ba:	2500      	movne	r5, #0
 800a4bc:	4628      	mov	r0, r5
 800a4be:	b005      	add	sp, #20
 800a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	462c      	mov	r4, r5
 800a4c8:	e7b0      	b.n	800a42c <__gethex+0x68>
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d1c7      	bne.n	800a45e <__gethex+0x9a>
 800a4ce:	4627      	mov	r7, r4
 800a4d0:	e7c7      	b.n	800a462 <__gethex+0x9e>
 800a4d2:	464e      	mov	r6, r9
 800a4d4:	462f      	mov	r7, r5
 800a4d6:	2501      	movs	r5, #1
 800a4d8:	e7c3      	b.n	800a462 <__gethex+0x9e>
 800a4da:	2400      	movs	r4, #0
 800a4dc:	1cb1      	adds	r1, r6, #2
 800a4de:	e7cc      	b.n	800a47a <__gethex+0xb6>
 800a4e0:	2401      	movs	r4, #1
 800a4e2:	e7fb      	b.n	800a4dc <__gethex+0x118>
 800a4e4:	fb03 0002 	mla	r0, r3, r2, r0
 800a4e8:	e7ce      	b.n	800a488 <__gethex+0xc4>
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	e7de      	b.n	800a4ac <__gethex+0xe8>
 800a4ee:	eba6 0309 	sub.w	r3, r6, r9
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	2b07      	cmp	r3, #7
 800a4f8:	dc0a      	bgt.n	800a510 <__gethex+0x14c>
 800a4fa:	9801      	ldr	r0, [sp, #4]
 800a4fc:	f7fe f948 	bl	8008790 <_Balloc>
 800a500:	4604      	mov	r4, r0
 800a502:	b940      	cbnz	r0, 800a516 <__gethex+0x152>
 800a504:	4b5c      	ldr	r3, [pc, #368]	@ (800a678 <__gethex+0x2b4>)
 800a506:	4602      	mov	r2, r0
 800a508:	21e4      	movs	r1, #228	@ 0xe4
 800a50a:	485c      	ldr	r0, [pc, #368]	@ (800a67c <__gethex+0x2b8>)
 800a50c:	f7ff fec0 	bl	800a290 <__assert_func>
 800a510:	3101      	adds	r1, #1
 800a512:	105b      	asrs	r3, r3, #1
 800a514:	e7ef      	b.n	800a4f6 <__gethex+0x132>
 800a516:	f100 0a14 	add.w	sl, r0, #20
 800a51a:	2300      	movs	r3, #0
 800a51c:	4655      	mov	r5, sl
 800a51e:	469b      	mov	fp, r3
 800a520:	45b1      	cmp	r9, r6
 800a522:	d337      	bcc.n	800a594 <__gethex+0x1d0>
 800a524:	f845 bb04 	str.w	fp, [r5], #4
 800a528:	eba5 050a 	sub.w	r5, r5, sl
 800a52c:	10ad      	asrs	r5, r5, #2
 800a52e:	6125      	str	r5, [r4, #16]
 800a530:	4658      	mov	r0, fp
 800a532:	f7fe fa1f 	bl	8008974 <__hi0bits>
 800a536:	016d      	lsls	r5, r5, #5
 800a538:	f8d8 6000 	ldr.w	r6, [r8]
 800a53c:	1a2d      	subs	r5, r5, r0
 800a53e:	42b5      	cmp	r5, r6
 800a540:	dd54      	ble.n	800a5ec <__gethex+0x228>
 800a542:	1bad      	subs	r5, r5, r6
 800a544:	4629      	mov	r1, r5
 800a546:	4620      	mov	r0, r4
 800a548:	f7fe fdb3 	bl	80090b2 <__any_on>
 800a54c:	4681      	mov	r9, r0
 800a54e:	b178      	cbz	r0, 800a570 <__gethex+0x1ac>
 800a550:	1e6b      	subs	r3, r5, #1
 800a552:	1159      	asrs	r1, r3, #5
 800a554:	f003 021f 	and.w	r2, r3, #31
 800a558:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a55c:	f04f 0901 	mov.w	r9, #1
 800a560:	fa09 f202 	lsl.w	r2, r9, r2
 800a564:	420a      	tst	r2, r1
 800a566:	d003      	beq.n	800a570 <__gethex+0x1ac>
 800a568:	454b      	cmp	r3, r9
 800a56a:	dc36      	bgt.n	800a5da <__gethex+0x216>
 800a56c:	f04f 0902 	mov.w	r9, #2
 800a570:	4629      	mov	r1, r5
 800a572:	4620      	mov	r0, r4
 800a574:	f7ff febe 	bl	800a2f4 <rshift>
 800a578:	442f      	add	r7, r5
 800a57a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a57e:	42bb      	cmp	r3, r7
 800a580:	da42      	bge.n	800a608 <__gethex+0x244>
 800a582:	9801      	ldr	r0, [sp, #4]
 800a584:	4621      	mov	r1, r4
 800a586:	f7fe f943 	bl	8008810 <_Bfree>
 800a58a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a58c:	2300      	movs	r3, #0
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	25a3      	movs	r5, #163	@ 0xa3
 800a592:	e793      	b.n	800a4bc <__gethex+0xf8>
 800a594:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a598:	2a2e      	cmp	r2, #46	@ 0x2e
 800a59a:	d012      	beq.n	800a5c2 <__gethex+0x1fe>
 800a59c:	2b20      	cmp	r3, #32
 800a59e:	d104      	bne.n	800a5aa <__gethex+0x1e6>
 800a5a0:	f845 bb04 	str.w	fp, [r5], #4
 800a5a4:	f04f 0b00 	mov.w	fp, #0
 800a5a8:	465b      	mov	r3, fp
 800a5aa:	7830      	ldrb	r0, [r6, #0]
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	f7ff fef3 	bl	800a398 <__hexdig_fun>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	f000 000f 	and.w	r0, r0, #15
 800a5b8:	4098      	lsls	r0, r3
 800a5ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800a5be:	3304      	adds	r3, #4
 800a5c0:	e7ae      	b.n	800a520 <__gethex+0x15c>
 800a5c2:	45b1      	cmp	r9, r6
 800a5c4:	d8ea      	bhi.n	800a59c <__gethex+0x1d8>
 800a5c6:	492b      	ldr	r1, [pc, #172]	@ (800a674 <__gethex+0x2b0>)
 800a5c8:	9303      	str	r3, [sp, #12]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff fe33 	bl	800a238 <strncmp>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1e1      	bne.n	800a59c <__gethex+0x1d8>
 800a5d8:	e7a2      	b.n	800a520 <__gethex+0x15c>
 800a5da:	1ea9      	subs	r1, r5, #2
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7fe fd68 	bl	80090b2 <__any_on>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d0c2      	beq.n	800a56c <__gethex+0x1a8>
 800a5e6:	f04f 0903 	mov.w	r9, #3
 800a5ea:	e7c1      	b.n	800a570 <__gethex+0x1ac>
 800a5ec:	da09      	bge.n	800a602 <__gethex+0x23e>
 800a5ee:	1b75      	subs	r5, r6, r5
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	9801      	ldr	r0, [sp, #4]
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	f7fe fb23 	bl	8008c40 <__lshift>
 800a5fa:	1b7f      	subs	r7, r7, r5
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	f100 0a14 	add.w	sl, r0, #20
 800a602:	f04f 0900 	mov.w	r9, #0
 800a606:	e7b8      	b.n	800a57a <__gethex+0x1b6>
 800a608:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a60c:	42bd      	cmp	r5, r7
 800a60e:	dd6f      	ble.n	800a6f0 <__gethex+0x32c>
 800a610:	1bed      	subs	r5, r5, r7
 800a612:	42ae      	cmp	r6, r5
 800a614:	dc34      	bgt.n	800a680 <__gethex+0x2bc>
 800a616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d022      	beq.n	800a664 <__gethex+0x2a0>
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d024      	beq.n	800a66c <__gethex+0x2a8>
 800a622:	2b01      	cmp	r3, #1
 800a624:	d115      	bne.n	800a652 <__gethex+0x28e>
 800a626:	42ae      	cmp	r6, r5
 800a628:	d113      	bne.n	800a652 <__gethex+0x28e>
 800a62a:	2e01      	cmp	r6, #1
 800a62c:	d10b      	bne.n	800a646 <__gethex+0x282>
 800a62e:	9a02      	ldr	r2, [sp, #8]
 800a630:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	2301      	movs	r3, #1
 800a638:	6123      	str	r3, [r4, #16]
 800a63a:	f8ca 3000 	str.w	r3, [sl]
 800a63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a640:	2562      	movs	r5, #98	@ 0x62
 800a642:	601c      	str	r4, [r3, #0]
 800a644:	e73a      	b.n	800a4bc <__gethex+0xf8>
 800a646:	1e71      	subs	r1, r6, #1
 800a648:	4620      	mov	r0, r4
 800a64a:	f7fe fd32 	bl	80090b2 <__any_on>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d1ed      	bne.n	800a62e <__gethex+0x26a>
 800a652:	9801      	ldr	r0, [sp, #4]
 800a654:	4621      	mov	r1, r4
 800a656:	f7fe f8db 	bl	8008810 <_Bfree>
 800a65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a65c:	2300      	movs	r3, #0
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	2550      	movs	r5, #80	@ 0x50
 800a662:	e72b      	b.n	800a4bc <__gethex+0xf8>
 800a664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f3      	bne.n	800a652 <__gethex+0x28e>
 800a66a:	e7e0      	b.n	800a62e <__gethex+0x26a>
 800a66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1dd      	bne.n	800a62e <__gethex+0x26a>
 800a672:	e7ee      	b.n	800a652 <__gethex+0x28e>
 800a674:	0800b2c0 	.word	0x0800b2c0
 800a678:	0800b158 	.word	0x0800b158
 800a67c:	0800b46e 	.word	0x0800b46e
 800a680:	1e6f      	subs	r7, r5, #1
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	d130      	bne.n	800a6ea <__gethex+0x326>
 800a688:	b127      	cbz	r7, 800a694 <__gethex+0x2d0>
 800a68a:	4639      	mov	r1, r7
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7fe fd10 	bl	80090b2 <__any_on>
 800a692:	4681      	mov	r9, r0
 800a694:	117a      	asrs	r2, r7, #5
 800a696:	2301      	movs	r3, #1
 800a698:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a69c:	f007 071f 	and.w	r7, r7, #31
 800a6a0:	40bb      	lsls	r3, r7
 800a6a2:	4213      	tst	r3, r2
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	bf18      	it	ne
 800a6aa:	f049 0902 	orrne.w	r9, r9, #2
 800a6ae:	f7ff fe21 	bl	800a2f4 <rshift>
 800a6b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a6b6:	1b76      	subs	r6, r6, r5
 800a6b8:	2502      	movs	r5, #2
 800a6ba:	f1b9 0f00 	cmp.w	r9, #0
 800a6be:	d047      	beq.n	800a750 <__gethex+0x38c>
 800a6c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d015      	beq.n	800a6f4 <__gethex+0x330>
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d017      	beq.n	800a6fc <__gethex+0x338>
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d109      	bne.n	800a6e4 <__gethex+0x320>
 800a6d0:	f019 0f02 	tst.w	r9, #2
 800a6d4:	d006      	beq.n	800a6e4 <__gethex+0x320>
 800a6d6:	f8da 3000 	ldr.w	r3, [sl]
 800a6da:	ea49 0903 	orr.w	r9, r9, r3
 800a6de:	f019 0f01 	tst.w	r9, #1
 800a6e2:	d10e      	bne.n	800a702 <__gethex+0x33e>
 800a6e4:	f045 0510 	orr.w	r5, r5, #16
 800a6e8:	e032      	b.n	800a750 <__gethex+0x38c>
 800a6ea:	f04f 0901 	mov.w	r9, #1
 800a6ee:	e7d1      	b.n	800a694 <__gethex+0x2d0>
 800a6f0:	2501      	movs	r5, #1
 800a6f2:	e7e2      	b.n	800a6ba <__gethex+0x2f6>
 800a6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6f6:	f1c3 0301 	rsb	r3, r3, #1
 800a6fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0f0      	beq.n	800a6e4 <__gethex+0x320>
 800a702:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a706:	f104 0314 	add.w	r3, r4, #20
 800a70a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a70e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a712:	f04f 0c00 	mov.w	ip, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a720:	d01b      	beq.n	800a75a <__gethex+0x396>
 800a722:	3201      	adds	r2, #1
 800a724:	6002      	str	r2, [r0, #0]
 800a726:	2d02      	cmp	r5, #2
 800a728:	f104 0314 	add.w	r3, r4, #20
 800a72c:	d13c      	bne.n	800a7a8 <__gethex+0x3e4>
 800a72e:	f8d8 2000 	ldr.w	r2, [r8]
 800a732:	3a01      	subs	r2, #1
 800a734:	42b2      	cmp	r2, r6
 800a736:	d109      	bne.n	800a74c <__gethex+0x388>
 800a738:	1171      	asrs	r1, r6, #5
 800a73a:	2201      	movs	r2, #1
 800a73c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a740:	f006 061f 	and.w	r6, r6, #31
 800a744:	fa02 f606 	lsl.w	r6, r2, r6
 800a748:	421e      	tst	r6, r3
 800a74a:	d13a      	bne.n	800a7c2 <__gethex+0x3fe>
 800a74c:	f045 0520 	orr.w	r5, r5, #32
 800a750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a752:	601c      	str	r4, [r3, #0]
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	601f      	str	r7, [r3, #0]
 800a758:	e6b0      	b.n	800a4bc <__gethex+0xf8>
 800a75a:	4299      	cmp	r1, r3
 800a75c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a760:	d8d9      	bhi.n	800a716 <__gethex+0x352>
 800a762:	68a3      	ldr	r3, [r4, #8]
 800a764:	459b      	cmp	fp, r3
 800a766:	db17      	blt.n	800a798 <__gethex+0x3d4>
 800a768:	6861      	ldr	r1, [r4, #4]
 800a76a:	9801      	ldr	r0, [sp, #4]
 800a76c:	3101      	adds	r1, #1
 800a76e:	f7fe f80f 	bl	8008790 <_Balloc>
 800a772:	4681      	mov	r9, r0
 800a774:	b918      	cbnz	r0, 800a77e <__gethex+0x3ba>
 800a776:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e0 <__gethex+0x41c>)
 800a778:	4602      	mov	r2, r0
 800a77a:	2184      	movs	r1, #132	@ 0x84
 800a77c:	e6c5      	b.n	800a50a <__gethex+0x146>
 800a77e:	6922      	ldr	r2, [r4, #16]
 800a780:	3202      	adds	r2, #2
 800a782:	f104 010c 	add.w	r1, r4, #12
 800a786:	0092      	lsls	r2, r2, #2
 800a788:	300c      	adds	r0, #12
 800a78a:	f7fd f8a0 	bl	80078ce <memcpy>
 800a78e:	4621      	mov	r1, r4
 800a790:	9801      	ldr	r0, [sp, #4]
 800a792:	f7fe f83d 	bl	8008810 <_Bfree>
 800a796:	464c      	mov	r4, r9
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7a0:	6122      	str	r2, [r4, #16]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	615a      	str	r2, [r3, #20]
 800a7a6:	e7be      	b.n	800a726 <__gethex+0x362>
 800a7a8:	6922      	ldr	r2, [r4, #16]
 800a7aa:	455a      	cmp	r2, fp
 800a7ac:	dd0b      	ble.n	800a7c6 <__gethex+0x402>
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f7ff fd9f 	bl	800a2f4 <rshift>
 800a7b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ba:	3701      	adds	r7, #1
 800a7bc:	42bb      	cmp	r3, r7
 800a7be:	f6ff aee0 	blt.w	800a582 <__gethex+0x1be>
 800a7c2:	2501      	movs	r5, #1
 800a7c4:	e7c2      	b.n	800a74c <__gethex+0x388>
 800a7c6:	f016 061f 	ands.w	r6, r6, #31
 800a7ca:	d0fa      	beq.n	800a7c2 <__gethex+0x3fe>
 800a7cc:	4453      	add	r3, sl
 800a7ce:	f1c6 0620 	rsb	r6, r6, #32
 800a7d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7d6:	f7fe f8cd 	bl	8008974 <__hi0bits>
 800a7da:	42b0      	cmp	r0, r6
 800a7dc:	dbe7      	blt.n	800a7ae <__gethex+0x3ea>
 800a7de:	e7f0      	b.n	800a7c2 <__gethex+0x3fe>
 800a7e0:	0800b158 	.word	0x0800b158

0800a7e4 <L_shift>:
 800a7e4:	f1c2 0208 	rsb	r2, r2, #8
 800a7e8:	0092      	lsls	r2, r2, #2
 800a7ea:	b570      	push	{r4, r5, r6, lr}
 800a7ec:	f1c2 0620 	rsb	r6, r2, #32
 800a7f0:	6843      	ldr	r3, [r0, #4]
 800a7f2:	6804      	ldr	r4, [r0, #0]
 800a7f4:	fa03 f506 	lsl.w	r5, r3, r6
 800a7f8:	432c      	orrs	r4, r5
 800a7fa:	40d3      	lsrs	r3, r2
 800a7fc:	6004      	str	r4, [r0, #0]
 800a7fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800a802:	4288      	cmp	r0, r1
 800a804:	d3f4      	bcc.n	800a7f0 <L_shift+0xc>
 800a806:	bd70      	pop	{r4, r5, r6, pc}

0800a808 <__match>:
 800a808:	b530      	push	{r4, r5, lr}
 800a80a:	6803      	ldr	r3, [r0, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a812:	b914      	cbnz	r4, 800a81a <__match+0x12>
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	2001      	movs	r0, #1
 800a818:	bd30      	pop	{r4, r5, pc}
 800a81a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a81e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a822:	2d19      	cmp	r5, #25
 800a824:	bf98      	it	ls
 800a826:	3220      	addls	r2, #32
 800a828:	42a2      	cmp	r2, r4
 800a82a:	d0f0      	beq.n	800a80e <__match+0x6>
 800a82c:	2000      	movs	r0, #0
 800a82e:	e7f3      	b.n	800a818 <__match+0x10>

0800a830 <__hexnan>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	680b      	ldr	r3, [r1, #0]
 800a836:	6801      	ldr	r1, [r0, #0]
 800a838:	115e      	asrs	r6, r3, #5
 800a83a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a83e:	f013 031f 	ands.w	r3, r3, #31
 800a842:	b087      	sub	sp, #28
 800a844:	bf18      	it	ne
 800a846:	3604      	addne	r6, #4
 800a848:	2500      	movs	r5, #0
 800a84a:	1f37      	subs	r7, r6, #4
 800a84c:	4682      	mov	sl, r0
 800a84e:	4690      	mov	r8, r2
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	f846 5c04 	str.w	r5, [r6, #-4]
 800a856:	46b9      	mov	r9, r7
 800a858:	463c      	mov	r4, r7
 800a85a:	9502      	str	r5, [sp, #8]
 800a85c:	46ab      	mov	fp, r5
 800a85e:	784a      	ldrb	r2, [r1, #1]
 800a860:	1c4b      	adds	r3, r1, #1
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	b342      	cbz	r2, 800a8b8 <__hexnan+0x88>
 800a866:	4610      	mov	r0, r2
 800a868:	9105      	str	r1, [sp, #20]
 800a86a:	9204      	str	r2, [sp, #16]
 800a86c:	f7ff fd94 	bl	800a398 <__hexdig_fun>
 800a870:	2800      	cmp	r0, #0
 800a872:	d151      	bne.n	800a918 <__hexnan+0xe8>
 800a874:	9a04      	ldr	r2, [sp, #16]
 800a876:	9905      	ldr	r1, [sp, #20]
 800a878:	2a20      	cmp	r2, #32
 800a87a:	d818      	bhi.n	800a8ae <__hexnan+0x7e>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	459b      	cmp	fp, r3
 800a880:	dd13      	ble.n	800a8aa <__hexnan+0x7a>
 800a882:	454c      	cmp	r4, r9
 800a884:	d206      	bcs.n	800a894 <__hexnan+0x64>
 800a886:	2d07      	cmp	r5, #7
 800a888:	dc04      	bgt.n	800a894 <__hexnan+0x64>
 800a88a:	462a      	mov	r2, r5
 800a88c:	4649      	mov	r1, r9
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff ffa8 	bl	800a7e4 <L_shift>
 800a894:	4544      	cmp	r4, r8
 800a896:	d952      	bls.n	800a93e <__hexnan+0x10e>
 800a898:	2300      	movs	r3, #0
 800a89a:	f1a4 0904 	sub.w	r9, r4, #4
 800a89e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8a2:	f8cd b008 	str.w	fp, [sp, #8]
 800a8a6:	464c      	mov	r4, r9
 800a8a8:	461d      	mov	r5, r3
 800a8aa:	9903      	ldr	r1, [sp, #12]
 800a8ac:	e7d7      	b.n	800a85e <__hexnan+0x2e>
 800a8ae:	2a29      	cmp	r2, #41	@ 0x29
 800a8b0:	d157      	bne.n	800a962 <__hexnan+0x132>
 800a8b2:	3102      	adds	r1, #2
 800a8b4:	f8ca 1000 	str.w	r1, [sl]
 800a8b8:	f1bb 0f00 	cmp.w	fp, #0
 800a8bc:	d051      	beq.n	800a962 <__hexnan+0x132>
 800a8be:	454c      	cmp	r4, r9
 800a8c0:	d206      	bcs.n	800a8d0 <__hexnan+0xa0>
 800a8c2:	2d07      	cmp	r5, #7
 800a8c4:	dc04      	bgt.n	800a8d0 <__hexnan+0xa0>
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7ff ff8a 	bl	800a7e4 <L_shift>
 800a8d0:	4544      	cmp	r4, r8
 800a8d2:	d936      	bls.n	800a942 <__hexnan+0x112>
 800a8d4:	f1a8 0204 	sub.w	r2, r8, #4
 800a8d8:	4623      	mov	r3, r4
 800a8da:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8de:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8e2:	429f      	cmp	r7, r3
 800a8e4:	d2f9      	bcs.n	800a8da <__hexnan+0xaa>
 800a8e6:	1b3b      	subs	r3, r7, r4
 800a8e8:	f023 0303 	bic.w	r3, r3, #3
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	3401      	adds	r4, #1
 800a8f0:	3e03      	subs	r6, #3
 800a8f2:	42b4      	cmp	r4, r6
 800a8f4:	bf88      	it	hi
 800a8f6:	2304      	movhi	r3, #4
 800a8f8:	4443      	add	r3, r8
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f843 2b04 	str.w	r2, [r3], #4
 800a900:	429f      	cmp	r7, r3
 800a902:	d2fb      	bcs.n	800a8fc <__hexnan+0xcc>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	b91b      	cbnz	r3, 800a910 <__hexnan+0xe0>
 800a908:	4547      	cmp	r7, r8
 800a90a:	d128      	bne.n	800a95e <__hexnan+0x12e>
 800a90c:	2301      	movs	r3, #1
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	2005      	movs	r0, #5
 800a912:	b007      	add	sp, #28
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	3501      	adds	r5, #1
 800a91a:	2d08      	cmp	r5, #8
 800a91c:	f10b 0b01 	add.w	fp, fp, #1
 800a920:	dd06      	ble.n	800a930 <__hexnan+0x100>
 800a922:	4544      	cmp	r4, r8
 800a924:	d9c1      	bls.n	800a8aa <__hexnan+0x7a>
 800a926:	2300      	movs	r3, #0
 800a928:	f844 3c04 	str.w	r3, [r4, #-4]
 800a92c:	2501      	movs	r5, #1
 800a92e:	3c04      	subs	r4, #4
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	f000 000f 	and.w	r0, r0, #15
 800a936:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a93a:	6020      	str	r0, [r4, #0]
 800a93c:	e7b5      	b.n	800a8aa <__hexnan+0x7a>
 800a93e:	2508      	movs	r5, #8
 800a940:	e7b3      	b.n	800a8aa <__hexnan+0x7a>
 800a942:	9b01      	ldr	r3, [sp, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d0dd      	beq.n	800a904 <__hexnan+0xd4>
 800a948:	f1c3 0320 	rsb	r3, r3, #32
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a950:	40da      	lsrs	r2, r3
 800a952:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a956:	4013      	ands	r3, r2
 800a958:	f846 3c04 	str.w	r3, [r6, #-4]
 800a95c:	e7d2      	b.n	800a904 <__hexnan+0xd4>
 800a95e:	3f04      	subs	r7, #4
 800a960:	e7d0      	b.n	800a904 <__hexnan+0xd4>
 800a962:	2004      	movs	r0, #4
 800a964:	e7d5      	b.n	800a912 <__hexnan+0xe2>

0800a966 <__ascii_mbtowc>:
 800a966:	b082      	sub	sp, #8
 800a968:	b901      	cbnz	r1, 800a96c <__ascii_mbtowc+0x6>
 800a96a:	a901      	add	r1, sp, #4
 800a96c:	b142      	cbz	r2, 800a980 <__ascii_mbtowc+0x1a>
 800a96e:	b14b      	cbz	r3, 800a984 <__ascii_mbtowc+0x1e>
 800a970:	7813      	ldrb	r3, [r2, #0]
 800a972:	600b      	str	r3, [r1, #0]
 800a974:	7812      	ldrb	r2, [r2, #0]
 800a976:	1e10      	subs	r0, r2, #0
 800a978:	bf18      	it	ne
 800a97a:	2001      	movne	r0, #1
 800a97c:	b002      	add	sp, #8
 800a97e:	4770      	bx	lr
 800a980:	4610      	mov	r0, r2
 800a982:	e7fb      	b.n	800a97c <__ascii_mbtowc+0x16>
 800a984:	f06f 0001 	mvn.w	r0, #1
 800a988:	e7f8      	b.n	800a97c <__ascii_mbtowc+0x16>

0800a98a <_realloc_r>:
 800a98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	4680      	mov	r8, r0
 800a990:	4615      	mov	r5, r2
 800a992:	460c      	mov	r4, r1
 800a994:	b921      	cbnz	r1, 800a9a0 <_realloc_r+0x16>
 800a996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	4611      	mov	r1, r2
 800a99c:	f7fd be6c 	b.w	8008678 <_malloc_r>
 800a9a0:	b92a      	cbnz	r2, 800a9ae <_realloc_r+0x24>
 800a9a2:	f7fd fdf5 	bl	8008590 <_free_r>
 800a9a6:	2400      	movs	r4, #0
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ae:	f000 f840 	bl	800aa32 <_malloc_usable_size_r>
 800a9b2:	4285      	cmp	r5, r0
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	d802      	bhi.n	800a9be <_realloc_r+0x34>
 800a9b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9bc:	d8f4      	bhi.n	800a9a8 <_realloc_r+0x1e>
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	f7fd fe59 	bl	8008678 <_malloc_r>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d0ec      	beq.n	800a9a6 <_realloc_r+0x1c>
 800a9cc:	42b5      	cmp	r5, r6
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	bf28      	it	cs
 800a9d4:	4632      	movcs	r2, r6
 800a9d6:	f7fc ff7a 	bl	80078ce <memcpy>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4640      	mov	r0, r8
 800a9de:	f7fd fdd7 	bl	8008590 <_free_r>
 800a9e2:	463c      	mov	r4, r7
 800a9e4:	e7e0      	b.n	800a9a8 <_realloc_r+0x1e>

0800a9e6 <__ascii_wctomb>:
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	b141      	cbz	r1, 800a9fe <__ascii_wctomb+0x18>
 800a9ec:	2aff      	cmp	r2, #255	@ 0xff
 800a9ee:	d904      	bls.n	800a9fa <__ascii_wctomb+0x14>
 800a9f0:	228a      	movs	r2, #138	@ 0x8a
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9f8:	4770      	bx	lr
 800a9fa:	700a      	strb	r2, [r1, #0]
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	4770      	bx	lr

0800aa00 <fiprintf>:
 800aa00:	b40e      	push	{r1, r2, r3}
 800aa02:	b503      	push	{r0, r1, lr}
 800aa04:	4601      	mov	r1, r0
 800aa06:	ab03      	add	r3, sp, #12
 800aa08:	4805      	ldr	r0, [pc, #20]	@ (800aa20 <fiprintf+0x20>)
 800aa0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0e:	6800      	ldr	r0, [r0, #0]
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	f000 f83f 	bl	800aa94 <_vfiprintf_r>
 800aa16:	b002      	add	sp, #8
 800aa18:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa1c:	b003      	add	sp, #12
 800aa1e:	4770      	bx	lr
 800aa20:	2000001c 	.word	0x2000001c

0800aa24 <abort>:
 800aa24:	b508      	push	{r3, lr}
 800aa26:	2006      	movs	r0, #6
 800aa28:	f000 fa08 	bl	800ae3c <raise>
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	f7f6 fca3 	bl	8001378 <_exit>

0800aa32 <_malloc_usable_size_r>:
 800aa32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa36:	1f18      	subs	r0, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfbc      	itt	lt
 800aa3c:	580b      	ldrlt	r3, [r1, r0]
 800aa3e:	18c0      	addlt	r0, r0, r3
 800aa40:	4770      	bx	lr

0800aa42 <__sfputc_r>:
 800aa42:	6893      	ldr	r3, [r2, #8]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	b410      	push	{r4}
 800aa4a:	6093      	str	r3, [r2, #8]
 800aa4c:	da08      	bge.n	800aa60 <__sfputc_r+0x1e>
 800aa4e:	6994      	ldr	r4, [r2, #24]
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	db01      	blt.n	800aa58 <__sfputc_r+0x16>
 800aa54:	290a      	cmp	r1, #10
 800aa56:	d103      	bne.n	800aa60 <__sfputc_r+0x1e>
 800aa58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa5c:	f000 b932 	b.w	800acc4 <__swbuf_r>
 800aa60:	6813      	ldr	r3, [r2, #0]
 800aa62:	1c58      	adds	r0, r3, #1
 800aa64:	6010      	str	r0, [r2, #0]
 800aa66:	7019      	strb	r1, [r3, #0]
 800aa68:	4608      	mov	r0, r1
 800aa6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <__sfputs_r>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	4614      	mov	r4, r2
 800aa78:	18d5      	adds	r5, r2, r3
 800aa7a:	42ac      	cmp	r4, r5
 800aa7c:	d101      	bne.n	800aa82 <__sfputs_r+0x12>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e007      	b.n	800aa92 <__sfputs_r+0x22>
 800aa82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa86:	463a      	mov	r2, r7
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff ffda 	bl	800aa42 <__sfputc_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d1f3      	bne.n	800aa7a <__sfputs_r+0xa>
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa94 <_vfiprintf_r>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	460d      	mov	r5, r1
 800aa9a:	b09d      	sub	sp, #116	@ 0x74
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	4698      	mov	r8, r3
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	b118      	cbz	r0, 800aaac <_vfiprintf_r+0x18>
 800aaa4:	6a03      	ldr	r3, [r0, #32]
 800aaa6:	b90b      	cbnz	r3, 800aaac <_vfiprintf_r+0x18>
 800aaa8:	f7fc fdc4 	bl	8007634 <__sinit>
 800aaac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d405      	bmi.n	800aabe <_vfiprintf_r+0x2a>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d402      	bmi.n	800aabe <_vfiprintf_r+0x2a>
 800aab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaba:	f7fc ff06 	bl	80078ca <__retarget_lock_acquire_recursive>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	071b      	lsls	r3, r3, #28
 800aac2:	d501      	bpl.n	800aac8 <_vfiprintf_r+0x34>
 800aac4:	692b      	ldr	r3, [r5, #16]
 800aac6:	b99b      	cbnz	r3, 800aaf0 <_vfiprintf_r+0x5c>
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 f938 	bl	800ad40 <__swsetup_r>
 800aad0:	b170      	cbz	r0, 800aaf0 <_vfiprintf_r+0x5c>
 800aad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad4:	07dc      	lsls	r4, r3, #31
 800aad6:	d504      	bpl.n	800aae2 <_vfiprintf_r+0x4e>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aadc:	b01d      	add	sp, #116	@ 0x74
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	0598      	lsls	r0, r3, #22
 800aae6:	d4f7      	bmi.n	800aad8 <_vfiprintf_r+0x44>
 800aae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaea:	f7fc feef 	bl	80078cc <__retarget_lock_release_recursive>
 800aaee:	e7f3      	b.n	800aad8 <_vfiprintf_r+0x44>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aafa:	f8cd 800c 	str.w	r8, [sp, #12]
 800aafe:	2330      	movs	r3, #48	@ 0x30
 800ab00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acb0 <_vfiprintf_r+0x21c>
 800ab04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab08:	f04f 0901 	mov.w	r9, #1
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	469a      	mov	sl, r3
 800ab10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab14:	b10a      	cbz	r2, 800ab1a <_vfiprintf_r+0x86>
 800ab16:	2a25      	cmp	r2, #37	@ 0x25
 800ab18:	d1f9      	bne.n	800ab0e <_vfiprintf_r+0x7a>
 800ab1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab1e:	d00b      	beq.n	800ab38 <_vfiprintf_r+0xa4>
 800ab20:	465b      	mov	r3, fp
 800ab22:	4622      	mov	r2, r4
 800ab24:	4629      	mov	r1, r5
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffa2 	bl	800aa70 <__sfputs_r>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f000 80a7 	beq.w	800ac80 <_vfiprintf_r+0x1ec>
 800ab32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab34:	445a      	add	r2, fp
 800ab36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab38:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 809f 	beq.w	800ac80 <_vfiprintf_r+0x1ec>
 800ab42:	2300      	movs	r3, #0
 800ab44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4c:	f10a 0a01 	add.w	sl, sl, #1
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab5a:	4654      	mov	r4, sl
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab62:	4853      	ldr	r0, [pc, #332]	@ (800acb0 <_vfiprintf_r+0x21c>)
 800ab64:	f7f5 fb34 	bl	80001d0 <memchr>
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	b9d8      	cbnz	r0, 800aba4 <_vfiprintf_r+0x110>
 800ab6c:	06d1      	lsls	r1, r2, #27
 800ab6e:	bf44      	itt	mi
 800ab70:	2320      	movmi	r3, #32
 800ab72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab76:	0713      	lsls	r3, r2, #28
 800ab78:	bf44      	itt	mi
 800ab7a:	232b      	movmi	r3, #43	@ 0x2b
 800ab7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab80:	f89a 3000 	ldrb.w	r3, [sl]
 800ab84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab86:	d015      	beq.n	800abb4 <_vfiprintf_r+0x120>
 800ab88:	9a07      	ldr	r2, [sp, #28]
 800ab8a:	4654      	mov	r4, sl
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f04f 0c0a 	mov.w	ip, #10
 800ab92:	4621      	mov	r1, r4
 800ab94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab98:	3b30      	subs	r3, #48	@ 0x30
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	d94b      	bls.n	800ac36 <_vfiprintf_r+0x1a2>
 800ab9e:	b1b0      	cbz	r0, 800abce <_vfiprintf_r+0x13a>
 800aba0:	9207      	str	r2, [sp, #28]
 800aba2:	e014      	b.n	800abce <_vfiprintf_r+0x13a>
 800aba4:	eba0 0308 	sub.w	r3, r0, r8
 800aba8:	fa09 f303 	lsl.w	r3, r9, r3
 800abac:	4313      	orrs	r3, r2
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	46a2      	mov	sl, r4
 800abb2:	e7d2      	b.n	800ab5a <_vfiprintf_r+0xc6>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1d19      	adds	r1, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	9103      	str	r1, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfbb      	ittet	lt
 800abc0:	425b      	neglt	r3, r3
 800abc2:	f042 0202 	orrlt.w	r2, r2, #2
 800abc6:	9307      	strge	r3, [sp, #28]
 800abc8:	9307      	strlt	r3, [sp, #28]
 800abca:	bfb8      	it	lt
 800abcc:	9204      	strlt	r2, [sp, #16]
 800abce:	7823      	ldrb	r3, [r4, #0]
 800abd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd2:	d10a      	bne.n	800abea <_vfiprintf_r+0x156>
 800abd4:	7863      	ldrb	r3, [r4, #1]
 800abd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd8:	d132      	bne.n	800ac40 <_vfiprintf_r+0x1ac>
 800abda:	9b03      	ldr	r3, [sp, #12]
 800abdc:	1d1a      	adds	r2, r3, #4
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	9203      	str	r2, [sp, #12]
 800abe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe6:	3402      	adds	r4, #2
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800acc0 <_vfiprintf_r+0x22c>
 800abee:	7821      	ldrb	r1, [r4, #0]
 800abf0:	2203      	movs	r2, #3
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 faec 	bl	80001d0 <memchr>
 800abf8:	b138      	cbz	r0, 800ac0a <_vfiprintf_r+0x176>
 800abfa:	9b04      	ldr	r3, [sp, #16]
 800abfc:	eba0 000a 	sub.w	r0, r0, sl
 800ac00:	2240      	movs	r2, #64	@ 0x40
 800ac02:	4082      	lsls	r2, r0
 800ac04:	4313      	orrs	r3, r2
 800ac06:	3401      	adds	r4, #1
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0e:	4829      	ldr	r0, [pc, #164]	@ (800acb4 <_vfiprintf_r+0x220>)
 800ac10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac14:	2206      	movs	r2, #6
 800ac16:	f7f5 fadb 	bl	80001d0 <memchr>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d03f      	beq.n	800ac9e <_vfiprintf_r+0x20a>
 800ac1e:	4b26      	ldr	r3, [pc, #152]	@ (800acb8 <_vfiprintf_r+0x224>)
 800ac20:	bb1b      	cbnz	r3, 800ac6a <_vfiprintf_r+0x1d6>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	3307      	adds	r3, #7
 800ac26:	f023 0307 	bic.w	r3, r3, #7
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac30:	443b      	add	r3, r7
 800ac32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac34:	e76a      	b.n	800ab0c <_vfiprintf_r+0x78>
 800ac36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	e7a8      	b.n	800ab92 <_vfiprintf_r+0xfe>
 800ac40:	2300      	movs	r3, #0
 800ac42:	3401      	adds	r4, #1
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	4619      	mov	r1, r3
 800ac48:	f04f 0c0a 	mov.w	ip, #10
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac52:	3a30      	subs	r2, #48	@ 0x30
 800ac54:	2a09      	cmp	r2, #9
 800ac56:	d903      	bls.n	800ac60 <_vfiprintf_r+0x1cc>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0c6      	beq.n	800abea <_vfiprintf_r+0x156>
 800ac5c:	9105      	str	r1, [sp, #20]
 800ac5e:	e7c4      	b.n	800abea <_vfiprintf_r+0x156>
 800ac60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac64:	4604      	mov	r4, r0
 800ac66:	2301      	movs	r3, #1
 800ac68:	e7f0      	b.n	800ac4c <_vfiprintf_r+0x1b8>
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	462a      	mov	r2, r5
 800ac70:	4b12      	ldr	r3, [pc, #72]	@ (800acbc <_vfiprintf_r+0x228>)
 800ac72:	a904      	add	r1, sp, #16
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7fb fe85 	bl	8006984 <_printf_float>
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	1c78      	adds	r0, r7, #1
 800ac7e:	d1d6      	bne.n	800ac2e <_vfiprintf_r+0x19a>
 800ac80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_vfiprintf_r+0x1fe>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_vfiprintf_r+0x1fe>
 800ac8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac8e:	f7fc fe1d 	bl	80078cc <__retarget_lock_release_recursive>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	065b      	lsls	r3, r3, #25
 800ac96:	f53f af1f 	bmi.w	800aad8 <_vfiprintf_r+0x44>
 800ac9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac9c:	e71e      	b.n	800aadc <_vfiprintf_r+0x48>
 800ac9e:	ab03      	add	r3, sp, #12
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	462a      	mov	r2, r5
 800aca4:	4b05      	ldr	r3, [pc, #20]	@ (800acbc <_vfiprintf_r+0x228>)
 800aca6:	a904      	add	r1, sp, #16
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7fc f903 	bl	8006eb4 <_printf_i>
 800acae:	e7e4      	b.n	800ac7a <_vfiprintf_r+0x1e6>
 800acb0:	0800b419 	.word	0x0800b419
 800acb4:	0800b423 	.word	0x0800b423
 800acb8:	08006985 	.word	0x08006985
 800acbc:	0800aa71 	.word	0x0800aa71
 800acc0:	0800b41f 	.word	0x0800b41f

0800acc4 <__swbuf_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	460e      	mov	r6, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	4605      	mov	r5, r0
 800accc:	b118      	cbz	r0, 800acd6 <__swbuf_r+0x12>
 800acce:	6a03      	ldr	r3, [r0, #32]
 800acd0:	b90b      	cbnz	r3, 800acd6 <__swbuf_r+0x12>
 800acd2:	f7fc fcaf 	bl	8007634 <__sinit>
 800acd6:	69a3      	ldr	r3, [r4, #24]
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	071a      	lsls	r2, r3, #28
 800acde:	d501      	bpl.n	800ace4 <__swbuf_r+0x20>
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	b943      	cbnz	r3, 800acf6 <__swbuf_r+0x32>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 f82a 	bl	800ad40 <__swsetup_r>
 800acec:	b118      	cbz	r0, 800acf6 <__swbuf_r+0x32>
 800acee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800acf2:	4638      	mov	r0, r7
 800acf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	6922      	ldr	r2, [r4, #16]
 800acfa:	1a98      	subs	r0, r3, r2
 800acfc:	6963      	ldr	r3, [r4, #20]
 800acfe:	b2f6      	uxtb	r6, r6
 800ad00:	4283      	cmp	r3, r0
 800ad02:	4637      	mov	r7, r6
 800ad04:	dc05      	bgt.n	800ad12 <__swbuf_r+0x4e>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7ff fa53 	bl	800a1b4 <_fflush_r>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1ed      	bne.n	800acee <__swbuf_r+0x2a>
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	60a3      	str	r3, [r4, #8]
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	6022      	str	r2, [r4, #0]
 800ad1e:	701e      	strb	r6, [r3, #0]
 800ad20:	6962      	ldr	r2, [r4, #20]
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d004      	beq.n	800ad32 <__swbuf_r+0x6e>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	07db      	lsls	r3, r3, #31
 800ad2c:	d5e1      	bpl.n	800acf2 <__swbuf_r+0x2e>
 800ad2e:	2e0a      	cmp	r6, #10
 800ad30:	d1df      	bne.n	800acf2 <__swbuf_r+0x2e>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	f7ff fa3d 	bl	800a1b4 <_fflush_r>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d0d9      	beq.n	800acf2 <__swbuf_r+0x2e>
 800ad3e:	e7d6      	b.n	800acee <__swbuf_r+0x2a>

0800ad40 <__swsetup_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4b29      	ldr	r3, [pc, #164]	@ (800ade8 <__swsetup_r+0xa8>)
 800ad44:	4605      	mov	r5, r0
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	460c      	mov	r4, r1
 800ad4a:	b118      	cbz	r0, 800ad54 <__swsetup_r+0x14>
 800ad4c:	6a03      	ldr	r3, [r0, #32]
 800ad4e:	b90b      	cbnz	r3, 800ad54 <__swsetup_r+0x14>
 800ad50:	f7fc fc70 	bl	8007634 <__sinit>
 800ad54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad58:	0719      	lsls	r1, r3, #28
 800ad5a:	d422      	bmi.n	800ada2 <__swsetup_r+0x62>
 800ad5c:	06da      	lsls	r2, r3, #27
 800ad5e:	d407      	bmi.n	800ad70 <__swsetup_r+0x30>
 800ad60:	2209      	movs	r2, #9
 800ad62:	602a      	str	r2, [r5, #0]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad6e:	e033      	b.n	800add8 <__swsetup_r+0x98>
 800ad70:	0758      	lsls	r0, r3, #29
 800ad72:	d512      	bpl.n	800ad9a <__swsetup_r+0x5a>
 800ad74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad76:	b141      	cbz	r1, 800ad8a <__swsetup_r+0x4a>
 800ad78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	d002      	beq.n	800ad86 <__swsetup_r+0x46>
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7fd fc05 	bl	8008590 <_free_r>
 800ad86:	2300      	movs	r3, #0
 800ad88:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	2300      	movs	r3, #0
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f043 0308 	orr.w	r3, r3, #8
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	b94b      	cbnz	r3, 800adba <__swsetup_r+0x7a>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adb0:	d003      	beq.n	800adba <__swsetup_r+0x7a>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f883 	bl	800aec0 <__smakebuf_r>
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	f013 0201 	ands.w	r2, r3, #1
 800adc2:	d00a      	beq.n	800adda <__swsetup_r+0x9a>
 800adc4:	2200      	movs	r2, #0
 800adc6:	60a2      	str	r2, [r4, #8]
 800adc8:	6962      	ldr	r2, [r4, #20]
 800adca:	4252      	negs	r2, r2
 800adcc:	61a2      	str	r2, [r4, #24]
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	b942      	cbnz	r2, 800ade4 <__swsetup_r+0xa4>
 800add2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800add6:	d1c5      	bne.n	800ad64 <__swsetup_r+0x24>
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	0799      	lsls	r1, r3, #30
 800addc:	bf58      	it	pl
 800adde:	6962      	ldrpl	r2, [r4, #20]
 800ade0:	60a2      	str	r2, [r4, #8]
 800ade2:	e7f4      	b.n	800adce <__swsetup_r+0x8e>
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7f7      	b.n	800add8 <__swsetup_r+0x98>
 800ade8:	2000001c 	.word	0x2000001c

0800adec <_raise_r>:
 800adec:	291f      	cmp	r1, #31
 800adee:	b538      	push	{r3, r4, r5, lr}
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	d904      	bls.n	800ae00 <_raise_r+0x14>
 800adf6:	2316      	movs	r3, #22
 800adf8:	6003      	str	r3, [r0, #0]
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae02:	b112      	cbz	r2, 800ae0a <_raise_r+0x1e>
 800ae04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae08:	b94b      	cbnz	r3, 800ae1e <_raise_r+0x32>
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 f830 	bl	800ae70 <_getpid_r>
 800ae10:	4622      	mov	r2, r4
 800ae12:	4601      	mov	r1, r0
 800ae14:	4628      	mov	r0, r5
 800ae16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1a:	f000 b817 	b.w	800ae4c <_kill_r>
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d00a      	beq.n	800ae38 <_raise_r+0x4c>
 800ae22:	1c59      	adds	r1, r3, #1
 800ae24:	d103      	bne.n	800ae2e <_raise_r+0x42>
 800ae26:	2316      	movs	r3, #22
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7e7      	b.n	800adfe <_raise_r+0x12>
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae34:	4620      	mov	r0, r4
 800ae36:	4798      	blx	r3
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e7e0      	b.n	800adfe <_raise_r+0x12>

0800ae3c <raise>:
 800ae3c:	4b02      	ldr	r3, [pc, #8]	@ (800ae48 <raise+0xc>)
 800ae3e:	4601      	mov	r1, r0
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	f7ff bfd3 	b.w	800adec <_raise_r>
 800ae46:	bf00      	nop
 800ae48:	2000001c 	.word	0x2000001c

0800ae4c <_kill_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	@ (800ae6c <_kill_r+0x20>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f6 fa7d 	bl	8001358 <_kill>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_kill_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_kill_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20001688 	.word	0x20001688

0800ae70 <_getpid_r>:
 800ae70:	f7f6 ba6a 	b.w	8001348 <_getpid>

0800ae74 <__swhatbuf_r>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	460c      	mov	r4, r1
 800ae78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	b096      	sub	sp, #88	@ 0x58
 800ae80:	4615      	mov	r5, r2
 800ae82:	461e      	mov	r6, r3
 800ae84:	da0d      	bge.n	800aea2 <__swhatbuf_r+0x2e>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae8c:	f04f 0100 	mov.w	r1, #0
 800ae90:	bf14      	ite	ne
 800ae92:	2340      	movne	r3, #64	@ 0x40
 800ae94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae98:	2000      	movs	r0, #0
 800ae9a:	6031      	str	r1, [r6, #0]
 800ae9c:	602b      	str	r3, [r5, #0]
 800ae9e:	b016      	add	sp, #88	@ 0x58
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	466a      	mov	r2, sp
 800aea4:	f000 f848 	bl	800af38 <_fstat_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	dbec      	blt.n	800ae86 <__swhatbuf_r+0x12>
 800aeac:	9901      	ldr	r1, [sp, #4]
 800aeae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeb6:	4259      	negs	r1, r3
 800aeb8:	4159      	adcs	r1, r3
 800aeba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aebe:	e7eb      	b.n	800ae98 <__swhatbuf_r+0x24>

0800aec0 <__smakebuf_r>:
 800aec0:	898b      	ldrh	r3, [r1, #12]
 800aec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aec4:	079d      	lsls	r5, r3, #30
 800aec6:	4606      	mov	r6, r0
 800aec8:	460c      	mov	r4, r1
 800aeca:	d507      	bpl.n	800aedc <__smakebuf_r+0x1c>
 800aecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	2301      	movs	r3, #1
 800aed6:	6163      	str	r3, [r4, #20]
 800aed8:	b003      	add	sp, #12
 800aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aedc:	ab01      	add	r3, sp, #4
 800aede:	466a      	mov	r2, sp
 800aee0:	f7ff ffc8 	bl	800ae74 <__swhatbuf_r>
 800aee4:	9f00      	ldr	r7, [sp, #0]
 800aee6:	4605      	mov	r5, r0
 800aee8:	4639      	mov	r1, r7
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7fd fbc4 	bl	8008678 <_malloc_r>
 800aef0:	b948      	cbnz	r0, 800af06 <__smakebuf_r+0x46>
 800aef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef6:	059a      	lsls	r2, r3, #22
 800aef8:	d4ee      	bmi.n	800aed8 <__smakebuf_r+0x18>
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	f043 0302 	orr.w	r3, r3, #2
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	e7e2      	b.n	800aecc <__smakebuf_r+0xc>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	6020      	str	r0, [r4, #0]
 800af0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0e:	81a3      	strh	r3, [r4, #12]
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af16:	b15b      	cbz	r3, 800af30 <__smakebuf_r+0x70>
 800af18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 f81d 	bl	800af5c <_isatty_r>
 800af22:	b128      	cbz	r0, 800af30 <__smakebuf_r+0x70>
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	f023 0303 	bic.w	r3, r3, #3
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	81a3      	strh	r3, [r4, #12]
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	431d      	orrs	r5, r3
 800af34:	81a5      	strh	r5, [r4, #12]
 800af36:	e7cf      	b.n	800aed8 <__smakebuf_r+0x18>

0800af38 <_fstat_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	@ (800af58 <_fstat_r+0x20>)
 800af3c:	2300      	movs	r3, #0
 800af3e:	4604      	mov	r4, r0
 800af40:	4608      	mov	r0, r1
 800af42:	4611      	mov	r1, r2
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	f7f6 fa67 	bl	8001418 <_fstat>
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	d102      	bne.n	800af54 <_fstat_r+0x1c>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	b103      	cbz	r3, 800af54 <_fstat_r+0x1c>
 800af52:	6023      	str	r3, [r4, #0]
 800af54:	bd38      	pop	{r3, r4, r5, pc}
 800af56:	bf00      	nop
 800af58:	20001688 	.word	0x20001688

0800af5c <_isatty_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d06      	ldr	r5, [pc, #24]	@ (800af78 <_isatty_r+0x1c>)
 800af60:	2300      	movs	r3, #0
 800af62:	4604      	mov	r4, r0
 800af64:	4608      	mov	r0, r1
 800af66:	602b      	str	r3, [r5, #0]
 800af68:	f7f6 fa66 	bl	8001438 <_isatty>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_isatty_r+0x1a>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_isatty_r+0x1a>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	20001688 	.word	0x20001688

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
