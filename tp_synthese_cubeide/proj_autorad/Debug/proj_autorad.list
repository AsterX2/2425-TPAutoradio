
proj_autorad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e42c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800e5c0  0800e5c0  0000f5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb80  0800eb80  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb80  0800eb80  0000fb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb88  0800eb88  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb88  0800eb88  0000fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb8c  0800eb8c  0000fb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800eb90  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  200001d8  0800ed68  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  0800ed68  000110f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d19e  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b5e  00000000  00000000  0002d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00031f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d0  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b627  00000000  00000000  00034a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f550  00000000  00000000  00060077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa879  00000000  00000000  0007f5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007950  00000000  00000000  00179e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001817d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5a4 	.word	0x0800e5a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e5a4 	.word	0x0800e5a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <MX_DMA_Init+0x48>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <MX_DMA_Init+0x48>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2105      	movs	r1, #5
 8001006:	2010      	movs	r0, #16
 8001008:	f001 fb9f 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800100c:	2010      	movs	r0, #16
 800100e:	f001 fbb8 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2011      	movs	r0, #17
 8001018:	f001 fb97 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800101c:	2011      	movs	r0, #17
 800101e:	f001 fbb0 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a07      	ldr	r2, [pc, #28]	@ (800105c <vApplicationGetIdleTaskMemory+0x2c>)
 8001040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <vApplicationGetIdleTaskMemory+0x30>)
 8001046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001f8 	.word	0x200001f8
 8001060:	2000024c 	.word	0x2000024c

08001064 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_FREERTOS_Init+0x30>)
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f006 fed4 	bl	8007e2e <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <MX_FREERTOS_Init+0x34>)
 800108a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	0800e5cc 	.word	0x0800e5cc
 8001098:	200001f4 	.word	0x200001f4

0800109c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f006 ff0e 	bl	8007ec6 <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <StartDefaultTask+0x8>

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_GPIO_Init+0xec>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2121      	movs	r1, #33	@ 0x21
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f001 fed5 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <MX_GPIO_Init+0xf0>)
 8001134:	f001 fed0 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <MX_GPIO_Init+0xf4>)
 8001150:	f001 fd18 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8001154:	2321      	movs	r3, #33	@ 0x21
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f001 fd09 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_GPIO_Init+0xf0>)
 800118a:	f001 fcfb 	bl	8002b84 <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000800 	.word	0x48000800

080011a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_I2C2_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_I2C2_Init+0x7c>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011e0:	f001 fe92 	bl	8002f08 <HAL_I2C_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 fa06 	bl	80015fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011f2:	f001 ff24 	bl	800303e <HAL_I2CEx_ConfigAnalogFilter>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f9fd 	bl	80015fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_I2C2_Init+0x74>)
 8001204:	f001 ff66 	bl	80030d4 <HAL_I2CEx_ConfigDigitalFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 f9f4 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000044c 	.word	0x2000044c
 800121c:	40005800 	.word	0x40005800
 8001220:	10d19ce4 	.word	0x10d19ce4

08001224 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ac      	sub	sp, #176	@ 0xb0
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2288      	movs	r2, #136	@ 0x88
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fe69 	bl	800af1c <memset>
  if(i2cHandle->Instance==I2C2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_I2C_MspInit+0xb0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d13b      	bne.n	80012cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fde7 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800126c:	f000 f9c5 	bl	80015fa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001288:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800128c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001290:	2312      	movs	r3, #18
 8001292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012a2:	2304      	movs	r3, #4
 80012a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	@ (80012dc <HAL_I2C_MspInit+0xb8>)
 80012b0:	f001 fc68 	bl	8002b84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012be:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_I2C_MspInit+0xb4>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012cc:	bf00      	nop
 80012ce:	37b0      	adds	r7, #176	@ 0xb0
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005800 	.word	0x40005800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <__io_putchar>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80012e8:	1d39      	adds	r1, r7, #4
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ee:	2201      	movs	r2, #1
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <__io_putchar+0x20>)
 80012f2:	f005 f9e1 	bl	80066b8 <HAL_UART_Transmit>

	return ch;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20001204 	.word	0x20001204

08001304 <test_chenillard>:

void test_chenillard(int delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

	xpdr_Init();
 800130c:	f000 fe50 	bl	8001fb0 <xpdr_Init>
	int i = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	2201      	movs	r2, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	b21a      	sxth	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fe1f 	bl	8001f80 <Set_LEDs>
		i++;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
		vTaskDelay( delay / portTICK_PERIOD_MS );  // Délai de duree en Dms
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fb00 	bl	8008950 <vTaskDelay>
		Set_LEDs(~(1 << i%8 | ((1 << i%8) << 8)));
 8001350:	bf00      	nop
 8001352:	e7df      	b.n	8001314 <test_chenillard+0x10>

08001354 <tache_shell>:
	}
}

void tache_shell(void * unused)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	//xSemaphoreTake(sem1, portMAX_DELAY); artefact question a) pour prendre le semaphore sans interruption

	printf("tache Shell\r\n");
 800135c:	481b      	ldr	r0, [pc, #108]	@ (80013cc <tache_shell+0x78>)
 800135e:	f009 fca9 	bl	800acb4 <puts>
	xpdr_Init();
 8001362:	f000 fe25 	bl	8001fb0 <xpdr_Init>


	// Test des fonctions de contrôle des LEDs
	Set_LED_id(4);  // Allume la LED 4
 8001366:	2004      	movs	r0, #4
 8001368:	f000 fdb0 	bl	8001ecc <Set_LED_id>
	HAL_Delay(1000);  // Attendre 1 seconde
 800136c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001370:	f001 f8ec 	bl	800254c <HAL_Delay>

	Toggle_LED_id(4);  // Inverse l'état de la LED 4
 8001374:	2004      	movs	r0, #4
 8001376:	f000 fdd5 	bl	8001f24 <Toggle_LED_id>
	HAL_Delay(1000);  // Attendre 1 seconde
 800137a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800137e:	f001 f8e5 	bl	800254c <HAL_Delay>

	Set_LEDs(0xFFFF);  // Allume toutes les LEDs
 8001382:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001386:	f000 fdfb 	bl	8001f80 <Set_LEDs>
	HAL_Delay(1000);  // Attendre 1 seconde
 800138a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800138e:	f001 f8dd 	bl	800254c <HAL_Delay>

	Set_LEDs(0x0000);  // Éteint toutes les LEDs
 8001392:	2000      	movs	r0, #0
 8001394:	f000 fdf4 	bl	8001f80 <Set_LEDs>
	HAL_Delay(1000);  // Attendre 1 seconde
 8001398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139c:	f001 f8d6 	bl	800254c <HAL_Delay>


	test_chenillard(100);
 80013a0:	2064      	movs	r0, #100	@ 0x64
 80013a2:	f7ff ffaf 	bl	8001304 <test_chenillard>
	h_sh.drv.receive = drv_uart1_receive;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <tache_shell+0x7c>)
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <tache_shell+0x80>)
 80013aa:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_sh.drv.transmit = drv_uart1_transmit;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <tache_shell+0x7c>)
 80013b0:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <tache_shell+0x84>)
 80013b2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354



	shell_init(&h_sh);
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <tache_shell+0x7c>)
 80013b8:	f000 fec8 	bl	800214c <shell_init>

	shell_run(&h_sh);
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <tache_shell+0x7c>)
 80013be:	f000 ffb5 	bl	800232c <shell_run>


}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800e5e8 	.word	0x0800e5e8
 80013d0:	200004a4 	.word	0x200004a4
 80013d4:	0800206d 	.word	0x0800206d
 80013d8:	080020a5 	.word	0x080020a5

080013dc <GenerateTriangleWave>:





void GenerateTriangleWave(uint16_t* buffer, uint16_t length, uint16_t amplitude) {
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
    // Divisez la longueur par 2 pour une montée et une descente complètes
    uint16_t halfLength = length/2;
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	823b      	strh	r3, [r7, #16]
    uint16_t step = amplitude / halfLength; // Pas pour chaque demi-période
 80013f2:	883a      	ldrh	r2, [r7, #0]
 80013f4:	8a3b      	ldrh	r3, [r7, #16]
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	81fb      	strh	r3, [r7, #14]
    uint16_t value = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	82fb      	strh	r3, [r7, #22]
    int8_t direction = 1; // Direction initiale (montée)
 8001400:	2301      	movs	r3, #1
 8001402:	757b      	strb	r3, [r7, #21]

    for (uint16_t i = 0; i < length; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	827b      	strh	r3, [r7, #18]
 8001408:	e025      	b.n	8001456 <GenerateTriangleWave+0x7a>
        buffer[i] = value;
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	8afa      	ldrh	r2, [r7, #22]
 8001414:	801a      	strh	r2, [r3, #0]

        // Mise à jour de la valeur
        value += step * direction;
 8001416:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800141a:	b29b      	uxth	r3, r3
 800141c:	89fa      	ldrh	r2, [r7, #14]
 800141e:	fb12 f303 	smulbb	r3, r2, r3
 8001422:	b29a      	uxth	r2, r3
 8001424:	8afb      	ldrh	r3, [r7, #22]
 8001426:	4413      	add	r3, r2
 8001428:	82fb      	strh	r3, [r7, #22]

        // Inversion de direction aux limites
        if (value >= amplitude) {
 800142a:	8afa      	ldrh	r2, [r7, #22]
 800142c:	883b      	ldrh	r3, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d304      	bcc.n	800143c <GenerateTriangleWave+0x60>
            value = amplitude; // Sature à l'amplitude
 8001432:	883b      	ldrh	r3, [r7, #0]
 8001434:	82fb      	strh	r3, [r7, #22]
            direction = -1;    // Inverse la direction (descente)
 8001436:	23ff      	movs	r3, #255	@ 0xff
 8001438:	757b      	strb	r3, [r7, #21]
 800143a:	e009      	b.n	8001450 <GenerateTriangleWave+0x74>
        } else if (value == 0 && direction == -1) {
 800143c:	8afb      	ldrh	r3, [r7, #22]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <GenerateTriangleWave+0x74>
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800144a:	d101      	bne.n	8001450 <GenerateTriangleWave+0x74>
            direction = 1;     // Inverse la direction (montée)
 800144c:	2301      	movs	r3, #1
 800144e:	757b      	strb	r3, [r7, #21]
    for (uint16_t i = 0; i < length; i++) {
 8001450:	8a7b      	ldrh	r3, [r7, #18]
 8001452:	3301      	adds	r3, #1
 8001454:	827b      	strh	r3, [r7, #18]
 8001456:	8a7a      	ldrh	r2, [r7, #18]
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3d5      	bcc.n	800140a <GenerateTriangleWave+0x2e>
        }
    }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001472:	f000 ffef 	bl	8002454 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001476:	f000 f845 	bl	8001504 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800147a:	f000 f894 	bl	80015a6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800147e:	f7ff fe15 	bl	80010ac <MX_GPIO_Init>
	MX_DMA_Init();
 8001482:	f7ff fdaf 	bl	8000fe4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001486:	f000 fbf7 	bl	8001c78 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 800148a:	f000 fa01 	bl	8001890 <MX_SPI3_Init>
	MX_I2C2_Init();
 800148e:	f7ff fe89 	bl	80011a4 <MX_I2C2_Init>
	MX_SAI2_Init();
 8001492:	f000 f8b9 	bl	8001608 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <main+0x80>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <main+0x80>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014a4:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <main+0x84>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <main+0x84>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014b4:	601a      	str	r2, [r3, #0]


	GenerateTriangleWave(triangleWave, TRIANGLE_SAMPLES, 0X7FFF);
 80014b6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80014ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <main+0x88>)
 80014c0:	f7ff ff8c 	bl	80013dc <GenerateTriangleWave>
	xTaskCreate(tache_shell, "Shell", TASK_SHELL_STACK_SIZE, NULL, TASK_SHELL_PRIORITY, &h_task_shell);
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <main+0x8c>)
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	490a      	ldr	r1, [pc, #40]	@ (80014fc <main+0x90>)
 80014d4:	480a      	ldr	r0, [pc, #40]	@ (8001500 <main+0x94>)
 80014d6:	f007 f903 	bl	80086e0 <xTaskCreate>


	//vTaskDelay(10);

	vTaskStartScheduler();
 80014da:	f007 fa6f 	bl	80089bc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80014de:	f7ff fdc1 	bl	8001064 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80014e2:	f006 fc9d 	bl	8007e20 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <main+0x7a>
 80014ea:	bf00      	nop
 80014ec:	20001000 	.word	0x20001000
 80014f0:	20001084 	.word	0x20001084
 80014f4:	20000800 	.word	0x20000800
 80014f8:	200004a0 	.word	0x200004a0
 80014fc:	0800e5f8 	.word	0x0800e5f8
 8001500:	08001355 	.word	0x08001355

08001504 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	@ 0x58
 8001508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2244      	movs	r2, #68	@ 0x44
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f009 fd02 	bl	800af1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001526:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800152a:	f001 fe2d 	bl	8003188 <HAL_PWREx_ControlVoltageScaling>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001534:	f000 f861 	bl	80015fa <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001540:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	2310      	movs	r3, #16
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154a:	2302      	movs	r3, #2
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001552:	230a      	movs	r3, #10
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001556:	2307      	movs	r3, #7
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fe64 	bl	8003234 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001572:	f000 f842 	bl	80015fa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2303      	movs	r3, #3
 800157c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2104      	movs	r1, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fa2c 	bl	80039ec <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800159a:	f000 f82e 	bl	80015fa <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	3758      	adds	r7, #88	@ 0x58
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b0a2      	sub	sp, #136	@ 0x88
 80015aa:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2288      	movs	r2, #136	@ 0x88
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 fcb2 	bl	800af1c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80015b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015bc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80015be:	2300      	movs	r3, #0
 80015c0:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80015c2:	2302      	movs	r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80015ca:	230d      	movs	r3, #13
 80015cc:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80015ce:	2311      	movs	r3, #17
 80015d0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80015da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015de:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fc26 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 80015ee:	f000 f804 	bl	80015fa <Error_Handler>
	}
}
 80015f2:	bf00      	nop
 80015f4:	3788      	adds	r7, #136	@ 0x88
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001602:	bf00      	nop
 8001604:	e7fd      	b.n	8001602 <Error_Handler+0x8>
	...

08001608 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 800160e:	4a2b      	ldr	r2, [pc, #172]	@ (80016bc <MX_SAI2_Init+0xb4>)
 8001610:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001612:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800161e:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001630:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001632:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001636:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001650:	2302      	movs	r3, #2
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <MX_SAI2_Init+0xb0>)
 8001658:	f003 ff06 	bl	8005468 <HAL_SAI_InitProtocol>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8001662:	f7ff ffca 	bl	80015fa <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001668:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <MX_SAI2_Init+0xbc>)
 800166a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 800166e:	2203      	movs	r2, #3
 8001670:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001674:	2201      	movs	r2, #1
 8001676:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_SAI2_Init+0xb8>)
 80016a4:	f003 fee0 	bl	8005468 <HAL_SAI_InitProtocol>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80016ae:	f7ff ffa4 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20001000 	.word	0x20001000
 80016bc:	40015804 	.word	0x40015804
 80016c0:	20001084 	.word	0x20001084
 80016c4:	40015824 	.word	0x40015824

080016c8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a64      	ldr	r2, [pc, #400]	@ (8001868 <HAL_SAI_MspInit+0x1a0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d15e      	bne.n	8001798 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80016da:	4b64      	ldr	r3, [pc, #400]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d113      	bne.n	800170a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80016e2:	4b63      	ldr	r3, [pc, #396]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	4a62      	ldr	r2, [pc, #392]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ee:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2105      	movs	r1, #5
 80016fe:	204b      	movs	r0, #75	@ 0x4b
 8001700:	f001 f823 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001704:	204b      	movs	r0, #75	@ 0x4b
 8001706:	f001 f83c 	bl	8002782 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 800170a:	4b58      	ldr	r3, [pc, #352]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a56      	ldr	r2, [pc, #344]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 8001712:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001714:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001726:	230d      	movs	r3, #13
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4850      	ldr	r0, [pc, #320]	@ (8001874 <HAL_SAI_MspInit+0x1ac>)
 8001732:	f001 fa27 	bl	8002b84 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8001736:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001738:	4a50      	ldr	r2, [pc, #320]	@ (800187c <HAL_SAI_MspInit+0x1b4>)
 800173a:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 800173c:	4b4e      	ldr	r3, [pc, #312]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 800173e:	2201      	movs	r2, #1
 8001740:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001742:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001744:	2210      	movs	r2, #16
 8001746:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001754:	4b48      	ldr	r3, [pc, #288]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800175c:	4b46      	ldr	r3, [pc, #280]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 800175e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001762:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001764:	4b44      	ldr	r3, [pc, #272]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001766:	2220      	movs	r2, #32
 8001768:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800176a:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001770:	4841      	ldr	r0, [pc, #260]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001772:	f001 f821 	bl	80027b8 <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 800177c:	f7ff ff3d 	bl	80015fa <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3d      	ldr	r2, [pc, #244]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001784:	671a      	str	r2, [r3, #112]	@ 0x70
 8001786:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3a      	ldr	r2, [pc, #232]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001790:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001792:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <HAL_SAI_MspInit+0x1b0>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a38      	ldr	r2, [pc, #224]	@ (8001880 <HAL_SAI_MspInit+0x1b8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d15e      	bne.n	8001860 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d113      	bne.n	80017d2 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80017b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_SAI_MspInit+0x1a8>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	204b      	movs	r0, #75	@ 0x4b
 80017c8:	f000 ffbf 	bl	800274a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 80017cc:	204b      	movs	r0, #75	@ 0x4b
 80017ce:	f000 ffd8 	bl	8002782 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 80017d2:	4b26      	ldr	r3, [pc, #152]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a24      	ldr	r2, [pc, #144]	@ (800186c <HAL_SAI_MspInit+0x1a4>)
 80017da:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80017ee:	230d      	movs	r3, #13
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4822      	ldr	r0, [pc, #136]	@ (8001884 <HAL_SAI_MspInit+0x1bc>)
 80017fa:	f001 f9c3 	bl	8002b84 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 80017fe:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001800:	4a22      	ldr	r2, [pc, #136]	@ (800188c <HAL_SAI_MspInit+0x1c4>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8001804:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001806:	2201      	movs	r2, #1
 8001808:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800181e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001822:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800182a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001838:	4813      	ldr	r0, [pc, #76]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800183a:	f000 ffbd 	bl	80027b8 <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8001844:	f7ff fed9 	bl	80015fa <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800184c:	671a      	str	r2, [r3, #112]	@ 0x70
 800184e:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 8001858:	66da      	str	r2, [r3, #108]	@ 0x6c
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_SAI_MspInit+0x1c0>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	@ 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40015804 	.word	0x40015804
 800186c:	20001198 	.word	0x20001198
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400
 8001878:	20001108 	.word	0x20001108
 800187c:	4002006c 	.word	0x4002006c
 8001880:	40015824 	.word	0x40015824
 8001884:	48000800 	.word	0x48000800
 8001888:	20001150 	.word	0x20001150
 800188c:	40020080 	.word	0x40020080

08001890 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <MX_SPI3_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <MX_SPI3_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <MX_SPI3_Init+0x74>)
 800189c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018de:	2207      	movs	r2, #7
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018ea:	2208      	movs	r2, #8
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_SPI3_Init+0x74>)
 80018f0:	f004 fb17 	bl	8005f22 <HAL_SPI_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f7ff fe7e 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000119c 	.word	0x2000119c
 8001908:	40003c00 	.word	0x40003c00

0800190c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <HAL_SPI_MspInit+0xb4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d144      	bne.n	80019b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a24      	ldr	r2, [pc, #144]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_SPI_MspInit+0xb8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001976:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001988:	2306      	movs	r3, #6
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <HAL_SPI_MspInit+0xbc>)
 8001994:	f001 f8f6 	bl	8002b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001998:	2320      	movs	r3, #32
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a8:	2306      	movs	r3, #6
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <HAL_SPI_MspInit+0xc0>)
 80019b4:	f001 f8e6 	bl	8002b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	@ 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40003c00 	.word	0x40003c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019da:	4a10      	ldr	r2, [pc, #64]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	210f      	movs	r1, #15
 8001a0a:	f06f 0001 	mvn.w	r0, #1
 8001a0e:	f000 fe9c 	bl	800274a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 fd57 	bl	800250c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a5e:	f007 fbb7 	bl	80091d0 <xTaskGetSchedulerState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d001      	beq.n	8001a6c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a68:	f007 ff0e 	bl	8009888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <DMA1_Channel6_IRQHandler+0x10>)
 8001a76:	f000 ffd6 	bl	8002a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20001108 	.word	0x20001108

08001a84 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <DMA1_Channel7_IRQHandler+0x10>)
 8001a8a:	f000 ffcc 	bl	8002a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20001150 	.word	0x20001150

08001a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <USART2_IRQHandler+0x10>)
 8001a9e:	f004 fee1 	bl	8006864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001204 	.word	0x20001204

08001aac <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001ab0:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <SAI2_IRQHandler+0x14>)
 8001ab2:	f003 fee3 	bl	800587c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <SAI2_IRQHandler+0x18>)
 8001ab8:	f003 fee0 	bl	800587c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20001000 	.word	0x20001000
 8001ac4:	20001084 	.word	0x20001084

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_kill>:

int _kill(int pid, int sig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae2:	f009 fa6d 	bl	800afc0 <__errno>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2216      	movs	r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe7 	bl	8001ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0a:	bf00      	nop
 8001b0c:	e7fd      	b.n	8001b0a <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
  }

  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e009      	b.n	8001b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbbc 	bl	80012e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf1      	blt.n	8001b5a <_write+0x12>
  }
  return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_isatty>:

int _isatty(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f009 f9d2 	bl	800afc0 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20018000 	.word	0x20018000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20001200 	.word	0x20001200
 8001c50:	200020f8 	.word	0x200020f8

08001c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c7e:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <MX_USART2_UART_Init+0x5c>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_USART2_UART_Init+0x58>)
 8001cbc:	f004 fcae 	bl	800661c <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cc6:	f7ff fc98 	bl	80015fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20001204 	.word	0x20001204
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ac      	sub	sp, #176	@ 0xb0
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2288      	movs	r2, #136	@ 0x88
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f009 f90f 	bl	800af1c <memset>
  if(uartHandle->Instance==USART2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a25      	ldr	r2, [pc, #148]	@ (8001d98 <HAL_UART_MspInit+0xc0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d143      	bne.n	8001d90 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f88d 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d20:	f7ff fc6b 	bl	80015fa <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a16      	ldr	r2, [pc, #88]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_UART_MspInit+0xc4>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d54:	230c      	movs	r3, #12
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f000 ff02 	bl	8002b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2105      	movs	r1, #5
 8001d84:	2026      	movs	r0, #38	@ 0x26
 8001d86:	f000 fce0 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d8a:	2026      	movs	r0, #38	@ 0x26
 8001d8c:	f000 fcf9 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	37b0      	adds	r7, #176	@ 0xb0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004400 	.word	0x40004400
 8001d9c:	40021000 	.word	0x40021000

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff ff56 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f009 f8fd 	bl	800afcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7ff fb4b 	bl	800146c <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001de4:	0800eb90 	.word	0x0800eb90
  ldr r2, =_sbss
 8001de8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001dec:	200020f4 	.word	0x200020f4

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <WriteRegister>:
} h_MCP_t;

h_MCP_t hMCP;

void WriteRegister(uint8_t reg, uint8_t data)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	uint8_t control_byte = MCP_CONTROL_BYTE(REG_CONTROL_ADDR, VU_WRITE); // Address = 0b000
 8001e04:	2340      	movs	r3, #64	@ 0x40
 8001e06:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[2] = {reg, data};
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	733b      	strb	r3, [r7, #12]
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;


	//Down chip select to 0
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	4820      	ldr	r0, [pc, #128]	@ (8001e98 <WriteRegister+0xa4>)
 8001e16:	f001 f85f 	bl	8002ed8 <HAL_GPIO_WritePin>



	// Transmit control byte
	status = HAL_SPI_Transmit(hMCP.hspi, &control_byte, 1, HAL_MAX_DELAY);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <WriteRegister+0xa8>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f107 010e 	add.w	r1, r7, #14
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e26:	2201      	movs	r2, #1
 8001e28:	f004 f91e 	bl	8006068 <HAL_SPI_Transmit>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <WriteRegister+0x5c>

		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001e36:	2201      	movs	r2, #1
 8001e38:	2180      	movs	r1, #128	@ 0x80
 8001e3a:	4817      	ldr	r0, [pc, #92]	@ (8001e98 <WriteRegister+0xa4>)
 8001e3c:	f001 f84c 	bl	8002ed8 <HAL_GPIO_WritePin>
		printf("Error: Failed transmit control byte (status returned %d)\r\n", status);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4816      	ldr	r0, [pc, #88]	@ (8001ea0 <WriteRegister+0xac>)
 8001e46:	f008 fecd 	bl	800abe4 <iprintf>
		Error_Handler(); // Handle the error
 8001e4a:	f7ff fbd6 	bl	80015fa <Error_Handler>
		return; // Prevent further execution
 8001e4e:	e01f      	b.n	8001e90 <WriteRegister+0x9c>
	}

	// Transmit register address and data
	status = HAL_SPI_Transmit(hMCP.hspi, buffer, 2, HAL_MAX_DELAY);
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <WriteRegister+0xa8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f107 010c 	add.w	r1, r7, #12
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f004 f903 	bl	8006068 <HAL_SPI_Transmit>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <WriteRegister+0x92>
		HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET); // Deassert chip select
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <WriteRegister+0xa4>)
 8001e72:	f001 f831 	bl	8002ed8 <HAL_GPIO_WritePin>
		printf("Error: Failed transmit register data (status returned %d)\r\n", status);
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <WriteRegister+0xb0>)
 8001e7c:	f008 feb2 	bl	800abe4 <iprintf>
		Error_Handler(); // Handle the error
 8001e80:	f7ff fbbb 	bl	80015fa <Error_Handler>
		return; // Prevent further execution
 8001e84:	e004      	b.n	8001e90 <WriteRegister+0x9c>
	}


	// UP chip select to 1
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <WriteRegister+0xa4>)
 8001e8c:	f001 f824 	bl	8002ed8 <HAL_GPIO_WritePin>



}
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	2000128c 	.word	0x2000128c
 8001ea0:	0800e600 	.word	0x0800e600
 8001ea4:	0800e63c 	.word	0x0800e63c

08001ea8 <Update_LEDs>:

void Update_LEDs(void){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

	WriteRegister(MCP_OLATA, hMCP.GPA);
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <Update_LEDs+0x20>)
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f7ff ff9e 	bl	8001df4 <WriteRegister>
	WriteRegister(MCP_OLATB, hMCP.GPB);
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <Update_LEDs+0x20>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2015      	movs	r0, #21
 8001ec0:	f7ff ff98 	bl	8001df4 <WriteRegister>

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000128c 	.word	0x2000128c

08001ecc <Set_LED_id>:
void Set_LED_id(uint8_t led){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b07      	cmp	r3, #7
 8001eda:	d90e      	bls.n	8001efa <Set_LED_id+0x2e>
	{
		hMCP.GPB = ~(1 << led%8);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <Set_LED_id+0x54>)
 8001ef0:	715a      	strb	r2, [r3, #5]
		hMCP.GPA = 0xFF; // All LEDs on GPIOA OFF
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <Set_LED_id+0x54>)
 8001ef4:	22ff      	movs	r2, #255	@ 0xff
 8001ef6:	711a      	strb	r2, [r3, #4]
 8001ef8:	e00b      	b.n	8001f12 <Set_LED_id+0x46>
	}
	else
	{
		hMCP.GPA = ~(1 << led);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2201      	movs	r2, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <Set_LED_id+0x54>)
 8001f0a:	711a      	strb	r2, [r3, #4]
		hMCP.GPB = 0xFF; // All LEDs on GPIOB OFF
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <Set_LED_id+0x54>)
 8001f0e:	22ff      	movs	r2, #255	@ 0xff
 8001f10:	715a      	strb	r2, [r3, #5]
	}

	Update_LEDs();
 8001f12:	f7ff ffc9 	bl	8001ea8 <Update_LEDs>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000128c 	.word	0x2000128c

08001f24 <Toggle_LED_id>:

void Toggle_LED_id(uint8_t led){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	if (led > 7)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d90f      	bls.n	8001f54 <Toggle_LED_id+0x30>
	{
		hMCP.GPB = (hMCP.GPB & ~(1 << led%8)) | (~hMCP.GPB & (1 << led%8));
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <Toggle_LED_id+0x58>)
 8001f36:	795b      	ldrb	r3, [r3, #5]
 8001f38:	b25a      	sxtb	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	4053      	eors	r3, r2
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <Toggle_LED_id+0x58>)
 8001f50:	715a      	strb	r2, [r3, #5]
 8001f52:	e00c      	b.n	8001f6e <Toggle_LED_id+0x4a>
	}
	else
	{
		hMCP.GPA = (hMCP.GPA & ~(1 << led)) | (~hMCP.GPA & (1 << led));
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <Toggle_LED_id+0x58>)
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	4053      	eors	r3, r2
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <Toggle_LED_id+0x58>)
 8001f6c:	711a      	strb	r2, [r3, #4]
	}

	Update_LEDs();
 8001f6e:	f7ff ff9b 	bl	8001ea8 <Update_LEDs>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000128c 	.word	0x2000128c

08001f80 <Set_LEDs>:
void Set_LEDs(uint16_t leds){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]

	hMCP.GPB = (0xFF00 & leds) >> 8;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <Set_LEDs+0x2c>)
 8001f94:	715a      	strb	r2, [r3, #5]
	hMCP.GPA = 0xFF & leds;
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <Set_LEDs+0x2c>)
 8001f9c:	711a      	strb	r2, [r3, #4]

	Update_LEDs();
 8001f9e:	f7ff ff83 	bl	8001ea8 <Update_LEDs>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000128c 	.word	0x2000128c

08001fb0 <xpdr_Init>:




void xpdr_Init(void){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

	hMCP.hspi = &hspi3;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <xpdr_Init+0x50>)
 8001fb6:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <xpdr_Init+0x54>)
 8001fb8:	601a      	str	r2, [r3, #0]

	HAL_SPI_Init(hMCP.hspi);
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <xpdr_Init+0x50>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 ffaf 	bl	8005f22 <HAL_SPI_Init>

	// nRESET to base state
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fcc:	f000 ff84 	bl	8002ed8 <HAL_GPIO_WritePin>

	// nCS to reset state
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2180      	movs	r1, #128	@ 0x80
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <xpdr_Init+0x58>)
 8001fd6:	f000 ff7f 	bl	8002ed8 <HAL_GPIO_WritePin>

	// Set all GPIOA and GPIOB pins as outputs
	WriteRegister(MCP_IODIRA, MCP_ALL_ON); // GPA as output
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff ff09 	bl	8001df4 <WriteRegister>
	WriteRegister(MCP_IODIRB, MCP_ALL_ON); // GPB as output
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff ff05 	bl	8001df4 <WriteRegister>

	hMCP.GPA = 0xFF;	// All LEDs on GPIOA OFF
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <xpdr_Init+0x50>)
 8001fec:	22ff      	movs	r2, #255	@ 0xff
 8001fee:	711a      	strb	r2, [r3, #4]
	hMCP.GPB = 0xFF;	// All LEDs on GPIOB OFF
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <xpdr_Init+0x50>)
 8001ff2:	22ff      	movs	r2, #255	@ 0xff
 8001ff4:	715a      	strb	r2, [r3, #5]

	Update_LEDs();
 8001ff6:	f7ff ff57 	bl	8001ea8 <Update_LEDs>

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000128c 	.word	0x2000128c
 8002004:	2000119c 	.word	0x2000119c
 8002008:	48000400 	.word	0x48000400

0800200c <drv_sem_init>:
#include "semphr.h"

SemaphoreHandle_t semain;

//fonction pour créer le sémaphore
SemaphoreHandle_t drv_sem_init(void){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

	// Crée un sémaphore binaire
	semain = xSemaphoreCreateBinary();
 8002010:	2203      	movs	r2, #3
 8002012:	2100      	movs	r1, #0
 8002014:	2001      	movs	r0, #1
 8002016:	f006 f889 	bl	800812c <xQueueGenericCreate>
 800201a:	4603      	mov	r3, r0
 800201c:	4a02      	ldr	r2, [pc, #8]	@ (8002028 <drv_sem_init+0x1c>)
 800201e:	6013      	str	r3, [r2, #0]

	//pas de gestion d'erreur = c'est un choix
	//printf("init sema");
	return semain;
 8002020:	4b01      	ldr	r3, [pc, #4]	@ (8002028 <drv_sem_init+0x1c>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20001294 	.word	0x20001294

0800202c <give_sem_uart>:


void give_sem_uart(void){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

	BaseType_t higher_priority_task_woken = pdFALSE;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(semain, &higher_priority_task_woken);
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <give_sem_uart+0x38>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f006 f8ce 	bl	80081e0 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(higher_priority_task_woken);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <give_sem_uart+0x2e>
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <give_sem_uart+0x3c>)
 800204c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	f3bf 8f6f 	isb	sy
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20001294 	.word	0x20001294
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(pData), size);
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	461a      	mov	r2, r3
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4807      	ldr	r0, [pc, #28]	@ (800209c <drv_uart1_receive+0x30>)
 8002080:	f004 fba4 	bl	80067cc <HAL_UART_Receive_IT>

	xSemaphoreTake(semain, portMAX_DELAY); // prendre le sémaphore
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <drv_uart1_receive+0x34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800208c:	4618      	mov	r0, r3
 800208e:	f006 f937 	bl	8008300 <xQueueSemaphoreTake>

	return 0;	// Life's too short for error management
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20001204 	.word	0x20001204
 80020a0:	20001294 	.word	0x20001294

080020a4 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <drv_uart1_transmit+0x24>)
 80020ba:	f004 fafd 	bl	80066b8 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20001204 	.word	0x20001204

080020cc <sh_help>:
#include "task.h"
#include "semphr.h"
//#include "drv_MCP.h"


static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e029      	b.n	8002132 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461c      	mov	r4, r3
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	330c      	adds	r3, #12
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	4623      	mov	r3, r4
 800210e:	4a0e      	ldr	r2, [pc, #56]	@ (8002148 <sh_help+0x7c>)
 8002110:	2128      	movs	r1, #40	@ 0x28
 8002112:	f008 fdd7 	bl	800acc4 <sniprintf>
 8002116:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	b289      	uxth	r1, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbd0      	blt.n	80020de <sh_help+0x12>
	}

	return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	0800e678 	.word	0x0800e678

0800214c <shell_init>:

void shell_init(h_shell_t * h_shell) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	int size = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

	// création du sémaphore avec drv_sem_init --  sans handle
	drv_sem_init();
 8002158:	f7ff ff58 	bl	800200c <drv_sem_init>


	h_shell->func_list_size = 0;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8002168:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <shell_init+0x78>)
 800216a:	2128      	movs	r1, #40	@ 0x28
 800216c:	4618      	mov	r0, r3
 800216e:	f008 fda9 	bl	800acc4 <sniprintf>
 8002172:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	b289      	uxth	r1, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800218e:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <shell_init+0x7c>)
 8002190:	2128      	movs	r1, #40	@ 0x28
 8002192:	4618      	mov	r0, r3
 8002194:	f008 fd96 	bl	800acc4 <sniprintf>
 8002198:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	b289      	uxth	r1, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <shell_init+0x80>)
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <shell_init+0x84>)
 80021b2:	2168      	movs	r1, #104	@ 0x68
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f80d 	bl	80021d4 <shell_add>

}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	0800e684 	.word	0x0800e684
 80021c8:	0800e6ac 	.word	0x0800e6ac
 80021cc:	0800e6d0 	.word	0x0800e6d0
 80021d0:	080020cd 	.word	0x080020cd

080021d4 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ea:	dc27      	bgt.n	800223c <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3304      	adds	r3, #4
 80021fe:	7afa      	ldrb	r2, [r7, #11]
 8002200:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	330c      	adds	r3, #12
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]
		return 0;
 8002238:	2300      	movs	r3, #0
 800223a:	e001      	b.n	8002240 <shell_add+0x6c>
	}

	return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b090      	sub	sp, #64	@ 0x40
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800225e:	2300      	movs	r3, #0
 8002260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002262:	e041      	b.n	80022e8 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3304      	adds	r3, #4
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800227a:	429a      	cmp	r2, r3
 800227c:	d131      	bne.n	80022e2 <shell_exec+0x96>
			argc = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
 800228a:	e013      	b.n	80022b4 <shell_exec+0x68>
				if(*p == ' ') {
 800228c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b20      	cmp	r3, #32
 8002292:	d10c      	bne.n	80022ae <shell_exec+0x62>
					*p = '\0';
 8002294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80022a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a2:	3201      	adds	r2, #1
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	3340      	adds	r3, #64	@ 0x40
 80022a8:	443b      	add	r3, r7
 80022aa:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80022ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b0:	3301      	adds	r3, #1
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <shell_exec+0x76>
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	2b07      	cmp	r3, #7
 80022c0:	dde4      	ble.n	800228c <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3308      	adds	r3, #8
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	4603      	mov	r3, r0
 80022e0:	e01d      	b.n	800231e <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	3301      	adds	r3, #1
 80022e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbb8      	blt.n	8002264 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80022f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <shell_exec+0xdc>)
 80022fe:	2128      	movs	r1, #40	@ 0x28
 8002300:	f008 fce0 	bl	800acc4 <sniprintf>
 8002304:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8002312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002314:	b289      	uxth	r1, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4798      	blx	r3
	return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800231e:	4618      	mov	r0, r3
 8002320:	3740      	adds	r7, #64	@ 0x40
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	0800e6d8 	.word	0x0800e6d8

0800232c <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002342:	2102      	movs	r1, #2
 8002344:	483a      	ldr	r0, [pc, #232]	@ (8002430 <shell_run+0x104>)
 8002346:	4798      	blx	r3
		reading = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]

		while(reading) {
 800234c:	e064      	b.n	8002418 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8002354:	f107 020b 	add.w	r2, r7, #11
 8002358:	2101      	movs	r1, #1
 800235a:	4610      	mov	r0, r2
 800235c:	4798      	blx	r3
			int size;

			switch (c) {
 800235e:	7afb      	ldrb	r3, [r7, #11]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d036      	beq.n	80023d2 <shell_run+0xa6>
 8002364:	2b0d      	cmp	r3, #13
 8002366:	d141      	bne.n	80023ec <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800236e:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <shell_run+0x108>)
 8002370:	2128      	movs	r1, #40	@ 0x28
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fca6 	bl	800acc4 <sniprintf>
 8002378:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	b289      	uxth	r1, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	613a      	str	r2, [r7, #16]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	2200      	movs	r2, #0
 800239a:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80023aa:	4a23      	ldr	r2, [pc, #140]	@ (8002438 <shell_run+0x10c>)
 80023ac:	2128      	movs	r1, #40	@ 0x28
 80023ae:	f008 fc89 	bl	800acc4 <sniprintf>
 80023b2:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	b289      	uxth	r1, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4798      	blx	r3
				reading = 0;        //exit read loop
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
				break;
 80023d0:	e022      	b.n	8002418 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	dd1e      	ble.n	8002416 <shell_run+0xea>
					pos--;          //remove it in buffer
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80023e4:	2103      	movs	r1, #3
 80023e6:	4815      	ldr	r0, [pc, #84]	@ (800243c <shell_run+0x110>)
 80023e8:	4798      	blx	r3
				}
				break;
 80023ea:	e014      	b.n	8002416 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b27      	cmp	r3, #39	@ 0x27
 80023f0:	dc12      	bgt.n	8002418 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80023f8:	f107 020b 	add.w	r2, r7, #11
 80023fc:	2101      	movs	r1, #1
 80023fe:	4610      	mov	r0, r2
 8002400:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	613a      	str	r2, [r7, #16]
 8002408:	7af9      	ldrb	r1, [r7, #11]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	460a      	mov	r2, r1
 8002410:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8002414:	e000      	b.n	8002418 <shell_run+0xec>
				break;
 8002416:	bf00      	nop
		while(reading) {
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d197      	bne.n	800234e <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff10 	bl	800224c <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800242c:	e786      	b.n	800233c <shell_run+0x10>
 800242e:	bf00      	nop
 8002430:	0800e750 	.word	0x0800e750
 8002434:	0800e6f0 	.word	0x0800e6f0
 8002438:	0800e6f4 	.word	0x0800e6f4
 800243c:	0800e74c 	.word	0x0800e74c

08002440 <HAL_UART_RxCpltCallback>:
	}
	return 0;
}

// TODO a bouger dans le main
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	// on appelle simplement la fonction callback du drv_uart
	give_sem_uart();
 8002448:	f7ff fdf0 	bl	800202c <give_sem_uart>

	//..
	// Relancer la réception pour le prochain octet <= pas la peine
	//HAL_UART_Receive_IT(&huart2, &rx_byte, 1);

}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_Init+0x3c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <HAL_Init+0x3c>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246a:	2003      	movs	r0, #3
 800246c:	f000 f962 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002470:	200f      	movs	r0, #15
 8002472:	f000 f80f 	bl	8002494 <HAL_InitTick>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	e001      	b.n	8002486 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002482:	f7ff faa5 	bl	80019d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002486:	79fb      	ldrb	r3, [r7, #7]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <HAL_InitTick+0x6c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_InitTick+0x70>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f96d 	bl	800279e <HAL_SYSTICK_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d809      	bhi.n	80024e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024d8:	f000 f937 	bl	800274a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <HAL_InitTick+0x74>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e004      	b.n	80024f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e001      	b.n	80024f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008
 8002530:	20001298 	.word	0x20001298

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	@ (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20001298 	.word	0x20001298

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002566:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffde 	bl	8002534 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000008 	.word	0x20000008

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e098      	b.n	80028fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <HAL_DMA_Init+0x150>)
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d80f      	bhi.n	80027f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4b4b      	ldr	r3, [pc, #300]	@ (800290c <HAL_DMA_Init+0x154>)
 80027de:	4413      	add	r3, r2
 80027e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002910 <HAL_DMA_Init+0x158>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	009a      	lsls	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_DMA_Init+0x15c>)
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80027f4:	e00e      	b.n	8002814 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b46      	ldr	r3, [pc, #280]	@ (8002918 <HAL_DMA_Init+0x160>)
 80027fe:	4413      	add	r3, r2
 8002800:	4a43      	ldr	r2, [pc, #268]	@ (8002910 <HAL_DMA_Init+0x158>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a42      	ldr	r2, [pc, #264]	@ (800291c <HAL_DMA_Init+0x164>)
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800282a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800286e:	d039      	beq.n	80028e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	4a27      	ldr	r2, [pc, #156]	@ (8002914 <HAL_DMA_Init+0x15c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d11a      	bne.n	80028b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800287a:	4b29      	ldr	r3, [pc, #164]	@ (8002920 <HAL_DMA_Init+0x168>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f003 031c 	and.w	r3, r3, #28
 8002886:	210f      	movs	r1, #15
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	4924      	ldr	r1, [pc, #144]	@ (8002920 <HAL_DMA_Init+0x168>)
 8002890:	4013      	ands	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002894:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <HAL_DMA_Init+0x168>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f003 031c 	and.w	r3, r3, #28
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	491d      	ldr	r1, [pc, #116]	@ (8002920 <HAL_DMA_Init+0x168>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
 80028ae:	e019      	b.n	80028e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <HAL_DMA_Init+0x16c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b8:	f003 031c 	and.w	r3, r3, #28
 80028bc:	210f      	movs	r1, #15
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4917      	ldr	r1, [pc, #92]	@ (8002924 <HAL_DMA_Init+0x16c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <HAL_DMA_Init+0x16c>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 031c 	and.w	r3, r3, #28
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	4911      	ldr	r1, [pc, #68]	@ (8002924 <HAL_DMA_Init+0x16c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40020407 	.word	0x40020407
 800290c:	bffdfff8 	.word	0xbffdfff8
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	40020000 	.word	0x40020000
 8002918:	bffdfbf8 	.word	0xbffdfbf8
 800291c:	40020400 	.word	0x40020400
 8002920:	400200a8 	.word	0x400200a8
 8002924:	400204a8 	.word	0x400204a8

08002928 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e022      	b.n	8002998 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020e 	bic.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f003 021c 	and.w	r2, r3, #28
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d005      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e029      	b.n	8002a1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020e 	bic.w	r2, r2, #14
 80029d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	f003 021c 	and.w	r2, r3, #28
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
    }
  }
  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f003 031c 	and.w	r3, r3, #28
 8002a46:	2204      	movs	r2, #4
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d026      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x7a>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d021      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0204 	bic.w	r2, r2, #4
 8002a78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f003 021c 	and.w	r2, r3, #28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2104      	movs	r1, #4
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d071      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a9e:	e06c      	b.n	8002b7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f003 031c 	and.w	r3, r3, #28
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02e      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xec>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d029      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 020a 	bic.w	r2, r2, #10
 8002ada:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	f003 021c 	and.w	r2, r3, #28
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	2102      	movs	r1, #2
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d038      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b10:	e033      	b.n	8002b7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f003 031c 	and.w	r3, r3, #28
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x156>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d025      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020e 	bic.w	r2, r2, #14
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f003 021c 	and.w	r2, r3, #28
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
}
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b92:	e17f      	b.n	8002e94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8171 	beq.w	8002e8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d005      	beq.n	8002bc4 <HAL_GPIO_Init+0x40>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d130      	bne.n	8002c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 0201 	and.w	r2, r3, #1
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d118      	bne.n	8002c64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d017      	beq.n	8002ca0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80ac 	beq.w	8002e8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	4b5f      	ldr	r3, [pc, #380]	@ (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d42:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d78:	d025      	beq.n	8002dc6 <HAL_GPIO_Init+0x242>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ebc <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <HAL_GPIO_Init+0x23e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec0 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d019      	beq.n	8002dbe <HAL_GPIO_Init+0x23a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec4 <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x236>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec8 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x232>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ecc <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x22e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed0 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x22a>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x244>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dd8:	4937      	ldr	r1, [pc, #220]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e0a:	4a32      	ldr	r2, [pc, #200]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e10:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e34:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e88:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f47f ae78 	bne.w	8002b94 <HAL_GPIO_Init+0x10>
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	48000800 	.word	0x48000800
 8002ec4:	48000c00 	.word	0x48000c00
 8002ec8:	48001000 	.word	0x48001000
 8002ecc:	48001400 	.word	0x48001400
 8002ed0:	48001800 	.word	0x48001800
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e08d      	b.n	8003036 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f978 	bl	8001224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	@ 0x24
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e006      	b.n	8002f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d108      	bne.n	8002faa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	e007      	b.n	8002fba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d138      	bne.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800305e:	2302      	movs	r3, #2
 8003060:	e032      	b.n	80030c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2224      	movs	r2, #36	@ 0x24
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003090:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d139      	bne.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e033      	b.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003126:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <HAL_PWREx_GetVoltageRange+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40007000 	.word	0x40007000

08003188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003196:	d130      	bne.n	80031fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003198:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a4:	d038      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2232      	movs	r2, #50	@ 0x32
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9b      	lsrs	r3, r3, #18
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031cc:	e002      	b.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d102      	bne.n	80031e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f2      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f4:	d110      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e00f      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d007      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003208:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003210:	4a05      	ldr	r2, [pc, #20]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003216:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40007000 	.word	0x40007000
 800322c:	20000000 	.word	0x20000000
 8003230:	431bde83 	.word	0x431bde83

08003234 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e3ca      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	4b97      	ldr	r3, [pc, #604]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003250:	4b94      	ldr	r3, [pc, #592]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80e4 	beq.w	8003430 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_RCC_OscConfig+0x4a>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	f040 808b 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 8087 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327e:	4b89      	ldr	r3, [pc, #548]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3a2      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_RCC_OscConfig+0x7c>
 80032a6:	4b7f      	ldr	r3, [pc, #508]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ae:	e005      	b.n	80032bc <HAL_RCC_OscConfig+0x88>
 80032b0:	4b7c      	ldr	r3, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d223      	bcs.n	8003308 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fd55 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e383      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a72      	ldr	r2, [pc, #456]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032da:	f043 0308 	orr.w	r3, r3, #8
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	496d      	ldr	r1, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f2:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4968      	ldr	r1, [pc, #416]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
 8003306:	e025      	b.n	8003354 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b63      	ldr	r3, [pc, #396]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4960      	ldr	r1, [pc, #384]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003326:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	495b      	ldr	r1, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fd15 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e343      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003354:	f000 fc4a 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b52      	ldr	r3, [pc, #328]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	4950      	ldr	r1, [pc, #320]	@ (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	4a4e      	ldr	r2, [pc, #312]	@ (80034ac <HAL_RCC_OscConfig+0x278>)
 8003372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003374:	4b4e      	ldr	r3, [pc, #312]	@ (80034b0 <HAL_RCC_OscConfig+0x27c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f88b 	bl	8002494 <HAL_InitTick>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d052      	beq.n	800342e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	e327      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d032      	beq.n	80033fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a42      	ldr	r2, [pc, #264]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a0:	f7ff f8c8 	bl	8002534 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a8:	f7ff f8c4 	bl	8002534 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e310      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ba:	4b3a      	ldr	r3, [pc, #232]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033cc:	f043 0308 	orr.w	r3, r3, #8
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4931      	ldr	r1, [pc, #196]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	492c      	ldr	r1, [pc, #176]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e01a      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a29      	ldr	r2, [pc, #164]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003406:	f7ff f895 	bl	8002534 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340e:	f7ff f891 	bl	8002534 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e2dd      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x1da>
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d074      	beq.n	8003526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x21a>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d10e      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d064      	beq.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d160      	bne.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e2ba      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x24a>
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e026      	b.n	80034cc <HAL_RCC_OscConfig+0x298>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_OscConfig+0x280>
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800348e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a02      	ldr	r2, [pc, #8]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x298>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	0800e704 	.word	0x0800e704
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004
 80034b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7ff f82e 	bl	8002534 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7ff f82a 	bl	8002534 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e276      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	4b92      	ldr	r3, [pc, #584]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x2a8>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7ff f81a 	bl	8002534 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7ff f816 	bl	8002534 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e262      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003516:	4b88      	ldr	r3, [pc, #544]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d0>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d060      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x310>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d119      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d116      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003544:	4b7c      	ldr	r3, [pc, #496]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_OscConfig+0x328>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e23f      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	4973      	ldr	r1, [pc, #460]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	e040      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d023      	beq.n	80035c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357a:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6e      	ldr	r2, [pc, #440]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe ffd5 	bl	8002534 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7fe ffd1 	bl	8002534 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e21d      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a0:	4b65      	ldr	r3, [pc, #404]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b62      	ldr	r3, [pc, #392]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	495f      	ldr	r1, [pc, #380]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e018      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe ffb1 	bl	8002534 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe ffad 	bl	8002534 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1f9      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e8:	4b53      	ldr	r3, [pc, #332]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03c      	beq.n	800367a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003608:	4b4b      	ldr	r3, [pc, #300]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360e:	4a4a      	ldr	r2, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe ff8c 	bl	8002534 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe ff88 	bl	8002534 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1d4      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCC_OscConfig+0x3ec>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003648:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe ff6f 	bl	8002534 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe ff6b 	bl	8002534 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1b7      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800366c:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a4:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d118      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7fe ff32 	bl	8002534 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe ff2e 	bl	8002534 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e17a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x4d8>
 80036fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800370a:	e029      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d115      	bne.n	8003740 <HAL_RCC_OscConfig+0x50c>
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a07      	ldr	r2, [pc, #28]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	4a03      	ldr	r2, [pc, #12]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003734:	e014      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	4b9c      	ldr	r3, [pc, #624]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	4a9b      	ldr	r2, [pc, #620]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003750:	4b98      	ldr	r3, [pc, #608]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	4a97      	ldr	r2, [pc, #604]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe fee4 	bl	8002534 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fe fee0 	bl	8002534 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e12a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	4b8b      	ldr	r3, [pc, #556]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ed      	beq.n	8003770 <HAL_RCC_OscConfig+0x53c>
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fe fecd 	bl	8002534 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe fec9 	bl	8002534 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e113      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b7f      	ldr	r3, [pc, #508]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ed      	bne.n	800379e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	4a79      	ldr	r2, [pc, #484]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80fe 	beq.w	80039da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 80d0 	bne.w	8003988 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b72      	ldr	r3, [pc, #456]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d130      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	3b01      	subs	r3, #1
 8003808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d127      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11f      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003828:	2a07      	cmp	r2, #7
 800382a:	bf14      	ite	ne
 800382c:	2201      	movne	r2, #1
 800382e:	2200      	moveq	r2, #0
 8003830:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003832:	4293      	cmp	r3, r2
 8003834:	d113      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d109      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	3b01      	subs	r3, #1
 8003858:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d06e      	beq.n	800393c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d069      	beq.n	8003938 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003864:	4b53      	ldr	r3, [pc, #332]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003870:	4b50      	ldr	r3, [pc, #320]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0ad      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003880:	4b4c      	ldr	r3, [pc, #304]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4b      	ldr	r2, [pc, #300]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800388c:	f7fe fe52 	bl	8002534 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fe4e 	bl	8002534 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e09a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b2:	4b40      	ldr	r3, [pc, #256]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCC_OscConfig+0x784>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038cc:	0212      	lsls	r2, r2, #8
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0552      	lsls	r2, r2, #21
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0652      	lsls	r2, r2, #25
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038ec:	0912      	lsrs	r2, r2, #4
 80038ee:	0452      	lsls	r2, r2, #17
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4930      	ldr	r1, [pc, #192]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f8:	4b2e      	ldr	r3, [pc, #184]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003904:	4b2b      	ldr	r3, [pc, #172]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a2a      	ldr	r2, [pc, #168]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003910:	f7fe fe10 	bl	8002534 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fe0c 	bl	8002534 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e058      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003936:	e050      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e04f      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d148      	bne.n	80039da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003948:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a19      	ldr	r2, [pc, #100]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003960:	f7fe fde8 	bl	8002534 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fde4 	bl	8002534 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e030      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x734>
 8003986:	e028      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d023      	beq.n	80039d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fdcb 	bl	8002534 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	e00c      	b.n	80039bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fdc7 	bl	8002534 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d905      	bls.n	80039bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ec      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4905      	ldr	r1, [pc, #20]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x7b4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
 80039d4:	e001      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	feeefffc 	.word	0xfeeefffc

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0e7      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b75      	ldr	r3, [pc, #468]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d910      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b72      	ldr	r3, [pc, #456]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4970      	ldr	r1, [pc, #448]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cf      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d908      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b63      	ldr	r3, [pc, #396]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4960      	ldr	r1, [pc, #384]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04c      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d121      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0a6      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8a:	4b54      	ldr	r3, [pc, #336]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e09a      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e08e      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e086      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b46      	ldr	r3, [pc, #280]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4943      	ldr	r1, [pc, #268]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fe fd2e 	bl	8002534 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fe fd2a 	bl	8002534 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e06e      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d208      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b2e      	ldr	r3, [pc, #184]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	492b      	ldr	r1, [pc, #172]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b32:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d210      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0207 	bic.w	r2, r3, #7
 8003b48:	4923      	ldr	r1, [pc, #140]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e036      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4910      	ldr	r1, [pc, #64]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba0:	f000 f824 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	490b      	ldr	r1, [pc, #44]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1fc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fc65 	bl	8002494 <HAL_InitTick>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bce:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800e704 	.word	0x0800e704
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d121      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d11e      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c20:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c48:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d102      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c64:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e004      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c70:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d134      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xac>
 8003c90:	e005      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9a:	617b      	str	r3, [r7, #20]
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	3301      	adds	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0e5b      	lsrs	r3, r3, #25
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	0800e71c 	.word	0x0800e71c
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	007a1200 	.word	0x007a1200

08003d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d08:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000000 	.word	0x20000000

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d20:	f7ff fff0 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	0800e714 	.word	0x0800e714

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d4c:	f7ff ffda 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0adb      	lsrs	r3, r3, #11
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4904      	ldr	r1, [pc, #16]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800e714 	.word	0x0800e714

08003d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d80:	4b2a      	ldr	r3, [pc, #168]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d8c:	f7ff f9ee 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003d90:	6178      	str	r0, [r7, #20]
 8003d92:	e014      	b.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a24      	ldr	r2, [pc, #144]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dac:	f7ff f9de 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc4:	d10b      	bne.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b80      	cmp	r3, #128	@ 0x80
 8003dca:	d919      	bls.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dd0:	d902      	bls.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e013      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd8:	2301      	movs	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e010      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b80      	cmp	r3, #128	@ 0x80
 8003de2:	d902      	bls.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de4:	2303      	movs	r3, #3
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	e00a      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b80      	cmp	r3, #128	@ 0x80
 8003dee:	d102      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df0:	2302      	movs	r3, #2
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	e004      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b70      	cmp	r3, #112	@ 0x70
 8003dfa:	d101      	bne.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 0207 	bic.w	r2, r3, #7
 8003e08:	4909      	ldr	r1, [pc, #36]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40022000 	.word	0x40022000

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d041      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e58:	d02a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e5e:	d824      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e64:	d008      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e6a:	d81e      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e74:	d010      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e76:	e018      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e78:	4b86      	ldr	r3, [pc, #536]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a85      	ldr	r2, [pc, #532]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f829 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e96:	e00c      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3320      	adds	r3, #32
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f914 	bl	80050cc <RCCEx_PLLSAI2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	74fb      	strb	r3, [r7, #19]
      break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb8:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec6:	4973      	ldr	r1, [pc, #460]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d041      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ee8:	d02a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eee:	d824      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003efa:	d81e      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f04:	d010      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f06:	e018      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a61      	ldr	r2, [pc, #388]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 ffe1 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f8cc 	bl	80050cc <RCCEx_PLLSAI2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f56:	494f      	ldr	r1, [pc, #316]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f5e:	e001      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a0 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f76:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	4a40      	ldr	r2, [pc, #256]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f98:	4b3e      	ldr	r3, [pc, #248]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3a      	ldr	r2, [pc, #232]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb4:	f7fe fabe 	bl	8002534 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fba:	e009      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fe faba 	bl	8002534 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d902      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ef      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d15c      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01f      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d019      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe fa79 	bl	8002534 <HAL_GetTick>
 8004042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e00b      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fa75 	bl	8002534 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d902      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	74fb      	strb	r3, [r7, #19]
            break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ec      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	4904      	ldr	r1, [pc, #16]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a0:	7c7b      	ldrb	r3, [r7, #17]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b9e      	ldr	r3, [pc, #632]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	4a9d      	ldr	r2, [pc, #628]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040be:	4b98      	ldr	r3, [pc, #608]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f023 0203 	bic.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	4994      	ldr	r1, [pc, #592]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 020c 	bic.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	498c      	ldr	r1, [pc, #560]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004102:	4b87      	ldr	r3, [pc, #540]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	4983      	ldr	r1, [pc, #524]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	497b      	ldr	r1, [pc, #492]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004146:	4b76      	ldr	r3, [pc, #472]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004154:	4972      	ldr	r1, [pc, #456]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004168:	4b6d      	ldr	r3, [pc, #436]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	496a      	ldr	r1, [pc, #424]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418a:	4b65      	ldr	r3, [pc, #404]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	4961      	ldr	r1, [pc, #388]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	4959      	ldr	r1, [pc, #356]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ce:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	4950      	ldr	r1, [pc, #320]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	4948      	ldr	r1, [pc, #288]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004212:	4b43      	ldr	r3, [pc, #268]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	493f      	ldr	r1, [pc, #252]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d028      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004234:	4b3a      	ldr	r3, [pc, #232]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004242:	4937      	ldr	r1, [pc, #220]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004252:	d106      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b32      	ldr	r3, [pc, #200]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
 8004260:	e011      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe36 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004292:	4b23      	ldr	r3, [pc, #140]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	491f      	ldr	r1, [pc, #124]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042bc:	60d3      	str	r3, [r2, #12]
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fe07 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02b      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	4908      	ldr	r1, [pc, #32]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430e:	d109      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a02      	ldr	r2, [pc, #8]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
 800431c:	e014      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fdd5 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004354:	4b2b      	ldr	r3, [pc, #172]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004362:	4928      	ldr	r1, [pc, #160]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004372:	d10d      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fdb2 	bl	8004ee4 <RCCEx_PLLSAI1_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d014      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	74bb      	strb	r3, [r7, #18]
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3320      	adds	r3, #32
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fe93 	bl	80050cc <RCCEx_PLLSAI2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ce:	490d      	ldr	r1, [pc, #52]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f2:	4904      	ldr	r1, [pc, #16]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800441a:	d13e      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800441c:	4bb2      	ldr	r3, [pc, #712]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442e:	d028      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004436:	f200 8542 	bhi.w	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004440:	d005      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004448:	d00e      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800444a:	f000 bd38 	b.w	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800444e:	4ba6      	ldr	r3, [pc, #664]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	f040 8532 	bne.w	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004462:	61fb      	str	r3, [r7, #28]
      break;
 8004464:	f000 bd2d 	b.w	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004468:	4b9f      	ldr	r3, [pc, #636]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	f040 8527 	bne.w	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004478:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800447c:	61fb      	str	r3, [r7, #28]
      break;
 800447e:	f000 bd22 	b.w	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004482:	4b99      	ldr	r3, [pc, #612]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800448e:	f040 851c 	bne.w	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004492:	4b96      	ldr	r3, [pc, #600]	@ (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004494:	61fb      	str	r3, [r7, #28]
      break;
 8004496:	f000 bd18 	b.w	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449a:	4b93      	ldr	r3, [pc, #588]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d036      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d840      	bhi.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d020      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80044bc:	e039      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80044be:	4b8a      	ldr	r3, [pc, #552]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d116      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80044ca:	4b87      	ldr	r3, [pc, #540]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80044d6:	4b84      	ldr	r3, [pc, #528]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	e005      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80044e2:	4b81      	ldr	r3, [pc, #516]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	4a80      	ldr	r2, [pc, #512]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044f6:	e01f      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
      break;
 80044fc:	e01c      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044fe:	4b7a      	ldr	r3, [pc, #488]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450a:	d102      	bne.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800450c:	4b79      	ldr	r3, [pc, #484]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800450e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004510:	e012      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
      break;
 8004516:	e00f      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004518:	4b73      	ldr	r3, [pc, #460]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004524:	d102      	bne.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004526:	4b74      	ldr	r3, [pc, #464]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800452a:	e005      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
      break;
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
      break;
 8004536:	bf00      	nop
    }

    switch(PeriphClk)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800453e:	f000 80dd 	beq.w	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004548:	f200 84c1 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004552:	f000 80d3 	beq.w	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800455c:	f200 84b7 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004566:	f000 835f 	beq.w	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	f200 84ad 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457a:	f000 847e 	beq.w	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004584:	f200 84a3 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800458e:	f000 82cd 	beq.w	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004598:	f200 8499 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a2:	f000 80ab 	beq.w	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ac:	f200 848f 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b6:	f000 8090 	beq.w	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c0:	f200 8485 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ca:	d07f      	beq.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d2:	f200 847c 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045dc:	f000 8403 	beq.w	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e6:	f200 8472 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f0:	f000 83af 	beq.w	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fa:	f200 8468 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004604:	f000 8379 	beq.w	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800460e:	f200 845e 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	f000 8344 	beq.w	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b80      	cmp	r3, #128	@ 0x80
 800461e:	f200 8456 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b20      	cmp	r3, #32
 8004626:	d84b      	bhi.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 844f 	beq.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	2b1f      	cmp	r3, #31
 8004636:	f200 844a 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800463a:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004829 	.word	0x08004829
 8004644:	08004897 	.word	0x08004897
 8004648:	08004ecf 	.word	0x08004ecf
 800464c:	0800492b 	.word	0x0800492b
 8004650:	08004ecf 	.word	0x08004ecf
 8004654:	08004ecf 	.word	0x08004ecf
 8004658:	08004ecf 	.word	0x08004ecf
 800465c:	080049b1 	.word	0x080049b1
 8004660:	08004ecf 	.word	0x08004ecf
 8004664:	08004ecf 	.word	0x08004ecf
 8004668:	08004ecf 	.word	0x08004ecf
 800466c:	08004ecf 	.word	0x08004ecf
 8004670:	08004ecf 	.word	0x08004ecf
 8004674:	08004ecf 	.word	0x08004ecf
 8004678:	08004ecf 	.word	0x08004ecf
 800467c:	08004a29 	.word	0x08004a29
 8004680:	08004ecf 	.word	0x08004ecf
 8004684:	08004ecf 	.word	0x08004ecf
 8004688:	08004ecf 	.word	0x08004ecf
 800468c:	08004ecf 	.word	0x08004ecf
 8004690:	08004ecf 	.word	0x08004ecf
 8004694:	08004ecf 	.word	0x08004ecf
 8004698:	08004ecf 	.word	0x08004ecf
 800469c:	08004ecf 	.word	0x08004ecf
 80046a0:	08004ecf 	.word	0x08004ecf
 80046a4:	08004ecf 	.word	0x08004ecf
 80046a8:	08004ecf 	.word	0x08004ecf
 80046ac:	08004ecf 	.word	0x08004ecf
 80046b0:	08004ecf 	.word	0x08004ecf
 80046b4:	08004ecf 	.word	0x08004ecf
 80046b8:	08004ecf 	.word	0x08004ecf
 80046bc:	08004aab 	.word	0x08004aab
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	f000 82c1 	beq.w	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80046c8:	f000 bc01 	b.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80046cc:	69b9      	ldr	r1, [r7, #24]
 80046ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80046d2:	f000 fdd9 	bl	8005288 <RCCEx_GetSAIxPeriphCLKFreq>
 80046d6:	61f8      	str	r0, [r7, #28]
      break;
 80046d8:	e3fa      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046e0:	f000 fdd2 	bl	8005288 <RCCEx_GetSAIxPeriphCLKFreq>
 80046e4:	61f8      	str	r0, [r7, #28]
      break;
 80046e6:	e3f3      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80046e8:	40021000 	.word	0x40021000
 80046ec:	0003d090 	.word	0x0003d090
 80046f0:	0800e71c 	.word	0x0800e71c
 80046f4:	00f42400 	.word	0x00f42400
 80046f8:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046fc:	4ba9      	ldr	r3, [pc, #676]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004702:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800470e:	d00c      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004716:	d87f      	bhi.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800471e:	d04e      	beq.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004726:	d01d      	beq.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004728:	e076      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800472a:	4b9e      	ldr	r3, [pc, #632]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d172      	bne.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004736:	4b9b      	ldr	r3, [pc, #620]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004742:	4b98      	ldr	r3, [pc, #608]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	e005      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800474e:	4b95      	ldr	r3, [pc, #596]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a93      	ldr	r2, [pc, #588]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800475c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004760:	61fb      	str	r3, [r7, #28]
          break;
 8004762:	e05b      	b.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004764:	4b8f      	ldr	r3, [pc, #572]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004770:	d156      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004772:	4b8c      	ldr	r3, [pc, #560]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800477e:	d14f      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004780:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800478a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	fb03 f202 	mul.w	r2, r3, r2
 8004794:	4b83      	ldr	r3, [pc, #524]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	3301      	adds	r3, #1
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80047a6:	4b7f      	ldr	r3, [pc, #508]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	0d5b      	lsrs	r3, r3, #21
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	3301      	adds	r3, #1
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	61fb      	str	r3, [r7, #28]
          break;
 80047bc:	e030      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80047be:	4b79      	ldr	r3, [pc, #484]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ca:	d12b      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80047cc:	4b75      	ldr	r3, [pc, #468]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d8:	d124      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047da:	4b72      	ldr	r3, [pc, #456]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	4b6d      	ldr	r3, [pc, #436]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	3301      	adds	r3, #1
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004800:	4b68      	ldr	r3, [pc, #416]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	0d5b      	lsrs	r3, r3, #21
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61fb      	str	r3, [r7, #28]
          break;
 8004816:	e005      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004818:	bf00      	nop
 800481a:	e359      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800481c:	bf00      	nop
 800481e:	e357      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004820:	bf00      	nop
 8004822:	e355      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004824:	bf00      	nop
        break;
 8004826:	e353      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004828:	4b5e      	ldr	r3, [pc, #376]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d827      	bhi.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004851 	.word	0x08004851
 8004844:	08004859 	.word	0x08004859
 8004848:	08004861 	.word	0x08004861
 800484c:	08004875 	.word	0x08004875
          frequency = HAL_RCC_GetPCLK2Freq();
 8004850:	f7ff fa7a 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8004854:	61f8      	str	r0, [r7, #28]
          break;
 8004856:	e01d      	b.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004858:	f7ff f9c8 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800485c:	61f8      	str	r0, [r7, #28]
          break;
 800485e:	e019      	b.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004860:	4b50      	ldr	r3, [pc, #320]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486c:	d10f      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800486e:	4b4f      	ldr	r3, [pc, #316]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004870:	61fb      	str	r3, [r7, #28]
          break;
 8004872:	e00c      	b.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004874:	4b4b      	ldr	r3, [pc, #300]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d107      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004886:	61fb      	str	r3, [r7, #28]
          break;
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800488a:	bf00      	nop
 800488c:	e320      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800488e:	bf00      	nop
 8004890:	e31e      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004892:	bf00      	nop
        break;
 8004894:	e31c      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004896:	4b43      	ldr	r3, [pc, #268]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d83a      	bhi.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	0800491f 	.word	0x0800491f
 80048b8:	0800491f 	.word	0x0800491f
 80048bc:	0800491f 	.word	0x0800491f
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	0800491f 	.word	0x0800491f
 80048c8:	0800491f 	.word	0x0800491f
 80048cc:	0800491f 	.word	0x0800491f
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	0800491f 	.word	0x0800491f
 80048d8:	0800491f 	.word	0x0800491f
 80048dc:	0800491f 	.word	0x0800491f
 80048e0:	08004909 	.word	0x08004909
          frequency = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7ff fa1a 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 80048e8:	61f8      	str	r0, [r7, #28]
          break;
 80048ea:	e01d      	b.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80048ec:	f7ff f97e 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80048f0:	61f8      	str	r0, [r7, #28]
          break;
 80048f2:	e019      	b.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048f4:	4b2b      	ldr	r3, [pc, #172]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004900:	d10f      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004902:	4b2a      	ldr	r3, [pc, #168]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004904:	61fb      	str	r3, [r7, #28]
          break;
 8004906:	e00c      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004908:	4b26      	ldr	r3, [pc, #152]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d107      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800491a:	61fb      	str	r3, [r7, #28]
          break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800491e:	bf00      	nop
 8004920:	e2d6      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004922:	bf00      	nop
 8004924:	e2d4      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004926:	bf00      	nop
        break;
 8004928:	e2d2      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800492a:	4b1e      	ldr	r3, [pc, #120]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004930:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b30      	cmp	r3, #48	@ 0x30
 800493a:	d021      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b30      	cmp	r3, #48	@ 0x30
 8004940:	d829      	bhi.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b20      	cmp	r3, #32
 8004946:	d011      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d823      	bhi.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b10      	cmp	r3, #16
 8004958:	d004      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800495a:	e01c      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800495c:	f7ff f9de 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004960:	61f8      	str	r0, [r7, #28]
          break;
 8004962:	e01d      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004964:	f7ff f942 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004968:	61f8      	str	r0, [r7, #28]
          break;
 800496a:	e019      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004978:	d10f      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800497a:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800497c:	61fb      	str	r3, [r7, #28]
          break;
 800497e:	e00c      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004980:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d107      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004992:	61fb      	str	r3, [r7, #28]
          break;
 8004994:	e003      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004996:	bf00      	nop
 8004998:	e29a      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800499a:	bf00      	nop
 800499c:	e298      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800499e:	bf00      	nop
        break;
 80049a0:	e296      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	0800e71c 	.word	0x0800e71c
 80049ac:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80049b0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c0:	d021      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c6:	d829      	bhi.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b80      	cmp	r3, #128	@ 0x80
 80049cc:	d011      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d823      	bhi.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b40      	cmp	r3, #64	@ 0x40
 80049de:	d004      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80049e0:	e01c      	b.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049e2:	f7ff f99b 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 80049e6:	61f8      	str	r0, [r7, #28]
          break;
 80049e8:	e01d      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ea:	f7ff f8ff 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80049ee:	61f8      	str	r0, [r7, #28]
          break;
 80049f0:	e019      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fe:	d10f      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004a00:	4b88      	ldr	r3, [pc, #544]	@ (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a02:	61fb      	str	r3, [r7, #28]
          break;
 8004a04:	e00c      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a06:	4b86      	ldr	r3, [pc, #536]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d107      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a18:	61fb      	str	r3, [r7, #28]
          break;
 8004a1a:	e003      	b.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004a1c:	bf00      	nop
 8004a1e:	e257      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a20:	bf00      	nop
 8004a22:	e255      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a24:	bf00      	nop
        break;
 8004a26:	e253      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a28:	4b7d      	ldr	r3, [pc, #500]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a3a:	d025      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a42:	d82c      	bhi.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a52:	d824      	bhi.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a60:	d004      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004a62:	e01c      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7ff f95a 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
          break;
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a6c:	f7ff f8be 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004a70:	61f8      	str	r0, [r7, #28]
          break;
 8004a72:	e019      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a74:	4b6a      	ldr	r3, [pc, #424]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a80:	d10f      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004a82:	4b68      	ldr	r3, [pc, #416]	@ (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a84:	61fb      	str	r3, [r7, #28]
          break;
 8004a86:	e00c      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a88:	4b65      	ldr	r3, [pc, #404]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9a:	61fb      	str	r3, [r7, #28]
          break;
 8004a9c:	e003      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004a9e:	bf00      	nop
 8004aa0:	e216      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aa2:	bf00      	nop
 8004aa4:	e214      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aa6:	bf00      	nop
        break;
 8004aa8:	e212      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004abc:	d025      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ac4:	d82c      	bhi.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004acc:	d013      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad4:	d824      	bhi.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae2:	d004      	beq.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7ff f919 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004aea:	61f8      	str	r0, [r7, #28]
          break;
 8004aec:	e01d      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004aee:	f7ff f87d 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004af2:	61f8      	str	r0, [r7, #28]
          break;
 8004af4:	e019      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004af6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b02:	d10f      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004b04:	4b47      	ldr	r3, [pc, #284]	@ (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b06:	61fb      	str	r3, [r7, #28]
          break;
 8004b08:	e00c      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b0a:	4b45      	ldr	r3, [pc, #276]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d107      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b1c:	61fb      	str	r3, [r7, #28]
          break;
 8004b1e:	e003      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004b20:	bf00      	nop
 8004b22:	e1d5      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b24:	bf00      	nop
 8004b26:	e1d3      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004b28:	bf00      	nop
        break;
 8004b2a:	e1d1      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b3e:	d00c      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b46:	d864      	bhi.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b56:	d030      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b58:	e05b      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7ff f847 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004b5e:	61f8      	str	r0, [r7, #28]
          break;
 8004b60:	e05c      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b62:	4b2f      	ldr	r3, [pc, #188]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b6e:	d152      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d04c      	beq.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b7c:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b86:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	fb03 f202 	mul.w	r2, r3, r2
 8004b90:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	0e5b      	lsrs	r3, r3, #25
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	3301      	adds	r3, #1
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	61fb      	str	r3, [r7, #28]
          break;
 8004bb8:	e02d      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004bba:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc6:	d128      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004bc8:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d022      	beq.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004bd4:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bde:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	fb03 f202 	mul.w	r2, r3, r2
 8004be8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004bfa:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	0e5b      	lsrs	r3, r3, #25
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	3301      	adds	r3, #1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	61fb      	str	r3, [r7, #28]
          break;
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004c12:	bf00      	nop
 8004c14:	e15c      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c16:	bf00      	nop
 8004c18:	e15a      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c1a:	bf00      	nop
        break;
 8004c1c:	e158      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000
 8004c24:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004c28:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c32:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004c3a:	f7ff f885 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8004c3e:	61f8      	str	r0, [r7, #28]
        break;
 8004c40:	e146      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c42:	f7fe ffd3 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004c46:	61f8      	str	r0, [r7, #28]
        break;
 8004c48:	e142      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c4a:	4b95      	ldr	r3, [pc, #596]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5c:	d013      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c64:	d819      	bhi.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	d004      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004c74:	e011      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c76:	f7ff f851 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004c7a:	61f8      	str	r0, [r7, #28]
          break;
 8004c7c:	e010      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c7e:	f7fe ffb5 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004c82:	61f8      	str	r0, [r7, #28]
          break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c86:	4b86      	ldr	r3, [pc, #536]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d104      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004c94:	4b83      	ldr	r3, [pc, #524]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c96:	61fb      	str	r3, [r7, #28]
          break;
 8004c98:	e001      	b.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004c9a:	bf00      	nop
 8004c9c:	e118      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c9e:	bf00      	nop
        break;
 8004ca0:	e116      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb4:	d013      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbc:	d819      	bhi.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cca:	d004      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004ccc:	e011      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cce:	f7ff f825 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004cd2:	61f8      	str	r0, [r7, #28]
          break;
 8004cd4:	e010      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fe ff89 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004cda:	61f8      	str	r0, [r7, #28]
          break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cde:	4b70      	ldr	r3, [pc, #448]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cea:	d104      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004cec:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cee:	61fb      	str	r3, [r7, #28]
          break;
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004cf2:	bf00      	nop
 8004cf4:	e0ec      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cf6:	bf00      	nop
        break;
 8004cf8:	e0ea      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004cfa:	4b69      	ldr	r3, [pc, #420]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d0c:	d013      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d14:	d819      	bhi.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d22:	d004      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004d24:	e011      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7fe fff9 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004d2a:	61f8      	str	r0, [r7, #28]
          break;
 8004d2c:	e010      	b.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fe ff5d 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8004d32:	61f8      	str	r0, [r7, #28]
          break;
 8004d34:	e00c      	b.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d36:	4b5a      	ldr	r3, [pc, #360]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d42:	d104      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004d44:	4b57      	ldr	r3, [pc, #348]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004d46:	61fb      	str	r3, [r7, #28]
          break;
 8004d48:	e001      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004d4a:	bf00      	nop
 8004d4c:	e0c0      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d4e:	bf00      	nop
        break;
 8004d50:	e0be      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d52:	4b53      	ldr	r3, [pc, #332]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d64:	d02c      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d6c:	d833      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d74:	d01a      	beq.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d7c:	d82b      	bhi.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8a:	d004      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004d8c:	e023      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d8e:	f7fe ffc5 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004d92:	61f8      	str	r0, [r7, #28]
          break;
 8004d94:	e026      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d96:	4b42      	ldr	r3, [pc, #264]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d11a      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004da4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004da8:	61fb      	str	r3, [r7, #28]
          break;
 8004daa:	e016      	b.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db8:	d111      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004dba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004dbc:	61fb      	str	r3, [r7, #28]
          break;
 8004dbe:	e00e      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dc0:	4b37      	ldr	r3, [pc, #220]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd2:	61fb      	str	r3, [r7, #28]
          break;
 8004dd4:	e005      	b.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004dd6:	bf00      	nop
 8004dd8:	e07a      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dda:	bf00      	nop
 8004ddc:	e078      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004dde:	bf00      	nop
 8004de0:	e076      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004de2:	bf00      	nop
        break;
 8004de4:	e074      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004de6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004df8:	d02c      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e00:	d833      	bhi.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e08:	d01a      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e10:	d82b      	bhi.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e1e:	d004      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004e20:	e023      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e22:	f7fe ff7b 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004e26:	61f8      	str	r0, [r7, #28]
          break;
 8004e28:	e026      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d11a      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004e38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e3c:	61fb      	str	r3, [r7, #28]
          break;
 8004e3e:	e016      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b17      	ldr	r3, [pc, #92]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4c:	d111      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004e4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004e50:	61fb      	str	r3, [r7, #28]
          break;
 8004e52:	e00e      	b.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e54:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	61fb      	str	r3, [r7, #28]
          break;
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004e6a:	bf00      	nop
 8004e6c:	e030      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e6e:	bf00      	nop
 8004e70:	e02e      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e72:	bf00      	nop
 8004e74:	e02c      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e76:	bf00      	nop
        break;
 8004e78:	e02a      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004e7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e92:	d009      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004e94:	e012      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e96:	f7fe ff41 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8004e9a:	61f8      	str	r0, [r7, #28]
          break;
 8004e9c:	e00e      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb4:	d101      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004eb8:	61fb      	str	r3, [r7, #28]
          break;
 8004eba:	bf00      	nop
        break;
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ece:	bf00      	nop
    }
  }

  return(frequency);
 8004ed0:	69fb      	ldr	r3, [r7, #28]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	00f42400 	.word	0x00f42400

08004ee4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ef2:	4b75      	ldr	r3, [pc, #468]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d018      	beq.n	8004f30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004efe:	4b72      	ldr	r3, [pc, #456]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0203 	and.w	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d10d      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
       ||
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f16:	4b6c      	ldr	r3, [pc, #432]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
       ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d047      	beq.n	8004fba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e044      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d018      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x86>
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d825      	bhi.n	8004f88 <RCCEx_PLLSAI1_Config+0xa4>
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d002      	beq.n	8004f46 <RCCEx_PLLSAI1_Config+0x62>
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d009      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x74>
 8004f44:	e020      	b.n	8004f88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f46:	4b60      	ldr	r3, [pc, #384]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11d      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f56:	e01a      	b.n	8004f8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f58:	4b5b      	ldr	r3, [pc, #364]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d116      	bne.n	8004f92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f68:	e013      	b.n	8004f92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f6a:	4b57      	ldr	r3, [pc, #348]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f76:	4b54      	ldr	r3, [pc, #336]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f86:	e006      	b.n	8004f96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e004      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e002      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	4944      	ldr	r1, [pc, #272]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d17d      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fd fab2 	bl	8002534 <HAL_GetTick>
 8004fd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fd2:	e009      	b.n	8004fe8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd4:	f7fd faae 	bl	8002534 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d902      	bls.n	8004fe8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe6:	e005      	b.n	8004ff4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fe8:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ef      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d160      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d111      	bne.n	8005024 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005000:	4b31      	ldr	r3, [pc, #196]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6892      	ldr	r2, [r2, #8]
 8005010:	0211      	lsls	r1, r2, #8
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68d2      	ldr	r2, [r2, #12]
 8005016:	0912      	lsrs	r2, r2, #4
 8005018:	0452      	lsls	r2, r2, #17
 800501a:	430a      	orrs	r2, r1
 800501c:	492a      	ldr	r1, [pc, #168]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	610b      	str	r3, [r1, #16]
 8005022:	e027      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d112      	bne.n	8005050 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800502a:	4b27      	ldr	r3, [pc, #156]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005032:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	0211      	lsls	r1, r2, #8
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6912      	ldr	r2, [r2, #16]
 8005040:	0852      	lsrs	r2, r2, #1
 8005042:	3a01      	subs	r2, #1
 8005044:	0552      	lsls	r2, r2, #21
 8005046:	430a      	orrs	r2, r1
 8005048:	491f      	ldr	r1, [pc, #124]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]
 800504e:	e011      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005058:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6892      	ldr	r2, [r2, #8]
 8005060:	0211      	lsls	r1, r2, #8
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6952      	ldr	r2, [r2, #20]
 8005066:	0852      	lsrs	r2, r2, #1
 8005068:	3a01      	subs	r2, #1
 800506a:	0652      	lsls	r2, r2, #25
 800506c:	430a      	orrs	r2, r1
 800506e:	4916      	ldr	r1, [pc, #88]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005074:	4b14      	ldr	r3, [pc, #80]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a13      	ldr	r2, [pc, #76]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800507e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fd fa58 	bl	8002534 <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005086:	e009      	b.n	800509c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005088:	f7fd fa54 	bl	8002534 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d902      	bls.n	800509c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	73fb      	strb	r3, [r7, #15]
          break;
 800509a:	e005      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800509c:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ef      	beq.n	8005088 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000

080050cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050da:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050e6:	4b67      	ldr	r3, [pc, #412]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0203 	and.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d10d      	bne.n	8005112 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
       ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050fe:	4b61      	ldr	r3, [pc, #388]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
       ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d047      	beq.n	80051a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e044      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d018      	beq.n	8005152 <RCCEx_PLLSAI2_Config+0x86>
 8005120:	2b03      	cmp	r3, #3
 8005122:	d825      	bhi.n	8005170 <RCCEx_PLLSAI2_Config+0xa4>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <RCCEx_PLLSAI2_Config+0x62>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d009      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x74>
 800512c:	e020      	b.n	8005170 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800512e:	4b55      	ldr	r3, [pc, #340]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11d      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800513e:	e01a      	b.n	8005176 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005140:	4b50      	ldr	r3, [pc, #320]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005150:	e013      	b.n	800517a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005152:	4b4c      	ldr	r3, [pc, #304]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800515e:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800516e:	e006      	b.n	800517e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e004      	b.n	8005180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800517e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005186:	4b3f      	ldr	r3, [pc, #252]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	430b      	orrs	r3, r1
 800519c:	4939      	ldr	r1, [pc, #228]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d167      	bne.n	8005278 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051a8:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a35      	ldr	r2, [pc, #212]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b4:	f7fd f9be 	bl	8002534 <HAL_GetTick>
 80051b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051ba:	e009      	b.n	80051d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051bc:	f7fd f9ba 	bl	8002534 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d902      	bls.n	80051d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	73fb      	strb	r3, [r7, #15]
        break;
 80051ce:	e005      	b.n	80051dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ef      	bne.n	80051bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d14a      	bne.n	8005278 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d111      	bne.n	800520c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051e8:	4b26      	ldr	r3, [pc, #152]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	0211      	lsls	r1, r2, #8
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	0912      	lsrs	r2, r2, #4
 8005200:	0452      	lsls	r2, r2, #17
 8005202:	430a      	orrs	r2, r1
 8005204:	491f      	ldr	r1, [pc, #124]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005206:	4313      	orrs	r3, r2
 8005208:	614b      	str	r3, [r1, #20]
 800520a:	e011      	b.n	8005230 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800520c:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005214:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6892      	ldr	r2, [r2, #8]
 800521c:	0211      	lsls	r1, r2, #8
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6912      	ldr	r2, [r2, #16]
 8005222:	0852      	lsrs	r2, r2, #1
 8005224:	3a01      	subs	r2, #1
 8005226:	0652      	lsls	r2, r2, #25
 8005228:	430a      	orrs	r2, r1
 800522a:	4916      	ldr	r1, [pc, #88]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	4313      	orrs	r3, r2
 800522e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005230:	4b14      	ldr	r3, [pc, #80]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a13      	ldr	r2, [pc, #76]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fd f97a 	bl	8002534 <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005242:	e009      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005244:	f7fd f976 	bl	8002534 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
          break;
 8005256:	e005      	b.n	8005264 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005258:	4b0a      	ldr	r3, [pc, #40]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ef      	beq.n	8005244 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4904      	ldr	r1, [pc, #16]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000

08005288 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	@ 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a4:	d10c      	bne.n	80052c0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80052a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80052b0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052b8:	d112      	bne.n	80052e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80052ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e00f      	b.n	80052e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c6:	d10b      	bne.n	80052e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80052c8:	4b65      	ldr	r3, [pc, #404]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80052d2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052da:	d101      	bne.n	80052e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80052dc:	4b61      	ldr	r3, [pc, #388]	@ (8005464 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80052de:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80b4 	bne.w	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052f2:	d003      	beq.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fa:	d135      	bne.n	8005368 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052fc:	4b58      	ldr	r3, [pc, #352]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005308:	f040 80a1 	bne.w	800544e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800530c:	4b54      	ldr	r3, [pc, #336]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 809a 	beq.w	800544e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800531a:	4b51      	ldr	r3, [pc, #324]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	3301      	adds	r3, #1
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800532e:	4b4c      	ldr	r3, [pc, #304]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005338:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005340:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800534c:	2311      	movs	r3, #17
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e001      	b.n	8005356 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005352:	2307      	movs	r3, #7
 8005354:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	fb03 f202 	mul.w	r2, r3, r2
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005366:	e072      	b.n	800544e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d133      	bne.n	80053d6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800536e:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800537a:	d169      	bne.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800537c:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d063      	beq.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005388:	4b35      	ldr	r3, [pc, #212]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	3301      	adds	r3, #1
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800539c:	4b30      	ldr	r3, [pc, #192]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80053ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80053ba:	2311      	movs	r3, #17
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e001      	b.n	80053c4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80053c0:	2307      	movs	r3, #7
 80053c2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	fb03 f202 	mul.w	r2, r3, r2
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	e03c      	b.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053dc:	d003      	beq.n	80053e6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e4:	d134      	bne.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80053e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053f2:	d12d      	bne.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80053f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d027      	beq.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005400:	4b17      	ldr	r3, [pc, #92]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	3301      	adds	r3, #1
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005414:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	0a1b      	lsrs	r3, r3, #8
 800541a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800541e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005432:	2311      	movs	r3, #17
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e001      	b.n	800543c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005438:	2307      	movs	r3, #7
 800543a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	fb03 f202 	mul.w	r2, r3, r2
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e000      	b.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800544e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005450:	69fb      	ldr	r3, [r7, #28]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	@ 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
 8005464:	001fff68 	.word	0x001fff68

08005468 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d904      	bls.n	8005486 <HAL_SAI_InitProtocol+0x1e>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3b03      	subs	r3, #3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d812      	bhi.n	80054aa <HAL_SAI_InitProtocol+0x42>
 8005484:	e008      	b.n	8005498 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fba3 	bl	8005bd8 <SAI_InitI2S>
 8005492:	4603      	mov	r3, r0
 8005494:	75fb      	strb	r3, [r7, #23]
      break;
 8005496:	e00b      	b.n	80054b0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fc4c 	bl	8005d3c <SAI_InitPCM>
 80054a4:	4603      	mov	r3, r0
 80054a6:	75fb      	strb	r3, [r7, #23]
      break;
 80054a8:	e002      	b.n	80054b0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
      break;
 80054ae:	bf00      	nop
  }

  if (status == HAL_OK)
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f808 	bl	80054cc <HAL_SAI_Init>
 80054bc:	4603      	mov	r3, r0
 80054be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e155      	b.n	800578a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc f8e8 	bl	80016c8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fca1 	bl	8005e40 <SAI_Disable>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e140      	b.n	800578a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d00c      	beq.n	8005532 <HAL_SAI_Init+0x66>
 8005518:	2b02      	cmp	r3, #2
 800551a:	d80d      	bhi.n	8005538 <HAL_SAI_Init+0x6c>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_SAI_Init+0x5a>
 8005520:	2b01      	cmp	r3, #1
 8005522:	d003      	beq.n	800552c <HAL_SAI_Init+0x60>
 8005524:	e008      	b.n	8005538 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
      break;
 800552a:	e008      	b.n	800553e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800552c:	2310      	movs	r3, #16
 800552e:	61fb      	str	r3, [r7, #28]
      break;
 8005530:	e005      	b.n	800553e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005532:	2320      	movs	r3, #32
 8005534:	61fb      	str	r3, [r7, #28]
      break;
 8005536:	e002      	b.n	800553e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
      break;
 800553c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d81d      	bhi.n	8005582 <HAL_SAI_Init+0xb6>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <HAL_SAI_Init+0x80>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005563 	.word	0x08005563
 8005554:	0800556b 	.word	0x0800556b
 8005558:	08005573 	.word	0x08005573
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
      break;
 8005560:	e012      	b.n	8005588 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005566:	617b      	str	r3, [r7, #20]
      break;
 8005568:	e00e      	b.n	8005588 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800556a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800556e:	617b      	str	r3, [r7, #20]
      break;
 8005570:	e00a      	b.n	8005588 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005576:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
      break;
 8005580:	e002      	b.n	8005588 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
      break;
 8005586:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a81      	ldr	r2, [pc, #516]	@ (8005794 <HAL_SAI_Init+0x2c8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_SAI_Init+0xd0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a80      	ldr	r2, [pc, #512]	@ (8005798 <HAL_SAI_Init+0x2cc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800559c:	4a7f      	ldr	r2, [pc, #508]	@ (800579c <HAL_SAI_Init+0x2d0>)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e002      	b.n	80055aa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80055a4:	4a7e      	ldr	r2, [pc, #504]	@ (80057a0 <HAL_SAI_Init+0x2d4>)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d041      	beq.n	8005636 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a77      	ldr	r2, [pc, #476]	@ (8005794 <HAL_SAI_Init+0x2c8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_SAI_Init+0xfa>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a75      	ldr	r2, [pc, #468]	@ (8005798 <HAL_SAI_Init+0x2cc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d105      	bne.n	80055d2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80055c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055ca:	f7fe ff1d 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 80055ce:	6138      	str	r0, [r7, #16]
 80055d0:	e004      	b.n	80055dc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80055d2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055d6:	f7fe ff17 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 80055da:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	025b      	lsls	r3, r3, #9
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a6b      	ldr	r2, [pc, #428]	@ (80057a4 <HAL_SAI_Init+0x2d8>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	4b67      	ldr	r3, [pc, #412]	@ (80057a4 <HAL_SAI_Init+0x2d8>)
 8005606:	fba3 2301 	umull	r2, r3, r3, r1
 800560a:	08da      	lsrs	r2, r3, #3
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	1aca      	subs	r2, r1, r3
 8005616:	2a08      	cmp	r2, #8
 8005618:	d904      	bls.n	8005624 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	2b04      	cmp	r3, #4
 800562a:	d104      	bne.n	8005636 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	085a      	lsrs	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_SAI_Init+0x17a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d109      	bne.n	800565a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_SAI_Init+0x186>
 800564e:	2300      	movs	r3, #0
 8005650:	e001      	b.n	8005656 <HAL_SAI_Init+0x18a>
 8005652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e008      	b.n	800566c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HAL_SAI_Init+0x19c>
 8005662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005666:	e000      	b.n	800566a <HAL_SAI_Init+0x19e>
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b4c      	ldr	r3, [pc, #304]	@ (80057a8 <HAL_SAI_Init+0x2dc>)
 8005678:	400b      	ands	r3, r1
 800567a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005690:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	431a      	orrs	r2, r3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80056a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	051b      	lsls	r3, r3, #20
 80056b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80056d0:	f023 030f 	bic.w	r3, r3, #15
 80056d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b2b      	ldr	r3, [pc, #172]	@ (80057ac <HAL_SAI_Init+0x2e0>)
 8005700:	400b      	ands	r3, r1
 8005702:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005714:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800571a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005720:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	3b01      	subs	r3, #1
 8005728:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800572a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68d9      	ldr	r1, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005742:	400b      	ands	r3, r1
 8005744:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68d9      	ldr	r1, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005754:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800575c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005762:	3b01      	subs	r3, #1
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40015404 	.word	0x40015404
 8005798:	40015424 	.word	0x40015424
 800579c:	40015400 	.word	0x40015400
 80057a0:	40015800 	.word	0x40015800
 80057a4:	cccccccd 	.word	0xcccccccd
 80057a8:	ff05c010 	.word	0xff05c010
 80057ac:	fff88000 	.word	0xfff88000

080057b0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_SAI_Abort+0x1a>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e053      	b.n	8005872 <HAL_SAI_Abort+0xc2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fb34 	bl	8005e40 <SAI_Disable>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f0:	d125      	bne.n	800583e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005800:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b12      	cmp	r3, #18
 800580c:	d108      	bne.n	8005820 <HAL_SAI_Abort+0x70>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd f884 	bl	8002928 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b22      	cmp	r3, #34	@ 0x22
 800582a:	d108      	bne.n	800583e <HAL_SAI_Abort+0x8e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd f875 	bl	8002928 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800584e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0208 	orr.w	r2, r2, #8
 800585e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8192 	beq.w	8005bb6 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_SAI_IRQHandler+0x4c>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
 80058c6:	e176      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01e      	beq.n	8005910 <HAL_SAI_IRQHandler+0x94>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d019      	beq.n	8005910 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b22      	cmp	r3, #34	@ 0x22
 80058ee:	d101      	bne.n	80058f4 <HAL_SAI_IRQHandler+0x78>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_SAI_IRQHandler+0x7a>
 80058f4:	2302      	movs	r3, #2
 80058f6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f95b 	bl	8005bc4 <HAL_SAI_ErrorCallback>
 800590e:	e152      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d011      	beq.n	800593e <HAL_SAI_IRQHandler+0xc2>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2202      	movs	r2, #2
 800592a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8140 	beq.w	8005bb6 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800593c:	e13b      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d055      	beq.n	80059f4 <HAL_SAI_IRQHandler+0x178>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d050      	beq.n	80059f4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2220      	movs	r2, #32
 8005958:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005960:	f043 0204 	orr.w	r2, r3, #4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d038      	beq.n	80059e6 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005980:	4a8f      	ldr	r2, [pc, #572]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd f80b 	bl	80029a4 <HAL_DMA_Abort_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f90d 	bl	8005bc4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80fc 	beq.w	8005bac <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b8:	4a81      	ldr	r2, [pc, #516]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fc ffef 	bl	80029a4 <HAL_DMA_Abort_IT>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80ef 	beq.w	8005bac <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8f0 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059e4:	e0e2      	b.n	8005bac <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fee2 	bl	80057b0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8e9 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059f2:	e0db      	b.n	8005bac <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d055      	beq.n	8005aaa <HAL_SAI_IRQHandler+0x22e>
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d050      	beq.n	8005aaa <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2240      	movs	r2, #64	@ 0x40
 8005a0e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d038      	beq.n	8005a9c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a36:	4a62      	ldr	r2, [pc, #392]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc ffb0 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8b2 	bl	8005bc4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80a3 	beq.w	8005bb0 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	4a54      	ldr	r2, [pc, #336]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc ff94 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8096 	beq.w	8005bb0 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f895 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a9a:	e089      	b.n	8005bb0 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fe87 	bl	80057b0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f88e 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005aa8:	e082      	b.n	8005bb0 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d061      	beq.n	8005b78 <HAL_SAI_IRQHandler+0x2fc>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d05c      	beq.n	8005b78 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d036      	beq.n	8005b4e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d016      	beq.n	8005b16 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aec:	4a34      	ldr	r2, [pc, #208]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 8005aee:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fc ff55 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f857 	bl	8005bc4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04a      	beq.n	8005bb4 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b22:	4a27      	ldr	r2, [pc, #156]	@ (8005bc0 <HAL_SAI_IRQHandler+0x344>)
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fc ff3a 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d03e      	beq.n	8005bb4 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f83c 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b4c:	e032      	b.n	8005bb4 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b5e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f827 	bl	8005bc4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b76:	e01d      	b.n	8005bb4 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d019      	beq.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d014      	beq.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9a:	f043 0210 	orr.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f80d 	bl	8005bc4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005baa:	e004      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005bb4:	bf00      	nop
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08005eb5 	.word	0x08005eb5

08005bc4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <SAI_InitI2S+0x2e>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d103      	bne.n	8005c0e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c0c:	e002      	b.n	8005c14 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e077      	b.n	8005d2e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c52:	e006      	b.n	8005c62 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d84f      	bhi.n	8005d08 <SAI_InitI2S+0x130>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <SAI_InitI2S+0x98>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005ca3 	.word	0x08005ca3
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005ce7 	.word	0x08005ce7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2240      	movs	r2, #64	@ 0x40
 8005c9e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ca0:	e035      	b.n	8005d0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2280      	movs	r2, #128	@ 0x80
 8005ca6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	019a      	lsls	r2, r3, #6
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2280      	movs	r2, #128	@ 0x80
 8005cc0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005cc2:	e024      	b.n	8005d0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	22c0      	movs	r2, #192	@ 0xc0
 8005cc8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	019a      	lsls	r2, r3, #6
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2280      	movs	r2, #128	@ 0x80
 8005ce2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ce4:	e013      	b.n	8005d0e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	22e0      	movs	r2, #224	@ 0xe0
 8005cea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	019a      	lsls	r2, r3, #6
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005d06:	e002      	b.n	8005d0e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d10b      	bne.n	8005d2c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d102      	bne.n	8005d20 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d102      	bne.n	8005d2c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop

08005d3c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <SAI_InitPCM+0x2e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d103      	bne.n	8005d72 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d70:	e002      	b.n	8005d78 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005da0:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d103      	bne.n	8005db0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
 8005dae:	e002      	b.n	8005db6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	220d      	movs	r2, #13
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d837      	bhi.n	8005e2c <SAI_InitPCM+0xf0>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <SAI_InitPCM+0x88>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005deb 	.word	0x08005deb
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e17 	.word	0x08005e17
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2240      	movs	r2, #64	@ 0x40
 8005de6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005de8:	e023      	b.n	8005e32 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2280      	movs	r2, #128	@ 0x80
 8005dee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2280      	movs	r2, #128	@ 0x80
 8005dfc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dfe:	e018      	b.n	8005e32 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	22c0      	movs	r2, #192	@ 0xc0
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2280      	movs	r2, #128	@ 0x80
 8005e12:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e14:	e00d      	b.n	8005e32 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	22e0      	movs	r2, #224	@ 0xe0
 8005e1a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2280      	movs	r2, #128	@ 0x80
 8005e28:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005e2a:	e002      	b.n	8005e32 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e30:	bf00      	nop
  }

  return status;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e48:	4b18      	ldr	r3, [pc, #96]	@ (8005eac <SAI_Disable+0x6c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <SAI_Disable+0x70>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	0b1b      	lsrs	r3, r3, #12
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e6a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	72fb      	strb	r3, [r7, #11]
      break;
 8005e86:	e009      	b.n	8005e9c <SAI_Disable+0x5c>
    }
    count--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e7      	bne.n	8005e6c <SAI_Disable+0x2c>

  return status;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000000 	.word	0x20000000
 8005eb0:	95cbec1b 	.word	0x95cbec1b

08005eb4 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ee2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d00a      	beq.n	8005f04 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff ffa6 	bl	8005e40 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0208 	orr.w	r2, r2, #8
 8005f02:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff fe55 	bl	8005bc4 <HAL_SAI_ErrorCallback>
#endif
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e095      	b.n	8006060 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d108      	bne.n	8005f4e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f44:	d009      	beq.n	8005f5a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	61da      	str	r2, [r3, #28]
 8005f4c:	e005      	b.n	8005f5a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fb fcc9 	bl	800190c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f90:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f9a:	d902      	bls.n	8005fa2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e002      	b.n	8005fa8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fa6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005fb0:	d007      	beq.n	8005fc2 <HAL_SPI_Init+0xa0>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fba:	d002      	beq.n	8005fc2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	f003 0204 	and.w	r2, r3, #4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800603e:	ea42 0103 	orr.w	r1, r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006078:	f7fc fa5c 	bl	8002534 <HAL_GetTick>
 800607c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d001      	beq.n	8006092 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
 8006090:	e15c      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit+0x36>
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e154      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_SPI_Transmit+0x48>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e14d      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2203      	movs	r2, #3
 80060bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006102:	d10f      	bne.n	8006124 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006122:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612e:	2b40      	cmp	r3, #64	@ 0x40
 8006130:	d007      	beq.n	8006142 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800614a:	d952      	bls.n	80061f2 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_SPI_Transmit+0xf2>
 8006154:	8b7b      	ldrh	r3, [r7, #26]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d145      	bne.n	80061e6 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800617e:	e032      	b.n	80061e6 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d112      	bne.n	80061b4 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061b2:	e018      	b.n	80061e6 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b4:	f7fc f9be 	bl	8002534 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d803      	bhi.n	80061cc <HAL_SPI_Transmit+0x164>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ca:	d102      	bne.n	80061d2 <HAL_SPI_Transmit+0x16a>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e0b2      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1c7      	bne.n	8006180 <HAL_SPI_Transmit+0x118>
 80061f0:	e083      	b.n	80062fa <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Transmit+0x198>
 80061fa:	8b7b      	ldrh	r3, [r7, #26]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d177      	bne.n	80062f0 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d912      	bls.n	8006230 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b02      	subs	r3, #2
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800622e:	e05f      	b.n	80062f0 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006256:	e04b      	b.n	80062f0 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d12b      	bne.n	80062be <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d912      	bls.n	8006296 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b02      	subs	r3, #2
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006294:	e02c      	b.n	80062f0 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062bc:	e018      	b.n	80062f0 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062be:	f7fc f939 	bl	8002534 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d803      	bhi.n	80062d6 <HAL_SPI_Transmit+0x26e>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062d4:	d102      	bne.n	80062dc <HAL_SPI_Transmit+0x274>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e02d      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ae      	bne.n	8006258 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f946 	bl	8006590 <SPI_EndRxTxTransaction>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006364:	f7fc f8e6 	bl	8002534 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4413      	add	r3, r2
 8006372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006374:	f7fc f8de 	bl	8002534 <HAL_GetTick>
 8006378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800637a:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	0d1b      	lsrs	r3, r3, #20
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800638a:	e054      	b.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006392:	d050      	beq.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006394:	f7fc f8ce 	bl	8002534 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d902      	bls.n	80063aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d13d      	bne.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c2:	d111      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	d004      	beq.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d107      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d10f      	bne.n	8006412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e017      	b.n	8006456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3b01      	subs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	429a      	cmp	r2, r3
 8006452:	d19b      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000000 	.word	0x20000000

08006464 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	@ 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006476:	f7fc f85d 	bl	8002534 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	4413      	add	r3, r2
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006486:	f7fc f855 	bl	8002534 <HAL_GetTick>
 800648a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006494:	4b3d      	ldr	r3, [pc, #244]	@ (800658c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	00da      	lsls	r2, r3, #3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	0d1b      	lsrs	r3, r3, #20
 80064a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064ac:	e060      	b.n	8006570 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064b4:	d107      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064cc:	d050      	beq.n	8006570 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064ce:	f7fc f831 	bl	8002534 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064da:	429a      	cmp	r2, r3
 80064dc:	d902      	bls.n	80064e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13d      	bne.n	8006560 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064fc:	d111      	bne.n	8006522 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006506:	d004      	beq.n	8006512 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006510:	d107      	bne.n	8006522 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006520:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800652a:	d10f      	bne.n	800654c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800654a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e010      	b.n	8006582 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	3b01      	subs	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4013      	ands	r3, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d196      	bne.n	80064ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3728      	adds	r7, #40	@ 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000000 	.word	0x20000000

08006590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff ff5b 	bl	8006464 <SPI_WaitFifoStateUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e027      	b.n	8006614 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	2180      	movs	r1, #128	@ 0x80
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fec0 	bl	8006354 <SPI_WaitFlagStateUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e014      	b.n	8006614 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ff34 	bl	8006464 <SPI_WaitFifoStateUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e000      	b.n	8006614 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e040      	b.n	80066b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fb4a 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	@ 0x24
 8006648:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fedc 	bl	8007420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fc21 	bl	8006eb0 <UART_SetConfig>
 800666e:	4603      	mov	r3, r0
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e01b      	b.n	80066b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 ff5b 	bl	8007564 <UART_CheckIdleState>
 80066ae:	4603      	mov	r3, r0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	@ 0x28
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d177      	bne.n	80067c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Transmit+0x24>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e070      	b.n	80067c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2221      	movs	r2, #33	@ 0x21
 80066ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ee:	f7fb ff21 	bl	8002534 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670c:	d108      	bne.n	8006720 <HAL_UART_Transmit+0x68>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e003      	b.n	8006728 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006728:	e02f      	b.n	800678a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	@ 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 ffbd 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e03b      	b.n	80067c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	881a      	ldrh	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	b292      	uxth	r2, r2
 800675e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3302      	adds	r3, #2
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e007      	b.n	8006778 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1c9      	bne.n	800672a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	2140      	movs	r1, #64	@ 0x40
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 ff87 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e005      	b.n	80067c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	@ 0x28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d137      	bne.n	8006854 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_UART_Receive_IT+0x24>
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e030      	b.n	8006856 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <HAL_UART_Receive_IT+0x94>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01f      	beq.n	8006844 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d018      	beq.n	8006844 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	61bb      	str	r3, [r7, #24]
   return(result);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	461a      	mov	r2, r3
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 ffa0 	bl	8007790 <UART_Start_Receive_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	e000      	b.n	8006856 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3728      	adds	r7, #40	@ 0x28
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40008000 	.word	0x40008000

08006864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b0ba      	sub	sp, #232	@ 0xe8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800688a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800688e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006892:	4013      	ands	r3, r2
 8006894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d115      	bne.n	80068cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00f      	beq.n	80068cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 82ca 	beq.w	8006e56 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
      }
      return;
 80068ca:	e2c4      	b.n	8006e56 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80068cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8117 	beq.w	8006b04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068e6:	4b85      	ldr	r3, [pc, #532]	@ (8006afc <HAL_UART_IRQHandler+0x298>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 810a 	beq.w	8006b04 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d011      	beq.n	8006920 <HAL_UART_IRQHandler+0xbc>
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006916:	f043 0201 	orr.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d011      	beq.n	8006950 <HAL_UART_IRQHandler+0xec>
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2202      	movs	r2, #2
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006946:	f043 0204 	orr.w	r2, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0x11c>
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2204      	movs	r2, #4
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006976:	f043 0202 	orr.w	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d017      	beq.n	80069bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800699c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <HAL_UART_IRQHandler+0x18a>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8230 	beq.w	8006e5a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00d      	beq.n	8006a22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	d005      	beq.n	8006a46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d04f      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 ff68 	bl	800791c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b40      	cmp	r3, #64	@ 0x40
 8006a58:	d141      	bne.n	8006ade <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1d9      	bne.n	8006a5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d013      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab2:	4a13      	ldr	r2, [pc, #76]	@ (8006b00 <HAL_UART_IRQHandler+0x29c>)
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fb ff72 	bl	80029a4 <HAL_DMA_Abort_IT>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d017      	beq.n	8006af6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	e00f      	b.n	8006af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9d4 	bl	8006e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	e00b      	b.n	8006af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9d0 	bl	8006e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	e007      	b.n	8006af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9cc 	bl	8006e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006af4:	e1b1      	b.n	8006e5a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af6:	bf00      	nop
    return;
 8006af8:	e1af      	b.n	8006e5a <HAL_UART_IRQHandler+0x5f6>
 8006afa:	bf00      	nop
 8006afc:	04000120 	.word	0x04000120
 8006b00:	080079e5 	.word	0x080079e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 816a 	bne.w	8006de2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8163 	beq.w	8006de2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 815c 	beq.w	8006de2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b40      	cmp	r3, #64	@ 0x40
 8006b3e:	f040 80d4 	bne.w	8006cea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80ad 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b62:	429a      	cmp	r2, r3
 8006b64:	f080 80a5 	bcs.w	8006cb2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 8086 	bne.w	8006c90 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1da      	bne.n	8006b84 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e1      	bne.n	8006bce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c60:	f023 0310 	bic.w	r3, r3, #16
 8006c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e4      	bne.n	8006c50 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fb fe4c 	bl	8002928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8f4 	bl	8006e98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006cb0:	e0d5      	b.n	8006e5e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006cb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f040 80ce 	bne.w	8006e5e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	f040 80c5 	bne.w	8006e5e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8d8 	bl	8006e98 <HAL_UARTEx_RxEventCallback>
      return;
 8006ce8:	e0b9      	b.n	8006e5e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80ab 	beq.w	8006e62 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80a6 	beq.w	8006e62 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e4      	bne.n	8006d16 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e3      	bne.n	8006d4c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	69b9      	ldr	r1, [r7, #24]
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e4      	bne.n	8006d98 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f85c 	bl	8006e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de0:	e03f      	b.n	8006e62 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5a8>
 8006dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 ffe9 	bl	8007ddc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0a:	e02d      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01c      	beq.n	8006e66 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
    }
    return;
 8006e34:	e017      	b.n	8006e66 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d012      	beq.n	8006e68 <HAL_UART_IRQHandler+0x604>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fdde 	bl	8007a10 <UART_EndTransmit_IT>
    return;
 8006e54:	e008      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
      return;
 8006e56:	bf00      	nop
 8006e58:	e006      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
    return;
 8006e5a:	bf00      	nop
 8006e5c:	e004      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
      return;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
      return;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <HAL_UART_IRQHandler+0x604>
    return;
 8006e66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006e68:	37e8      	adds	r7, #232	@ 0xe8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b08a      	sub	sp, #40	@ 0x28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4ba4      	ldr	r3, [pc, #656]	@ (8007170 <UART_SetConfig+0x2c0>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a99      	ldr	r2, [pc, #612]	@ (8007174 <UART_SetConfig+0x2c4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a90      	ldr	r2, [pc, #576]	@ (8007178 <UART_SetConfig+0x2c8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d126      	bne.n	8006f88 <UART_SetConfig+0xd8>
 8006f3a:	4b90      	ldr	r3, [pc, #576]	@ (800717c <UART_SetConfig+0x2cc>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d81b      	bhi.n	8006f80 <UART_SetConfig+0xd0>
 8006f48:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <UART_SetConfig+0xa0>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f71 	.word	0x08006f71
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f79 	.word	0x08006f79
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e116      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e112      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e10e      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7e:	e10a      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f86:	e106      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a7c      	ldr	r2, [pc, #496]	@ (8007180 <UART_SetConfig+0x2d0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d138      	bne.n	8007004 <UART_SetConfig+0x154>
 8006f92:	4b7a      	ldr	r3, [pc, #488]	@ (800717c <UART_SetConfig+0x2cc>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f98:	f003 030c 	and.w	r3, r3, #12
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	d82d      	bhi.n	8006ffc <UART_SetConfig+0x14c>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <UART_SetConfig+0xf8>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	08006ffd 	.word	0x08006ffd
 8006fb0:	08006ffd 	.word	0x08006ffd
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ffd 	.word	0x08006ffd
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	08006fe5 	.word	0x08006fe5
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e0d8      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fea:	e0d4      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff2:	e0d0      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffa:	e0cc      	b.n	8007196 <UART_SetConfig+0x2e6>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e0c8      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5e      	ldr	r2, [pc, #376]	@ (8007184 <UART_SetConfig+0x2d4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d125      	bne.n	800705a <UART_SetConfig+0x1aa>
 800700e:	4b5b      	ldr	r3, [pc, #364]	@ (800717c <UART_SetConfig+0x2cc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007018:	2b30      	cmp	r3, #48	@ 0x30
 800701a:	d016      	beq.n	800704a <UART_SetConfig+0x19a>
 800701c:	2b30      	cmp	r3, #48	@ 0x30
 800701e:	d818      	bhi.n	8007052 <UART_SetConfig+0x1a2>
 8007020:	2b20      	cmp	r3, #32
 8007022:	d00a      	beq.n	800703a <UART_SetConfig+0x18a>
 8007024:	2b20      	cmp	r3, #32
 8007026:	d814      	bhi.n	8007052 <UART_SetConfig+0x1a2>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <UART_SetConfig+0x182>
 800702c:	2b10      	cmp	r3, #16
 800702e:	d008      	beq.n	8007042 <UART_SetConfig+0x192>
 8007030:	e00f      	b.n	8007052 <UART_SetConfig+0x1a2>
 8007032:	2300      	movs	r3, #0
 8007034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007038:	e0ad      	b.n	8007196 <UART_SetConfig+0x2e6>
 800703a:	2302      	movs	r3, #2
 800703c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007040:	e0a9      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007042:	2304      	movs	r3, #4
 8007044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007048:	e0a5      	b.n	8007196 <UART_SetConfig+0x2e6>
 800704a:	2308      	movs	r3, #8
 800704c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007050:	e0a1      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007052:	2310      	movs	r3, #16
 8007054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007058:	e09d      	b.n	8007196 <UART_SetConfig+0x2e6>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a4a      	ldr	r2, [pc, #296]	@ (8007188 <UART_SetConfig+0x2d8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d125      	bne.n	80070b0 <UART_SetConfig+0x200>
 8007064:	4b45      	ldr	r3, [pc, #276]	@ (800717c <UART_SetConfig+0x2cc>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800706e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007070:	d016      	beq.n	80070a0 <UART_SetConfig+0x1f0>
 8007072:	2bc0      	cmp	r3, #192	@ 0xc0
 8007074:	d818      	bhi.n	80070a8 <UART_SetConfig+0x1f8>
 8007076:	2b80      	cmp	r3, #128	@ 0x80
 8007078:	d00a      	beq.n	8007090 <UART_SetConfig+0x1e0>
 800707a:	2b80      	cmp	r3, #128	@ 0x80
 800707c:	d814      	bhi.n	80070a8 <UART_SetConfig+0x1f8>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <UART_SetConfig+0x1d8>
 8007082:	2b40      	cmp	r3, #64	@ 0x40
 8007084:	d008      	beq.n	8007098 <UART_SetConfig+0x1e8>
 8007086:	e00f      	b.n	80070a8 <UART_SetConfig+0x1f8>
 8007088:	2300      	movs	r3, #0
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708e:	e082      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007090:	2302      	movs	r3, #2
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007096:	e07e      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709e:	e07a      	b.n	8007196 <UART_SetConfig+0x2e6>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a6:	e076      	b.n	8007196 <UART_SetConfig+0x2e6>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ae:	e072      	b.n	8007196 <UART_SetConfig+0x2e6>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a35      	ldr	r2, [pc, #212]	@ (800718c <UART_SetConfig+0x2dc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d12a      	bne.n	8007110 <UART_SetConfig+0x260>
 80070ba:	4b30      	ldr	r3, [pc, #192]	@ (800717c <UART_SetConfig+0x2cc>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c8:	d01a      	beq.n	8007100 <UART_SetConfig+0x250>
 80070ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ce:	d81b      	bhi.n	8007108 <UART_SetConfig+0x258>
 80070d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d4:	d00c      	beq.n	80070f0 <UART_SetConfig+0x240>
 80070d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070da:	d815      	bhi.n	8007108 <UART_SetConfig+0x258>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <UART_SetConfig+0x238>
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e4:	d008      	beq.n	80070f8 <UART_SetConfig+0x248>
 80070e6:	e00f      	b.n	8007108 <UART_SetConfig+0x258>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ee:	e052      	b.n	8007196 <UART_SetConfig+0x2e6>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f6:	e04e      	b.n	8007196 <UART_SetConfig+0x2e6>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fe:	e04a      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007106:	e046      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710e:	e042      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a17      	ldr	r2, [pc, #92]	@ (8007174 <UART_SetConfig+0x2c4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d13a      	bne.n	8007190 <UART_SetConfig+0x2e0>
 800711a:	4b18      	ldr	r3, [pc, #96]	@ (800717c <UART_SetConfig+0x2cc>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007128:	d01a      	beq.n	8007160 <UART_SetConfig+0x2b0>
 800712a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800712e:	d81b      	bhi.n	8007168 <UART_SetConfig+0x2b8>
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007134:	d00c      	beq.n	8007150 <UART_SetConfig+0x2a0>
 8007136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713a:	d815      	bhi.n	8007168 <UART_SetConfig+0x2b8>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <UART_SetConfig+0x298>
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007144:	d008      	beq.n	8007158 <UART_SetConfig+0x2a8>
 8007146:	e00f      	b.n	8007168 <UART_SetConfig+0x2b8>
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714e:	e022      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007156:	e01e      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715e:	e01a      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007166:	e016      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716e:	e012      	b.n	8007196 <UART_SetConfig+0x2e6>
 8007170:	efff69f3 	.word	0xefff69f3
 8007174:	40008000 	.word	0x40008000
 8007178:	40013800 	.word	0x40013800
 800717c:	40021000 	.word	0x40021000
 8007180:	40004400 	.word	0x40004400
 8007184:	40004800 	.word	0x40004800
 8007188:	40004c00 	.word	0x40004c00
 800718c:	40005000 	.word	0x40005000
 8007190:	2310      	movs	r3, #16
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a9f      	ldr	r2, [pc, #636]	@ (8007418 <UART_SetConfig+0x568>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d17a      	bne.n	8007296 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d824      	bhi.n	80071f2 <UART_SetConfig+0x342>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0x300>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071f3 	.word	0x080071f3
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	080071e3 	.word	0x080071e3
 80071c4:	080071f3 	.word	0x080071f3
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	080071f3 	.word	0x080071f3
 80071d0:	080071eb 	.word	0x080071eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d4:	f7fc fda2 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 80071d8:	61f8      	str	r0, [r7, #28]
        break;
 80071da:	e010      	b.n	80071fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071dc:	4b8f      	ldr	r3, [pc, #572]	@ (800741c <UART_SetConfig+0x56c>)
 80071de:	61fb      	str	r3, [r7, #28]
        break;
 80071e0:	e00d      	b.n	80071fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e2:	f7fc fd03 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80071e6:	61f8      	str	r0, [r7, #28]
        break;
 80071e8:	e009      	b.n	80071fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ee:	61fb      	str	r3, [r7, #28]
        break;
 80071f0:	e005      	b.n	80071fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80fb 	beq.w	80073fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	429a      	cmp	r2, r3
 8007214:	d305      	bcc.n	8007222 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	429a      	cmp	r2, r3
 8007220:	d903      	bls.n	800722a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007228:	e0e8      	b.n	80073fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2200      	movs	r2, #0
 800722e:	461c      	mov	r4, r3
 8007230:	4615      	mov	r5, r2
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	022b      	lsls	r3, r5, #8
 800723c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007240:	0222      	lsls	r2, r4, #8
 8007242:	68f9      	ldr	r1, [r7, #12]
 8007244:	6849      	ldr	r1, [r1, #4]
 8007246:	0849      	lsrs	r1, r1, #1
 8007248:	2000      	movs	r0, #0
 800724a:	4688      	mov	r8, r1
 800724c:	4681      	mov	r9, r0
 800724e:	eb12 0a08 	adds.w	sl, r2, r8
 8007252:	eb43 0b09 	adc.w	fp, r3, r9
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007264:	4650      	mov	r0, sl
 8007266:	4659      	mov	r1, fp
 8007268:	f7f9 fd0e 	bl	8000c88 <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4613      	mov	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800727a:	d308      	bcc.n	800728e <UART_SetConfig+0x3de>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007282:	d204      	bcs.n	800728e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	e0b6      	b.n	80073fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007294:	e0b2      	b.n	80073fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800729e:	d15e      	bne.n	800735e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80072a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d828      	bhi.n	80072fa <UART_SetConfig+0x44a>
 80072a8:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <UART_SetConfig+0x400>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072dd 	.word	0x080072dd
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	080072fb 	.word	0x080072fb
 80072c0:	080072eb 	.word	0x080072eb
 80072c4:	080072fb 	.word	0x080072fb
 80072c8:	080072fb 	.word	0x080072fb
 80072cc:	080072fb 	.word	0x080072fb
 80072d0:	080072f3 	.word	0x080072f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d4:	f7fc fd22 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 80072d8:	61f8      	str	r0, [r7, #28]
        break;
 80072da:	e014      	b.n	8007306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072dc:	f7fc fd34 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 80072e0:	61f8      	str	r0, [r7, #28]
        break;
 80072e2:	e010      	b.n	8007306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e4:	4b4d      	ldr	r3, [pc, #308]	@ (800741c <UART_SetConfig+0x56c>)
 80072e6:	61fb      	str	r3, [r7, #28]
        break;
 80072e8:	e00d      	b.n	8007306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ea:	f7fc fc7f 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80072ee:	61f8      	str	r0, [r7, #28]
        break;
 80072f0:	e009      	b.n	8007306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f6:	61fb      	str	r3, [r7, #28]
        break;
 80072f8:	e005      	b.n	8007306 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d077      	beq.n	80073fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	005a      	lsls	r2, r3, #1
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	441a      	add	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b0f      	cmp	r3, #15
 8007326:	d916      	bls.n	8007356 <UART_SetConfig+0x4a6>
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800732e:	d212      	bcs.n	8007356 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f023 030f 	bic.w	r3, r3, #15
 8007338:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	b29a      	uxth	r2, r3
 8007346:	8afb      	ldrh	r3, [r7, #22]
 8007348:	4313      	orrs	r3, r2
 800734a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	8afa      	ldrh	r2, [r7, #22]
 8007352:	60da      	str	r2, [r3, #12]
 8007354:	e052      	b.n	80073fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800735c:	e04e      	b.n	80073fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800735e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007362:	2b08      	cmp	r3, #8
 8007364:	d827      	bhi.n	80073b6 <UART_SetConfig+0x506>
 8007366:	a201      	add	r2, pc, #4	@ (adr r2, 800736c <UART_SetConfig+0x4bc>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007391 	.word	0x08007391
 8007370:	08007399 	.word	0x08007399
 8007374:	080073a1 	.word	0x080073a1
 8007378:	080073b7 	.word	0x080073b7
 800737c:	080073a7 	.word	0x080073a7
 8007380:	080073b7 	.word	0x080073b7
 8007384:	080073b7 	.word	0x080073b7
 8007388:	080073b7 	.word	0x080073b7
 800738c:	080073af 	.word	0x080073af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007390:	f7fc fcc4 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8007394:	61f8      	str	r0, [r7, #28]
        break;
 8007396:	e014      	b.n	80073c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007398:	f7fc fcd6 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 800739c:	61f8      	str	r0, [r7, #28]
        break;
 800739e:	e010      	b.n	80073c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a0:	4b1e      	ldr	r3, [pc, #120]	@ (800741c <UART_SetConfig+0x56c>)
 80073a2:	61fb      	str	r3, [r7, #28]
        break;
 80073a4:	e00d      	b.n	80073c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a6:	f7fc fc21 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80073aa:	61f8      	str	r0, [r7, #28]
        break;
 80073ac:	e009      	b.n	80073c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073b2:	61fb      	str	r3, [r7, #28]
        break;
 80073b4:	e005      	b.n	80073c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073c0:	bf00      	nop
    }

    if (pclk != 0U)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d019      	beq.n	80073fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	085a      	lsrs	r2, r3, #1
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	441a      	add	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b0f      	cmp	r3, #15
 80073e0:	d909      	bls.n	80073f6 <UART_SetConfig+0x546>
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e8:	d205      	bcs.n	80073f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60da      	str	r2, [r3, #12]
 80073f4:	e002      	b.n	80073fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007408:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800740c:	4618      	mov	r0, r3
 800740e:	3728      	adds	r7, #40	@ 0x28
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007416:	bf00      	nop
 8007418:	40008000 	.word	0x40008000
 800741c:	00f42400 	.word	0x00f42400

08007420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800751e:	d10a      	bne.n	8007536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b098      	sub	sp, #96	@ 0x60
 8007568:	af02      	add	r7, sp, #8
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007574:	f7fa ffde 	bl	8002534 <HAL_GetTick>
 8007578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b08      	cmp	r3, #8
 8007586:	d12e      	bne.n	80075e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007590:	2200      	movs	r2, #0
 8007592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f88c 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d021      	beq.n	80075e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e062      	b.n	80076ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d149      	bne.n	8007688 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fc:	2200      	movs	r2, #0
 80075fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f856 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03c      	beq.n	8007688 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	623b      	str	r3, [r7, #32]
   return(result);
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800762c:	633b      	str	r3, [r7, #48]	@ 0x30
 800762e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e6      	bne.n	800760e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007660:	61fa      	str	r2, [r7, #28]
 8007662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e011      	b.n	80076ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3758      	adds	r7, #88	@ 0x58
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c4:	e04f      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076cc:	d04b      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ce:	f7fa ff31 	bl	8002534 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d302      	bcc.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e04e      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d037      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b80      	cmp	r3, #128	@ 0x80
 80076fa:	d034      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d031      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b08      	cmp	r3, #8
 800770e:	d110      	bne.n	8007732 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 f8ff 	bl	800791c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2208      	movs	r2, #8
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e029      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007740:	d111      	bne.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800774a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f8e5 	bl	800791c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e00f      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69da      	ldr	r2, [r3, #28]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4013      	ands	r3, r2
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	429a      	cmp	r2, r3
 8007782:	d0a0      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b097      	sub	sp, #92	@ 0x5c
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c2:	d10e      	bne.n	80077e2 <UART_Start_Receive_IT+0x52>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <UART_Start_Receive_IT+0x48>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80077d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077d6:	e02d      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	22ff      	movs	r2, #255	@ 0xff
 80077dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077e0:	e028      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10d      	bne.n	8007806 <UART_Start_Receive_IT+0x76>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <UART_Start_Receive_IT+0x6c>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	22ff      	movs	r2, #255	@ 0xff
 80077f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80077fa:	e01b      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	227f      	movs	r2, #127	@ 0x7f
 8007800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007804:	e016      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800780e:	d10d      	bne.n	800782c <UART_Start_Receive_IT+0x9c>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <UART_Start_Receive_IT+0x92>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	227f      	movs	r2, #127	@ 0x7f
 800781c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007820:	e008      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	223f      	movs	r2, #63	@ 0x3f
 8007826:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800782a:	e003      	b.n	8007834 <UART_Start_Receive_IT+0xa4>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2222      	movs	r2, #34	@ 0x22
 8007840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	657b      	str	r3, [r7, #84]	@ 0x54
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007864:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007866:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800786a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e5      	bne.n	8007844 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007880:	d107      	bne.n	8007892 <UART_Start_Receive_IT+0x102>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a21      	ldr	r2, [pc, #132]	@ (8007914 <UART_Start_Receive_IT+0x184>)
 800788e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007890:	e002      	b.n	8007898 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4a20      	ldr	r2, [pc, #128]	@ (8007918 <UART_Start_Receive_IT+0x188>)
 8007896:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d019      	beq.n	80078d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80078b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e6      	bne.n	80078a0 <UART_Start_Receive_IT+0x110>
 80078d2:	e018      	b.n	8007906 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	613b      	str	r3, [r7, #16]
   return(result);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f043 0320 	orr.w	r3, r3, #32
 80078e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078f2:	623b      	str	r3, [r7, #32]
 80078f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e6      	bne.n	80078d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	375c      	adds	r7, #92	@ 0x5c
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	08007c21 	.word	0x08007c21
 8007918:	08007a65 	.word	0x08007a65

0800791c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b095      	sub	sp, #84	@ 0x54
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007942:	643b      	str	r3, [r7, #64]	@ 0x40
 8007944:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e6      	bne.n	8007924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	61fb      	str	r3, [r7, #28]
   return(result);
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798e:	2b01      	cmp	r3, #1
 8007990:	d118      	bne.n	80079c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f023 0310 	bic.w	r3, r3, #16
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	613b      	str	r3, [r7, #16]
   return(result);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079d8:	bf00      	nop
 80079da:	3754      	adds	r7, #84	@ 0x54
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fa3e 	bl	8006e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6979      	ldr	r1, [r7, #20]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fa0a 	bl	8006e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5c:	bf00      	nop
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b09c      	sub	sp, #112	@ 0x70
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a7c:	2b22      	cmp	r3, #34	@ 0x22
 8007a7e:	f040 80be 	bne.w	8007bfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a90:	b2d9      	uxtb	r1, r3
 8007a92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9c:	400a      	ands	r2, r1
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 80a3 	bne.w	8007c12 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e6      	bne.n	8007acc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e5      	bne.n	8007afe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a34      	ldr	r2, [pc, #208]	@ (8007c1c <UART_RxISR_8BIT+0x1b8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d01f      	beq.n	8007b90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d018      	beq.n	8007b90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b72:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e6      	bne.n	8007b5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d12e      	bne.n	8007bf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0310 	bic.w	r3, r3, #16
 8007bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	69b9      	ldr	r1, [r7, #24]
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d103      	bne.n	8007be6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2210      	movs	r2, #16
 8007be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff f952 	bl	8006e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bf4:	e00d      	b.n	8007c12 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fa fc22 	bl	8002440 <HAL_UART_RxCpltCallback>
}
 8007bfc:	e009      	b.n	8007c12 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	8b1b      	ldrh	r3, [r3, #24]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	831a      	strh	r2, [r3, #24]
}
 8007c12:	bf00      	nop
 8007c14:	3770      	adds	r7, #112	@ 0x70
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40008000 	.word	0x40008000

08007c20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b09c      	sub	sp, #112	@ 0x70
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c38:	2b22      	cmp	r3, #34	@ 0x22
 8007c3a:	f040 80be 	bne.w	8007dba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c56:	4013      	ands	r3, r2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f040 80a3 	bne.w	8007dce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ca8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cda:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a34      	ldr	r2, [pc, #208]	@ (8007dd8 <UART_RxISR_16BIT+0x1b8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01f      	beq.n	8007d4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e6      	bne.n	8007d1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d12e      	bne.n	8007db2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0310 	bic.w	r3, r3, #16
 8007d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6979      	ldr	r1, [r7, #20]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	613b      	str	r3, [r7, #16]
   return(result);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d103      	bne.n	8007da2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff f874 	bl	8006e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007db0:	e00d      	b.n	8007dce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7fa fb44 	bl	8002440 <HAL_UART_RxCpltCallback>
}
 8007db8:	e009      	b.n	8007dce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	8b1b      	ldrh	r3, [r3, #24]
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0208 	orr.w	r2, r2, #8
 8007dca:	b292      	uxth	r2, r2
 8007dcc:	831a      	strh	r2, [r3, #24]
}
 8007dce:	bf00      	nop
 8007dd0:	3770      	adds	r7, #112	@ 0x70
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40008000 	.word	0x40008000

08007ddc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e02:	2b84      	cmp	r3, #132	@ 0x84
 8007e04:	d005      	beq.n	8007e12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	3303      	adds	r3, #3
 8007e10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e24:	f000 fdca 	bl	80089bc <vTaskStartScheduler>
  
  return osOK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e30:	b089      	sub	sp, #36	@ 0x24
 8007e32:	af04      	add	r7, sp, #16
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d020      	beq.n	8007e82 <osThreadCreate+0x54>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01c      	beq.n	8007e82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685c      	ldr	r4, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691e      	ldr	r6, [r3, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff ffc8 	bl	8007df0 <makeFreeRtosPriority>
 8007e60:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e6a:	9202      	str	r2, [sp, #8]
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	9100      	str	r1, [sp, #0]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	4632      	mov	r2, r6
 8007e74:	4629      	mov	r1, r5
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fbd2 	bl	8008620 <xTaskCreateStatic>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e01c      	b.n	8007ebc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685c      	ldr	r4, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e8e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff ffaa 	bl	8007df0 <makeFreeRtosPriority>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f107 030c 	add.w	r3, r7, #12
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	9200      	str	r2, [sp, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fc17 	bl	80086e0 <xTaskCreate>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d001      	beq.n	8007ebc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ec6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <osDelay+0x16>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	e000      	b.n	8007ede <osDelay+0x18>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fd36 	bl	8008950 <vTaskDelay>
  
  return osOK;
 8007ee4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f103 0208 	add.w	r2, r3, #8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f103 0208 	add.w	r2, r3, #8
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f103 0208 	add.w	r2, r3, #8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fa6:	d103      	bne.n	8007fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e00c      	b.n	8007fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	e002      	b.n	8007fbe <vListInsert+0x2e>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d2f6      	bcs.n	8007fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6892      	ldr	r2, [r2, #8]
 8008018:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6852      	ldr	r2, [r2, #4]
 8008022:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d103      	bne.n	8008036 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
	...

08008058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10b      	bne.n	8008084 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008084:	f001 fb70 	bl	8009768 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008090:	68f9      	ldr	r1, [r7, #12]
 8008092:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	441a      	add	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b4:	3b01      	subs	r3, #1
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	441a      	add	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	22ff      	movs	r2, #255	@ 0xff
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	22ff      	movs	r2, #255	@ 0xff
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d114      	bne.n	8008104 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01a      	beq.n	8008118 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3310      	adds	r3, #16
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 feb2 	bl	8008e50 <xTaskRemoveFromEventList>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d012      	beq.n	8008118 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <xQueueGenericReset+0xd0>)
 80080f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	e009      	b.n	8008118 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3310      	adds	r3, #16
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fef0 	bl	8007eee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3324      	adds	r3, #36	@ 0x24
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff feeb 	bl	8007eee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f001 fb58 	bl	80097cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800811c:	2301      	movs	r3, #1
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	613b      	str	r3, [r7, #16]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3348      	adds	r3, #72	@ 0x48
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fc20 	bl	80099ac <pvPortMalloc>
 800816c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d011      	beq.n	8008198 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3348      	adds	r3, #72	@ 0x48
 800817c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008186:	79fa      	ldrb	r2, [r7, #7]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f805 	bl	80081a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008198:	69bb      	ldr	r3, [r7, #24]
	}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e002      	b.n	80081c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081d0:	2101      	movs	r1, #1
 80081d2:	69b8      	ldr	r0, [r7, #24]
 80081d4:	f7ff ff40 	bl	8008058 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	@ 0x38
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <xQueueGiveFromISR+0x2c>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	623b      	str	r3, [r7, #32]
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	e7fd      	b.n	8008208 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	61fb      	str	r3, [r7, #28]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d103      	bne.n	800823c <xQueueGiveFromISR+0x5c>
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <xQueueGiveFromISR+0x60>
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <xQueueGiveFromISR+0x62>
 8008240:	2300      	movs	r3, #0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	61bb      	str	r3, [r7, #24]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825e:	f001 fb63 	bl	8009928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008262:	f3ef 8211 	mrs	r2, BASEPRI
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	617a      	str	r2, [r7, #20]
 8008278:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800827a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800827c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800828a:	429a      	cmp	r2, r3
 800828c:	d22b      	bcs.n	80082e6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a8:	d112      	bne.n	80082d0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	3324      	adds	r3, #36	@ 0x24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fdca 	bl	8008e50 <xTaskRemoveFromEventList>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00e      	beq.n	80082e0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e007      	b.n	80082e0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082d4:	3301      	adds	r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	b25a      	sxtb	r2, r3
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80082e0:	2301      	movs	r3, #1
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e4:	e001      	b.n	80082ea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3738      	adds	r7, #56	@ 0x38
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08e      	sub	sp, #56	@ 0x38
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008312:	2300      	movs	r3, #0
 8008314:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10b      	bne.n	8008334 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	623b      	str	r3, [r7, #32]
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	61fb      	str	r3, [r7, #28]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008354:	f000 ff3c 	bl	80091d0 <xTaskGetSchedulerState>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <xQueueSemaphoreTake+0x64>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <xQueueSemaphoreTake+0x68>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <xQueueSemaphoreTake+0x6a>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	61bb      	str	r3, [r7, #24]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008386:	f001 f9ef 	bl	8009768 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d024      	beq.n	80083e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80083a6:	f001 f837 	bl	8009418 <pvTaskIncrementMutexHeldCount>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00f      	beq.n	80083d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ba:	3310      	adds	r3, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fd47 	bl	8008e50 <xTaskRemoveFromEventList>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083c8:	4b54      	ldr	r3, [pc, #336]	@ (800851c <xQueueSemaphoreTake+0x21c>)
 80083ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083d8:	f001 f9f8 	bl	80097cc <vPortExitCritical>
				return pdPASS;
 80083dc:	2301      	movs	r3, #1
 80083de:	e098      	b.n	8008512 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d112      	bne.n	800840c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	617b      	str	r3, [r7, #20]
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008404:	f001 f9e2 	bl	80097cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008408:	2300      	movs	r3, #0
 800840a:	e082      	b.n	8008512 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fd7e 	bl	8008f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800841c:	2301      	movs	r3, #1
 800841e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008420:	f001 f9d4 	bl	80097cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008424:	f000 fb2c 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008428:	f001 f99e 	bl	8009768 <vPortEnterCritical>
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008432:	b25b      	sxtb	r3, r3
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008438:	d103      	bne.n	8008442 <xQueueSemaphoreTake+0x142>
 800843a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008448:	b25b      	sxtb	r3, r3
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800844e:	d103      	bne.n	8008458 <xQueueSemaphoreTake+0x158>
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008458:	f001 f9b8 	bl	80097cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800845c:	463a      	mov	r2, r7
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fd6d 	bl	8008f44 <xTaskCheckForTimeOut>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d132      	bne.n	80084d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008472:	f000 f8bf 	bl	80085f4 <prvIsQueueEmpty>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d026      	beq.n	80084ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008484:	f001 f970 	bl	8009768 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 febd 	bl	800920c <xTaskPriorityInherit>
 8008492:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008494:	f001 f99a 	bl	80097cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849a:	3324      	adds	r3, #36	@ 0x24
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fcaf 	bl	8008e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084a8:	f000 f852 	bl	8008550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084ac:	f000 faf6 	bl	8008a9c <xTaskResumeAll>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f47f af67 	bne.w	8008386 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80084b8:	4b18      	ldr	r3, [pc, #96]	@ (800851c <xQueueSemaphoreTake+0x21c>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	e75d      	b.n	8008386 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084cc:	f000 f840 	bl	8008550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d0:	f000 fae4 	bl	8008a9c <xTaskResumeAll>
 80084d4:	e757      	b.n	8008386 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084d8:	f000 f83a 	bl	8008550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084dc:	f000 fade 	bl	8008a9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084e2:	f000 f887 	bl	80085f4 <prvIsQueueEmpty>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f43f af4c 	beq.w	8008386 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00d      	beq.n	8008510 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80084f4:	f001 f938 	bl	8009768 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084fa:	f000 f811 	bl	8008520 <prvGetDisinheritPriorityAfterTimeout>
 80084fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fef6 	bl	80092f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800850c:	f001 f95e 	bl	80097cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008512:	4618      	mov	r0, r3
 8008514:	3738      	adds	r7, #56	@ 0x38
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d006      	beq.n	800853e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1c3 0307 	rsb	r3, r3, #7
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e001      	b.n	8008542 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008542:	68fb      	ldr	r3, [r7, #12]
	}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008558:	f001 f906 	bl	8009768 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008564:	e011      	b.n	800858a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	d012      	beq.n	8008594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3324      	adds	r3, #36	@ 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fc6c 	bl	8008e50 <xTaskRemoveFromEventList>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800857e:	f000 fd45 	bl	800900c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	3b01      	subs	r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	dce9      	bgt.n	8008566 <prvUnlockQueue+0x16>
 8008592:	e000      	b.n	8008596 <prvUnlockQueue+0x46>
					break;
 8008594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	22ff      	movs	r2, #255	@ 0xff
 800859a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800859e:	f001 f915 	bl	80097cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085a2:	f001 f8e1 	bl	8009768 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085ae:	e011      	b.n	80085d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3310      	adds	r3, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fc47 	bl	8008e50 <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085c8:	f000 fd20 	bl	800900c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dce9      	bgt.n	80085b0 <prvUnlockQueue+0x60>
 80085dc:	e000      	b.n	80085e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	22ff      	movs	r2, #255	@ 0xff
 80085e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80085e8:	f001 f8f0 	bl	80097cc <vPortExitCritical>
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085fc:	f001 f8b4 	bl	8009768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e001      	b.n	8008612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008612:	f001 f8db 	bl	80097cc <vPortExitCritical>

	return xReturn;
 8008616:	68fb      	ldr	r3, [r7, #12]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	@ 0x38
 8008624:	af04      	add	r7, sp, #16
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	623b      	str	r3, [r7, #32]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	61fb      	str	r3, [r7, #28]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800866a:	2354      	movs	r3, #84	@ 0x54
 800866c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b54      	cmp	r3, #84	@ 0x54
 8008672:	d00b      	beq.n	800868c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	61bb      	str	r3, [r7, #24]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800868c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800868e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01e      	beq.n	80086d2 <xTaskCreateStatic+0xb2>
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01b      	beq.n	80086d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ac:	2300      	movs	r3, #0
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f850 	bl	800876a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086cc:	f000 f8d6 	bl	800887c <prvAddNewTaskToReadyList>
 80086d0:	e001      	b.n	80086d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086d6:	697b      	ldr	r3, [r7, #20]
	}
 80086d8:	4618      	mov	r0, r3
 80086da:	3728      	adds	r7, #40	@ 0x28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08c      	sub	sp, #48	@ 0x30
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 f959 	bl	80099ac <pvPortMalloc>
 80086fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008702:	2054      	movs	r0, #84	@ 0x54
 8008704:	f001 f952 	bl	80099ac <pvPortMalloc>
 8008708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	631a      	str	r2, [r3, #48]	@ 0x30
 8008716:	e005      	b.n	8008724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	f001 fa15 	bl	8009b48 <vPortFree>
 800871e:	e001      	b.n	8008724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d017      	beq.n	800875a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	2300      	movs	r3, #0
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f80e 	bl	800876a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800874e:	69f8      	ldr	r0, [r7, #28]
 8008750:	f000 f894 	bl	800887c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	e002      	b.n	8008760 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800875e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008760:	69bb      	ldr	r3, [r7, #24]
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b088      	sub	sp, #32
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008782:	3b01      	subs	r3, #1
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	f023 0307 	bic.w	r3, r3, #7
 8008790:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	617b      	str	r3, [r7, #20]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01f      	beq.n	80087fa <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	e012      	b.n	80087e6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	4413      	add	r3, r2
 80087c6:	7819      	ldrb	r1, [r3, #0]
 80087c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	3334      	adds	r3, #52	@ 0x34
 80087d0:	460a      	mov	r2, r1
 80087d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d006      	beq.n	80087ee <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	3301      	adds	r3, #1
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	2b0f      	cmp	r3, #15
 80087ea:	d9e9      	bls.n	80087c0 <prvInitialiseNewTask+0x56>
 80087ec:	e000      	b.n	80087f0 <prvInitialiseNewTask+0x86>
			{
				break;
 80087ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087f8:	e003      	b.n	8008802 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	2b06      	cmp	r3, #6
 8008806:	d901      	bls.n	800880c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008808:	2306      	movs	r3, #6
 800880a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008810:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008816:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	2200      	movs	r2, #0
 800881c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	3304      	adds	r3, #4
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fb83 	bl	8007f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	3318      	adds	r3, #24
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fb7e 	bl	8007f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	f1c3 0207 	rsb	r2, r3, #7
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008846:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	2200      	movs	r2, #0
 800884c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	69b8      	ldr	r0, [r7, #24]
 800885c:	f000 fe56 	bl	800950c <pxPortInitialiseStack>
 8008860:	4602      	mov	r2, r0
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800886c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008872:	bf00      	nop
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008884:	f000 ff70 	bl	8009768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008888:	4b2a      	ldr	r3, [pc, #168]	@ (8008934 <prvAddNewTaskToReadyList+0xb8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3301      	adds	r3, #1
 800888e:	4a29      	ldr	r2, [pc, #164]	@ (8008934 <prvAddNewTaskToReadyList+0xb8>)
 8008890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008892:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <prvAddNewTaskToReadyList+0xbc>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d109      	bne.n	80088ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800889a:	4a27      	ldr	r2, [pc, #156]	@ (8008938 <prvAddNewTaskToReadyList+0xbc>)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088a0:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <prvAddNewTaskToReadyList+0xb8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d110      	bne.n	80088ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088a8:	f000 fbd4 	bl	8009054 <prvInitialiseTaskLists>
 80088ac:	e00d      	b.n	80088ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088ae:	4b23      	ldr	r3, [pc, #140]	@ (800893c <prvAddNewTaskToReadyList+0xc0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088b6:	4b20      	ldr	r3, [pc, #128]	@ (8008938 <prvAddNewTaskToReadyList+0xbc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d802      	bhi.n	80088ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008938 <prvAddNewTaskToReadyList+0xbc>)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008940 <prvAddNewTaskToReadyList+0xc4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008940 <prvAddNewTaskToReadyList+0xc4>)
 80088d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	2201      	movs	r2, #1
 80088da:	409a      	lsls	r2, r3
 80088dc:	4b19      	ldr	r3, [pc, #100]	@ (8008944 <prvAddNewTaskToReadyList+0xc8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	4a18      	ldr	r2, [pc, #96]	@ (8008944 <prvAddNewTaskToReadyList+0xc8>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4a15      	ldr	r2, [pc, #84]	@ (8008948 <prvAddNewTaskToReadyList+0xcc>)
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f7ff fb23 	bl	8007f48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008902:	f000 ff63 	bl	80097cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008906:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <prvAddNewTaskToReadyList+0xc0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800890e:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <prvAddNewTaskToReadyList+0xbc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	429a      	cmp	r2, r3
 800891a:	d207      	bcs.n	800892c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800891c:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <prvAddNewTaskToReadyList+0xd0>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	2000139c 	.word	0x2000139c
 8008938:	2000129c 	.word	0x2000129c
 800893c:	200013a8 	.word	0x200013a8
 8008940:	200013b8 	.word	0x200013b8
 8008944:	200013a4 	.word	0x200013a4
 8008948:	200012a0 	.word	0x200012a0
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d018      	beq.n	8008994 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008962:	4b14      	ldr	r3, [pc, #80]	@ (80089b4 <vTaskDelay+0x64>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <vTaskDelay+0x32>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	60bb      	str	r3, [r7, #8]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008982:	f000 f87d 	bl	8008a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008986:	2100      	movs	r1, #0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fd59 	bl	8009440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800898e:	f000 f885 	bl	8008a9c <xTaskResumeAll>
 8008992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d107      	bne.n	80089aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800899a:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <vTaskDelay+0x68>)
 800899c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200013c4 	.word	0x200013c4
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	@ 0x28
 80089c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089ca:	463a      	mov	r2, r7
 80089cc:	1d39      	adds	r1, r7, #4
 80089ce:	f107 0308 	add.w	r3, r7, #8
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7f8 fb2c 	bl	8001030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	9202      	str	r2, [sp, #8]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	2300      	movs	r3, #0
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	460a      	mov	r2, r1
 80089ea:	491f      	ldr	r1, [pc, #124]	@ (8008a68 <vTaskStartScheduler+0xac>)
 80089ec:	481f      	ldr	r0, [pc, #124]	@ (8008a6c <vTaskStartScheduler+0xb0>)
 80089ee:	f7ff fe17 	bl	8008620 <xTaskCreateStatic>
 80089f2:	4603      	mov	r3, r0
 80089f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a70 <vTaskStartScheduler+0xb4>)
 80089f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a70 <vTaskStartScheduler+0xb4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a00:	2301      	movs	r3, #1
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	e001      	b.n	8008a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d116      	bne.n	8008a3e <vTaskStartScheduler+0x82>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	613b      	str	r3, [r7, #16]
}
 8008a22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a24:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <vTaskStartScheduler+0xb8>)
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a2c:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <vTaskStartScheduler+0xbc>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a32:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <vTaskStartScheduler+0xc0>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a38:	f000 fdf2 	bl	8009620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a3c:	e00f      	b.n	8008a5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a44:	d10b      	bne.n	8008a5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <vTaskStartScheduler+0x9e>
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	0800e6fc 	.word	0x0800e6fc
 8008a6c:	08009025 	.word	0x08009025
 8008a70:	200013c0 	.word	0x200013c0
 8008a74:	200013bc 	.word	0x200013bc
 8008a78:	200013a8 	.word	0x200013a8
 8008a7c:	200013a0 	.word	0x200013a0

08008a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <vTaskSuspendAll+0x18>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	4a03      	ldr	r2, [pc, #12]	@ (8008a98 <vTaskSuspendAll+0x18>)
 8008a8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a8e:	bf00      	nop
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	200013c4 	.word	0x200013c4

08008a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aaa:	4b42      	ldr	r3, [pc, #264]	@ (8008bb4 <xTaskResumeAll+0x118>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <xTaskResumeAll+0x2e>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	603b      	str	r3, [r7, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aca:	f000 fe4d 	bl	8009768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ace:	4b39      	ldr	r3, [pc, #228]	@ (8008bb4 <xTaskResumeAll+0x118>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	4a37      	ldr	r2, [pc, #220]	@ (8008bb4 <xTaskResumeAll+0x118>)
 8008ad6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad8:	4b36      	ldr	r3, [pc, #216]	@ (8008bb4 <xTaskResumeAll+0x118>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d161      	bne.n	8008ba4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ae0:	4b35      	ldr	r3, [pc, #212]	@ (8008bb8 <xTaskResumeAll+0x11c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d05d      	beq.n	8008ba4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ae8:	e02e      	b.n	8008b48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aea:	4b34      	ldr	r3, [pc, #208]	@ (8008bbc <xTaskResumeAll+0x120>)
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3318      	adds	r3, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fa83 	bl	8008002 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fa7e 	bl	8008002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	409a      	lsls	r2, r3
 8008b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008bc0 <xTaskResumeAll+0x124>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	4a2a      	ldr	r2, [pc, #168]	@ (8008bc0 <xTaskResumeAll+0x124>)
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4a27      	ldr	r2, [pc, #156]	@ (8008bc4 <xTaskResumeAll+0x128>)
 8008b26:	441a      	add	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f7ff fa0a 	bl	8007f48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	4b23      	ldr	r3, [pc, #140]	@ (8008bc8 <xTaskResumeAll+0x12c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d302      	bcc.n	8008b48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b42:	4b22      	ldr	r3, [pc, #136]	@ (8008bcc <xTaskResumeAll+0x130>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b48:	4b1c      	ldr	r3, [pc, #112]	@ (8008bbc <xTaskResumeAll+0x120>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1cc      	bne.n	8008aea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b56:	f000 fb1b 	bl	8009190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd0 <xTaskResumeAll+0x134>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d010      	beq.n	8008b88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f000 f837 	bl	8008bd8 <xTaskIncrementTick>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b70:	4b16      	ldr	r3, [pc, #88]	@ (8008bcc <xTaskResumeAll+0x130>)
 8008b72:	2201      	movs	r2, #1
 8008b74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f1      	bne.n	8008b66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b82:	4b13      	ldr	r3, [pc, #76]	@ (8008bd0 <xTaskResumeAll+0x134>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b88:	4b10      	ldr	r3, [pc, #64]	@ (8008bcc <xTaskResumeAll+0x130>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b94:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd4 <xTaskResumeAll+0x138>)
 8008b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba4:	f000 fe12 	bl	80097cc <vPortExitCritical>

	return xAlreadyYielded;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	200013c4 	.word	0x200013c4
 8008bb8:	2000139c 	.word	0x2000139c
 8008bbc:	2000135c 	.word	0x2000135c
 8008bc0:	200013a4 	.word	0x200013a4
 8008bc4:	200012a0 	.word	0x200012a0
 8008bc8:	2000129c 	.word	0x2000129c
 8008bcc:	200013b0 	.word	0x200013b0
 8008bd0:	200013ac 	.word	0x200013ac
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be2:	4b4f      	ldr	r3, [pc, #316]	@ (8008d20 <xTaskIncrementTick+0x148>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 808f 	bne.w	8008d0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bec:	4b4d      	ldr	r3, [pc, #308]	@ (8008d24 <xTaskIncrementTick+0x14c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8008d24 <xTaskIncrementTick+0x14c>)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d121      	bne.n	8008c44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c00:	4b49      	ldr	r3, [pc, #292]	@ (8008d28 <xTaskIncrementTick+0x150>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	603b      	str	r3, [r7, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <xTaskIncrementTick+0x46>
 8008c22:	4b41      	ldr	r3, [pc, #260]	@ (8008d28 <xTaskIncrementTick+0x150>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	4b40      	ldr	r3, [pc, #256]	@ (8008d2c <xTaskIncrementTick+0x154>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008d28 <xTaskIncrementTick+0x150>)
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4a3e      	ldr	r2, [pc, #248]	@ (8008d2c <xTaskIncrementTick+0x154>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	4b3e      	ldr	r3, [pc, #248]	@ (8008d30 <xTaskIncrementTick+0x158>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8008d30 <xTaskIncrementTick+0x158>)
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	f000 faa6 	bl	8009190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c44:	4b3b      	ldr	r3, [pc, #236]	@ (8008d34 <xTaskIncrementTick+0x15c>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d348      	bcc.n	8008ce0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c4e:	4b36      	ldr	r3, [pc, #216]	@ (8008d28 <xTaskIncrementTick+0x150>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c58:	4b36      	ldr	r3, [pc, #216]	@ (8008d34 <xTaskIncrementTick+0x15c>)
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c5e:	601a      	str	r2, [r3, #0]
					break;
 8008c60:	e03e      	b.n	8008ce0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c62:	4b31      	ldr	r3, [pc, #196]	@ (8008d28 <xTaskIncrementTick+0x150>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d203      	bcs.n	8008c82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8008d34 <xTaskIncrementTick+0x15c>)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c80:	e02e      	b.n	8008ce0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff f9bb 	bl	8008002 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	3318      	adds	r3, #24
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f9b2 	bl	8008002 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	409a      	lsls	r2, r3
 8008ca6:	4b24      	ldr	r3, [pc, #144]	@ (8008d38 <xTaskIncrementTick+0x160>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	4a22      	ldr	r2, [pc, #136]	@ (8008d38 <xTaskIncrementTick+0x160>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8008d3c <xTaskIncrementTick+0x164>)
 8008cbe:	441a      	add	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7ff f93e 	bl	8007f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8008d40 <xTaskIncrementTick+0x168>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3b9      	bcc.n	8008c4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cde:	e7b6      	b.n	8008c4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ce0:	4b17      	ldr	r3, [pc, #92]	@ (8008d40 <xTaskIncrementTick+0x168>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce6:	4915      	ldr	r1, [pc, #84]	@ (8008d3c <xTaskIncrementTick+0x164>)
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d901      	bls.n	8008cfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cfc:	4b11      	ldr	r3, [pc, #68]	@ (8008d44 <xTaskIncrementTick+0x16c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e004      	b.n	8008d14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d48 <xTaskIncrementTick+0x170>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	4a0d      	ldr	r2, [pc, #52]	@ (8008d48 <xTaskIncrementTick+0x170>)
 8008d12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d14:	697b      	ldr	r3, [r7, #20]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	200013c4 	.word	0x200013c4
 8008d24:	200013a0 	.word	0x200013a0
 8008d28:	20001354 	.word	0x20001354
 8008d2c:	20001358 	.word	0x20001358
 8008d30:	200013b4 	.word	0x200013b4
 8008d34:	200013bc 	.word	0x200013bc
 8008d38:	200013a4 	.word	0x200013a4
 8008d3c:	200012a0 	.word	0x200012a0
 8008d40:	2000129c 	.word	0x2000129c
 8008d44:	200013b0 	.word	0x200013b0
 8008d48:	200013ac 	.word	0x200013ac

08008d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d52:	4b27      	ldr	r3, [pc, #156]	@ (8008df0 <vTaskSwitchContext+0xa4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d5a:	4b26      	ldr	r3, [pc, #152]	@ (8008df4 <vTaskSwitchContext+0xa8>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d60:	e040      	b.n	8008de4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008d62:	4b24      	ldr	r3, [pc, #144]	@ (8008df4 <vTaskSwitchContext+0xa8>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d68:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <vTaskSwitchContext+0xac>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	fab3 f383 	clz	r3, r3
 8008d74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	f1c3 031f 	rsb	r3, r3, #31
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	491f      	ldr	r1, [pc, #124]	@ (8008dfc <vTaskSwitchContext+0xb0>)
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <vTaskSwitchContext+0x5e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	607b      	str	r3, [r7, #4]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <vTaskSwitchContext+0x5a>
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4a11      	ldr	r2, [pc, #68]	@ (8008dfc <vTaskSwitchContext+0xb0>)
 8008db6:	4413      	add	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	605a      	str	r2, [r3, #4]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d104      	bne.n	8008dda <vTaskSwitchContext+0x8e>
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4a07      	ldr	r2, [pc, #28]	@ (8008e00 <vTaskSwitchContext+0xb4>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	200013c4 	.word	0x200013c4
 8008df4:	200013b0 	.word	0x200013b0
 8008df8:	200013a4 	.word	0x200013a4
 8008dfc:	200012a0 	.word	0x200012a0
 8008e00:	2000129c 	.word	0x2000129c

08008e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	60fb      	str	r3, [r7, #12]
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	e7fd      	b.n	8008e28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e2c:	4b07      	ldr	r3, [pc, #28]	@ (8008e4c <vTaskPlaceOnEventList+0x48>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3318      	adds	r3, #24
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff f8ab 	bl	8007f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	6838      	ldr	r0, [r7, #0]
 8008e3e:	f000 faff 	bl	8009440 <prvAddCurrentTaskToDelayedList>
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	2000129c 	.word	0x2000129c

08008e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3318      	adds	r3, #24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff f8bd 	bl	8008002 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e88:	4b1d      	ldr	r3, [pc, #116]	@ (8008f00 <xTaskRemoveFromEventList+0xb0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11c      	bne.n	8008eca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff f8b4 	bl	8008002 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	409a      	lsls	r2, r3
 8008ea2:	4b18      	ldr	r3, [pc, #96]	@ (8008f04 <xTaskRemoveFromEventList+0xb4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	4a16      	ldr	r2, [pc, #88]	@ (8008f04 <xTaskRemoveFromEventList+0xb4>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a13      	ldr	r2, [pc, #76]	@ (8008f08 <xTaskRemoveFromEventList+0xb8>)
 8008eba:	441a      	add	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7ff f840 	bl	8007f48 <vListInsertEnd>
 8008ec8:	e005      	b.n	8008ed6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4619      	mov	r1, r3
 8008ed0:	480e      	ldr	r0, [pc, #56]	@ (8008f0c <xTaskRemoveFromEventList+0xbc>)
 8008ed2:	f7ff f839 	bl	8007f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <xTaskRemoveFromEventList+0xc0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d905      	bls.n	8008ef0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <xTaskRemoveFromEventList+0xc4>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	e001      	b.n	8008ef4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200013c4 	.word	0x200013c4
 8008f04:	200013a4 	.word	0x200013a4
 8008f08:	200012a0 	.word	0x200012a0
 8008f0c:	2000135c 	.word	0x2000135c
 8008f10:	2000129c 	.word	0x2000129c
 8008f14:	200013b0 	.word	0x200013b0

08008f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f20:	4b06      	ldr	r3, [pc, #24]	@ (8008f3c <vTaskInternalSetTimeOutState+0x24>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f28:	4b05      	ldr	r3, [pc, #20]	@ (8008f40 <vTaskInternalSetTimeOutState+0x28>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	200013b4 	.word	0x200013b4
 8008f40:	200013a0 	.word	0x200013a0

08008f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10b      	bne.n	8008f6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	613b      	str	r3, [r7, #16]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	60fb      	str	r3, [r7, #12]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f8a:	f000 fbed 	bl	8009768 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009004 <xTaskCheckForTimeOut+0xc0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fa6:	d102      	bne.n	8008fae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	e023      	b.n	8008ff6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <xTaskCheckForTimeOut+0xc4>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d007      	beq.n	8008fca <xTaskCheckForTimeOut+0x86>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d302      	bcc.n	8008fca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	e015      	b.n	8008ff6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d20b      	bcs.n	8008fec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	1ad2      	subs	r2, r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ff99 	bl	8008f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e004      	b.n	8008ff6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ff6:	f000 fbe9 	bl	80097cc <vPortExitCritical>

	return xReturn;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	200013a0 	.word	0x200013a0
 8009008:	200013b4 	.word	0x200013b4

0800900c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009010:	4b03      	ldr	r3, [pc, #12]	@ (8009020 <vTaskMissedYield+0x14>)
 8009012:	2201      	movs	r2, #1
 8009014:	601a      	str	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	200013b0 	.word	0x200013b0

08009024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800902c:	f000 f852 	bl	80090d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <prvIdleTask+0x28>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d9f9      	bls.n	800902c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009038:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <prvIdleTask+0x2c>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009048:	e7f0      	b.n	800902c <prvIdleTask+0x8>
 800904a:	bf00      	nop
 800904c:	200012a0 	.word	0x200012a0
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	e00c      	b.n	800907a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4a12      	ldr	r2, [pc, #72]	@ (80090b4 <prvInitialiseTaskLists+0x60>)
 800906c:	4413      	add	r3, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe ff3d 	bl	8007eee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d9ef      	bls.n	8009060 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009080:	480d      	ldr	r0, [pc, #52]	@ (80090b8 <prvInitialiseTaskLists+0x64>)
 8009082:	f7fe ff34 	bl	8007eee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009086:	480d      	ldr	r0, [pc, #52]	@ (80090bc <prvInitialiseTaskLists+0x68>)
 8009088:	f7fe ff31 	bl	8007eee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800908c:	480c      	ldr	r0, [pc, #48]	@ (80090c0 <prvInitialiseTaskLists+0x6c>)
 800908e:	f7fe ff2e 	bl	8007eee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009092:	480c      	ldr	r0, [pc, #48]	@ (80090c4 <prvInitialiseTaskLists+0x70>)
 8009094:	f7fe ff2b 	bl	8007eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009098:	480b      	ldr	r0, [pc, #44]	@ (80090c8 <prvInitialiseTaskLists+0x74>)
 800909a:	f7fe ff28 	bl	8007eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800909e:	4b0b      	ldr	r3, [pc, #44]	@ (80090cc <prvInitialiseTaskLists+0x78>)
 80090a0:	4a05      	ldr	r2, [pc, #20]	@ (80090b8 <prvInitialiseTaskLists+0x64>)
 80090a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <prvInitialiseTaskLists+0x7c>)
 80090a6:	4a05      	ldr	r2, [pc, #20]	@ (80090bc <prvInitialiseTaskLists+0x68>)
 80090a8:	601a      	str	r2, [r3, #0]
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	200012a0 	.word	0x200012a0
 80090b8:	2000132c 	.word	0x2000132c
 80090bc:	20001340 	.word	0x20001340
 80090c0:	2000135c 	.word	0x2000135c
 80090c4:	20001370 	.word	0x20001370
 80090c8:	20001388 	.word	0x20001388
 80090cc:	20001354 	.word	0x20001354
 80090d0:	20001358 	.word	0x20001358

080090d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090da:	e019      	b.n	8009110 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090dc:	f000 fb44 	bl	8009768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e0:	4b10      	ldr	r3, [pc, #64]	@ (8009124 <prvCheckTasksWaitingTermination+0x50>)
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe ff88 	bl	8008002 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <prvCheckTasksWaitingTermination+0x54>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4a0b      	ldr	r2, [pc, #44]	@ (8009128 <prvCheckTasksWaitingTermination+0x54>)
 80090fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090fc:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <prvCheckTasksWaitingTermination+0x58>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3b01      	subs	r3, #1
 8009102:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <prvCheckTasksWaitingTermination+0x58>)
 8009104:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009106:	f000 fb61 	bl	80097cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f810 	bl	8009130 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009110:	4b06      	ldr	r3, [pc, #24]	@ (800912c <prvCheckTasksWaitingTermination+0x58>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e1      	bne.n	80090dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20001370 	.word	0x20001370
 8009128:	2000139c 	.word	0x2000139c
 800912c:	20001384 	.word	0x20001384

08009130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800913e:	2b00      	cmp	r3, #0
 8009140:	d108      	bne.n	8009154 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fcfe 	bl	8009b48 <vPortFree>
				vPortFree( pxTCB );
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fcfb 	bl	8009b48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009152:	e019      	b.n	8009188 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800915a:	2b01      	cmp	r3, #1
 800915c:	d103      	bne.n	8009166 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fcf2 	bl	8009b48 <vPortFree>
	}
 8009164:	e010      	b.n	8009188 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800916c:	2b02      	cmp	r3, #2
 800916e:	d00b      	beq.n	8009188 <prvDeleteTCB+0x58>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <prvDeleteTCB+0x54>
	}
 8009188:	bf00      	nop
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009196:	4b0c      	ldr	r3, [pc, #48]	@ (80091c8 <prvResetNextTaskUnblockTime+0x38>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091a0:	4b0a      	ldr	r3, [pc, #40]	@ (80091cc <prvResetNextTaskUnblockTime+0x3c>)
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091a8:	e008      	b.n	80091bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <prvResetNextTaskUnblockTime+0x38>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	4a04      	ldr	r2, [pc, #16]	@ (80091cc <prvResetNextTaskUnblockTime+0x3c>)
 80091ba:	6013      	str	r3, [r2, #0]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20001354 	.word	0x20001354
 80091cc:	200013bc 	.word	0x200013bc

080091d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <xTaskGetSchedulerState+0x34>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091de:	2301      	movs	r3, #1
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	e008      	b.n	80091f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e4:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <xTaskGetSchedulerState+0x38>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d102      	bne.n	80091f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091ec:	2302      	movs	r3, #2
 80091ee:	607b      	str	r3, [r7, #4]
 80091f0:	e001      	b.n	80091f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091f2:	2300      	movs	r3, #0
 80091f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091f6:	687b      	ldr	r3, [r7, #4]
	}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	200013a8 	.word	0x200013a8
 8009208:	200013c4 	.word	0x200013c4

0800920c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d05e      	beq.n	80092e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009226:	4b31      	ldr	r3, [pc, #196]	@ (80092ec <xTaskPriorityInherit+0xe0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	429a      	cmp	r2, r3
 800922e:	d24e      	bcs.n	80092ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	2b00      	cmp	r3, #0
 8009236:	db06      	blt.n	8009246 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009238:	4b2c      	ldr	r3, [pc, #176]	@ (80092ec <xTaskPriorityInherit+0xe0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923e:	f1c3 0207 	rsb	r2, r3, #7
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6959      	ldr	r1, [r3, #20]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4a26      	ldr	r2, [pc, #152]	@ (80092f0 <xTaskPriorityInherit+0xe4>)
 8009258:	4413      	add	r3, r2
 800925a:	4299      	cmp	r1, r3
 800925c:	d12f      	bne.n	80092be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3304      	adds	r3, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fecd 	bl	8008002 <uxListRemove>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009272:	2201      	movs	r2, #1
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	43da      	mvns	r2, r3
 800927a:	4b1e      	ldr	r3, [pc, #120]	@ (80092f4 <xTaskPriorityInherit+0xe8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4013      	ands	r3, r2
 8009280:	4a1c      	ldr	r2, [pc, #112]	@ (80092f4 <xTaskPriorityInherit+0xe8>)
 8009282:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009284:	4b19      	ldr	r3, [pc, #100]	@ (80092ec <xTaskPriorityInherit+0xe0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	2201      	movs	r2, #1
 8009294:	409a      	lsls	r2, r3
 8009296:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <xTaskPriorityInherit+0xe8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4313      	orrs	r3, r2
 800929c:	4a15      	ldr	r2, [pc, #84]	@ (80092f4 <xTaskPriorityInherit+0xe8>)
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4a10      	ldr	r2, [pc, #64]	@ (80092f0 <xTaskPriorityInherit+0xe4>)
 80092ae:	441a      	add	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	3304      	adds	r3, #4
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f7fe fe46 	bl	8007f48 <vListInsertEnd>
 80092bc:	e004      	b.n	80092c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092be:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <xTaskPriorityInherit+0xe0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80092c8:	2301      	movs	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e008      	b.n	80092e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092d2:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <xTaskPriorityInherit+0xe0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	429a      	cmp	r2, r3
 80092da:	d201      	bcs.n	80092e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092e0:	68fb      	ldr	r3, [r7, #12]
	}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	2000129c 	.word	0x2000129c
 80092f0:	200012a0 	.word	0x200012a0
 80092f4:	200013a4 	.word	0x200013a4

080092f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009306:	2301      	movs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d079      	beq.n	8009404 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	60fb      	str	r3, [r7, #12]
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d902      	bls.n	8009340 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	e002      	b.n	8009346 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009344:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	429a      	cmp	r2, r3
 800934e:	d059      	beq.n	8009404 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	429a      	cmp	r2, r3
 8009358:	d154      	bne.n	8009404 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800935a:	4b2c      	ldr	r3, [pc, #176]	@ (800940c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	429a      	cmp	r2, r3
 8009362:	d10b      	bne.n	800937c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60bb      	str	r3, [r7, #8]
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	db04      	blt.n	800939a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f1c3 0207 	rsb	r2, r3, #7
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	6959      	ldr	r1, [r3, #20]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4a19      	ldr	r2, [pc, #100]	@ (8009410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80093aa:	4413      	add	r3, r2
 80093ac:	4299      	cmp	r1, r3
 80093ae:	d129      	bne.n	8009404 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fe24 	bl	8008002 <uxListRemove>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c4:	2201      	movs	r2, #1
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43da      	mvns	r2, r3
 80093cc:	4b11      	ldr	r3, [pc, #68]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4013      	ands	r3, r2
 80093d2:	4a10      	ldr	r2, [pc, #64]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80093d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093da:	2201      	movs	r2, #1
 80093dc:	409a      	lsls	r2, r3
 80093de:	4b0d      	ldr	r3, [pc, #52]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009414 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4a06      	ldr	r2, [pc, #24]	@ (8009410 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80093f6:	441a      	add	r2, r3
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7fe fda2 	bl	8007f48 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009404:	bf00      	nop
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000129c 	.word	0x2000129c
 8009410:	200012a0 	.word	0x200012a0
 8009414:	200013a4 	.word	0x200013a4

08009418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800942a:	3201      	adds	r2, #1
 800942c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800942e:	4b03      	ldr	r3, [pc, #12]	@ (800943c <pvTaskIncrementMutexHeldCount+0x24>)
 8009430:	681b      	ldr	r3, [r3, #0]
	}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	2000129c 	.word	0x2000129c

08009440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800944a:	4b29      	ldr	r3, [pc, #164]	@ (80094f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009450:	4b28      	ldr	r3, [pc, #160]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3304      	adds	r3, #4
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fdd3 	bl	8008002 <uxListRemove>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10b      	bne.n	800947a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009462:	4b24      	ldr	r3, [pc, #144]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	2201      	movs	r2, #1
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	43da      	mvns	r2, r3
 8009470:	4b21      	ldr	r3, [pc, #132]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4013      	ands	r3, r2
 8009476:	4a20      	ldr	r2, [pc, #128]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009478:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009480:	d10a      	bne.n	8009498 <prvAddCurrentTaskToDelayedList+0x58>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	481a      	ldr	r0, [pc, #104]	@ (80094fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009492:	f7fe fd59 	bl	8007f48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009496:	e026      	b.n	80094e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4413      	add	r3, r2
 800949e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094a0:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d209      	bcs.n	80094c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b0:	4b13      	ldr	r3, [pc, #76]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xc0>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4b0f      	ldr	r3, [pc, #60]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3304      	adds	r3, #4
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f7fe fd67 	bl	8007f90 <vListInsert>
}
 80094c2:	e010      	b.n	80094e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xc4>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fe fd5d 	bl	8007f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d202      	bcs.n	80094e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80094e0:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6013      	str	r3, [r2, #0]
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200013a0 	.word	0x200013a0
 80094f4:	2000129c 	.word	0x2000129c
 80094f8:	200013a4 	.word	0x200013a4
 80094fc:	20001388 	.word	0x20001388
 8009500:	20001358 	.word	0x20001358
 8009504:	20001354 	.word	0x20001354
 8009508:	200013bc 	.word	0x200013bc

0800950c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3b04      	subs	r3, #4
 800951c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3b04      	subs	r3, #4
 800952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3b04      	subs	r3, #4
 800953a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800953c:	4a0c      	ldr	r2, [pc, #48]	@ (8009570 <pxPortInitialiseStack+0x64>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3b14      	subs	r3, #20
 8009546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b04      	subs	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f06f 0202 	mvn.w	r2, #2
 800955a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3b20      	subs	r3, #32
 8009560:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009562:	68fb      	ldr	r3, [r7, #12]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	08009575 	.word	0x08009575

08009574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800957e:	4b13      	ldr	r3, [pc, #76]	@ (80095cc <prvTaskExitError+0x58>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009586:	d00b      	beq.n	80095a0 <prvTaskExitError+0x2c>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	e7fd      	b.n	800959c <prvTaskExitError+0x28>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	60bb      	str	r3, [r7, #8]
}
 80095b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095b4:	bf00      	nop
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0fc      	beq.n	80095b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095bc:	bf00      	nop
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	2000000c 	.word	0x2000000c

080095d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095d0:	4b07      	ldr	r3, [pc, #28]	@ (80095f0 <pxCurrentTCBConst2>)
 80095d2:	6819      	ldr	r1, [r3, #0]
 80095d4:	6808      	ldr	r0, [r1, #0]
 80095d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095da:	f380 8809 	msr	PSP, r0
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f380 8811 	msr	BASEPRI, r0
 80095ea:	4770      	bx	lr
 80095ec:	f3af 8000 	nop.w

080095f0 <pxCurrentTCBConst2>:
 80095f0:	2000129c 	.word	0x2000129c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop

080095f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095f8:	4808      	ldr	r0, [pc, #32]	@ (800961c <prvPortStartFirstTask+0x24>)
 80095fa:	6800      	ldr	r0, [r0, #0]
 80095fc:	6800      	ldr	r0, [r0, #0]
 80095fe:	f380 8808 	msr	MSP, r0
 8009602:	f04f 0000 	mov.w	r0, #0
 8009606:	f380 8814 	msr	CONTROL, r0
 800960a:	b662      	cpsie	i
 800960c:	b661      	cpsie	f
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	df00      	svc	0
 8009618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800961a:	bf00      	nop
 800961c:	e000ed08 	.word	0xe000ed08

08009620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009626:	4b47      	ldr	r3, [pc, #284]	@ (8009744 <xPortStartScheduler+0x124>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a47      	ldr	r2, [pc, #284]	@ (8009748 <xPortStartScheduler+0x128>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d10b      	bne.n	8009648 <xPortStartScheduler+0x28>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	613b      	str	r3, [r7, #16]
}
 8009642:	bf00      	nop
 8009644:	bf00      	nop
 8009646:	e7fd      	b.n	8009644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009648:	4b3e      	ldr	r3, [pc, #248]	@ (8009744 <xPortStartScheduler+0x124>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a3f      	ldr	r2, [pc, #252]	@ (800974c <xPortStartScheduler+0x12c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d10b      	bne.n	800966a <xPortStartScheduler+0x4a>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800966a:	4b39      	ldr	r3, [pc, #228]	@ (8009750 <xPortStartScheduler+0x130>)
 800966c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	22ff      	movs	r2, #255	@ 0xff
 800967a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	b2db      	uxtb	r3, r3
 8009682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800968c:	b2da      	uxtb	r2, r3
 800968e:	4b31      	ldr	r3, [pc, #196]	@ (8009754 <xPortStartScheduler+0x134>)
 8009690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009692:	4b31      	ldr	r3, [pc, #196]	@ (8009758 <xPortStartScheduler+0x138>)
 8009694:	2207      	movs	r2, #7
 8009696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009698:	e009      	b.n	80096ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800969a:	4b2f      	ldr	r3, [pc, #188]	@ (8009758 <xPortStartScheduler+0x138>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3b01      	subs	r3, #1
 80096a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009758 <xPortStartScheduler+0x138>)
 80096a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d0ef      	beq.n	800969a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096ba:	4b27      	ldr	r3, [pc, #156]	@ (8009758 <xPortStartScheduler+0x138>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f1c3 0307 	rsb	r3, r3, #7
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d00b      	beq.n	80096de <xPortStartScheduler+0xbe>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60bb      	str	r3, [r7, #8]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096de:	4b1e      	ldr	r3, [pc, #120]	@ (8009758 <xPortStartScheduler+0x138>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009758 <xPortStartScheduler+0x138>)
 80096e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009758 <xPortStartScheduler+0x138>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096f0:	4a19      	ldr	r2, [pc, #100]	@ (8009758 <xPortStartScheduler+0x138>)
 80096f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096fc:	4b17      	ldr	r3, [pc, #92]	@ (800975c <xPortStartScheduler+0x13c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a16      	ldr	r2, [pc, #88]	@ (800975c <xPortStartScheduler+0x13c>)
 8009702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009708:	4b14      	ldr	r3, [pc, #80]	@ (800975c <xPortStartScheduler+0x13c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a13      	ldr	r2, [pc, #76]	@ (800975c <xPortStartScheduler+0x13c>)
 800970e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009714:	f000 f8da 	bl	80098cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009718:	4b11      	ldr	r3, [pc, #68]	@ (8009760 <xPortStartScheduler+0x140>)
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800971e:	f000 f8f9 	bl	8009914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009722:	4b10      	ldr	r3, [pc, #64]	@ (8009764 <xPortStartScheduler+0x144>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a0f      	ldr	r2, [pc, #60]	@ (8009764 <xPortStartScheduler+0x144>)
 8009728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800972c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800972e:	f7ff ff63 	bl	80095f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009732:	f7ff fb0b 	bl	8008d4c <vTaskSwitchContext>
	prvTaskExitError();
 8009736:	f7ff ff1d 	bl	8009574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	e000ed00 	.word	0xe000ed00
 8009748:	410fc271 	.word	0x410fc271
 800974c:	410fc270 	.word	0x410fc270
 8009750:	e000e400 	.word	0xe000e400
 8009754:	200013c8 	.word	0x200013c8
 8009758:	200013cc 	.word	0x200013cc
 800975c:	e000ed20 	.word	0xe000ed20
 8009760:	2000000c 	.word	0x2000000c
 8009764:	e000ef34 	.word	0xe000ef34

08009768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	607b      	str	r3, [r7, #4]
}
 8009780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009782:	4b10      	ldr	r3, [pc, #64]	@ (80097c4 <vPortEnterCritical+0x5c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3301      	adds	r3, #1
 8009788:	4a0e      	ldr	r2, [pc, #56]	@ (80097c4 <vPortEnterCritical+0x5c>)
 800978a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800978c:	4b0d      	ldr	r3, [pc, #52]	@ (80097c4 <vPortEnterCritical+0x5c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d110      	bne.n	80097b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009794:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <vPortEnterCritical+0x60>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00b      	beq.n	80097b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	603b      	str	r3, [r7, #0]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <vPortEnterCritical+0x4a>
	}
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	2000000c 	.word	0x2000000c
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097d2:	4b12      	ldr	r3, [pc, #72]	@ (800981c <vPortExitCritical+0x50>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <vPortExitCritical+0x26>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	607b      	str	r3, [r7, #4]
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	e7fd      	b.n	80097ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097f2:	4b0a      	ldr	r3, [pc, #40]	@ (800981c <vPortExitCritical+0x50>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	4a08      	ldr	r2, [pc, #32]	@ (800981c <vPortExitCritical+0x50>)
 80097fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097fc:	4b07      	ldr	r3, [pc, #28]	@ (800981c <vPortExitCritical+0x50>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <vPortExitCritical+0x44>
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f383 8811 	msr	BASEPRI, r3
}
 800980e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	2000000c 	.word	0x2000000c

08009820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009820:	f3ef 8009 	mrs	r0, PSP
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	4b15      	ldr	r3, [pc, #84]	@ (8009880 <pxCurrentTCBConst>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f01e 0f10 	tst.w	lr, #16
 8009830:	bf08      	it	eq
 8009832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	6010      	str	r0, [r2, #0]
 800983c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009844:	f380 8811 	msr	BASEPRI, r0
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f7ff fa7c 	bl	8008d4c <vTaskSwitchContext>
 8009854:	f04f 0000 	mov.w	r0, #0
 8009858:	f380 8811 	msr	BASEPRI, r0
 800985c:	bc09      	pop	{r0, r3}
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	6808      	ldr	r0, [r1, #0]
 8009862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009866:	f01e 0f10 	tst.w	lr, #16
 800986a:	bf08      	it	eq
 800986c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009870:	f380 8809 	msr	PSP, r0
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst>:
 8009880:	2000129c 	.word	0x2000129c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	607b      	str	r3, [r7, #4]
}
 80098a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098a2:	f7ff f999 	bl	8008bd8 <xTaskIncrementTick>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098ac:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <xPortSysTickHandler+0x40>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f383 8811 	msr	BASEPRI, r3
}
 80098be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009900 <vPortSetupTimerInterrupt+0x34>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009904 <vPortSetupTimerInterrupt+0x38>)
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <vPortSetupTimerInterrupt+0x3c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0a      	ldr	r2, [pc, #40]	@ (800990c <vPortSetupTimerInterrupt+0x40>)
 80098e2:	fba2 2303 	umull	r2, r3, r2, r3
 80098e6:	099b      	lsrs	r3, r3, #6
 80098e8:	4a09      	ldr	r2, [pc, #36]	@ (8009910 <vPortSetupTimerInterrupt+0x44>)
 80098ea:	3b01      	subs	r3, #1
 80098ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098ee:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <vPortSetupTimerInterrupt+0x34>)
 80098f0:	2207      	movs	r2, #7
 80098f2:	601a      	str	r2, [r3, #0]
}
 80098f4:	bf00      	nop
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	e000e010 	.word	0xe000e010
 8009904:	e000e018 	.word	0xe000e018
 8009908:	20000000 	.word	0x20000000
 800990c:	10624dd3 	.word	0x10624dd3
 8009910:	e000e014 	.word	0xe000e014

08009914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009924 <vPortEnableVFP+0x10>
 8009918:	6801      	ldr	r1, [r0, #0]
 800991a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800991e:	6001      	str	r1, [r0, #0]
 8009920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009922:	bf00      	nop
 8009924:	e000ed88 	.word	0xe000ed88

08009928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800992e:	f3ef 8305 	mrs	r3, IPSR
 8009932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b0f      	cmp	r3, #15
 8009938:	d915      	bls.n	8009966 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800993a:	4a18      	ldr	r2, [pc, #96]	@ (800999c <vPortValidateInterruptPriority+0x74>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009944:	4b16      	ldr	r3, [pc, #88]	@ (80099a0 <vPortValidateInterruptPriority+0x78>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	7afa      	ldrb	r2, [r7, #11]
 800994a:	429a      	cmp	r2, r3
 800994c:	d20b      	bcs.n	8009966 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009966:	4b0f      	ldr	r3, [pc, #60]	@ (80099a4 <vPortValidateInterruptPriority+0x7c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800996e:	4b0e      	ldr	r3, [pc, #56]	@ (80099a8 <vPortValidateInterruptPriority+0x80>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	d90b      	bls.n	800998e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	603b      	str	r3, [r7, #0]
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	e7fd      	b.n	800998a <vPortValidateInterruptPriority+0x62>
	}
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	e000e3f0 	.word	0xe000e3f0
 80099a0:	200013c8 	.word	0x200013c8
 80099a4:	e000ed0c 	.word	0xe000ed0c
 80099a8:	200013cc 	.word	0x200013cc

080099ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	@ 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099b8:	f7ff f862 	bl	8008a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b30 <pvPortMalloc+0x184>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099c4:	f000 f924 	bl	8009c10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099c8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b34 <pvPortMalloc+0x188>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4013      	ands	r3, r2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f040 8095 	bne.w	8009b00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01e      	beq.n	8009a1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80099dc:	2208      	movs	r2, #8
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4413      	add	r3, r2
 80099e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d015      	beq.n	8009a1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f023 0307 	bic.w	r3, r3, #7
 80099f4:	3308      	adds	r3, #8
 80099f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00b      	beq.n	8009a1a <pvPortMalloc+0x6e>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	617b      	str	r3, [r7, #20]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d06f      	beq.n	8009b00 <pvPortMalloc+0x154>
 8009a20:	4b45      	ldr	r3, [pc, #276]	@ (8009b38 <pvPortMalloc+0x18c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d86a      	bhi.n	8009b00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a2a:	4b44      	ldr	r3, [pc, #272]	@ (8009b3c <pvPortMalloc+0x190>)
 8009a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a2e:	4b43      	ldr	r3, [pc, #268]	@ (8009b3c <pvPortMalloc+0x190>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a34:	e004      	b.n	8009a40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d903      	bls.n	8009a52 <pvPortMalloc+0xa6>
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f1      	bne.n	8009a36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a52:	4b37      	ldr	r3, [pc, #220]	@ (8009b30 <pvPortMalloc+0x184>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d051      	beq.n	8009b00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2208      	movs	r2, #8
 8009a62:	4413      	add	r3, r2
 8009a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	1ad2      	subs	r2, r2, r3
 8009a76:	2308      	movs	r3, #8
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d920      	bls.n	8009ac0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <pvPortMalloc+0xfc>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	613b      	str	r3, [r7, #16]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009aba:	69b8      	ldr	r0, [r7, #24]
 8009abc:	f000 f90a 	bl	8009cd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b38 <pvPortMalloc+0x18c>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	4a1b      	ldr	r2, [pc, #108]	@ (8009b38 <pvPortMalloc+0x18c>)
 8009acc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ace:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <pvPortMalloc+0x18c>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b40 <pvPortMalloc+0x194>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d203      	bcs.n	8009ae2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ada:	4b17      	ldr	r3, [pc, #92]	@ (8009b38 <pvPortMalloc+0x18c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <pvPortMalloc+0x194>)
 8009ae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <pvPortMalloc+0x188>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009af6:	4b13      	ldr	r3, [pc, #76]	@ (8009b44 <pvPortMalloc+0x198>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3301      	adds	r3, #1
 8009afc:	4a11      	ldr	r2, [pc, #68]	@ (8009b44 <pvPortMalloc+0x198>)
 8009afe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b00:	f7fe ffcc 	bl	8008a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <pvPortMalloc+0x17a>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60fb      	str	r3, [r7, #12]
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	e7fd      	b.n	8009b22 <pvPortMalloc+0x176>
	return pvReturn;
 8009b26:	69fb      	ldr	r3, [r7, #28]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3728      	adds	r7, #40	@ 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20001f90 	.word	0x20001f90
 8009b34:	20001fa4 	.word	0x20001fa4
 8009b38:	20001f94 	.word	0x20001f94
 8009b3c:	20001f88 	.word	0x20001f88
 8009b40:	20001f98 	.word	0x20001f98
 8009b44:	20001f9c 	.word	0x20001f9c

08009b48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d04f      	beq.n	8009bfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	425b      	negs	r3, r3
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4413      	add	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	4b25      	ldr	r3, [pc, #148]	@ (8009c04 <vPortFree+0xbc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4013      	ands	r3, r2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10b      	bne.n	8009b8e <vPortFree+0x46>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	60fb      	str	r3, [r7, #12]
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	e7fd      	b.n	8009b8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00b      	beq.n	8009bae <vPortFree+0x66>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60bb      	str	r3, [r7, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	4b14      	ldr	r3, [pc, #80]	@ (8009c04 <vPortFree+0xbc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01e      	beq.n	8009bfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11a      	bne.n	8009bfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <vPortFree+0xbc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	401a      	ands	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bd4:	f7fe ff54 	bl	8008a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <vPortFree+0xc0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4413      	add	r3, r2
 8009be2:	4a09      	ldr	r2, [pc, #36]	@ (8009c08 <vPortFree+0xc0>)
 8009be4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009be6:	6938      	ldr	r0, [r7, #16]
 8009be8:	f000 f874 	bl	8009cd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bec:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <vPortFree+0xc4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	4a06      	ldr	r2, [pc, #24]	@ (8009c0c <vPortFree+0xc4>)
 8009bf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bf6:	f7fe ff51 	bl	8008a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bfa:	bf00      	nop
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	20001fa4 	.word	0x20001fa4
 8009c08:	20001f94 	.word	0x20001f94
 8009c0c:	20001fa0 	.word	0x20001fa0

08009c10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c16:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009c1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c1c:	4b27      	ldr	r3, [pc, #156]	@ (8009cbc <prvHeapInit+0xac>)
 8009c1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00c      	beq.n	8009c44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3307      	adds	r3, #7
 8009c2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0307 	bic.w	r3, r3, #7
 8009c36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cbc <prvHeapInit+0xac>)
 8009c40:	4413      	add	r3, r2
 8009c42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c48:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc0 <prvHeapInit+0xb0>)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8009cc0 <prvHeapInit+0xb0>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	4413      	add	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c5c:	2208      	movs	r2, #8
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 0307 	bic.w	r3, r3, #7
 8009c6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a15      	ldr	r2, [pc, #84]	@ (8009cc4 <prvHeapInit+0xb4>)
 8009c70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c72:	4b14      	ldr	r3, [pc, #80]	@ (8009cc4 <prvHeapInit+0xb4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2200      	movs	r2, #0
 8009c78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c7a:	4b12      	ldr	r3, [pc, #72]	@ (8009cc4 <prvHeapInit+0xb4>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c90:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc4 <prvHeapInit+0xb4>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8009cc8 <prvHeapInit+0xb8>)
 8009c9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4a09      	ldr	r2, [pc, #36]	@ (8009ccc <prvHeapInit+0xbc>)
 8009ca6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ca8:	4b09      	ldr	r3, [pc, #36]	@ (8009cd0 <prvHeapInit+0xc0>)
 8009caa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	200013d0 	.word	0x200013d0
 8009cc0:	20001f88 	.word	0x20001f88
 8009cc4:	20001f90 	.word	0x20001f90
 8009cc8:	20001f98 	.word	0x20001f98
 8009ccc:	20001f94 	.word	0x20001f94
 8009cd0:	20001fa4 	.word	0x20001fa4

08009cd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cdc:	4b28      	ldr	r3, [pc, #160]	@ (8009d80 <prvInsertBlockIntoFreeList+0xac>)
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e002      	b.n	8009ce8 <prvInsertBlockIntoFreeList+0x14>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d8f7      	bhi.n	8009ce2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d108      	bne.n	8009d16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	441a      	add	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	441a      	add	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d118      	bne.n	8009d5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b15      	ldr	r3, [pc, #84]	@ (8009d84 <prvInsertBlockIntoFreeList+0xb0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d00d      	beq.n	8009d52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	441a      	add	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	e008      	b.n	8009d64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d52:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <prvInsertBlockIntoFreeList+0xb0>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e003      	b.n	8009d64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d002      	beq.n	8009d72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	20001f88 	.word	0x20001f88
 8009d84:	20001f90 	.word	0x20001f90

08009d88 <__cvt>:
 8009d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	ec57 6b10 	vmov	r6, r7, d0
 8009d90:	2f00      	cmp	r7, #0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4619      	mov	r1, r3
 8009d96:	463b      	mov	r3, r7
 8009d98:	bfbb      	ittet	lt
 8009d9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009d9e:	461f      	movlt	r7, r3
 8009da0:	2300      	movge	r3, #0
 8009da2:	232d      	movlt	r3, #45	@ 0x2d
 8009da4:	700b      	strb	r3, [r1, #0]
 8009da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009da8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009dac:	4691      	mov	r9, r2
 8009dae:	f023 0820 	bic.w	r8, r3, #32
 8009db2:	bfbc      	itt	lt
 8009db4:	4632      	movlt	r2, r6
 8009db6:	4616      	movlt	r6, r2
 8009db8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009dbc:	d005      	beq.n	8009dca <__cvt+0x42>
 8009dbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009dc2:	d100      	bne.n	8009dc6 <__cvt+0x3e>
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	e000      	b.n	8009dcc <__cvt+0x44>
 8009dca:	2103      	movs	r1, #3
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	ab02      	add	r3, sp, #8
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	ec47 6b10 	vmov	d0, r6, r7
 8009dd8:	4653      	mov	r3, sl
 8009dda:	4622      	mov	r2, r4
 8009ddc:	f001 f9bc 	bl	800b158 <_dtoa_r>
 8009de0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009de4:	4605      	mov	r5, r0
 8009de6:	d119      	bne.n	8009e1c <__cvt+0x94>
 8009de8:	f019 0f01 	tst.w	r9, #1
 8009dec:	d00e      	beq.n	8009e0c <__cvt+0x84>
 8009dee:	eb00 0904 	add.w	r9, r0, r4
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	4630      	mov	r0, r6
 8009df8:	4639      	mov	r1, r7
 8009dfa:	f7f6 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dfe:	b108      	cbz	r0, 8009e04 <__cvt+0x7c>
 8009e00:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e04:	2230      	movs	r2, #48	@ 0x30
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	454b      	cmp	r3, r9
 8009e0a:	d31e      	bcc.n	8009e4a <__cvt+0xc2>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e10:	1b5b      	subs	r3, r3, r5
 8009e12:	4628      	mov	r0, r5
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	b004      	add	sp, #16
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e20:	eb00 0904 	add.w	r9, r0, r4
 8009e24:	d1e5      	bne.n	8009df2 <__cvt+0x6a>
 8009e26:	7803      	ldrb	r3, [r0, #0]
 8009e28:	2b30      	cmp	r3, #48	@ 0x30
 8009e2a:	d10a      	bne.n	8009e42 <__cvt+0xba>
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e38:	b918      	cbnz	r0, 8009e42 <__cvt+0xba>
 8009e3a:	f1c4 0401 	rsb	r4, r4, #1
 8009e3e:	f8ca 4000 	str.w	r4, [sl]
 8009e42:	f8da 3000 	ldr.w	r3, [sl]
 8009e46:	4499      	add	r9, r3
 8009e48:	e7d3      	b.n	8009df2 <__cvt+0x6a>
 8009e4a:	1c59      	adds	r1, r3, #1
 8009e4c:	9103      	str	r1, [sp, #12]
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e7d9      	b.n	8009e06 <__cvt+0x7e>

08009e52 <__exponent>:
 8009e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e54:	2900      	cmp	r1, #0
 8009e56:	bfba      	itte	lt
 8009e58:	4249      	neglt	r1, r1
 8009e5a:	232d      	movlt	r3, #45	@ 0x2d
 8009e5c:	232b      	movge	r3, #43	@ 0x2b
 8009e5e:	2909      	cmp	r1, #9
 8009e60:	7002      	strb	r2, [r0, #0]
 8009e62:	7043      	strb	r3, [r0, #1]
 8009e64:	dd29      	ble.n	8009eba <__exponent+0x68>
 8009e66:	f10d 0307 	add.w	r3, sp, #7
 8009e6a:	461d      	mov	r5, r3
 8009e6c:	270a      	movs	r7, #10
 8009e6e:	461a      	mov	r2, r3
 8009e70:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e74:	fb07 1416 	mls	r4, r7, r6, r1
 8009e78:	3430      	adds	r4, #48	@ 0x30
 8009e7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2c63      	cmp	r4, #99	@ 0x63
 8009e82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009e86:	4631      	mov	r1, r6
 8009e88:	dcf1      	bgt.n	8009e6e <__exponent+0x1c>
 8009e8a:	3130      	adds	r1, #48	@ 0x30
 8009e8c:	1e94      	subs	r4, r2, #2
 8009e8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e92:	1c41      	adds	r1, r0, #1
 8009e94:	4623      	mov	r3, r4
 8009e96:	42ab      	cmp	r3, r5
 8009e98:	d30a      	bcc.n	8009eb0 <__exponent+0x5e>
 8009e9a:	f10d 0309 	add.w	r3, sp, #9
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	42ac      	cmp	r4, r5
 8009ea2:	bf88      	it	hi
 8009ea4:	2300      	movhi	r3, #0
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	4403      	add	r3, r0
 8009eaa:	1a18      	subs	r0, r3, r0
 8009eac:	b003      	add	sp, #12
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009eb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009eb8:	e7ed      	b.n	8009e96 <__exponent+0x44>
 8009eba:	2330      	movs	r3, #48	@ 0x30
 8009ebc:	3130      	adds	r1, #48	@ 0x30
 8009ebe:	7083      	strb	r3, [r0, #2]
 8009ec0:	70c1      	strb	r1, [r0, #3]
 8009ec2:	1d03      	adds	r3, r0, #4
 8009ec4:	e7f1      	b.n	8009eaa <__exponent+0x58>
	...

08009ec8 <_printf_float>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	b08d      	sub	sp, #52	@ 0x34
 8009ece:	460c      	mov	r4, r1
 8009ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	461f      	mov	r7, r3
 8009ed8:	4605      	mov	r5, r0
 8009eda:	f001 f827 	bl	800af2c <_localeconv_r>
 8009ede:	6803      	ldr	r3, [r0, #0]
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7f6 f9c4 	bl	8000270 <strlen>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eec:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef0:	9005      	str	r0, [sp, #20]
 8009ef2:	3307      	adds	r3, #7
 8009ef4:	f023 0307 	bic.w	r3, r3, #7
 8009ef8:	f103 0208 	add.w	r2, r3, #8
 8009efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f00:	f8d4 b000 	ldr.w	fp, [r4]
 8009f04:	f8c8 2000 	str.w	r2, [r8]
 8009f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f10:	9307      	str	r3, [sp, #28]
 8009f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f1e:	4b9c      	ldr	r3, [pc, #624]	@ (800a190 <_printf_float+0x2c8>)
 8009f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f24:	f7f6 fe02 	bl	8000b2c <__aeabi_dcmpun>
 8009f28:	bb70      	cbnz	r0, 8009f88 <_printf_float+0xc0>
 8009f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f2e:	4b98      	ldr	r3, [pc, #608]	@ (800a190 <_printf_float+0x2c8>)
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f34:	f7f6 fddc 	bl	8000af0 <__aeabi_dcmple>
 8009f38:	bb30      	cbnz	r0, 8009f88 <_printf_float+0xc0>
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4649      	mov	r1, r9
 8009f42:	f7f6 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8009f46:	b110      	cbz	r0, 8009f4e <_printf_float+0x86>
 8009f48:	232d      	movs	r3, #45	@ 0x2d
 8009f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f4e:	4a91      	ldr	r2, [pc, #580]	@ (800a194 <_printf_float+0x2cc>)
 8009f50:	4b91      	ldr	r3, [pc, #580]	@ (800a198 <_printf_float+0x2d0>)
 8009f52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f56:	bf94      	ite	ls
 8009f58:	4690      	movls	r8, r2
 8009f5a:	4698      	movhi	r8, r3
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	f02b 0304 	bic.w	r3, fp, #4
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	f04f 0900 	mov.w	r9, #0
 8009f6a:	9700      	str	r7, [sp, #0]
 8009f6c:	4633      	mov	r3, r6
 8009f6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f9d2 	bl	800a31c <_printf_common>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f040 808d 	bne.w	800a098 <_printf_float+0x1d0>
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f82:	b00d      	add	sp, #52	@ 0x34
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 fdcc 	bl	8000b2c <__aeabi_dcmpun>
 8009f94:	b140      	cbz	r0, 8009fa8 <_printf_float+0xe0>
 8009f96:	464b      	mov	r3, r9
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bfbc      	itt	lt
 8009f9c:	232d      	movlt	r3, #45	@ 0x2d
 8009f9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800a19c <_printf_float+0x2d4>)
 8009fa4:	4b7e      	ldr	r3, [pc, #504]	@ (800a1a0 <_printf_float+0x2d8>)
 8009fa6:	e7d4      	b.n	8009f52 <_printf_float+0x8a>
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009fae:	9206      	str	r2, [sp, #24]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	d13b      	bne.n	800a02c <_printf_float+0x164>
 8009fb4:	2306      	movs	r3, #6
 8009fb6:	6063      	str	r3, [r4, #4]
 8009fb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	9303      	str	r3, [sp, #12]
 8009fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009fc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009fc8:	ab09      	add	r3, sp, #36	@ 0x24
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	6861      	ldr	r1, [r4, #4]
 8009fce:	ec49 8b10 	vmov	d0, r8, r9
 8009fd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7ff fed6 	bl	8009d88 <__cvt>
 8009fdc:	9b06      	ldr	r3, [sp, #24]
 8009fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fe0:	2b47      	cmp	r3, #71	@ 0x47
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	d129      	bne.n	800a03a <_printf_float+0x172>
 8009fe6:	1cc8      	adds	r0, r1, #3
 8009fe8:	db02      	blt.n	8009ff0 <_printf_float+0x128>
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	4299      	cmp	r1, r3
 8009fee:	dd41      	ble.n	800a074 <_printf_float+0x1ac>
 8009ff0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8009ff8:	3901      	subs	r1, #1
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a000:	9109      	str	r1, [sp, #36]	@ 0x24
 800a002:	f7ff ff26 	bl	8009e52 <__exponent>
 800a006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a008:	1813      	adds	r3, r2, r0
 800a00a:	2a01      	cmp	r2, #1
 800a00c:	4681      	mov	r9, r0
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	dc02      	bgt.n	800a018 <_printf_float+0x150>
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	07d2      	lsls	r2, r2, #31
 800a016:	d501      	bpl.n	800a01c <_printf_float+0x154>
 800a018:	3301      	adds	r3, #1
 800a01a:	6123      	str	r3, [r4, #16]
 800a01c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a020:	2b00      	cmp	r3, #0
 800a022:	d0a2      	beq.n	8009f6a <_printf_float+0xa2>
 800a024:	232d      	movs	r3, #45	@ 0x2d
 800a026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a02a:	e79e      	b.n	8009f6a <_printf_float+0xa2>
 800a02c:	9a06      	ldr	r2, [sp, #24]
 800a02e:	2a47      	cmp	r2, #71	@ 0x47
 800a030:	d1c2      	bne.n	8009fb8 <_printf_float+0xf0>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1c0      	bne.n	8009fb8 <_printf_float+0xf0>
 800a036:	2301      	movs	r3, #1
 800a038:	e7bd      	b.n	8009fb6 <_printf_float+0xee>
 800a03a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a03e:	d9db      	bls.n	8009ff8 <_printf_float+0x130>
 800a040:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a044:	d118      	bne.n	800a078 <_printf_float+0x1b0>
 800a046:	2900      	cmp	r1, #0
 800a048:	6863      	ldr	r3, [r4, #4]
 800a04a:	dd0b      	ble.n	800a064 <_printf_float+0x19c>
 800a04c:	6121      	str	r1, [r4, #16]
 800a04e:	b913      	cbnz	r3, 800a056 <_printf_float+0x18e>
 800a050:	6822      	ldr	r2, [r4, #0]
 800a052:	07d0      	lsls	r0, r2, #31
 800a054:	d502      	bpl.n	800a05c <_printf_float+0x194>
 800a056:	3301      	adds	r3, #1
 800a058:	440b      	add	r3, r1
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a05e:	f04f 0900 	mov.w	r9, #0
 800a062:	e7db      	b.n	800a01c <_printf_float+0x154>
 800a064:	b913      	cbnz	r3, 800a06c <_printf_float+0x1a4>
 800a066:	6822      	ldr	r2, [r4, #0]
 800a068:	07d2      	lsls	r2, r2, #31
 800a06a:	d501      	bpl.n	800a070 <_printf_float+0x1a8>
 800a06c:	3302      	adds	r3, #2
 800a06e:	e7f4      	b.n	800a05a <_printf_float+0x192>
 800a070:	2301      	movs	r3, #1
 800a072:	e7f2      	b.n	800a05a <_printf_float+0x192>
 800a074:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a07a:	4299      	cmp	r1, r3
 800a07c:	db05      	blt.n	800a08a <_printf_float+0x1c2>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	6121      	str	r1, [r4, #16]
 800a082:	07d8      	lsls	r0, r3, #31
 800a084:	d5ea      	bpl.n	800a05c <_printf_float+0x194>
 800a086:	1c4b      	adds	r3, r1, #1
 800a088:	e7e7      	b.n	800a05a <_printf_float+0x192>
 800a08a:	2900      	cmp	r1, #0
 800a08c:	bfd4      	ite	le
 800a08e:	f1c1 0202 	rsble	r2, r1, #2
 800a092:	2201      	movgt	r2, #1
 800a094:	4413      	add	r3, r2
 800a096:	e7e0      	b.n	800a05a <_printf_float+0x192>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	055a      	lsls	r2, r3, #21
 800a09c:	d407      	bmi.n	800a0ae <_printf_float+0x1e6>
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d12b      	bne.n	800a104 <_printf_float+0x23c>
 800a0ac:	e767      	b.n	8009f7e <_printf_float+0xb6>
 800a0ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0b2:	f240 80dd 	bls.w	800a270 <_printf_float+0x3a8>
 800a0b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f7f6 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d033      	beq.n	800a12e <_printf_float+0x266>
 800a0c6:	4a37      	ldr	r2, [pc, #220]	@ (800a1a4 <_printf_float+0x2dc>)
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b8      	blx	r7
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f43f af54 	beq.w	8009f7e <_printf_float+0xb6>
 800a0d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a0da:	4543      	cmp	r3, r8
 800a0dc:	db02      	blt.n	800a0e4 <_printf_float+0x21c>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	07d8      	lsls	r0, r3, #31
 800a0e2:	d50f      	bpl.n	800a104 <_printf_float+0x23c>
 800a0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f af45 	beq.w	8009f7e <_printf_float+0xb6>
 800a0f4:	f04f 0900 	mov.w	r9, #0
 800a0f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a0fc:	f104 0a1a 	add.w	sl, r4, #26
 800a100:	45c8      	cmp	r8, r9
 800a102:	dc09      	bgt.n	800a118 <_printf_float+0x250>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	079b      	lsls	r3, r3, #30
 800a108:	f100 8103 	bmi.w	800a312 <_printf_float+0x44a>
 800a10c:	68e0      	ldr	r0, [r4, #12]
 800a10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a110:	4298      	cmp	r0, r3
 800a112:	bfb8      	it	lt
 800a114:	4618      	movlt	r0, r3
 800a116:	e734      	b.n	8009f82 <_printf_float+0xba>
 800a118:	2301      	movs	r3, #1
 800a11a:	4652      	mov	r2, sl
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f af2b 	beq.w	8009f7e <_printf_float+0xb6>
 800a128:	f109 0901 	add.w	r9, r9, #1
 800a12c:	e7e8      	b.n	800a100 <_printf_float+0x238>
 800a12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc39      	bgt.n	800a1a8 <_printf_float+0x2e0>
 800a134:	4a1b      	ldr	r2, [pc, #108]	@ (800a1a4 <_printf_float+0x2dc>)
 800a136:	2301      	movs	r3, #1
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af1d 	beq.w	8009f7e <_printf_float+0xb6>
 800a144:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a148:	ea59 0303 	orrs.w	r3, r9, r3
 800a14c:	d102      	bne.n	800a154 <_printf_float+0x28c>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	07d9      	lsls	r1, r3, #31
 800a152:	d5d7      	bpl.n	800a104 <_printf_float+0x23c>
 800a154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af0d 	beq.w	8009f7e <_printf_float+0xb6>
 800a164:	f04f 0a00 	mov.w	sl, #0
 800a168:	f104 0b1a 	add.w	fp, r4, #26
 800a16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a16e:	425b      	negs	r3, r3
 800a170:	4553      	cmp	r3, sl
 800a172:	dc01      	bgt.n	800a178 <_printf_float+0x2b0>
 800a174:	464b      	mov	r3, r9
 800a176:	e793      	b.n	800a0a0 <_printf_float+0x1d8>
 800a178:	2301      	movs	r3, #1
 800a17a:	465a      	mov	r2, fp
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f aefb 	beq.w	8009f7e <_printf_float+0xb6>
 800a188:	f10a 0a01 	add.w	sl, sl, #1
 800a18c:	e7ee      	b.n	800a16c <_printf_float+0x2a4>
 800a18e:	bf00      	nop
 800a190:	7fefffff 	.word	0x7fefffff
 800a194:	0800e753 	.word	0x0800e753
 800a198:	0800e757 	.word	0x0800e757
 800a19c:	0800e75b 	.word	0x0800e75b
 800a1a0:	0800e75f 	.word	0x0800e75f
 800a1a4:	0800e763 	.word	0x0800e763
 800a1a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1ae:	4553      	cmp	r3, sl
 800a1b0:	bfa8      	it	ge
 800a1b2:	4653      	movge	r3, sl
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	4699      	mov	r9, r3
 800a1b8:	dc36      	bgt.n	800a228 <_printf_float+0x360>
 800a1ba:	f04f 0b00 	mov.w	fp, #0
 800a1be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1c2:	f104 021a 	add.w	r2, r4, #26
 800a1c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1c8:	9306      	str	r3, [sp, #24]
 800a1ca:	eba3 0309 	sub.w	r3, r3, r9
 800a1ce:	455b      	cmp	r3, fp
 800a1d0:	dc31      	bgt.n	800a236 <_printf_float+0x36e>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d4:	459a      	cmp	sl, r3
 800a1d6:	dc3a      	bgt.n	800a24e <_printf_float+0x386>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	07da      	lsls	r2, r3, #31
 800a1dc:	d437      	bmi.n	800a24e <_printf_float+0x386>
 800a1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e0:	ebaa 0903 	sub.w	r9, sl, r3
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	ebaa 0303 	sub.w	r3, sl, r3
 800a1ea:	4599      	cmp	r9, r3
 800a1ec:	bfa8      	it	ge
 800a1ee:	4699      	movge	r9, r3
 800a1f0:	f1b9 0f00 	cmp.w	r9, #0
 800a1f4:	dc33      	bgt.n	800a25e <_printf_float+0x396>
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1fe:	f104 0b1a 	add.w	fp, r4, #26
 800a202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a204:	ebaa 0303 	sub.w	r3, sl, r3
 800a208:	eba3 0309 	sub.w	r3, r3, r9
 800a20c:	4543      	cmp	r3, r8
 800a20e:	f77f af79 	ble.w	800a104 <_printf_float+0x23c>
 800a212:	2301      	movs	r3, #1
 800a214:	465a      	mov	r2, fp
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f aeae 	beq.w	8009f7e <_printf_float+0xb6>
 800a222:	f108 0801 	add.w	r8, r8, #1
 800a226:	e7ec      	b.n	800a202 <_printf_float+0x33a>
 800a228:	4642      	mov	r2, r8
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	d1c2      	bne.n	800a1ba <_printf_float+0x2f2>
 800a234:	e6a3      	b.n	8009f7e <_printf_float+0xb6>
 800a236:	2301      	movs	r3, #1
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	9206      	str	r2, [sp, #24]
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	f43f ae9c 	beq.w	8009f7e <_printf_float+0xb6>
 800a246:	9a06      	ldr	r2, [sp, #24]
 800a248:	f10b 0b01 	add.w	fp, fp, #1
 800a24c:	e7bb      	b.n	800a1c6 <_printf_float+0x2fe>
 800a24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a252:	4631      	mov	r1, r6
 800a254:	4628      	mov	r0, r5
 800a256:	47b8      	blx	r7
 800a258:	3001      	adds	r0, #1
 800a25a:	d1c0      	bne.n	800a1de <_printf_float+0x316>
 800a25c:	e68f      	b.n	8009f7e <_printf_float+0xb6>
 800a25e:	9a06      	ldr	r2, [sp, #24]
 800a260:	464b      	mov	r3, r9
 800a262:	4442      	add	r2, r8
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	d1c3      	bne.n	800a1f6 <_printf_float+0x32e>
 800a26e:	e686      	b.n	8009f7e <_printf_float+0xb6>
 800a270:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a274:	f1ba 0f01 	cmp.w	sl, #1
 800a278:	dc01      	bgt.n	800a27e <_printf_float+0x3b6>
 800a27a:	07db      	lsls	r3, r3, #31
 800a27c:	d536      	bpl.n	800a2ec <_printf_float+0x424>
 800a27e:	2301      	movs	r3, #1
 800a280:	4642      	mov	r2, r8
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f ae78 	beq.w	8009f7e <_printf_float+0xb6>
 800a28e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	f43f ae70 	beq.w	8009f7e <_printf_float+0xb6>
 800a29e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a2aa:	f7f6 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ae:	b9c0      	cbnz	r0, 800a2e2 <_printf_float+0x41a>
 800a2b0:	4653      	mov	r3, sl
 800a2b2:	f108 0201 	add.w	r2, r8, #1
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d10c      	bne.n	800a2da <_printf_float+0x412>
 800a2c0:	e65d      	b.n	8009f7e <_printf_float+0xb6>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	465a      	mov	r2, fp
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	f43f ae56 	beq.w	8009f7e <_printf_float+0xb6>
 800a2d2:	f108 0801 	add.w	r8, r8, #1
 800a2d6:	45d0      	cmp	r8, sl
 800a2d8:	dbf3      	blt.n	800a2c2 <_printf_float+0x3fa>
 800a2da:	464b      	mov	r3, r9
 800a2dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a2e0:	e6df      	b.n	800a0a2 <_printf_float+0x1da>
 800a2e2:	f04f 0800 	mov.w	r8, #0
 800a2e6:	f104 0b1a 	add.w	fp, r4, #26
 800a2ea:	e7f4      	b.n	800a2d6 <_printf_float+0x40e>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	4642      	mov	r2, r8
 800a2f0:	e7e1      	b.n	800a2b6 <_printf_float+0x3ee>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	464a      	mov	r2, r9
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	f43f ae3e 	beq.w	8009f7e <_printf_float+0xb6>
 800a302:	f108 0801 	add.w	r8, r8, #1
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a30a:	1a5b      	subs	r3, r3, r1
 800a30c:	4543      	cmp	r3, r8
 800a30e:	dcf0      	bgt.n	800a2f2 <_printf_float+0x42a>
 800a310:	e6fc      	b.n	800a10c <_printf_float+0x244>
 800a312:	f04f 0800 	mov.w	r8, #0
 800a316:	f104 0919 	add.w	r9, r4, #25
 800a31a:	e7f4      	b.n	800a306 <_printf_float+0x43e>

0800a31c <_printf_common>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	4616      	mov	r6, r2
 800a322:	4698      	mov	r8, r3
 800a324:	688a      	ldr	r2, [r1, #8]
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bfb8      	it	lt
 800a330:	4613      	movlt	r3, r2
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a338:	4607      	mov	r7, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	b10a      	cbz	r2, 800a342 <_printf_common+0x26>
 800a33e:	3301      	adds	r3, #1
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	0699      	lsls	r1, r3, #26
 800a346:	bf42      	ittt	mi
 800a348:	6833      	ldrmi	r3, [r6, #0]
 800a34a:	3302      	addmi	r3, #2
 800a34c:	6033      	strmi	r3, [r6, #0]
 800a34e:	6825      	ldr	r5, [r4, #0]
 800a350:	f015 0506 	ands.w	r5, r5, #6
 800a354:	d106      	bne.n	800a364 <_printf_common+0x48>
 800a356:	f104 0a19 	add.w	sl, r4, #25
 800a35a:	68e3      	ldr	r3, [r4, #12]
 800a35c:	6832      	ldr	r2, [r6, #0]
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	42ab      	cmp	r3, r5
 800a362:	dc26      	bgt.n	800a3b2 <_printf_common+0x96>
 800a364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a368:	6822      	ldr	r2, [r4, #0]
 800a36a:	3b00      	subs	r3, #0
 800a36c:	bf18      	it	ne
 800a36e:	2301      	movne	r3, #1
 800a370:	0692      	lsls	r2, r2, #26
 800a372:	d42b      	bmi.n	800a3cc <_printf_common+0xb0>
 800a374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a378:	4641      	mov	r1, r8
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c8      	blx	r9
 800a37e:	3001      	adds	r0, #1
 800a380:	d01e      	beq.n	800a3c0 <_printf_common+0xa4>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	f003 0306 	and.w	r3, r3, #6
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	bf02      	ittt	eq
 800a38e:	68e5      	ldreq	r5, [r4, #12]
 800a390:	6833      	ldreq	r3, [r6, #0]
 800a392:	1aed      	subeq	r5, r5, r3
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	bf0c      	ite	eq
 800a398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a39c:	2500      	movne	r5, #0
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bfc4      	itt	gt
 800a3a2:	1a9b      	subgt	r3, r3, r2
 800a3a4:	18ed      	addgt	r5, r5, r3
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	341a      	adds	r4, #26
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	d11a      	bne.n	800a3e4 <_printf_common+0xc8>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e008      	b.n	800a3c4 <_printf_common+0xa8>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	4641      	mov	r1, r8
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	47c8      	blx	r9
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_printf_common+0xac>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	e7c6      	b.n	800a35a <_printf_common+0x3e>
 800a3cc:	18e1      	adds	r1, r4, r3
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	2030      	movs	r0, #48	@ 0x30
 800a3d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3d6:	4422      	add	r2, r4
 800a3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	e7c7      	b.n	800a374 <_printf_common+0x58>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c8      	blx	r9
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0e6      	beq.n	800a3c0 <_printf_common+0xa4>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7d9      	b.n	800a3aa <_printf_common+0x8e>
	...

0800a3f8 <_printf_i>:
 800a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	7e0f      	ldrb	r7, [r1, #24]
 800a3fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a400:	2f78      	cmp	r7, #120	@ 0x78
 800a402:	4691      	mov	r9, r2
 800a404:	4680      	mov	r8, r0
 800a406:	460c      	mov	r4, r1
 800a408:	469a      	mov	sl, r3
 800a40a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a40e:	d807      	bhi.n	800a420 <_printf_i+0x28>
 800a410:	2f62      	cmp	r7, #98	@ 0x62
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x32>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f000 80d2 	beq.w	800a5be <_printf_i+0x1c6>
 800a41a:	2f58      	cmp	r7, #88	@ 0x58
 800a41c:	f000 80b9 	beq.w	800a592 <_printf_i+0x19a>
 800a420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a428:	e03a      	b.n	800a4a0 <_printf_i+0xa8>
 800a42a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d8f6      	bhi.n	800a420 <_printf_i+0x28>
 800a432:	a101      	add	r1, pc, #4	@ (adr r1, 800a438 <_printf_i+0x40>)
 800a434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a421 	.word	0x0800a421
 800a444:	0800a421 	.word	0x0800a421
 800a448:	0800a421 	.word	0x0800a421
 800a44c:	0800a421 	.word	0x0800a421
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a421 	.word	0x0800a421
 800a458:	0800a421 	.word	0x0800a421
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a5a5 	.word	0x0800a5a5
 800a468:	0800a4cf 	.word	0x0800a4cf
 800a46c:	0800a55f 	.word	0x0800a55f
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5c7 	.word	0x0800a5c7
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a4cf 	.word	0x0800a4cf
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a567 	.word	0x0800a567
 800a490:	6833      	ldr	r3, [r6, #0]
 800a492:	1d1a      	adds	r2, r3, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6032      	str	r2, [r6, #0]
 800a498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a49c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e09d      	b.n	800a5e0 <_printf_i+0x1e8>
 800a4a4:	6833      	ldr	r3, [r6, #0]
 800a4a6:	6820      	ldr	r0, [r4, #0]
 800a4a8:	1d19      	adds	r1, r3, #4
 800a4aa:	6031      	str	r1, [r6, #0]
 800a4ac:	0606      	lsls	r6, r0, #24
 800a4ae:	d501      	bpl.n	800a4b4 <_printf_i+0xbc>
 800a4b0:	681d      	ldr	r5, [r3, #0]
 800a4b2:	e003      	b.n	800a4bc <_printf_i+0xc4>
 800a4b4:	0645      	lsls	r5, r0, #25
 800a4b6:	d5fb      	bpl.n	800a4b0 <_printf_i+0xb8>
 800a4b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4bc:	2d00      	cmp	r5, #0
 800a4be:	da03      	bge.n	800a4c8 <_printf_i+0xd0>
 800a4c0:	232d      	movs	r3, #45	@ 0x2d
 800a4c2:	426d      	negs	r5, r5
 800a4c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4c8:	4859      	ldr	r0, [pc, #356]	@ (800a630 <_printf_i+0x238>)
 800a4ca:	230a      	movs	r3, #10
 800a4cc:	e011      	b.n	800a4f2 <_printf_i+0xfa>
 800a4ce:	6821      	ldr	r1, [r4, #0]
 800a4d0:	6833      	ldr	r3, [r6, #0]
 800a4d2:	0608      	lsls	r0, r1, #24
 800a4d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4d8:	d402      	bmi.n	800a4e0 <_printf_i+0xe8>
 800a4da:	0649      	lsls	r1, r1, #25
 800a4dc:	bf48      	it	mi
 800a4de:	b2ad      	uxthmi	r5, r5
 800a4e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4e2:	4853      	ldr	r0, [pc, #332]	@ (800a630 <_printf_i+0x238>)
 800a4e4:	6033      	str	r3, [r6, #0]
 800a4e6:	bf14      	ite	ne
 800a4e8:	230a      	movne	r3, #10
 800a4ea:	2308      	moveq	r3, #8
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4f2:	6866      	ldr	r6, [r4, #4]
 800a4f4:	60a6      	str	r6, [r4, #8]
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	bfa2      	ittt	ge
 800a4fa:	6821      	ldrge	r1, [r4, #0]
 800a4fc:	f021 0104 	bicge.w	r1, r1, #4
 800a500:	6021      	strge	r1, [r4, #0]
 800a502:	b90d      	cbnz	r5, 800a508 <_printf_i+0x110>
 800a504:	2e00      	cmp	r6, #0
 800a506:	d04b      	beq.n	800a5a0 <_printf_i+0x1a8>
 800a508:	4616      	mov	r6, r2
 800a50a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a50e:	fb03 5711 	mls	r7, r3, r1, r5
 800a512:	5dc7      	ldrb	r7, [r0, r7]
 800a514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a518:	462f      	mov	r7, r5
 800a51a:	42bb      	cmp	r3, r7
 800a51c:	460d      	mov	r5, r1
 800a51e:	d9f4      	bls.n	800a50a <_printf_i+0x112>
 800a520:	2b08      	cmp	r3, #8
 800a522:	d10b      	bne.n	800a53c <_printf_i+0x144>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	07df      	lsls	r7, r3, #31
 800a528:	d508      	bpl.n	800a53c <_printf_i+0x144>
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	6861      	ldr	r1, [r4, #4]
 800a52e:	4299      	cmp	r1, r3
 800a530:	bfde      	ittt	le
 800a532:	2330      	movle	r3, #48	@ 0x30
 800a534:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a538:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a53c:	1b92      	subs	r2, r2, r6
 800a53e:	6122      	str	r2, [r4, #16]
 800a540:	f8cd a000 	str.w	sl, [sp]
 800a544:	464b      	mov	r3, r9
 800a546:	aa03      	add	r2, sp, #12
 800a548:	4621      	mov	r1, r4
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7ff fee6 	bl	800a31c <_printf_common>
 800a550:	3001      	adds	r0, #1
 800a552:	d14a      	bne.n	800a5ea <_printf_i+0x1f2>
 800a554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a558:	b004      	add	sp, #16
 800a55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	f043 0320 	orr.w	r3, r3, #32
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	4833      	ldr	r0, [pc, #204]	@ (800a634 <_printf_i+0x23c>)
 800a568:	2778      	movs	r7, #120	@ 0x78
 800a56a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	6831      	ldr	r1, [r6, #0]
 800a572:	061f      	lsls	r7, r3, #24
 800a574:	f851 5b04 	ldr.w	r5, [r1], #4
 800a578:	d402      	bmi.n	800a580 <_printf_i+0x188>
 800a57a:	065f      	lsls	r7, r3, #25
 800a57c:	bf48      	it	mi
 800a57e:	b2ad      	uxthmi	r5, r5
 800a580:	6031      	str	r1, [r6, #0]
 800a582:	07d9      	lsls	r1, r3, #31
 800a584:	bf44      	itt	mi
 800a586:	f043 0320 	orrmi.w	r3, r3, #32
 800a58a:	6023      	strmi	r3, [r4, #0]
 800a58c:	b11d      	cbz	r5, 800a596 <_printf_i+0x19e>
 800a58e:	2310      	movs	r3, #16
 800a590:	e7ac      	b.n	800a4ec <_printf_i+0xf4>
 800a592:	4827      	ldr	r0, [pc, #156]	@ (800a630 <_printf_i+0x238>)
 800a594:	e7e9      	b.n	800a56a <_printf_i+0x172>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	f023 0320 	bic.w	r3, r3, #32
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	e7f6      	b.n	800a58e <_printf_i+0x196>
 800a5a0:	4616      	mov	r6, r2
 800a5a2:	e7bd      	b.n	800a520 <_printf_i+0x128>
 800a5a4:	6833      	ldr	r3, [r6, #0]
 800a5a6:	6825      	ldr	r5, [r4, #0]
 800a5a8:	6961      	ldr	r1, [r4, #20]
 800a5aa:	1d18      	adds	r0, r3, #4
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	062e      	lsls	r6, r5, #24
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	d501      	bpl.n	800a5b8 <_printf_i+0x1c0>
 800a5b4:	6019      	str	r1, [r3, #0]
 800a5b6:	e002      	b.n	800a5be <_printf_i+0x1c6>
 800a5b8:	0668      	lsls	r0, r5, #25
 800a5ba:	d5fb      	bpl.n	800a5b4 <_printf_i+0x1bc>
 800a5bc:	8019      	strh	r1, [r3, #0]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	6123      	str	r3, [r4, #16]
 800a5c2:	4616      	mov	r6, r2
 800a5c4:	e7bc      	b.n	800a540 <_printf_i+0x148>
 800a5c6:	6833      	ldr	r3, [r6, #0]
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	6032      	str	r2, [r6, #0]
 800a5cc:	681e      	ldr	r6, [r3, #0]
 800a5ce:	6862      	ldr	r2, [r4, #4]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7f5 fdfc 	bl	80001d0 <memchr>
 800a5d8:	b108      	cbz	r0, 800a5de <_printf_i+0x1e6>
 800a5da:	1b80      	subs	r0, r0, r6
 800a5dc:	6060      	str	r0, [r4, #4]
 800a5de:	6863      	ldr	r3, [r4, #4]
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e8:	e7aa      	b.n	800a540 <_printf_i+0x148>
 800a5ea:	6923      	ldr	r3, [r4, #16]
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	47d0      	blx	sl
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d0ad      	beq.n	800a554 <_printf_i+0x15c>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	079b      	lsls	r3, r3, #30
 800a5fc:	d413      	bmi.n	800a626 <_printf_i+0x22e>
 800a5fe:	68e0      	ldr	r0, [r4, #12]
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	4298      	cmp	r0, r3
 800a604:	bfb8      	it	lt
 800a606:	4618      	movlt	r0, r3
 800a608:	e7a6      	b.n	800a558 <_printf_i+0x160>
 800a60a:	2301      	movs	r3, #1
 800a60c:	4632      	mov	r2, r6
 800a60e:	4649      	mov	r1, r9
 800a610:	4640      	mov	r0, r8
 800a612:	47d0      	blx	sl
 800a614:	3001      	adds	r0, #1
 800a616:	d09d      	beq.n	800a554 <_printf_i+0x15c>
 800a618:	3501      	adds	r5, #1
 800a61a:	68e3      	ldr	r3, [r4, #12]
 800a61c:	9903      	ldr	r1, [sp, #12]
 800a61e:	1a5b      	subs	r3, r3, r1
 800a620:	42ab      	cmp	r3, r5
 800a622:	dcf2      	bgt.n	800a60a <_printf_i+0x212>
 800a624:	e7eb      	b.n	800a5fe <_printf_i+0x206>
 800a626:	2500      	movs	r5, #0
 800a628:	f104 0619 	add.w	r6, r4, #25
 800a62c:	e7f5      	b.n	800a61a <_printf_i+0x222>
 800a62e:	bf00      	nop
 800a630:	0800e765 	.word	0x0800e765
 800a634:	0800e776 	.word	0x0800e776

0800a638 <_scanf_float>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b087      	sub	sp, #28
 800a63e:	4617      	mov	r7, r2
 800a640:	9303      	str	r3, [sp, #12]
 800a642:	688b      	ldr	r3, [r1, #8]
 800a644:	1e5a      	subs	r2, r3, #1
 800a646:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a64a:	bf81      	itttt	hi
 800a64c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a650:	eb03 0b05 	addhi.w	fp, r3, r5
 800a654:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a658:	608b      	strhi	r3, [r1, #8]
 800a65a:	680b      	ldr	r3, [r1, #0]
 800a65c:	460a      	mov	r2, r1
 800a65e:	f04f 0500 	mov.w	r5, #0
 800a662:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a666:	f842 3b1c 	str.w	r3, [r2], #28
 800a66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a66e:	4680      	mov	r8, r0
 800a670:	460c      	mov	r4, r1
 800a672:	bf98      	it	ls
 800a674:	f04f 0b00 	movls.w	fp, #0
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	4616      	mov	r6, r2
 800a67c:	46aa      	mov	sl, r5
 800a67e:	46a9      	mov	r9, r5
 800a680:	9502      	str	r5, [sp, #8]
 800a682:	68a2      	ldr	r2, [r4, #8]
 800a684:	b152      	cbz	r2, 800a69c <_scanf_float+0x64>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a68c:	d864      	bhi.n	800a758 <_scanf_float+0x120>
 800a68e:	2b40      	cmp	r3, #64	@ 0x40
 800a690:	d83c      	bhi.n	800a70c <_scanf_float+0xd4>
 800a692:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a696:	b2c8      	uxtb	r0, r1
 800a698:	280e      	cmp	r0, #14
 800a69a:	d93a      	bls.n	800a712 <_scanf_float+0xda>
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	d003      	beq.n	800a6aa <_scanf_float+0x72>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a6ae:	f1ba 0f01 	cmp.w	sl, #1
 800a6b2:	f200 8117 	bhi.w	800a8e4 <_scanf_float+0x2ac>
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	429e      	cmp	r6, r3
 800a6ba:	f200 8108 	bhi.w	800a8ce <_scanf_float+0x296>
 800a6be:	2001      	movs	r0, #1
 800a6c0:	b007      	add	sp, #28
 800a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a6ca:	2a0d      	cmp	r2, #13
 800a6cc:	d8e6      	bhi.n	800a69c <_scanf_float+0x64>
 800a6ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a6d4 <_scanf_float+0x9c>)
 800a6d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6d4:	0800a81b 	.word	0x0800a81b
 800a6d8:	0800a69d 	.word	0x0800a69d
 800a6dc:	0800a69d 	.word	0x0800a69d
 800a6e0:	0800a69d 	.word	0x0800a69d
 800a6e4:	0800a87b 	.word	0x0800a87b
 800a6e8:	0800a853 	.word	0x0800a853
 800a6ec:	0800a69d 	.word	0x0800a69d
 800a6f0:	0800a69d 	.word	0x0800a69d
 800a6f4:	0800a829 	.word	0x0800a829
 800a6f8:	0800a69d 	.word	0x0800a69d
 800a6fc:	0800a69d 	.word	0x0800a69d
 800a700:	0800a69d 	.word	0x0800a69d
 800a704:	0800a69d 	.word	0x0800a69d
 800a708:	0800a7e1 	.word	0x0800a7e1
 800a70c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a710:	e7db      	b.n	800a6ca <_scanf_float+0x92>
 800a712:	290e      	cmp	r1, #14
 800a714:	d8c2      	bhi.n	800a69c <_scanf_float+0x64>
 800a716:	a001      	add	r0, pc, #4	@ (adr r0, 800a71c <_scanf_float+0xe4>)
 800a718:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a71c:	0800a7d1 	.word	0x0800a7d1
 800a720:	0800a69d 	.word	0x0800a69d
 800a724:	0800a7d1 	.word	0x0800a7d1
 800a728:	0800a867 	.word	0x0800a867
 800a72c:	0800a69d 	.word	0x0800a69d
 800a730:	0800a779 	.word	0x0800a779
 800a734:	0800a7b7 	.word	0x0800a7b7
 800a738:	0800a7b7 	.word	0x0800a7b7
 800a73c:	0800a7b7 	.word	0x0800a7b7
 800a740:	0800a7b7 	.word	0x0800a7b7
 800a744:	0800a7b7 	.word	0x0800a7b7
 800a748:	0800a7b7 	.word	0x0800a7b7
 800a74c:	0800a7b7 	.word	0x0800a7b7
 800a750:	0800a7b7 	.word	0x0800a7b7
 800a754:	0800a7b7 	.word	0x0800a7b7
 800a758:	2b6e      	cmp	r3, #110	@ 0x6e
 800a75a:	d809      	bhi.n	800a770 <_scanf_float+0x138>
 800a75c:	2b60      	cmp	r3, #96	@ 0x60
 800a75e:	d8b2      	bhi.n	800a6c6 <_scanf_float+0x8e>
 800a760:	2b54      	cmp	r3, #84	@ 0x54
 800a762:	d07b      	beq.n	800a85c <_scanf_float+0x224>
 800a764:	2b59      	cmp	r3, #89	@ 0x59
 800a766:	d199      	bne.n	800a69c <_scanf_float+0x64>
 800a768:	2d07      	cmp	r5, #7
 800a76a:	d197      	bne.n	800a69c <_scanf_float+0x64>
 800a76c:	2508      	movs	r5, #8
 800a76e:	e02c      	b.n	800a7ca <_scanf_float+0x192>
 800a770:	2b74      	cmp	r3, #116	@ 0x74
 800a772:	d073      	beq.n	800a85c <_scanf_float+0x224>
 800a774:	2b79      	cmp	r3, #121	@ 0x79
 800a776:	e7f6      	b.n	800a766 <_scanf_float+0x12e>
 800a778:	6821      	ldr	r1, [r4, #0]
 800a77a:	05c8      	lsls	r0, r1, #23
 800a77c:	d51b      	bpl.n	800a7b6 <_scanf_float+0x17e>
 800a77e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a782:	6021      	str	r1, [r4, #0]
 800a784:	f109 0901 	add.w	r9, r9, #1
 800a788:	f1bb 0f00 	cmp.w	fp, #0
 800a78c:	d003      	beq.n	800a796 <_scanf_float+0x15e>
 800a78e:	3201      	adds	r2, #1
 800a790:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a794:	60a2      	str	r2, [r4, #8]
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	3b01      	subs	r3, #1
 800a79a:	60a3      	str	r3, [r4, #8]
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	607b      	str	r3, [r7, #4]
 800a7aa:	f340 8087 	ble.w	800a8bc <_scanf_float+0x284>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	e765      	b.n	800a682 <_scanf_float+0x4a>
 800a7b6:	eb1a 0105 	adds.w	r1, sl, r5
 800a7ba:	f47f af6f 	bne.w	800a69c <_scanf_float+0x64>
 800a7be:	6822      	ldr	r2, [r4, #0]
 800a7c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a7c4:	6022      	str	r2, [r4, #0]
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	468a      	mov	sl, r1
 800a7ca:	f806 3b01 	strb.w	r3, [r6], #1
 800a7ce:	e7e2      	b.n	800a796 <_scanf_float+0x15e>
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	0610      	lsls	r0, r2, #24
 800a7d4:	f57f af62 	bpl.w	800a69c <_scanf_float+0x64>
 800a7d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	e7f4      	b.n	800a7ca <_scanf_float+0x192>
 800a7e0:	f1ba 0f00 	cmp.w	sl, #0
 800a7e4:	d10e      	bne.n	800a804 <_scanf_float+0x1cc>
 800a7e6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ea:	d10e      	bne.n	800a80a <_scanf_float+0x1d2>
 800a7ec:	6822      	ldr	r2, [r4, #0]
 800a7ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a7f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a7f6:	d108      	bne.n	800a80a <_scanf_float+0x1d2>
 800a7f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	f04f 0a01 	mov.w	sl, #1
 800a802:	e7e2      	b.n	800a7ca <_scanf_float+0x192>
 800a804:	f1ba 0f02 	cmp.w	sl, #2
 800a808:	d055      	beq.n	800a8b6 <_scanf_float+0x27e>
 800a80a:	2d01      	cmp	r5, #1
 800a80c:	d002      	beq.n	800a814 <_scanf_float+0x1dc>
 800a80e:	2d04      	cmp	r5, #4
 800a810:	f47f af44 	bne.w	800a69c <_scanf_float+0x64>
 800a814:	3501      	adds	r5, #1
 800a816:	b2ed      	uxtb	r5, r5
 800a818:	e7d7      	b.n	800a7ca <_scanf_float+0x192>
 800a81a:	f1ba 0f01 	cmp.w	sl, #1
 800a81e:	f47f af3d 	bne.w	800a69c <_scanf_float+0x64>
 800a822:	f04f 0a02 	mov.w	sl, #2
 800a826:	e7d0      	b.n	800a7ca <_scanf_float+0x192>
 800a828:	b97d      	cbnz	r5, 800a84a <_scanf_float+0x212>
 800a82a:	f1b9 0f00 	cmp.w	r9, #0
 800a82e:	f47f af38 	bne.w	800a6a2 <_scanf_float+0x6a>
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a838:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a83c:	f040 8108 	bne.w	800aa50 <_scanf_float+0x418>
 800a840:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a844:	6022      	str	r2, [r4, #0]
 800a846:	2501      	movs	r5, #1
 800a848:	e7bf      	b.n	800a7ca <_scanf_float+0x192>
 800a84a:	2d03      	cmp	r5, #3
 800a84c:	d0e2      	beq.n	800a814 <_scanf_float+0x1dc>
 800a84e:	2d05      	cmp	r5, #5
 800a850:	e7de      	b.n	800a810 <_scanf_float+0x1d8>
 800a852:	2d02      	cmp	r5, #2
 800a854:	f47f af22 	bne.w	800a69c <_scanf_float+0x64>
 800a858:	2503      	movs	r5, #3
 800a85a:	e7b6      	b.n	800a7ca <_scanf_float+0x192>
 800a85c:	2d06      	cmp	r5, #6
 800a85e:	f47f af1d 	bne.w	800a69c <_scanf_float+0x64>
 800a862:	2507      	movs	r5, #7
 800a864:	e7b1      	b.n	800a7ca <_scanf_float+0x192>
 800a866:	6822      	ldr	r2, [r4, #0]
 800a868:	0591      	lsls	r1, r2, #22
 800a86a:	f57f af17 	bpl.w	800a69c <_scanf_float+0x64>
 800a86e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	f8cd 9008 	str.w	r9, [sp, #8]
 800a878:	e7a7      	b.n	800a7ca <_scanf_float+0x192>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a880:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a884:	d006      	beq.n	800a894 <_scanf_float+0x25c>
 800a886:	0550      	lsls	r0, r2, #21
 800a888:	f57f af08 	bpl.w	800a69c <_scanf_float+0x64>
 800a88c:	f1b9 0f00 	cmp.w	r9, #0
 800a890:	f000 80de 	beq.w	800aa50 <_scanf_float+0x418>
 800a894:	0591      	lsls	r1, r2, #22
 800a896:	bf58      	it	pl
 800a898:	9902      	ldrpl	r1, [sp, #8]
 800a89a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a89e:	bf58      	it	pl
 800a8a0:	eba9 0101 	subpl.w	r1, r9, r1
 800a8a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a8a8:	bf58      	it	pl
 800a8aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8ae:	6022      	str	r2, [r4, #0]
 800a8b0:	f04f 0900 	mov.w	r9, #0
 800a8b4:	e789      	b.n	800a7ca <_scanf_float+0x192>
 800a8b6:	f04f 0a03 	mov.w	sl, #3
 800a8ba:	e786      	b.n	800a7ca <_scanf_float+0x192>
 800a8bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4798      	blx	r3
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f43f aedb 	beq.w	800a682 <_scanf_float+0x4a>
 800a8cc:	e6e6      	b.n	800a69c <_scanf_float+0x64>
 800a8ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8d6:	463a      	mov	r2, r7
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4798      	blx	r3
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	6123      	str	r3, [r4, #16]
 800a8e2:	e6e8      	b.n	800a6b6 <_scanf_float+0x7e>
 800a8e4:	1e6b      	subs	r3, r5, #1
 800a8e6:	2b06      	cmp	r3, #6
 800a8e8:	d824      	bhi.n	800a934 <_scanf_float+0x2fc>
 800a8ea:	2d02      	cmp	r5, #2
 800a8ec:	d836      	bhi.n	800a95c <_scanf_float+0x324>
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	429e      	cmp	r6, r3
 800a8f2:	f67f aee4 	bls.w	800a6be <_scanf_float+0x86>
 800a8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8fe:	463a      	mov	r2, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4798      	blx	r3
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	3b01      	subs	r3, #1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	e7f0      	b.n	800a8ee <_scanf_float+0x2b6>
 800a90c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a910:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a914:	463a      	mov	r2, r7
 800a916:	4640      	mov	r0, r8
 800a918:	4798      	blx	r3
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	6123      	str	r3, [r4, #16]
 800a920:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a924:	fa5f fa8a 	uxtb.w	sl, sl
 800a928:	f1ba 0f02 	cmp.w	sl, #2
 800a92c:	d1ee      	bne.n	800a90c <_scanf_float+0x2d4>
 800a92e:	3d03      	subs	r5, #3
 800a930:	b2ed      	uxtb	r5, r5
 800a932:	1b76      	subs	r6, r6, r5
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	05da      	lsls	r2, r3, #23
 800a938:	d530      	bpl.n	800a99c <_scanf_float+0x364>
 800a93a:	055b      	lsls	r3, r3, #21
 800a93c:	d511      	bpl.n	800a962 <_scanf_float+0x32a>
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	429e      	cmp	r6, r3
 800a942:	f67f aebc 	bls.w	800a6be <_scanf_float+0x86>
 800a946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a94a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a94e:	463a      	mov	r2, r7
 800a950:	4640      	mov	r0, r8
 800a952:	4798      	blx	r3
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	3b01      	subs	r3, #1
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	e7f0      	b.n	800a93e <_scanf_float+0x306>
 800a95c:	46aa      	mov	sl, r5
 800a95e:	46b3      	mov	fp, r6
 800a960:	e7de      	b.n	800a920 <_scanf_float+0x2e8>
 800a962:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	2965      	cmp	r1, #101	@ 0x65
 800a96a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a96e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	d00c      	beq.n	800a990 <_scanf_float+0x358>
 800a976:	2945      	cmp	r1, #69	@ 0x45
 800a978:	d00a      	beq.n	800a990 <_scanf_float+0x358>
 800a97a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a97e:	463a      	mov	r2, r7
 800a980:	4640      	mov	r0, r8
 800a982:	4798      	blx	r3
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	1eb5      	subs	r5, r6, #2
 800a98e:	6123      	str	r3, [r4, #16]
 800a990:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a994:	463a      	mov	r2, r7
 800a996:	4640      	mov	r0, r8
 800a998:	4798      	blx	r3
 800a99a:	462e      	mov	r6, r5
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	f012 0210 	ands.w	r2, r2, #16
 800a9a2:	d001      	beq.n	800a9a8 <_scanf_float+0x370>
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e68b      	b.n	800a6c0 <_scanf_float+0x88>
 800a9a8:	7032      	strb	r2, [r6, #0]
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a9b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9b4:	d11c      	bne.n	800a9f0 <_scanf_float+0x3b8>
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	454b      	cmp	r3, r9
 800a9ba:	eba3 0209 	sub.w	r2, r3, r9
 800a9be:	d123      	bne.n	800aa08 <_scanf_float+0x3d0>
 800a9c0:	9901      	ldr	r1, [sp, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	f002 fd3f 	bl	800d448 <_strtod_r>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	6821      	ldr	r1, [r4, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f011 0f02 	tst.w	r1, #2
 800a9d4:	ec57 6b10 	vmov	r6, r7, d0
 800a9d8:	f103 0204 	add.w	r2, r3, #4
 800a9dc:	d01f      	beq.n	800aa1e <_scanf_float+0x3e6>
 800a9de:	9903      	ldr	r1, [sp, #12]
 800a9e0:	600a      	str	r2, [r1, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	e9c3 6700 	strd	r6, r7, [r3]
 800a9e8:	68e3      	ldr	r3, [r4, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60e3      	str	r3, [r4, #12]
 800a9ee:	e7d9      	b.n	800a9a4 <_scanf_float+0x36c>
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0e4      	beq.n	800a9c0 <_scanf_float+0x388>
 800a9f6:	9905      	ldr	r1, [sp, #20]
 800a9f8:	230a      	movs	r3, #10
 800a9fa:	3101      	adds	r1, #1
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	f002 fda3 	bl	800d548 <_strtol_r>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	9e05      	ldr	r6, [sp, #20]
 800aa06:	1ac2      	subs	r2, r0, r3
 800aa08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa0c:	429e      	cmp	r6, r3
 800aa0e:	bf28      	it	cs
 800aa10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa14:	4910      	ldr	r1, [pc, #64]	@ (800aa58 <_scanf_float+0x420>)
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f988 	bl	800ad2c <siprintf>
 800aa1c:	e7d0      	b.n	800a9c0 <_scanf_float+0x388>
 800aa1e:	f011 0f04 	tst.w	r1, #4
 800aa22:	9903      	ldr	r1, [sp, #12]
 800aa24:	600a      	str	r2, [r1, #0]
 800aa26:	d1dc      	bne.n	800a9e2 <_scanf_float+0x3aa>
 800aa28:	681d      	ldr	r5, [r3, #0]
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	463b      	mov	r3, r7
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f6 f87b 	bl	8000b2c <__aeabi_dcmpun>
 800aa36:	b128      	cbz	r0, 800aa44 <_scanf_float+0x40c>
 800aa38:	4808      	ldr	r0, [pc, #32]	@ (800aa5c <_scanf_float+0x424>)
 800aa3a:	f000 fafd 	bl	800b038 <nanf>
 800aa3e:	ed85 0a00 	vstr	s0, [r5]
 800aa42:	e7d1      	b.n	800a9e8 <_scanf_float+0x3b0>
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f6 f8ce 	bl	8000be8 <__aeabi_d2f>
 800aa4c:	6028      	str	r0, [r5, #0]
 800aa4e:	e7cb      	b.n	800a9e8 <_scanf_float+0x3b0>
 800aa50:	f04f 0900 	mov.w	r9, #0
 800aa54:	e629      	b.n	800a6aa <_scanf_float+0x72>
 800aa56:	bf00      	nop
 800aa58:	0800e787 	.word	0x0800e787
 800aa5c:	0800eb1d 	.word	0x0800eb1d

0800aa60 <std>:
 800aa60:	2300      	movs	r3, #0
 800aa62:	b510      	push	{r4, lr}
 800aa64:	4604      	mov	r4, r0
 800aa66:	e9c0 3300 	strd	r3, r3, [r0]
 800aa6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa6e:	6083      	str	r3, [r0, #8]
 800aa70:	8181      	strh	r1, [r0, #12]
 800aa72:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa74:	81c2      	strh	r2, [r0, #14]
 800aa76:	6183      	str	r3, [r0, #24]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	305c      	adds	r0, #92	@ 0x5c
 800aa7e:	f000 fa4d 	bl	800af1c <memset>
 800aa82:	4b0d      	ldr	r3, [pc, #52]	@ (800aab8 <std+0x58>)
 800aa84:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa86:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <std+0x5c>)
 800aa88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aac0 <std+0x60>)
 800aa8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa8e:	4b0d      	ldr	r3, [pc, #52]	@ (800aac4 <std+0x64>)
 800aa90:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa92:	4b0d      	ldr	r3, [pc, #52]	@ (800aac8 <std+0x68>)
 800aa94:	6224      	str	r4, [r4, #32]
 800aa96:	429c      	cmp	r4, r3
 800aa98:	d006      	beq.n	800aaa8 <std+0x48>
 800aa9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa9e:	4294      	cmp	r4, r2
 800aaa0:	d002      	beq.n	800aaa8 <std+0x48>
 800aaa2:	33d0      	adds	r3, #208	@ 0xd0
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	d105      	bne.n	800aab4 <std+0x54>
 800aaa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab0:	f000 bab0 	b.w	800b014 <__retarget_lock_init_recursive>
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	bf00      	nop
 800aab8:	0800ad6d 	.word	0x0800ad6d
 800aabc:	0800ad8f 	.word	0x0800ad8f
 800aac0:	0800adc7 	.word	0x0800adc7
 800aac4:	0800adeb 	.word	0x0800adeb
 800aac8:	20001fa8 	.word	0x20001fa8

0800aacc <stdio_exit_handler>:
 800aacc:	4a02      	ldr	r2, [pc, #8]	@ (800aad8 <stdio_exit_handler+0xc>)
 800aace:	4903      	ldr	r1, [pc, #12]	@ (800aadc <stdio_exit_handler+0x10>)
 800aad0:	4803      	ldr	r0, [pc, #12]	@ (800aae0 <stdio_exit_handler+0x14>)
 800aad2:	f000 b869 	b.w	800aba8 <_fwalk_sglue>
 800aad6:	bf00      	nop
 800aad8:	20000010 	.word	0x20000010
 800aadc:	0800db89 	.word	0x0800db89
 800aae0:	20000020 	.word	0x20000020

0800aae4 <cleanup_stdio>:
 800aae4:	6841      	ldr	r1, [r0, #4]
 800aae6:	4b0c      	ldr	r3, [pc, #48]	@ (800ab18 <cleanup_stdio+0x34>)
 800aae8:	4299      	cmp	r1, r3
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	d001      	beq.n	800aaf4 <cleanup_stdio+0x10>
 800aaf0:	f003 f84a 	bl	800db88 <_fflush_r>
 800aaf4:	68a1      	ldr	r1, [r4, #8]
 800aaf6:	4b09      	ldr	r3, [pc, #36]	@ (800ab1c <cleanup_stdio+0x38>)
 800aaf8:	4299      	cmp	r1, r3
 800aafa:	d002      	beq.n	800ab02 <cleanup_stdio+0x1e>
 800aafc:	4620      	mov	r0, r4
 800aafe:	f003 f843 	bl	800db88 <_fflush_r>
 800ab02:	68e1      	ldr	r1, [r4, #12]
 800ab04:	4b06      	ldr	r3, [pc, #24]	@ (800ab20 <cleanup_stdio+0x3c>)
 800ab06:	4299      	cmp	r1, r3
 800ab08:	d004      	beq.n	800ab14 <cleanup_stdio+0x30>
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab10:	f003 b83a 	b.w	800db88 <_fflush_r>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	bf00      	nop
 800ab18:	20001fa8 	.word	0x20001fa8
 800ab1c:	20002010 	.word	0x20002010
 800ab20:	20002078 	.word	0x20002078

0800ab24 <global_stdio_init.part.0>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	4b0b      	ldr	r3, [pc, #44]	@ (800ab54 <global_stdio_init.part.0+0x30>)
 800ab28:	4c0b      	ldr	r4, [pc, #44]	@ (800ab58 <global_stdio_init.part.0+0x34>)
 800ab2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ab5c <global_stdio_init.part.0+0x38>)
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	2200      	movs	r2, #0
 800ab32:	2104      	movs	r1, #4
 800ab34:	f7ff ff94 	bl	800aa60 <std>
 800ab38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	2109      	movs	r1, #9
 800ab40:	f7ff ff8e 	bl	800aa60 <std>
 800ab44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab48:	2202      	movs	r2, #2
 800ab4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4e:	2112      	movs	r1, #18
 800ab50:	f7ff bf86 	b.w	800aa60 <std>
 800ab54:	200020e0 	.word	0x200020e0
 800ab58:	20001fa8 	.word	0x20001fa8
 800ab5c:	0800aacd 	.word	0x0800aacd

0800ab60 <__sfp_lock_acquire>:
 800ab60:	4801      	ldr	r0, [pc, #4]	@ (800ab68 <__sfp_lock_acquire+0x8>)
 800ab62:	f000 ba58 	b.w	800b016 <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	200020e9 	.word	0x200020e9

0800ab6c <__sfp_lock_release>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	@ (800ab74 <__sfp_lock_release+0x8>)
 800ab6e:	f000 ba53 	b.w	800b018 <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	200020e9 	.word	0x200020e9

0800ab78 <__sinit>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	f7ff fff0 	bl	800ab60 <__sfp_lock_acquire>
 800ab80:	6a23      	ldr	r3, [r4, #32]
 800ab82:	b11b      	cbz	r3, 800ab8c <__sinit+0x14>
 800ab84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab88:	f7ff bff0 	b.w	800ab6c <__sfp_lock_release>
 800ab8c:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <__sinit+0x28>)
 800ab8e:	6223      	str	r3, [r4, #32]
 800ab90:	4b04      	ldr	r3, [pc, #16]	@ (800aba4 <__sinit+0x2c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f5      	bne.n	800ab84 <__sinit+0xc>
 800ab98:	f7ff ffc4 	bl	800ab24 <global_stdio_init.part.0>
 800ab9c:	e7f2      	b.n	800ab84 <__sinit+0xc>
 800ab9e:	bf00      	nop
 800aba0:	0800aae5 	.word	0x0800aae5
 800aba4:	200020e0 	.word	0x200020e0

0800aba8 <_fwalk_sglue>:
 800aba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abac:	4607      	mov	r7, r0
 800abae:	4688      	mov	r8, r1
 800abb0:	4614      	mov	r4, r2
 800abb2:	2600      	movs	r6, #0
 800abb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abb8:	f1b9 0901 	subs.w	r9, r9, #1
 800abbc:	d505      	bpl.n	800abca <_fwalk_sglue+0x22>
 800abbe:	6824      	ldr	r4, [r4, #0]
 800abc0:	2c00      	cmp	r4, #0
 800abc2:	d1f7      	bne.n	800abb4 <_fwalk_sglue+0xc>
 800abc4:	4630      	mov	r0, r6
 800abc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d907      	bls.n	800abe0 <_fwalk_sglue+0x38>
 800abd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abd4:	3301      	adds	r3, #1
 800abd6:	d003      	beq.n	800abe0 <_fwalk_sglue+0x38>
 800abd8:	4629      	mov	r1, r5
 800abda:	4638      	mov	r0, r7
 800abdc:	47c0      	blx	r8
 800abde:	4306      	orrs	r6, r0
 800abe0:	3568      	adds	r5, #104	@ 0x68
 800abe2:	e7e9      	b.n	800abb8 <_fwalk_sglue+0x10>

0800abe4 <iprintf>:
 800abe4:	b40f      	push	{r0, r1, r2, r3}
 800abe6:	b507      	push	{r0, r1, r2, lr}
 800abe8:	4906      	ldr	r1, [pc, #24]	@ (800ac04 <iprintf+0x20>)
 800abea:	ab04      	add	r3, sp, #16
 800abec:	6808      	ldr	r0, [r1, #0]
 800abee:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf2:	6881      	ldr	r1, [r0, #8]
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	f002 fe2b 	bl	800d850 <_vfiprintf_r>
 800abfa:	b003      	add	sp, #12
 800abfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac00:	b004      	add	sp, #16
 800ac02:	4770      	bx	lr
 800ac04:	2000001c 	.word	0x2000001c

0800ac08 <_puts_r>:
 800ac08:	6a03      	ldr	r3, [r0, #32]
 800ac0a:	b570      	push	{r4, r5, r6, lr}
 800ac0c:	6884      	ldr	r4, [r0, #8]
 800ac0e:	4605      	mov	r5, r0
 800ac10:	460e      	mov	r6, r1
 800ac12:	b90b      	cbnz	r3, 800ac18 <_puts_r+0x10>
 800ac14:	f7ff ffb0 	bl	800ab78 <__sinit>
 800ac18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac1a:	07db      	lsls	r3, r3, #31
 800ac1c:	d405      	bmi.n	800ac2a <_puts_r+0x22>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	0598      	lsls	r0, r3, #22
 800ac22:	d402      	bmi.n	800ac2a <_puts_r+0x22>
 800ac24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac26:	f000 f9f6 	bl	800b016 <__retarget_lock_acquire_recursive>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	0719      	lsls	r1, r3, #28
 800ac2e:	d502      	bpl.n	800ac36 <_puts_r+0x2e>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d135      	bne.n	800aca2 <_puts_r+0x9a>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f000 f919 	bl	800ae70 <__swsetup_r>
 800ac3e:	b380      	cbz	r0, 800aca2 <_puts_r+0x9a>
 800ac40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ac44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac46:	07da      	lsls	r2, r3, #31
 800ac48:	d405      	bmi.n	800ac56 <_puts_r+0x4e>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	059b      	lsls	r3, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_puts_r+0x4e>
 800ac50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac52:	f000 f9e1 	bl	800b018 <__retarget_lock_release_recursive>
 800ac56:	4628      	mov	r0, r5
 800ac58:	bd70      	pop	{r4, r5, r6, pc}
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	da04      	bge.n	800ac68 <_puts_r+0x60>
 800ac5e:	69a2      	ldr	r2, [r4, #24]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	dc17      	bgt.n	800ac94 <_puts_r+0x8c>
 800ac64:	290a      	cmp	r1, #10
 800ac66:	d015      	beq.n	800ac94 <_puts_r+0x8c>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	6022      	str	r2, [r4, #0]
 800ac6e:	7019      	strb	r1, [r3, #0]
 800ac70:	68a3      	ldr	r3, [r4, #8]
 800ac72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac76:	3b01      	subs	r3, #1
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d1ed      	bne.n	800ac5a <_puts_r+0x52>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da11      	bge.n	800aca6 <_puts_r+0x9e>
 800ac82:	4622      	mov	r2, r4
 800ac84:	210a      	movs	r1, #10
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f8b3 	bl	800adf2 <__swbuf_r>
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d0d7      	beq.n	800ac40 <_puts_r+0x38>
 800ac90:	250a      	movs	r5, #10
 800ac92:	e7d7      	b.n	800ac44 <_puts_r+0x3c>
 800ac94:	4622      	mov	r2, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 f8ab 	bl	800adf2 <__swbuf_r>
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d1e7      	bne.n	800ac70 <_puts_r+0x68>
 800aca0:	e7ce      	b.n	800ac40 <_puts_r+0x38>
 800aca2:	3e01      	subs	r6, #1
 800aca4:	e7e4      	b.n	800ac70 <_puts_r+0x68>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	6022      	str	r2, [r4, #0]
 800acac:	220a      	movs	r2, #10
 800acae:	701a      	strb	r2, [r3, #0]
 800acb0:	e7ee      	b.n	800ac90 <_puts_r+0x88>
	...

0800acb4 <puts>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	@ (800acc0 <puts+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f7ff bfa5 	b.w	800ac08 <_puts_r>
 800acbe:	bf00      	nop
 800acc0:	2000001c 	.word	0x2000001c

0800acc4 <sniprintf>:
 800acc4:	b40c      	push	{r2, r3}
 800acc6:	b530      	push	{r4, r5, lr}
 800acc8:	4b17      	ldr	r3, [pc, #92]	@ (800ad28 <sniprintf+0x64>)
 800acca:	1e0c      	subs	r4, r1, #0
 800accc:	681d      	ldr	r5, [r3, #0]
 800acce:	b09d      	sub	sp, #116	@ 0x74
 800acd0:	da08      	bge.n	800ace4 <sniprintf+0x20>
 800acd2:	238b      	movs	r3, #139	@ 0x8b
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acda:	b01d      	add	sp, #116	@ 0x74
 800acdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace0:	b002      	add	sp, #8
 800ace2:	4770      	bx	lr
 800ace4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ace8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acec:	bf14      	ite	ne
 800acee:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800acf2:	4623      	moveq	r3, r4
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	9307      	str	r3, [sp, #28]
 800acf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acfc:	9002      	str	r0, [sp, #8]
 800acfe:	9006      	str	r0, [sp, #24]
 800ad00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad06:	ab21      	add	r3, sp, #132	@ 0x84
 800ad08:	a902      	add	r1, sp, #8
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	f002 fc79 	bl	800d604 <_svfiprintf_r>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	bfbc      	itt	lt
 800ad16:	238b      	movlt	r3, #139	@ 0x8b
 800ad18:	602b      	strlt	r3, [r5, #0]
 800ad1a:	2c00      	cmp	r4, #0
 800ad1c:	d0dd      	beq.n	800acda <sniprintf+0x16>
 800ad1e:	9b02      	ldr	r3, [sp, #8]
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	e7d9      	b.n	800acda <sniprintf+0x16>
 800ad26:	bf00      	nop
 800ad28:	2000001c 	.word	0x2000001c

0800ad2c <siprintf>:
 800ad2c:	b40e      	push	{r1, r2, r3}
 800ad2e:	b500      	push	{lr}
 800ad30:	b09c      	sub	sp, #112	@ 0x70
 800ad32:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad34:	9002      	str	r0, [sp, #8]
 800ad36:	9006      	str	r0, [sp, #24]
 800ad38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad3c:	4809      	ldr	r0, [pc, #36]	@ (800ad64 <siprintf+0x38>)
 800ad3e:	9107      	str	r1, [sp, #28]
 800ad40:	9104      	str	r1, [sp, #16]
 800ad42:	4909      	ldr	r1, [pc, #36]	@ (800ad68 <siprintf+0x3c>)
 800ad44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad48:	9105      	str	r1, [sp, #20]
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	a902      	add	r1, sp, #8
 800ad50:	f002 fc58 	bl	800d604 <_svfiprintf_r>
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	b01c      	add	sp, #112	@ 0x70
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	2000001c 	.word	0x2000001c
 800ad68:	ffff0208 	.word	0xffff0208

0800ad6c <__sread>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	f000 f900 	bl	800af78 <_read_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	bfab      	itete	ge
 800ad7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad80:	181b      	addge	r3, r3, r0
 800ad82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad86:	bfac      	ite	ge
 800ad88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad8a:	81a3      	strhlt	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__swrite>:
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	461f      	mov	r7, r3
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	05db      	lsls	r3, r3, #23
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	d505      	bpl.n	800adac <__swrite+0x1e>
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	2302      	movs	r3, #2
 800ada6:	2200      	movs	r2, #0
 800ada8:	f000 f8d4 	bl	800af54 <_lseek_r>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	4632      	mov	r2, r6
 800adba:	463b      	mov	r3, r7
 800adbc:	4628      	mov	r0, r5
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	f000 b8eb 	b.w	800af9c <_write_r>

0800adc6 <__sseek>:
 800adc6:	b510      	push	{r4, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 f8c1 	bl	800af54 <_lseek_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	bf15      	itete	ne
 800add8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ade2:	81a3      	strheq	r3, [r4, #12]
 800ade4:	bf18      	it	ne
 800ade6:	81a3      	strhne	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__sclose>:
 800adea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adee:	f000 b8a1 	b.w	800af34 <_close_r>

0800adf2 <__swbuf_r>:
 800adf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf4:	460e      	mov	r6, r1
 800adf6:	4614      	mov	r4, r2
 800adf8:	4605      	mov	r5, r0
 800adfa:	b118      	cbz	r0, 800ae04 <__swbuf_r+0x12>
 800adfc:	6a03      	ldr	r3, [r0, #32]
 800adfe:	b90b      	cbnz	r3, 800ae04 <__swbuf_r+0x12>
 800ae00:	f7ff feba 	bl	800ab78 <__sinit>
 800ae04:	69a3      	ldr	r3, [r4, #24]
 800ae06:	60a3      	str	r3, [r4, #8]
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	071a      	lsls	r2, r3, #28
 800ae0c:	d501      	bpl.n	800ae12 <__swbuf_r+0x20>
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	b943      	cbnz	r3, 800ae24 <__swbuf_r+0x32>
 800ae12:	4621      	mov	r1, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 f82b 	bl	800ae70 <__swsetup_r>
 800ae1a:	b118      	cbz	r0, 800ae24 <__swbuf_r+0x32>
 800ae1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ae20:	4638      	mov	r0, r7
 800ae22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	1a98      	subs	r0, r3, r2
 800ae2a:	6963      	ldr	r3, [r4, #20]
 800ae2c:	b2f6      	uxtb	r6, r6
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	4637      	mov	r7, r6
 800ae32:	dc05      	bgt.n	800ae40 <__swbuf_r+0x4e>
 800ae34:	4621      	mov	r1, r4
 800ae36:	4628      	mov	r0, r5
 800ae38:	f002 fea6 	bl	800db88 <_fflush_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d1ed      	bne.n	800ae1c <__swbuf_r+0x2a>
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	60a3      	str	r3, [r4, #8]
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	6022      	str	r2, [r4, #0]
 800ae4c:	701e      	strb	r6, [r3, #0]
 800ae4e:	6962      	ldr	r2, [r4, #20]
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d004      	beq.n	800ae60 <__swbuf_r+0x6e>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	07db      	lsls	r3, r3, #31
 800ae5a:	d5e1      	bpl.n	800ae20 <__swbuf_r+0x2e>
 800ae5c:	2e0a      	cmp	r6, #10
 800ae5e:	d1df      	bne.n	800ae20 <__swbuf_r+0x2e>
 800ae60:	4621      	mov	r1, r4
 800ae62:	4628      	mov	r0, r5
 800ae64:	f002 fe90 	bl	800db88 <_fflush_r>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d0d9      	beq.n	800ae20 <__swbuf_r+0x2e>
 800ae6c:	e7d6      	b.n	800ae1c <__swbuf_r+0x2a>
	...

0800ae70 <__swsetup_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4b29      	ldr	r3, [pc, #164]	@ (800af18 <__swsetup_r+0xa8>)
 800ae74:	4605      	mov	r5, r0
 800ae76:	6818      	ldr	r0, [r3, #0]
 800ae78:	460c      	mov	r4, r1
 800ae7a:	b118      	cbz	r0, 800ae84 <__swsetup_r+0x14>
 800ae7c:	6a03      	ldr	r3, [r0, #32]
 800ae7e:	b90b      	cbnz	r3, 800ae84 <__swsetup_r+0x14>
 800ae80:	f7ff fe7a 	bl	800ab78 <__sinit>
 800ae84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae88:	0719      	lsls	r1, r3, #28
 800ae8a:	d422      	bmi.n	800aed2 <__swsetup_r+0x62>
 800ae8c:	06da      	lsls	r2, r3, #27
 800ae8e:	d407      	bmi.n	800aea0 <__swsetup_r+0x30>
 800ae90:	2209      	movs	r2, #9
 800ae92:	602a      	str	r2, [r5, #0]
 800ae94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae9e:	e033      	b.n	800af08 <__swsetup_r+0x98>
 800aea0:	0758      	lsls	r0, r3, #29
 800aea2:	d512      	bpl.n	800aeca <__swsetup_r+0x5a>
 800aea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aea6:	b141      	cbz	r1, 800aeba <__swsetup_r+0x4a>
 800aea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeac:	4299      	cmp	r1, r3
 800aeae:	d002      	beq.n	800aeb6 <__swsetup_r+0x46>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 ff15 	bl	800bce0 <_free_r>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	2300      	movs	r3, #0
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f043 0308 	orr.w	r3, r3, #8
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	b94b      	cbnz	r3, 800aeea <__swsetup_r+0x7a>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aedc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aee0:	d003      	beq.n	800aeea <__swsetup_r+0x7a>
 800aee2:	4621      	mov	r1, r4
 800aee4:	4628      	mov	r0, r5
 800aee6:	f002 fe9d 	bl	800dc24 <__smakebuf_r>
 800aeea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeee:	f013 0201 	ands.w	r2, r3, #1
 800aef2:	d00a      	beq.n	800af0a <__swsetup_r+0x9a>
 800aef4:	2200      	movs	r2, #0
 800aef6:	60a2      	str	r2, [r4, #8]
 800aef8:	6962      	ldr	r2, [r4, #20]
 800aefa:	4252      	negs	r2, r2
 800aefc:	61a2      	str	r2, [r4, #24]
 800aefe:	6922      	ldr	r2, [r4, #16]
 800af00:	b942      	cbnz	r2, 800af14 <__swsetup_r+0xa4>
 800af02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af06:	d1c5      	bne.n	800ae94 <__swsetup_r+0x24>
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	0799      	lsls	r1, r3, #30
 800af0c:	bf58      	it	pl
 800af0e:	6962      	ldrpl	r2, [r4, #20]
 800af10:	60a2      	str	r2, [r4, #8]
 800af12:	e7f4      	b.n	800aefe <__swsetup_r+0x8e>
 800af14:	2000      	movs	r0, #0
 800af16:	e7f7      	b.n	800af08 <__swsetup_r+0x98>
 800af18:	2000001c 	.word	0x2000001c

0800af1c <memset>:
 800af1c:	4402      	add	r2, r0
 800af1e:	4603      	mov	r3, r0
 800af20:	4293      	cmp	r3, r2
 800af22:	d100      	bne.n	800af26 <memset+0xa>
 800af24:	4770      	bx	lr
 800af26:	f803 1b01 	strb.w	r1, [r3], #1
 800af2a:	e7f9      	b.n	800af20 <memset+0x4>

0800af2c <_localeconv_r>:
 800af2c:	4800      	ldr	r0, [pc, #0]	@ (800af30 <_localeconv_r+0x4>)
 800af2e:	4770      	bx	lr
 800af30:	2000015c 	.word	0x2000015c

0800af34 <_close_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	@ (800af50 <_close_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f6 fe1e 	bl	8001b80 <_close>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_close_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_close_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	200020e4 	.word	0x200020e4

0800af54 <_lseek_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	@ (800af74 <_lseek_r+0x20>)
 800af58:	4604      	mov	r4, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	602a      	str	r2, [r5, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f7f6 fe33 	bl	8001bce <_lseek>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_lseek_r+0x1e>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_lseek_r+0x1e>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	200020e4 	.word	0x200020e4

0800af78 <_read_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	@ (800af98 <_read_r+0x20>)
 800af7c:	4604      	mov	r4, r0
 800af7e:	4608      	mov	r0, r1
 800af80:	4611      	mov	r1, r2
 800af82:	2200      	movs	r2, #0
 800af84:	602a      	str	r2, [r5, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f7f6 fdc1 	bl	8001b0e <_read>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_read_r+0x1e>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_read_r+0x1e>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	200020e4 	.word	0x200020e4

0800af9c <_write_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	@ (800afbc <_write_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f6 fdcc 	bl	8001b48 <_write>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_write_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_write_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200020e4 	.word	0x200020e4

0800afc0 <__errno>:
 800afc0:	4b01      	ldr	r3, [pc, #4]	@ (800afc8 <__errno+0x8>)
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	2000001c 	.word	0x2000001c

0800afcc <__libc_init_array>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	4d0d      	ldr	r5, [pc, #52]	@ (800b004 <__libc_init_array+0x38>)
 800afd0:	4c0d      	ldr	r4, [pc, #52]	@ (800b008 <__libc_init_array+0x3c>)
 800afd2:	1b64      	subs	r4, r4, r5
 800afd4:	10a4      	asrs	r4, r4, #2
 800afd6:	2600      	movs	r6, #0
 800afd8:	42a6      	cmp	r6, r4
 800afda:	d109      	bne.n	800aff0 <__libc_init_array+0x24>
 800afdc:	4d0b      	ldr	r5, [pc, #44]	@ (800b00c <__libc_init_array+0x40>)
 800afde:	4c0c      	ldr	r4, [pc, #48]	@ (800b010 <__libc_init_array+0x44>)
 800afe0:	f003 fae0 	bl	800e5a4 <_init>
 800afe4:	1b64      	subs	r4, r4, r5
 800afe6:	10a4      	asrs	r4, r4, #2
 800afe8:	2600      	movs	r6, #0
 800afea:	42a6      	cmp	r6, r4
 800afec:	d105      	bne.n	800affa <__libc_init_array+0x2e>
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff4:	4798      	blx	r3
 800aff6:	3601      	adds	r6, #1
 800aff8:	e7ee      	b.n	800afd8 <__libc_init_array+0xc>
 800affa:	f855 3b04 	ldr.w	r3, [r5], #4
 800affe:	4798      	blx	r3
 800b000:	3601      	adds	r6, #1
 800b002:	e7f2      	b.n	800afea <__libc_init_array+0x1e>
 800b004:	0800eb88 	.word	0x0800eb88
 800b008:	0800eb88 	.word	0x0800eb88
 800b00c:	0800eb88 	.word	0x0800eb88
 800b010:	0800eb8c 	.word	0x0800eb8c

0800b014 <__retarget_lock_init_recursive>:
 800b014:	4770      	bx	lr

0800b016 <__retarget_lock_acquire_recursive>:
 800b016:	4770      	bx	lr

0800b018 <__retarget_lock_release_recursive>:
 800b018:	4770      	bx	lr

0800b01a <memcpy>:
 800b01a:	440a      	add	r2, r1
 800b01c:	4291      	cmp	r1, r2
 800b01e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b022:	d100      	bne.n	800b026 <memcpy+0xc>
 800b024:	4770      	bx	lr
 800b026:	b510      	push	{r4, lr}
 800b028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b030:	4291      	cmp	r1, r2
 800b032:	d1f9      	bne.n	800b028 <memcpy+0xe>
 800b034:	bd10      	pop	{r4, pc}
	...

0800b038 <nanf>:
 800b038:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b040 <nanf+0x8>
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	7fc00000 	.word	0x7fc00000

0800b044 <quorem>:
 800b044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	6903      	ldr	r3, [r0, #16]
 800b04a:	690c      	ldr	r4, [r1, #16]
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	4607      	mov	r7, r0
 800b050:	db7e      	blt.n	800b150 <quorem+0x10c>
 800b052:	3c01      	subs	r4, #1
 800b054:	f101 0814 	add.w	r8, r1, #20
 800b058:	00a3      	lsls	r3, r4, #2
 800b05a:	f100 0514 	add.w	r5, r0, #20
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b06e:	3301      	adds	r3, #1
 800b070:	429a      	cmp	r2, r3
 800b072:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b076:	fbb2 f6f3 	udiv	r6, r2, r3
 800b07a:	d32e      	bcc.n	800b0da <quorem+0x96>
 800b07c:	f04f 0a00 	mov.w	sl, #0
 800b080:	46c4      	mov	ip, r8
 800b082:	46ae      	mov	lr, r5
 800b084:	46d3      	mov	fp, sl
 800b086:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b08a:	b298      	uxth	r0, r3
 800b08c:	fb06 a000 	mla	r0, r6, r0, sl
 800b090:	0c02      	lsrs	r2, r0, #16
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	fb06 2303 	mla	r3, r6, r3, r2
 800b098:	f8de 2000 	ldr.w	r2, [lr]
 800b09c:	b280      	uxth	r0, r0
 800b09e:	b292      	uxth	r2, r2
 800b0a0:	1a12      	subs	r2, r2, r0
 800b0a2:	445a      	add	r2, fp
 800b0a4:	f8de 0000 	ldr.w	r0, [lr]
 800b0a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0bc:	45e1      	cmp	r9, ip
 800b0be:	f84e 2b04 	str.w	r2, [lr], #4
 800b0c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0c6:	d2de      	bcs.n	800b086 <quorem+0x42>
 800b0c8:	9b00      	ldr	r3, [sp, #0]
 800b0ca:	58eb      	ldr	r3, [r5, r3]
 800b0cc:	b92b      	cbnz	r3, 800b0da <quorem+0x96>
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	3b04      	subs	r3, #4
 800b0d2:	429d      	cmp	r5, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	d32f      	bcc.n	800b138 <quorem+0xf4>
 800b0d8:	613c      	str	r4, [r7, #16]
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f001 f9c4 	bl	800c468 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	db25      	blt.n	800b130 <quorem+0xec>
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0ec:	f8d1 c000 	ldr.w	ip, [r1]
 800b0f0:	fa1f fe82 	uxth.w	lr, r2
 800b0f4:	fa1f f38c 	uxth.w	r3, ip
 800b0f8:	eba3 030e 	sub.w	r3, r3, lr
 800b0fc:	4403      	add	r3, r0
 800b0fe:	0c12      	lsrs	r2, r2, #16
 800b100:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b104:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b108:	b29b      	uxth	r3, r3
 800b10a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b10e:	45c1      	cmp	r9, r8
 800b110:	f841 3b04 	str.w	r3, [r1], #4
 800b114:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b118:	d2e6      	bcs.n	800b0e8 <quorem+0xa4>
 800b11a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b11e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b122:	b922      	cbnz	r2, 800b12e <quorem+0xea>
 800b124:	3b04      	subs	r3, #4
 800b126:	429d      	cmp	r5, r3
 800b128:	461a      	mov	r2, r3
 800b12a:	d30b      	bcc.n	800b144 <quorem+0x100>
 800b12c:	613c      	str	r4, [r7, #16]
 800b12e:	3601      	adds	r6, #1
 800b130:	4630      	mov	r0, r6
 800b132:	b003      	add	sp, #12
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	6812      	ldr	r2, [r2, #0]
 800b13a:	3b04      	subs	r3, #4
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	d1cb      	bne.n	800b0d8 <quorem+0x94>
 800b140:	3c01      	subs	r4, #1
 800b142:	e7c6      	b.n	800b0d2 <quorem+0x8e>
 800b144:	6812      	ldr	r2, [r2, #0]
 800b146:	3b04      	subs	r3, #4
 800b148:	2a00      	cmp	r2, #0
 800b14a:	d1ef      	bne.n	800b12c <quorem+0xe8>
 800b14c:	3c01      	subs	r4, #1
 800b14e:	e7ea      	b.n	800b126 <quorem+0xe2>
 800b150:	2000      	movs	r0, #0
 800b152:	e7ee      	b.n	800b132 <quorem+0xee>
 800b154:	0000      	movs	r0, r0
	...

0800b158 <_dtoa_r>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	69c7      	ldr	r7, [r0, #28]
 800b15e:	b099      	sub	sp, #100	@ 0x64
 800b160:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b164:	ec55 4b10 	vmov	r4, r5, d0
 800b168:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b16a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b16c:	4683      	mov	fp, r0
 800b16e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b170:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b172:	b97f      	cbnz	r7, 800b194 <_dtoa_r+0x3c>
 800b174:	2010      	movs	r0, #16
 800b176:	f000 fdfd 	bl	800bd74 <malloc>
 800b17a:	4602      	mov	r2, r0
 800b17c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b180:	b920      	cbnz	r0, 800b18c <_dtoa_r+0x34>
 800b182:	4ba7      	ldr	r3, [pc, #668]	@ (800b420 <_dtoa_r+0x2c8>)
 800b184:	21ef      	movs	r1, #239	@ 0xef
 800b186:	48a7      	ldr	r0, [pc, #668]	@ (800b424 <_dtoa_r+0x2cc>)
 800b188:	f002 fdee 	bl	800dd68 <__assert_func>
 800b18c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b190:	6007      	str	r7, [r0, #0]
 800b192:	60c7      	str	r7, [r0, #12]
 800b194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b198:	6819      	ldr	r1, [r3, #0]
 800b19a:	b159      	cbz	r1, 800b1b4 <_dtoa_r+0x5c>
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	604a      	str	r2, [r1, #4]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4093      	lsls	r3, r2
 800b1a4:	608b      	str	r3, [r1, #8]
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 feda 	bl	800bf60 <_Bfree>
 800b1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	1e2b      	subs	r3, r5, #0
 800b1b6:	bfb9      	ittee	lt
 800b1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1bc:	9303      	strlt	r3, [sp, #12]
 800b1be:	2300      	movge	r3, #0
 800b1c0:	6033      	strge	r3, [r6, #0]
 800b1c2:	9f03      	ldr	r7, [sp, #12]
 800b1c4:	4b98      	ldr	r3, [pc, #608]	@ (800b428 <_dtoa_r+0x2d0>)
 800b1c6:	bfbc      	itt	lt
 800b1c8:	2201      	movlt	r2, #1
 800b1ca:	6032      	strlt	r2, [r6, #0]
 800b1cc:	43bb      	bics	r3, r7
 800b1ce:	d112      	bne.n	800b1f6 <_dtoa_r+0x9e>
 800b1d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1dc:	4323      	orrs	r3, r4
 800b1de:	f000 854d 	beq.w	800bc7c <_dtoa_r+0xb24>
 800b1e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b43c <_dtoa_r+0x2e4>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 854f 	beq.w	800bc8c <_dtoa_r+0xb34>
 800b1ee:	f10a 0303 	add.w	r3, sl, #3
 800b1f2:	f000 bd49 	b.w	800bc88 <_dtoa_r+0xb30>
 800b1f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	ec51 0b17 	vmov	r0, r1, d7
 800b200:	2300      	movs	r3, #0
 800b202:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b206:	f7f5 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b20a:	4680      	mov	r8, r0
 800b20c:	b158      	cbz	r0, 800b226 <_dtoa_r+0xce>
 800b20e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b210:	2301      	movs	r3, #1
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b216:	b113      	cbz	r3, 800b21e <_dtoa_r+0xc6>
 800b218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b21a:	4b84      	ldr	r3, [pc, #528]	@ (800b42c <_dtoa_r+0x2d4>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b440 <_dtoa_r+0x2e8>
 800b222:	f000 bd33 	b.w	800bc8c <_dtoa_r+0xb34>
 800b226:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b22a:	aa16      	add	r2, sp, #88	@ 0x58
 800b22c:	a917      	add	r1, sp, #92	@ 0x5c
 800b22e:	4658      	mov	r0, fp
 800b230:	f001 fa3a 	bl	800c6a8 <__d2b>
 800b234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b238:	4681      	mov	r9, r0
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	d077      	beq.n	800b32e <_dtoa_r+0x1d6>
 800b23e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b240:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b24c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b258:	4619      	mov	r1, r3
 800b25a:	2200      	movs	r2, #0
 800b25c:	4b74      	ldr	r3, [pc, #464]	@ (800b430 <_dtoa_r+0x2d8>)
 800b25e:	f7f5 f813 	bl	8000288 <__aeabi_dsub>
 800b262:	a369      	add	r3, pc, #420	@ (adr r3, 800b408 <_dtoa_r+0x2b0>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f9c6 	bl	80005f8 <__aeabi_dmul>
 800b26c:	a368      	add	r3, pc, #416	@ (adr r3, 800b410 <_dtoa_r+0x2b8>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f7f5 f80b 	bl	800028c <__adddf3>
 800b276:	4604      	mov	r4, r0
 800b278:	4630      	mov	r0, r6
 800b27a:	460d      	mov	r5, r1
 800b27c:	f7f5 f952 	bl	8000524 <__aeabi_i2d>
 800b280:	a365      	add	r3, pc, #404	@ (adr r3, 800b418 <_dtoa_r+0x2c0>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f9b7 	bl	80005f8 <__aeabi_dmul>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f4 fffb 	bl	800028c <__adddf3>
 800b296:	4604      	mov	r4, r0
 800b298:	460d      	mov	r5, r1
 800b29a:	f7f5 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f7f5 fc18 	bl	8000adc <__aeabi_dcmplt>
 800b2ac:	b140      	cbz	r0, 800b2c0 <_dtoa_r+0x168>
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7f5 f938 	bl	8000524 <__aeabi_i2d>
 800b2b4:	4622      	mov	r2, r4
 800b2b6:	462b      	mov	r3, r5
 800b2b8:	f7f5 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2bc:	b900      	cbnz	r0, 800b2c0 <_dtoa_r+0x168>
 800b2be:	3f01      	subs	r7, #1
 800b2c0:	2f16      	cmp	r7, #22
 800b2c2:	d851      	bhi.n	800b368 <_dtoa_r+0x210>
 800b2c4:	4b5b      	ldr	r3, [pc, #364]	@ (800b434 <_dtoa_r+0x2dc>)
 800b2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2d2:	f7f5 fc03 	bl	8000adc <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d048      	beq.n	800b36c <_dtoa_r+0x214>
 800b2da:	3f01      	subs	r7, #1
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2e2:	1b9b      	subs	r3, r3, r6
 800b2e4:	1e5a      	subs	r2, r3, #1
 800b2e6:	bf44      	itt	mi
 800b2e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2ec:	2300      	movmi	r3, #0
 800b2ee:	9208      	str	r2, [sp, #32]
 800b2f0:	bf54      	ite	pl
 800b2f2:	f04f 0800 	movpl.w	r8, #0
 800b2f6:	9308      	strmi	r3, [sp, #32]
 800b2f8:	2f00      	cmp	r7, #0
 800b2fa:	db39      	blt.n	800b370 <_dtoa_r+0x218>
 800b2fc:	9b08      	ldr	r3, [sp, #32]
 800b2fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b300:	443b      	add	r3, r7
 800b302:	9308      	str	r3, [sp, #32]
 800b304:	2300      	movs	r3, #0
 800b306:	930a      	str	r3, [sp, #40]	@ 0x28
 800b308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b30a:	2b09      	cmp	r3, #9
 800b30c:	d864      	bhi.n	800b3d8 <_dtoa_r+0x280>
 800b30e:	2b05      	cmp	r3, #5
 800b310:	bfc4      	itt	gt
 800b312:	3b04      	subgt	r3, #4
 800b314:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	f1a3 0302 	sub.w	r3, r3, #2
 800b31c:	bfcc      	ite	gt
 800b31e:	2400      	movgt	r4, #0
 800b320:	2401      	movle	r4, #1
 800b322:	2b03      	cmp	r3, #3
 800b324:	d863      	bhi.n	800b3ee <_dtoa_r+0x296>
 800b326:	e8df f003 	tbb	[pc, r3]
 800b32a:	372a      	.short	0x372a
 800b32c:	5535      	.short	0x5535
 800b32e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b332:	441e      	add	r6, r3
 800b334:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b338:	2b20      	cmp	r3, #32
 800b33a:	bfc1      	itttt	gt
 800b33c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b340:	409f      	lslgt	r7, r3
 800b342:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b346:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b34a:	bfd6      	itet	le
 800b34c:	f1c3 0320 	rsble	r3, r3, #32
 800b350:	ea47 0003 	orrgt.w	r0, r7, r3
 800b354:	fa04 f003 	lslle.w	r0, r4, r3
 800b358:	f7f5 f8d4 	bl	8000504 <__aeabi_ui2d>
 800b35c:	2201      	movs	r2, #1
 800b35e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b362:	3e01      	subs	r6, #1
 800b364:	9214      	str	r2, [sp, #80]	@ 0x50
 800b366:	e777      	b.n	800b258 <_dtoa_r+0x100>
 800b368:	2301      	movs	r3, #1
 800b36a:	e7b8      	b.n	800b2de <_dtoa_r+0x186>
 800b36c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b36e:	e7b7      	b.n	800b2e0 <_dtoa_r+0x188>
 800b370:	427b      	negs	r3, r7
 800b372:	930a      	str	r3, [sp, #40]	@ 0x28
 800b374:	2300      	movs	r3, #0
 800b376:	eba8 0807 	sub.w	r8, r8, r7
 800b37a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b37c:	e7c4      	b.n	800b308 <_dtoa_r+0x1b0>
 800b37e:	2300      	movs	r3, #0
 800b380:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b384:	2b00      	cmp	r3, #0
 800b386:	dc35      	bgt.n	800b3f4 <_dtoa_r+0x29c>
 800b388:	2301      	movs	r3, #1
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	9307      	str	r3, [sp, #28]
 800b38e:	461a      	mov	r2, r3
 800b390:	920e      	str	r2, [sp, #56]	@ 0x38
 800b392:	e00b      	b.n	800b3ac <_dtoa_r+0x254>
 800b394:	2301      	movs	r3, #1
 800b396:	e7f3      	b.n	800b380 <_dtoa_r+0x228>
 800b398:	2300      	movs	r3, #0
 800b39a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39e:	18fb      	adds	r3, r7, r3
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	9307      	str	r3, [sp, #28]
 800b3a8:	bfb8      	it	lt
 800b3aa:	2301      	movlt	r3, #1
 800b3ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	f102 0514 	add.w	r5, r2, #20
 800b3b8:	429d      	cmp	r5, r3
 800b3ba:	d91f      	bls.n	800b3fc <_dtoa_r+0x2a4>
 800b3bc:	6041      	str	r1, [r0, #4]
 800b3be:	4658      	mov	r0, fp
 800b3c0:	f000 fd8e 	bl	800bee0 <_Balloc>
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d13c      	bne.n	800b444 <_dtoa_r+0x2ec>
 800b3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b438 <_dtoa_r+0x2e0>)
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3d2:	e6d8      	b.n	800b186 <_dtoa_r+0x2e>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e7e0      	b.n	800b39a <_dtoa_r+0x242>
 800b3d8:	2401      	movs	r4, #1
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2312      	movs	r3, #18
 800b3ec:	e7d0      	b.n	800b390 <_dtoa_r+0x238>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3f2:	e7f5      	b.n	800b3e0 <_dtoa_r+0x288>
 800b3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	9307      	str	r3, [sp, #28]
 800b3fa:	e7d7      	b.n	800b3ac <_dtoa_r+0x254>
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	0052      	lsls	r2, r2, #1
 800b400:	e7d8      	b.n	800b3b4 <_dtoa_r+0x25c>
 800b402:	bf00      	nop
 800b404:	f3af 8000 	nop.w
 800b408:	636f4361 	.word	0x636f4361
 800b40c:	3fd287a7 	.word	0x3fd287a7
 800b410:	8b60c8b3 	.word	0x8b60c8b3
 800b414:	3fc68a28 	.word	0x3fc68a28
 800b418:	509f79fb 	.word	0x509f79fb
 800b41c:	3fd34413 	.word	0x3fd34413
 800b420:	0800e799 	.word	0x0800e799
 800b424:	0800e7b0 	.word	0x0800e7b0
 800b428:	7ff00000 	.word	0x7ff00000
 800b42c:	0800e764 	.word	0x0800e764
 800b430:	3ff80000 	.word	0x3ff80000
 800b434:	0800e8a8 	.word	0x0800e8a8
 800b438:	0800e808 	.word	0x0800e808
 800b43c:	0800e795 	.word	0x0800e795
 800b440:	0800e763 	.word	0x0800e763
 800b444:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b448:	6018      	str	r0, [r3, #0]
 800b44a:	9b07      	ldr	r3, [sp, #28]
 800b44c:	2b0e      	cmp	r3, #14
 800b44e:	f200 80a4 	bhi.w	800b59a <_dtoa_r+0x442>
 800b452:	2c00      	cmp	r4, #0
 800b454:	f000 80a1 	beq.w	800b59a <_dtoa_r+0x442>
 800b458:	2f00      	cmp	r7, #0
 800b45a:	dd33      	ble.n	800b4c4 <_dtoa_r+0x36c>
 800b45c:	4bad      	ldr	r3, [pc, #692]	@ (800b714 <_dtoa_r+0x5bc>)
 800b45e:	f007 020f 	and.w	r2, r7, #15
 800b462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b466:	ed93 7b00 	vldr	d7, [r3]
 800b46a:	05f8      	lsls	r0, r7, #23
 800b46c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b470:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b474:	d516      	bpl.n	800b4a4 <_dtoa_r+0x34c>
 800b476:	4ba8      	ldr	r3, [pc, #672]	@ (800b718 <_dtoa_r+0x5c0>)
 800b478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b480:	f7f5 f9e4 	bl	800084c <__aeabi_ddiv>
 800b484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b488:	f004 040f 	and.w	r4, r4, #15
 800b48c:	2603      	movs	r6, #3
 800b48e:	4da2      	ldr	r5, [pc, #648]	@ (800b718 <_dtoa_r+0x5c0>)
 800b490:	b954      	cbnz	r4, 800b4a8 <_dtoa_r+0x350>
 800b492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49a:	f7f5 f9d7 	bl	800084c <__aeabi_ddiv>
 800b49e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4a2:	e028      	b.n	800b4f6 <_dtoa_r+0x39e>
 800b4a4:	2602      	movs	r6, #2
 800b4a6:	e7f2      	b.n	800b48e <_dtoa_r+0x336>
 800b4a8:	07e1      	lsls	r1, r4, #31
 800b4aa:	d508      	bpl.n	800b4be <_dtoa_r+0x366>
 800b4ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4bc:	3601      	adds	r6, #1
 800b4be:	1064      	asrs	r4, r4, #1
 800b4c0:	3508      	adds	r5, #8
 800b4c2:	e7e5      	b.n	800b490 <_dtoa_r+0x338>
 800b4c4:	f000 80d2 	beq.w	800b66c <_dtoa_r+0x514>
 800b4c8:	427c      	negs	r4, r7
 800b4ca:	4b92      	ldr	r3, [pc, #584]	@ (800b714 <_dtoa_r+0x5bc>)
 800b4cc:	4d92      	ldr	r5, [pc, #584]	@ (800b718 <_dtoa_r+0x5c0>)
 800b4ce:	f004 020f 	and.w	r2, r4, #15
 800b4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4de:	f7f5 f88b 	bl	80005f8 <__aeabi_dmul>
 800b4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e6:	1124      	asrs	r4, r4, #4
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2602      	movs	r6, #2
 800b4ec:	2c00      	cmp	r4, #0
 800b4ee:	f040 80b2 	bne.w	800b656 <_dtoa_r+0x4fe>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1d3      	bne.n	800b49e <_dtoa_r+0x346>
 800b4f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 80b7 	beq.w	800b670 <_dtoa_r+0x518>
 800b502:	4b86      	ldr	r3, [pc, #536]	@ (800b71c <_dtoa_r+0x5c4>)
 800b504:	2200      	movs	r2, #0
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 fae7 	bl	8000adc <__aeabi_dcmplt>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f000 80ae 	beq.w	800b670 <_dtoa_r+0x518>
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 80aa 	beq.w	800b670 <_dtoa_r+0x518>
 800b51c:	9b00      	ldr	r3, [sp, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dd37      	ble.n	800b592 <_dtoa_r+0x43a>
 800b522:	1e7b      	subs	r3, r7, #1
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	4620      	mov	r0, r4
 800b528:	4b7d      	ldr	r3, [pc, #500]	@ (800b720 <_dtoa_r+0x5c8>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7f5 f863 	bl	80005f8 <__aeabi_dmul>
 800b532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b536:	9c00      	ldr	r4, [sp, #0]
 800b538:	3601      	adds	r6, #1
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7f4 fff2 	bl	8000524 <__aeabi_i2d>
 800b540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b544:	f7f5 f858 	bl	80005f8 <__aeabi_dmul>
 800b548:	4b76      	ldr	r3, [pc, #472]	@ (800b724 <_dtoa_r+0x5cc>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f4 fe9e 	bl	800028c <__adddf3>
 800b550:	4605      	mov	r5, r0
 800b552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b556:	2c00      	cmp	r4, #0
 800b558:	f040 808d 	bne.w	800b676 <_dtoa_r+0x51e>
 800b55c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b560:	4b71      	ldr	r3, [pc, #452]	@ (800b728 <_dtoa_r+0x5d0>)
 800b562:	2200      	movs	r2, #0
 800b564:	f7f4 fe90 	bl	8000288 <__aeabi_dsub>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b570:	462a      	mov	r2, r5
 800b572:	4633      	mov	r3, r6
 800b574:	f7f5 fad0 	bl	8000b18 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f040 828b 	bne.w	800ba94 <_dtoa_r+0x93c>
 800b57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b582:	462a      	mov	r2, r5
 800b584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b588:	f7f5 faa8 	bl	8000adc <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f040 8128 	bne.w	800b7e2 <_dtoa_r+0x68a>
 800b592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b59a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f2c0 815a 	blt.w	800b856 <_dtoa_r+0x6fe>
 800b5a2:	2f0e      	cmp	r7, #14
 800b5a4:	f300 8157 	bgt.w	800b856 <_dtoa_r+0x6fe>
 800b5a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b714 <_dtoa_r+0x5bc>)
 800b5aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5ae:	ed93 7b00 	vldr	d7, [r3]
 800b5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	ed8d 7b00 	vstr	d7, [sp]
 800b5ba:	da03      	bge.n	800b5c4 <_dtoa_r+0x46c>
 800b5bc:	9b07      	ldr	r3, [sp, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f340 8101 	ble.w	800b7c6 <_dtoa_r+0x66e>
 800b5c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5c8:	4656      	mov	r6, sl
 800b5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f5 f93b 	bl	800084c <__aeabi_ddiv>
 800b5d6:	f7f5 fabf 	bl	8000b58 <__aeabi_d2iz>
 800b5da:	4680      	mov	r8, r0
 800b5dc:	f7f4 ffa2 	bl	8000524 <__aeabi_i2d>
 800b5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5f4:	f7f4 fe48 	bl	8000288 <__aeabi_dsub>
 800b5f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b5fc:	9d07      	ldr	r5, [sp, #28]
 800b5fe:	eba6 040a 	sub.w	r4, r6, sl
 800b602:	42a5      	cmp	r5, r4
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	f040 8117 	bne.w	800b83a <_dtoa_r+0x6e2>
 800b60c:	f7f4 fe3e 	bl	800028c <__adddf3>
 800b610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	f7f5 fa7e 	bl	8000b18 <__aeabi_dcmpgt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f040 80f9 	bne.w	800b814 <_dtoa_r+0x6bc>
 800b622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	f7f5 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b62e:	b118      	cbz	r0, 800b638 <_dtoa_r+0x4e0>
 800b630:	f018 0f01 	tst.w	r8, #1
 800b634:	f040 80ee 	bne.w	800b814 <_dtoa_r+0x6bc>
 800b638:	4649      	mov	r1, r9
 800b63a:	4658      	mov	r0, fp
 800b63c:	f000 fc90 	bl	800bf60 <_Bfree>
 800b640:	2300      	movs	r3, #0
 800b642:	7033      	strb	r3, [r6, #0]
 800b644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b646:	3701      	adds	r7, #1
 800b648:	601f      	str	r7, [r3, #0]
 800b64a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 831d 	beq.w	800bc8c <_dtoa_r+0xb34>
 800b652:	601e      	str	r6, [r3, #0]
 800b654:	e31a      	b.n	800bc8c <_dtoa_r+0xb34>
 800b656:	07e2      	lsls	r2, r4, #31
 800b658:	d505      	bpl.n	800b666 <_dtoa_r+0x50e>
 800b65a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b65e:	f7f4 ffcb 	bl	80005f8 <__aeabi_dmul>
 800b662:	3601      	adds	r6, #1
 800b664:	2301      	movs	r3, #1
 800b666:	1064      	asrs	r4, r4, #1
 800b668:	3508      	adds	r5, #8
 800b66a:	e73f      	b.n	800b4ec <_dtoa_r+0x394>
 800b66c:	2602      	movs	r6, #2
 800b66e:	e742      	b.n	800b4f6 <_dtoa_r+0x39e>
 800b670:	9c07      	ldr	r4, [sp, #28]
 800b672:	9704      	str	r7, [sp, #16]
 800b674:	e761      	b.n	800b53a <_dtoa_r+0x3e2>
 800b676:	4b27      	ldr	r3, [pc, #156]	@ (800b714 <_dtoa_r+0x5bc>)
 800b678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b67a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b67e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b682:	4454      	add	r4, sl
 800b684:	2900      	cmp	r1, #0
 800b686:	d053      	beq.n	800b730 <_dtoa_r+0x5d8>
 800b688:	4928      	ldr	r1, [pc, #160]	@ (800b72c <_dtoa_r+0x5d4>)
 800b68a:	2000      	movs	r0, #0
 800b68c:	f7f5 f8de 	bl	800084c <__aeabi_ddiv>
 800b690:	4633      	mov	r3, r6
 800b692:	462a      	mov	r2, r5
 800b694:	f7f4 fdf8 	bl	8000288 <__aeabi_dsub>
 800b698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b69c:	4656      	mov	r6, sl
 800b69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a2:	f7f5 fa59 	bl	8000b58 <__aeabi_d2iz>
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	f7f4 ff3c 	bl	8000524 <__aeabi_i2d>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b4:	f7f4 fde8 	bl	8000288 <__aeabi_dsub>
 800b6b8:	3530      	adds	r5, #48	@ 0x30
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ca:	f7f5 fa07 	bl	8000adc <__aeabi_dcmplt>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d171      	bne.n	800b7b6 <_dtoa_r+0x65e>
 800b6d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6d6:	4911      	ldr	r1, [pc, #68]	@ (800b71c <_dtoa_r+0x5c4>)
 800b6d8:	2000      	movs	r0, #0
 800b6da:	f7f4 fdd5 	bl	8000288 <__aeabi_dsub>
 800b6de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6e2:	f7f5 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f040 8095 	bne.w	800b816 <_dtoa_r+0x6be>
 800b6ec:	42a6      	cmp	r6, r4
 800b6ee:	f43f af50 	beq.w	800b592 <_dtoa_r+0x43a>
 800b6f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b720 <_dtoa_r+0x5c8>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f7f4 ff7d 	bl	80005f8 <__aeabi_dmul>
 800b6fe:	4b08      	ldr	r3, [pc, #32]	@ (800b720 <_dtoa_r+0x5c8>)
 800b700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b704:	2200      	movs	r2, #0
 800b706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b70a:	f7f4 ff75 	bl	80005f8 <__aeabi_dmul>
 800b70e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b712:	e7c4      	b.n	800b69e <_dtoa_r+0x546>
 800b714:	0800e8a8 	.word	0x0800e8a8
 800b718:	0800e880 	.word	0x0800e880
 800b71c:	3ff00000 	.word	0x3ff00000
 800b720:	40240000 	.word	0x40240000
 800b724:	401c0000 	.word	0x401c0000
 800b728:	40140000 	.word	0x40140000
 800b72c:	3fe00000 	.word	0x3fe00000
 800b730:	4631      	mov	r1, r6
 800b732:	4628      	mov	r0, r5
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b73c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b73e:	4656      	mov	r6, sl
 800b740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b744:	f7f5 fa08 	bl	8000b58 <__aeabi_d2iz>
 800b748:	4605      	mov	r5, r0
 800b74a:	f7f4 feeb 	bl	8000524 <__aeabi_i2d>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b756:	f7f4 fd97 	bl	8000288 <__aeabi_dsub>
 800b75a:	3530      	adds	r5, #48	@ 0x30
 800b75c:	f806 5b01 	strb.w	r5, [r6], #1
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	42a6      	cmp	r6, r4
 800b766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b76a:	f04f 0200 	mov.w	r2, #0
 800b76e:	d124      	bne.n	800b7ba <_dtoa_r+0x662>
 800b770:	4bac      	ldr	r3, [pc, #688]	@ (800ba24 <_dtoa_r+0x8cc>)
 800b772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b776:	f7f4 fd89 	bl	800028c <__adddf3>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b782:	f7f5 f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 800b786:	2800      	cmp	r0, #0
 800b788:	d145      	bne.n	800b816 <_dtoa_r+0x6be>
 800b78a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b78e:	49a5      	ldr	r1, [pc, #660]	@ (800ba24 <_dtoa_r+0x8cc>)
 800b790:	2000      	movs	r0, #0
 800b792:	f7f4 fd79 	bl	8000288 <__aeabi_dsub>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79e:	f7f5 f99d 	bl	8000adc <__aeabi_dcmplt>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	f43f aef5 	beq.w	800b592 <_dtoa_r+0x43a>
 800b7a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b7aa:	1e73      	subs	r3, r6, #1
 800b7ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7b2:	2b30      	cmp	r3, #48	@ 0x30
 800b7b4:	d0f8      	beq.n	800b7a8 <_dtoa_r+0x650>
 800b7b6:	9f04      	ldr	r7, [sp, #16]
 800b7b8:	e73e      	b.n	800b638 <_dtoa_r+0x4e0>
 800b7ba:	4b9b      	ldr	r3, [pc, #620]	@ (800ba28 <_dtoa_r+0x8d0>)
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c4:	e7bc      	b.n	800b740 <_dtoa_r+0x5e8>
 800b7c6:	d10c      	bne.n	800b7e2 <_dtoa_r+0x68a>
 800b7c8:	4b98      	ldr	r3, [pc, #608]	@ (800ba2c <_dtoa_r+0x8d4>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d0:	f7f4 ff12 	bl	80005f8 <__aeabi_dmul>
 800b7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7d8:	f7f5 f994 	bl	8000b04 <__aeabi_dcmpge>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	f000 8157 	beq.w	800ba90 <_dtoa_r+0x938>
 800b7e2:	2400      	movs	r4, #0
 800b7e4:	4625      	mov	r5, r4
 800b7e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7e8:	43db      	mvns	r3, r3
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	4656      	mov	r6, sl
 800b7ee:	2700      	movs	r7, #0
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	4658      	mov	r0, fp
 800b7f4:	f000 fbb4 	bl	800bf60 <_Bfree>
 800b7f8:	2d00      	cmp	r5, #0
 800b7fa:	d0dc      	beq.n	800b7b6 <_dtoa_r+0x65e>
 800b7fc:	b12f      	cbz	r7, 800b80a <_dtoa_r+0x6b2>
 800b7fe:	42af      	cmp	r7, r5
 800b800:	d003      	beq.n	800b80a <_dtoa_r+0x6b2>
 800b802:	4639      	mov	r1, r7
 800b804:	4658      	mov	r0, fp
 800b806:	f000 fbab 	bl	800bf60 <_Bfree>
 800b80a:	4629      	mov	r1, r5
 800b80c:	4658      	mov	r0, fp
 800b80e:	f000 fba7 	bl	800bf60 <_Bfree>
 800b812:	e7d0      	b.n	800b7b6 <_dtoa_r+0x65e>
 800b814:	9704      	str	r7, [sp, #16]
 800b816:	4633      	mov	r3, r6
 800b818:	461e      	mov	r6, r3
 800b81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b81e:	2a39      	cmp	r2, #57	@ 0x39
 800b820:	d107      	bne.n	800b832 <_dtoa_r+0x6da>
 800b822:	459a      	cmp	sl, r3
 800b824:	d1f8      	bne.n	800b818 <_dtoa_r+0x6c0>
 800b826:	9a04      	ldr	r2, [sp, #16]
 800b828:	3201      	adds	r2, #1
 800b82a:	9204      	str	r2, [sp, #16]
 800b82c:	2230      	movs	r2, #48	@ 0x30
 800b82e:	f88a 2000 	strb.w	r2, [sl]
 800b832:	781a      	ldrb	r2, [r3, #0]
 800b834:	3201      	adds	r2, #1
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	e7bd      	b.n	800b7b6 <_dtoa_r+0x65e>
 800b83a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba28 <_dtoa_r+0x8d0>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	2200      	movs	r2, #0
 800b844:	2300      	movs	r3, #0
 800b846:	4604      	mov	r4, r0
 800b848:	460d      	mov	r5, r1
 800b84a:	f7f5 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f aebb 	beq.w	800b5ca <_dtoa_r+0x472>
 800b854:	e6f0      	b.n	800b638 <_dtoa_r+0x4e0>
 800b856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b858:	2a00      	cmp	r2, #0
 800b85a:	f000 80db 	beq.w	800ba14 <_dtoa_r+0x8bc>
 800b85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b860:	2a01      	cmp	r2, #1
 800b862:	f300 80bf 	bgt.w	800b9e4 <_dtoa_r+0x88c>
 800b866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b868:	2a00      	cmp	r2, #0
 800b86a:	f000 80b7 	beq.w	800b9dc <_dtoa_r+0x884>
 800b86e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b874:	4646      	mov	r6, r8
 800b876:	9a08      	ldr	r2, [sp, #32]
 800b878:	2101      	movs	r1, #1
 800b87a:	441a      	add	r2, r3
 800b87c:	4658      	mov	r0, fp
 800b87e:	4498      	add	r8, r3
 800b880:	9208      	str	r2, [sp, #32]
 800b882:	f000 fc6b 	bl	800c15c <__i2b>
 800b886:	4605      	mov	r5, r0
 800b888:	b15e      	cbz	r6, 800b8a2 <_dtoa_r+0x74a>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dd08      	ble.n	800b8a2 <_dtoa_r+0x74a>
 800b890:	42b3      	cmp	r3, r6
 800b892:	9a08      	ldr	r2, [sp, #32]
 800b894:	bfa8      	it	ge
 800b896:	4633      	movge	r3, r6
 800b898:	eba8 0803 	sub.w	r8, r8, r3
 800b89c:	1af6      	subs	r6, r6, r3
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	9308      	str	r3, [sp, #32]
 800b8a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a4:	b1f3      	cbz	r3, 800b8e4 <_dtoa_r+0x78c>
 800b8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80b7 	beq.w	800ba1c <_dtoa_r+0x8c4>
 800b8ae:	b18c      	cbz	r4, 800b8d4 <_dtoa_r+0x77c>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 fd11 	bl	800c2dc <__pow5mult>
 800b8ba:	464a      	mov	r2, r9
 800b8bc:	4601      	mov	r1, r0
 800b8be:	4605      	mov	r5, r0
 800b8c0:	4658      	mov	r0, fp
 800b8c2:	f000 fc61 	bl	800c188 <__multiply>
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	9004      	str	r0, [sp, #16]
 800b8ca:	4658      	mov	r0, fp
 800b8cc:	f000 fb48 	bl	800bf60 <_Bfree>
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	4699      	mov	r9, r3
 800b8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8d6:	1b1a      	subs	r2, r3, r4
 800b8d8:	d004      	beq.n	800b8e4 <_dtoa_r+0x78c>
 800b8da:	4649      	mov	r1, r9
 800b8dc:	4658      	mov	r0, fp
 800b8de:	f000 fcfd 	bl	800c2dc <__pow5mult>
 800b8e2:	4681      	mov	r9, r0
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f000 fc38 	bl	800c15c <__i2b>
 800b8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 81cf 	beq.w	800bc94 <_dtoa_r+0xb3c>
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 fcee 	bl	800c2dc <__pow5mult>
 800b900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b902:	2b01      	cmp	r3, #1
 800b904:	4604      	mov	r4, r0
 800b906:	f300 8095 	bgt.w	800ba34 <_dtoa_r+0x8dc>
 800b90a:	9b02      	ldr	r3, [sp, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f040 8087 	bne.w	800ba20 <_dtoa_r+0x8c8>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f040 8089 	bne.w	800ba30 <_dtoa_r+0x8d8>
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b924:	0d1b      	lsrs	r3, r3, #20
 800b926:	051b      	lsls	r3, r3, #20
 800b928:	b12b      	cbz	r3, 800b936 <_dtoa_r+0x7de>
 800b92a:	9b08      	ldr	r3, [sp, #32]
 800b92c:	3301      	adds	r3, #1
 800b92e:	9308      	str	r3, [sp, #32]
 800b930:	f108 0801 	add.w	r8, r8, #1
 800b934:	2301      	movs	r3, #1
 800b936:	930a      	str	r3, [sp, #40]	@ 0x28
 800b938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 81b0 	beq.w	800bca0 <_dtoa_r+0xb48>
 800b940:	6923      	ldr	r3, [r4, #16]
 800b942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b946:	6918      	ldr	r0, [r3, #16]
 800b948:	f000 fbbc 	bl	800c0c4 <__hi0bits>
 800b94c:	f1c0 0020 	rsb	r0, r0, #32
 800b950:	9b08      	ldr	r3, [sp, #32]
 800b952:	4418      	add	r0, r3
 800b954:	f010 001f 	ands.w	r0, r0, #31
 800b958:	d077      	beq.n	800ba4a <_dtoa_r+0x8f2>
 800b95a:	f1c0 0320 	rsb	r3, r0, #32
 800b95e:	2b04      	cmp	r3, #4
 800b960:	dd6b      	ble.n	800ba3a <_dtoa_r+0x8e2>
 800b962:	9b08      	ldr	r3, [sp, #32]
 800b964:	f1c0 001c 	rsb	r0, r0, #28
 800b968:	4403      	add	r3, r0
 800b96a:	4480      	add	r8, r0
 800b96c:	4406      	add	r6, r0
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	f1b8 0f00 	cmp.w	r8, #0
 800b974:	dd05      	ble.n	800b982 <_dtoa_r+0x82a>
 800b976:	4649      	mov	r1, r9
 800b978:	4642      	mov	r2, r8
 800b97a:	4658      	mov	r0, fp
 800b97c:	f000 fd08 	bl	800c390 <__lshift>
 800b980:	4681      	mov	r9, r0
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	2b00      	cmp	r3, #0
 800b986:	dd05      	ble.n	800b994 <_dtoa_r+0x83c>
 800b988:	4621      	mov	r1, r4
 800b98a:	461a      	mov	r2, r3
 800b98c:	4658      	mov	r0, fp
 800b98e:	f000 fcff 	bl	800c390 <__lshift>
 800b992:	4604      	mov	r4, r0
 800b994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b996:	2b00      	cmp	r3, #0
 800b998:	d059      	beq.n	800ba4e <_dtoa_r+0x8f6>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 fd63 	bl	800c468 <__mcmp>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	da53      	bge.n	800ba4e <_dtoa_r+0x8f6>
 800b9a6:	1e7b      	subs	r3, r7, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	220a      	movs	r2, #10
 800b9b0:	4658      	mov	r0, fp
 800b9b2:	f000 faf7 	bl	800bfa4 <__multadd>
 800b9b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9b8:	4681      	mov	r9, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8172 	beq.w	800bca4 <_dtoa_r+0xb4c>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	220a      	movs	r2, #10
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	f000 faec 	bl	800bfa4 <__multadd>
 800b9cc:	9b00      	ldr	r3, [sp, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	dc67      	bgt.n	800baa4 <_dtoa_r+0x94c>
 800b9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	dc41      	bgt.n	800ba5e <_dtoa_r+0x906>
 800b9da:	e063      	b.n	800baa4 <_dtoa_r+0x94c>
 800b9dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9e2:	e746      	b.n	800b872 <_dtoa_r+0x71a>
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	1e5c      	subs	r4, r3, #1
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	bfbf      	itttt	lt
 800b9ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9f4:	1ae3      	sublt	r3, r4, r3
 800b9f6:	bfb4      	ite	lt
 800b9f8:	18d2      	addlt	r2, r2, r3
 800b9fa:	1b1c      	subge	r4, r3, r4
 800b9fc:	9b07      	ldr	r3, [sp, #28]
 800b9fe:	bfbc      	itt	lt
 800ba00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba02:	2400      	movlt	r4, #0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bfb5      	itete	lt
 800ba08:	eba8 0603 	sublt.w	r6, r8, r3
 800ba0c:	9b07      	ldrge	r3, [sp, #28]
 800ba0e:	2300      	movlt	r3, #0
 800ba10:	4646      	movge	r6, r8
 800ba12:	e730      	b.n	800b876 <_dtoa_r+0x71e>
 800ba14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba18:	4646      	mov	r6, r8
 800ba1a:	e735      	b.n	800b888 <_dtoa_r+0x730>
 800ba1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba1e:	e75c      	b.n	800b8da <_dtoa_r+0x782>
 800ba20:	2300      	movs	r3, #0
 800ba22:	e788      	b.n	800b936 <_dtoa_r+0x7de>
 800ba24:	3fe00000 	.word	0x3fe00000
 800ba28:	40240000 	.word	0x40240000
 800ba2c:	40140000 	.word	0x40140000
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	e780      	b.n	800b936 <_dtoa_r+0x7de>
 800ba34:	2300      	movs	r3, #0
 800ba36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba38:	e782      	b.n	800b940 <_dtoa_r+0x7e8>
 800ba3a:	d099      	beq.n	800b970 <_dtoa_r+0x818>
 800ba3c:	9a08      	ldr	r2, [sp, #32]
 800ba3e:	331c      	adds	r3, #28
 800ba40:	441a      	add	r2, r3
 800ba42:	4498      	add	r8, r3
 800ba44:	441e      	add	r6, r3
 800ba46:	9208      	str	r2, [sp, #32]
 800ba48:	e792      	b.n	800b970 <_dtoa_r+0x818>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	e7f6      	b.n	800ba3c <_dtoa_r+0x8e4>
 800ba4e:	9b07      	ldr	r3, [sp, #28]
 800ba50:	9704      	str	r7, [sp, #16]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dc20      	bgt.n	800ba98 <_dtoa_r+0x940>
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	dd1e      	ble.n	800ba9c <_dtoa_r+0x944>
 800ba5e:	9b00      	ldr	r3, [sp, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f47f aec0 	bne.w	800b7e6 <_dtoa_r+0x68e>
 800ba66:	4621      	mov	r1, r4
 800ba68:	2205      	movs	r2, #5
 800ba6a:	4658      	mov	r0, fp
 800ba6c:	f000 fa9a 	bl	800bfa4 <__multadd>
 800ba70:	4601      	mov	r1, r0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4648      	mov	r0, r9
 800ba76:	f000 fcf7 	bl	800c468 <__mcmp>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	f77f aeb3 	ble.w	800b7e6 <_dtoa_r+0x68e>
 800ba80:	4656      	mov	r6, sl
 800ba82:	2331      	movs	r3, #49	@ 0x31
 800ba84:	f806 3b01 	strb.w	r3, [r6], #1
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	e6ae      	b.n	800b7ee <_dtoa_r+0x696>
 800ba90:	9c07      	ldr	r4, [sp, #28]
 800ba92:	9704      	str	r7, [sp, #16]
 800ba94:	4625      	mov	r5, r4
 800ba96:	e7f3      	b.n	800ba80 <_dtoa_r+0x928>
 800ba98:	9b07      	ldr	r3, [sp, #28]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8104 	beq.w	800bcac <_dtoa_r+0xb54>
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	dd05      	ble.n	800bab4 <_dtoa_r+0x95c>
 800baa8:	4629      	mov	r1, r5
 800baaa:	4632      	mov	r2, r6
 800baac:	4658      	mov	r0, fp
 800baae:	f000 fc6f 	bl	800c390 <__lshift>
 800bab2:	4605      	mov	r5, r0
 800bab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d05a      	beq.n	800bb70 <_dtoa_r+0xa18>
 800baba:	6869      	ldr	r1, [r5, #4]
 800babc:	4658      	mov	r0, fp
 800babe:	f000 fa0f 	bl	800bee0 <_Balloc>
 800bac2:	4606      	mov	r6, r0
 800bac4:	b928      	cbnz	r0, 800bad2 <_dtoa_r+0x97a>
 800bac6:	4b84      	ldr	r3, [pc, #528]	@ (800bcd8 <_dtoa_r+0xb80>)
 800bac8:	4602      	mov	r2, r0
 800baca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bace:	f7ff bb5a 	b.w	800b186 <_dtoa_r+0x2e>
 800bad2:	692a      	ldr	r2, [r5, #16]
 800bad4:	3202      	adds	r2, #2
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	f105 010c 	add.w	r1, r5, #12
 800badc:	300c      	adds	r0, #12
 800bade:	f7ff fa9c 	bl	800b01a <memcpy>
 800bae2:	2201      	movs	r2, #1
 800bae4:	4631      	mov	r1, r6
 800bae6:	4658      	mov	r0, fp
 800bae8:	f000 fc52 	bl	800c390 <__lshift>
 800baec:	f10a 0301 	add.w	r3, sl, #1
 800baf0:	9307      	str	r3, [sp, #28]
 800baf2:	9b00      	ldr	r3, [sp, #0]
 800baf4:	4453      	add	r3, sl
 800baf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf8:	9b02      	ldr	r3, [sp, #8]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	462f      	mov	r7, r5
 800bb00:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb02:	4605      	mov	r5, r0
 800bb04:	9b07      	ldr	r3, [sp, #28]
 800bb06:	4621      	mov	r1, r4
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	f7ff fa99 	bl	800b044 <quorem>
 800bb12:	4639      	mov	r1, r7
 800bb14:	9002      	str	r0, [sp, #8]
 800bb16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb1a:	4648      	mov	r0, r9
 800bb1c:	f000 fca4 	bl	800c468 <__mcmp>
 800bb20:	462a      	mov	r2, r5
 800bb22:	9008      	str	r0, [sp, #32]
 800bb24:	4621      	mov	r1, r4
 800bb26:	4658      	mov	r0, fp
 800bb28:	f000 fcba 	bl	800c4a0 <__mdiff>
 800bb2c:	68c2      	ldr	r2, [r0, #12]
 800bb2e:	4606      	mov	r6, r0
 800bb30:	bb02      	cbnz	r2, 800bb74 <_dtoa_r+0xa1c>
 800bb32:	4601      	mov	r1, r0
 800bb34:	4648      	mov	r0, r9
 800bb36:	f000 fc97 	bl	800c468 <__mcmp>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4658      	mov	r0, fp
 800bb40:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb42:	f000 fa0d 	bl	800bf60 <_Bfree>
 800bb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb4a:	9e07      	ldr	r6, [sp, #28]
 800bb4c:	ea43 0102 	orr.w	r1, r3, r2
 800bb50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb52:	4319      	orrs	r1, r3
 800bb54:	d110      	bne.n	800bb78 <_dtoa_r+0xa20>
 800bb56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb5a:	d029      	beq.n	800bbb0 <_dtoa_r+0xa58>
 800bb5c:	9b08      	ldr	r3, [sp, #32]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd02      	ble.n	800bb68 <_dtoa_r+0xa10>
 800bb62:	9b02      	ldr	r3, [sp, #8]
 800bb64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb68:	9b00      	ldr	r3, [sp, #0]
 800bb6a:	f883 8000 	strb.w	r8, [r3]
 800bb6e:	e63f      	b.n	800b7f0 <_dtoa_r+0x698>
 800bb70:	4628      	mov	r0, r5
 800bb72:	e7bb      	b.n	800baec <_dtoa_r+0x994>
 800bb74:	2201      	movs	r2, #1
 800bb76:	e7e1      	b.n	800bb3c <_dtoa_r+0x9e4>
 800bb78:	9b08      	ldr	r3, [sp, #32]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	db04      	blt.n	800bb88 <_dtoa_r+0xa30>
 800bb7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb80:	430b      	orrs	r3, r1
 800bb82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb84:	430b      	orrs	r3, r1
 800bb86:	d120      	bne.n	800bbca <_dtoa_r+0xa72>
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	dded      	ble.n	800bb68 <_dtoa_r+0xa10>
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4658      	mov	r0, fp
 800bb92:	f000 fbfd 	bl	800c390 <__lshift>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4681      	mov	r9, r0
 800bb9a:	f000 fc65 	bl	800c468 <__mcmp>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	dc03      	bgt.n	800bbaa <_dtoa_r+0xa52>
 800bba2:	d1e1      	bne.n	800bb68 <_dtoa_r+0xa10>
 800bba4:	f018 0f01 	tst.w	r8, #1
 800bba8:	d0de      	beq.n	800bb68 <_dtoa_r+0xa10>
 800bbaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbae:	d1d8      	bne.n	800bb62 <_dtoa_r+0xa0a>
 800bbb0:	9a00      	ldr	r2, [sp, #0]
 800bbb2:	2339      	movs	r3, #57	@ 0x39
 800bbb4:	7013      	strb	r3, [r2, #0]
 800bbb6:	4633      	mov	r3, r6
 800bbb8:	461e      	mov	r6, r3
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbc0:	2a39      	cmp	r2, #57	@ 0x39
 800bbc2:	d052      	beq.n	800bc6a <_dtoa_r+0xb12>
 800bbc4:	3201      	adds	r2, #1
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e612      	b.n	800b7f0 <_dtoa_r+0x698>
 800bbca:	2a00      	cmp	r2, #0
 800bbcc:	dd07      	ble.n	800bbde <_dtoa_r+0xa86>
 800bbce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbd2:	d0ed      	beq.n	800bbb0 <_dtoa_r+0xa58>
 800bbd4:	9a00      	ldr	r2, [sp, #0]
 800bbd6:	f108 0301 	add.w	r3, r8, #1
 800bbda:	7013      	strb	r3, [r2, #0]
 800bbdc:	e608      	b.n	800b7f0 <_dtoa_r+0x698>
 800bbde:	9b07      	ldr	r3, [sp, #28]
 800bbe0:	9a07      	ldr	r2, [sp, #28]
 800bbe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bbe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d028      	beq.n	800bc3e <_dtoa_r+0xae6>
 800bbec:	4649      	mov	r1, r9
 800bbee:	2300      	movs	r3, #0
 800bbf0:	220a      	movs	r2, #10
 800bbf2:	4658      	mov	r0, fp
 800bbf4:	f000 f9d6 	bl	800bfa4 <__multadd>
 800bbf8:	42af      	cmp	r7, r5
 800bbfa:	4681      	mov	r9, r0
 800bbfc:	f04f 0300 	mov.w	r3, #0
 800bc00:	f04f 020a 	mov.w	r2, #10
 800bc04:	4639      	mov	r1, r7
 800bc06:	4658      	mov	r0, fp
 800bc08:	d107      	bne.n	800bc1a <_dtoa_r+0xac2>
 800bc0a:	f000 f9cb 	bl	800bfa4 <__multadd>
 800bc0e:	4607      	mov	r7, r0
 800bc10:	4605      	mov	r5, r0
 800bc12:	9b07      	ldr	r3, [sp, #28]
 800bc14:	3301      	adds	r3, #1
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	e774      	b.n	800bb04 <_dtoa_r+0x9ac>
 800bc1a:	f000 f9c3 	bl	800bfa4 <__multadd>
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4607      	mov	r7, r0
 800bc22:	2300      	movs	r3, #0
 800bc24:	220a      	movs	r2, #10
 800bc26:	4658      	mov	r0, fp
 800bc28:	f000 f9bc 	bl	800bfa4 <__multadd>
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	e7f0      	b.n	800bc12 <_dtoa_r+0xaba>
 800bc30:	9b00      	ldr	r3, [sp, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfcc      	ite	gt
 800bc36:	461e      	movgt	r6, r3
 800bc38:	2601      	movle	r6, #1
 800bc3a:	4456      	add	r6, sl
 800bc3c:	2700      	movs	r7, #0
 800bc3e:	4649      	mov	r1, r9
 800bc40:	2201      	movs	r2, #1
 800bc42:	4658      	mov	r0, fp
 800bc44:	f000 fba4 	bl	800c390 <__lshift>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4681      	mov	r9, r0
 800bc4c:	f000 fc0c 	bl	800c468 <__mcmp>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	dcb0      	bgt.n	800bbb6 <_dtoa_r+0xa5e>
 800bc54:	d102      	bne.n	800bc5c <_dtoa_r+0xb04>
 800bc56:	f018 0f01 	tst.w	r8, #1
 800bc5a:	d1ac      	bne.n	800bbb6 <_dtoa_r+0xa5e>
 800bc5c:	4633      	mov	r3, r6
 800bc5e:	461e      	mov	r6, r3
 800bc60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc64:	2a30      	cmp	r2, #48	@ 0x30
 800bc66:	d0fa      	beq.n	800bc5e <_dtoa_r+0xb06>
 800bc68:	e5c2      	b.n	800b7f0 <_dtoa_r+0x698>
 800bc6a:	459a      	cmp	sl, r3
 800bc6c:	d1a4      	bne.n	800bbb8 <_dtoa_r+0xa60>
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	3301      	adds	r3, #1
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	2331      	movs	r3, #49	@ 0x31
 800bc76:	f88a 3000 	strb.w	r3, [sl]
 800bc7a:	e5b9      	b.n	800b7f0 <_dtoa_r+0x698>
 800bc7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bcdc <_dtoa_r+0xb84>
 800bc82:	b11b      	cbz	r3, 800bc8c <_dtoa_r+0xb34>
 800bc84:	f10a 0308 	add.w	r3, sl, #8
 800bc88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	4650      	mov	r0, sl
 800bc8e:	b019      	add	sp, #100	@ 0x64
 800bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	f77f ae37 	ble.w	800b90a <_dtoa_r+0x7b2>
 800bc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca0:	2001      	movs	r0, #1
 800bca2:	e655      	b.n	800b950 <_dtoa_r+0x7f8>
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f77f aed6 	ble.w	800ba58 <_dtoa_r+0x900>
 800bcac:	4656      	mov	r6, sl
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f7ff f9c7 	bl	800b044 <quorem>
 800bcb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcba:	f806 8b01 	strb.w	r8, [r6], #1
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	eba6 020a 	sub.w	r2, r6, sl
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	ddb3      	ble.n	800bc30 <_dtoa_r+0xad8>
 800bcc8:	4649      	mov	r1, r9
 800bcca:	2300      	movs	r3, #0
 800bccc:	220a      	movs	r2, #10
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f000 f968 	bl	800bfa4 <__multadd>
 800bcd4:	4681      	mov	r9, r0
 800bcd6:	e7ea      	b.n	800bcae <_dtoa_r+0xb56>
 800bcd8:	0800e808 	.word	0x0800e808
 800bcdc:	0800e78c 	.word	0x0800e78c

0800bce0 <_free_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4605      	mov	r5, r0
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d041      	beq.n	800bd6c <_free_r+0x8c>
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f0c      	subs	r4, r1, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	18e4      	addlt	r4, r4, r3
 800bcf4:	f000 f8e8 	bl	800bec8 <__malloc_lock>
 800bcf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd70 <_free_r+0x90>)
 800bcfa:	6813      	ldr	r3, [r2, #0]
 800bcfc:	b933      	cbnz	r3, 800bd0c <_free_r+0x2c>
 800bcfe:	6063      	str	r3, [r4, #4]
 800bd00:	6014      	str	r4, [r2, #0]
 800bd02:	4628      	mov	r0, r5
 800bd04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd08:	f000 b8e4 	b.w	800bed4 <__malloc_unlock>
 800bd0c:	42a3      	cmp	r3, r4
 800bd0e:	d908      	bls.n	800bd22 <_free_r+0x42>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	1821      	adds	r1, r4, r0
 800bd14:	428b      	cmp	r3, r1
 800bd16:	bf01      	itttt	eq
 800bd18:	6819      	ldreq	r1, [r3, #0]
 800bd1a:	685b      	ldreq	r3, [r3, #4]
 800bd1c:	1809      	addeq	r1, r1, r0
 800bd1e:	6021      	streq	r1, [r4, #0]
 800bd20:	e7ed      	b.n	800bcfe <_free_r+0x1e>
 800bd22:	461a      	mov	r2, r3
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	b10b      	cbz	r3, 800bd2c <_free_r+0x4c>
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	d9fa      	bls.n	800bd22 <_free_r+0x42>
 800bd2c:	6811      	ldr	r1, [r2, #0]
 800bd2e:	1850      	adds	r0, r2, r1
 800bd30:	42a0      	cmp	r0, r4
 800bd32:	d10b      	bne.n	800bd4c <_free_r+0x6c>
 800bd34:	6820      	ldr	r0, [r4, #0]
 800bd36:	4401      	add	r1, r0
 800bd38:	1850      	adds	r0, r2, r1
 800bd3a:	4283      	cmp	r3, r0
 800bd3c:	6011      	str	r1, [r2, #0]
 800bd3e:	d1e0      	bne.n	800bd02 <_free_r+0x22>
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	6053      	str	r3, [r2, #4]
 800bd46:	4408      	add	r0, r1
 800bd48:	6010      	str	r0, [r2, #0]
 800bd4a:	e7da      	b.n	800bd02 <_free_r+0x22>
 800bd4c:	d902      	bls.n	800bd54 <_free_r+0x74>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	602b      	str	r3, [r5, #0]
 800bd52:	e7d6      	b.n	800bd02 <_free_r+0x22>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	1821      	adds	r1, r4, r0
 800bd58:	428b      	cmp	r3, r1
 800bd5a:	bf04      	itt	eq
 800bd5c:	6819      	ldreq	r1, [r3, #0]
 800bd5e:	685b      	ldreq	r3, [r3, #4]
 800bd60:	6063      	str	r3, [r4, #4]
 800bd62:	bf04      	itt	eq
 800bd64:	1809      	addeq	r1, r1, r0
 800bd66:	6021      	streq	r1, [r4, #0]
 800bd68:	6054      	str	r4, [r2, #4]
 800bd6a:	e7ca      	b.n	800bd02 <_free_r+0x22>
 800bd6c:	bd38      	pop	{r3, r4, r5, pc}
 800bd6e:	bf00      	nop
 800bd70:	200020f0 	.word	0x200020f0

0800bd74 <malloc>:
 800bd74:	4b02      	ldr	r3, [pc, #8]	@ (800bd80 <malloc+0xc>)
 800bd76:	4601      	mov	r1, r0
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	f000 b825 	b.w	800bdc8 <_malloc_r>
 800bd7e:	bf00      	nop
 800bd80:	2000001c 	.word	0x2000001c

0800bd84 <sbrk_aligned>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	4e0f      	ldr	r6, [pc, #60]	@ (800bdc4 <sbrk_aligned+0x40>)
 800bd88:	460c      	mov	r4, r1
 800bd8a:	6831      	ldr	r1, [r6, #0]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	b911      	cbnz	r1, 800bd96 <sbrk_aligned+0x12>
 800bd90:	f001 ffd2 	bl	800dd38 <_sbrk_r>
 800bd94:	6030      	str	r0, [r6, #0]
 800bd96:	4621      	mov	r1, r4
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f001 ffcd 	bl	800dd38 <_sbrk_r>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d103      	bne.n	800bdaa <sbrk_aligned+0x26>
 800bda2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bda6:	4620      	mov	r0, r4
 800bda8:	bd70      	pop	{r4, r5, r6, pc}
 800bdaa:	1cc4      	adds	r4, r0, #3
 800bdac:	f024 0403 	bic.w	r4, r4, #3
 800bdb0:	42a0      	cmp	r0, r4
 800bdb2:	d0f8      	beq.n	800bda6 <sbrk_aligned+0x22>
 800bdb4:	1a21      	subs	r1, r4, r0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f001 ffbe 	bl	800dd38 <_sbrk_r>
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d1f2      	bne.n	800bda6 <sbrk_aligned+0x22>
 800bdc0:	e7ef      	b.n	800bda2 <sbrk_aligned+0x1e>
 800bdc2:	bf00      	nop
 800bdc4:	200020ec 	.word	0x200020ec

0800bdc8 <_malloc_r>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	1ccd      	adds	r5, r1, #3
 800bdce:	f025 0503 	bic.w	r5, r5, #3
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	2d0c      	cmp	r5, #12
 800bdd6:	bf38      	it	cc
 800bdd8:	250c      	movcc	r5, #12
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	4606      	mov	r6, r0
 800bdde:	db01      	blt.n	800bde4 <_malloc_r+0x1c>
 800bde0:	42a9      	cmp	r1, r5
 800bde2:	d904      	bls.n	800bdee <_malloc_r+0x26>
 800bde4:	230c      	movs	r3, #12
 800bde6:	6033      	str	r3, [r6, #0]
 800bde8:	2000      	movs	r0, #0
 800bdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bec4 <_malloc_r+0xfc>
 800bdf2:	f000 f869 	bl	800bec8 <__malloc_lock>
 800bdf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdfa:	461c      	mov	r4, r3
 800bdfc:	bb44      	cbnz	r4, 800be50 <_malloc_r+0x88>
 800bdfe:	4629      	mov	r1, r5
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff ffbf 	bl	800bd84 <sbrk_aligned>
 800be06:	1c43      	adds	r3, r0, #1
 800be08:	4604      	mov	r4, r0
 800be0a:	d158      	bne.n	800bebe <_malloc_r+0xf6>
 800be0c:	f8d8 4000 	ldr.w	r4, [r8]
 800be10:	4627      	mov	r7, r4
 800be12:	2f00      	cmp	r7, #0
 800be14:	d143      	bne.n	800be9e <_malloc_r+0xd6>
 800be16:	2c00      	cmp	r4, #0
 800be18:	d04b      	beq.n	800beb2 <_malloc_r+0xea>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	4639      	mov	r1, r7
 800be1e:	4630      	mov	r0, r6
 800be20:	eb04 0903 	add.w	r9, r4, r3
 800be24:	f001 ff88 	bl	800dd38 <_sbrk_r>
 800be28:	4581      	cmp	r9, r0
 800be2a:	d142      	bne.n	800beb2 <_malloc_r+0xea>
 800be2c:	6821      	ldr	r1, [r4, #0]
 800be2e:	1a6d      	subs	r5, r5, r1
 800be30:	4629      	mov	r1, r5
 800be32:	4630      	mov	r0, r6
 800be34:	f7ff ffa6 	bl	800bd84 <sbrk_aligned>
 800be38:	3001      	adds	r0, #1
 800be3a:	d03a      	beq.n	800beb2 <_malloc_r+0xea>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	442b      	add	r3, r5
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	f8d8 3000 	ldr.w	r3, [r8]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	bb62      	cbnz	r2, 800bea4 <_malloc_r+0xdc>
 800be4a:	f8c8 7000 	str.w	r7, [r8]
 800be4e:	e00f      	b.n	800be70 <_malloc_r+0xa8>
 800be50:	6822      	ldr	r2, [r4, #0]
 800be52:	1b52      	subs	r2, r2, r5
 800be54:	d420      	bmi.n	800be98 <_malloc_r+0xd0>
 800be56:	2a0b      	cmp	r2, #11
 800be58:	d917      	bls.n	800be8a <_malloc_r+0xc2>
 800be5a:	1961      	adds	r1, r4, r5
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	6025      	str	r5, [r4, #0]
 800be60:	bf18      	it	ne
 800be62:	6059      	strne	r1, [r3, #4]
 800be64:	6863      	ldr	r3, [r4, #4]
 800be66:	bf08      	it	eq
 800be68:	f8c8 1000 	streq.w	r1, [r8]
 800be6c:	5162      	str	r2, [r4, r5]
 800be6e:	604b      	str	r3, [r1, #4]
 800be70:	4630      	mov	r0, r6
 800be72:	f000 f82f 	bl	800bed4 <__malloc_unlock>
 800be76:	f104 000b 	add.w	r0, r4, #11
 800be7a:	1d23      	adds	r3, r4, #4
 800be7c:	f020 0007 	bic.w	r0, r0, #7
 800be80:	1ac2      	subs	r2, r0, r3
 800be82:	bf1c      	itt	ne
 800be84:	1a1b      	subne	r3, r3, r0
 800be86:	50a3      	strne	r3, [r4, r2]
 800be88:	e7af      	b.n	800bdea <_malloc_r+0x22>
 800be8a:	6862      	ldr	r2, [r4, #4]
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	bf0c      	ite	eq
 800be90:	f8c8 2000 	streq.w	r2, [r8]
 800be94:	605a      	strne	r2, [r3, #4]
 800be96:	e7eb      	b.n	800be70 <_malloc_r+0xa8>
 800be98:	4623      	mov	r3, r4
 800be9a:	6864      	ldr	r4, [r4, #4]
 800be9c:	e7ae      	b.n	800bdfc <_malloc_r+0x34>
 800be9e:	463c      	mov	r4, r7
 800bea0:	687f      	ldr	r7, [r7, #4]
 800bea2:	e7b6      	b.n	800be12 <_malloc_r+0x4a>
 800bea4:	461a      	mov	r2, r3
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	d1fb      	bne.n	800bea4 <_malloc_r+0xdc>
 800beac:	2300      	movs	r3, #0
 800beae:	6053      	str	r3, [r2, #4]
 800beb0:	e7de      	b.n	800be70 <_malloc_r+0xa8>
 800beb2:	230c      	movs	r3, #12
 800beb4:	6033      	str	r3, [r6, #0]
 800beb6:	4630      	mov	r0, r6
 800beb8:	f000 f80c 	bl	800bed4 <__malloc_unlock>
 800bebc:	e794      	b.n	800bde8 <_malloc_r+0x20>
 800bebe:	6005      	str	r5, [r0, #0]
 800bec0:	e7d6      	b.n	800be70 <_malloc_r+0xa8>
 800bec2:	bf00      	nop
 800bec4:	200020f0 	.word	0x200020f0

0800bec8 <__malloc_lock>:
 800bec8:	4801      	ldr	r0, [pc, #4]	@ (800bed0 <__malloc_lock+0x8>)
 800beca:	f7ff b8a4 	b.w	800b016 <__retarget_lock_acquire_recursive>
 800bece:	bf00      	nop
 800bed0:	200020e8 	.word	0x200020e8

0800bed4 <__malloc_unlock>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__malloc_unlock+0x8>)
 800bed6:	f7ff b89f 	b.w	800b018 <__retarget_lock_release_recursive>
 800beda:	bf00      	nop
 800bedc:	200020e8 	.word	0x200020e8

0800bee0 <_Balloc>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	69c6      	ldr	r6, [r0, #28]
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	b976      	cbnz	r6, 800bf08 <_Balloc+0x28>
 800beea:	2010      	movs	r0, #16
 800beec:	f7ff ff42 	bl	800bd74 <malloc>
 800bef0:	4602      	mov	r2, r0
 800bef2:	61e0      	str	r0, [r4, #28]
 800bef4:	b920      	cbnz	r0, 800bf00 <_Balloc+0x20>
 800bef6:	4b18      	ldr	r3, [pc, #96]	@ (800bf58 <_Balloc+0x78>)
 800bef8:	4818      	ldr	r0, [pc, #96]	@ (800bf5c <_Balloc+0x7c>)
 800befa:	216b      	movs	r1, #107	@ 0x6b
 800befc:	f001 ff34 	bl	800dd68 <__assert_func>
 800bf00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf04:	6006      	str	r6, [r0, #0]
 800bf06:	60c6      	str	r6, [r0, #12]
 800bf08:	69e6      	ldr	r6, [r4, #28]
 800bf0a:	68f3      	ldr	r3, [r6, #12]
 800bf0c:	b183      	cbz	r3, 800bf30 <_Balloc+0x50>
 800bf0e:	69e3      	ldr	r3, [r4, #28]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf16:	b9b8      	cbnz	r0, 800bf48 <_Balloc+0x68>
 800bf18:	2101      	movs	r1, #1
 800bf1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf1e:	1d72      	adds	r2, r6, #5
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	4620      	mov	r0, r4
 800bf24:	f001 ff3e 	bl	800dda4 <_calloc_r>
 800bf28:	b160      	cbz	r0, 800bf44 <_Balloc+0x64>
 800bf2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf2e:	e00e      	b.n	800bf4e <_Balloc+0x6e>
 800bf30:	2221      	movs	r2, #33	@ 0x21
 800bf32:	2104      	movs	r1, #4
 800bf34:	4620      	mov	r0, r4
 800bf36:	f001 ff35 	bl	800dda4 <_calloc_r>
 800bf3a:	69e3      	ldr	r3, [r4, #28]
 800bf3c:	60f0      	str	r0, [r6, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e4      	bne.n	800bf0e <_Balloc+0x2e>
 800bf44:	2000      	movs	r0, #0
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	6802      	ldr	r2, [r0, #0]
 800bf4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf54:	e7f7      	b.n	800bf46 <_Balloc+0x66>
 800bf56:	bf00      	nop
 800bf58:	0800e799 	.word	0x0800e799
 800bf5c:	0800e819 	.word	0x0800e819

0800bf60 <_Bfree>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	69c6      	ldr	r6, [r0, #28]
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b976      	cbnz	r6, 800bf88 <_Bfree+0x28>
 800bf6a:	2010      	movs	r0, #16
 800bf6c:	f7ff ff02 	bl	800bd74 <malloc>
 800bf70:	4602      	mov	r2, r0
 800bf72:	61e8      	str	r0, [r5, #28]
 800bf74:	b920      	cbnz	r0, 800bf80 <_Bfree+0x20>
 800bf76:	4b09      	ldr	r3, [pc, #36]	@ (800bf9c <_Bfree+0x3c>)
 800bf78:	4809      	ldr	r0, [pc, #36]	@ (800bfa0 <_Bfree+0x40>)
 800bf7a:	218f      	movs	r1, #143	@ 0x8f
 800bf7c:	f001 fef4 	bl	800dd68 <__assert_func>
 800bf80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf84:	6006      	str	r6, [r0, #0]
 800bf86:	60c6      	str	r6, [r0, #12]
 800bf88:	b13c      	cbz	r4, 800bf9a <_Bfree+0x3a>
 800bf8a:	69eb      	ldr	r3, [r5, #28]
 800bf8c:	6862      	ldr	r2, [r4, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf94:	6021      	str	r1, [r4, #0]
 800bf96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	0800e799 	.word	0x0800e799
 800bfa0:	0800e819 	.word	0x0800e819

0800bfa4 <__multadd>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	690d      	ldr	r5, [r1, #16]
 800bfaa:	4607      	mov	r7, r0
 800bfac:	460c      	mov	r4, r1
 800bfae:	461e      	mov	r6, r3
 800bfb0:	f101 0c14 	add.w	ip, r1, #20
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfba:	b299      	uxth	r1, r3
 800bfbc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfc0:	0c1e      	lsrs	r6, r3, #16
 800bfc2:	0c0b      	lsrs	r3, r1, #16
 800bfc4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfc8:	b289      	uxth	r1, r1
 800bfca:	3001      	adds	r0, #1
 800bfcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfd0:	4285      	cmp	r5, r0
 800bfd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfda:	dcec      	bgt.n	800bfb6 <__multadd+0x12>
 800bfdc:	b30e      	cbz	r6, 800c022 <__multadd+0x7e>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	42ab      	cmp	r3, r5
 800bfe2:	dc19      	bgt.n	800c018 <__multadd+0x74>
 800bfe4:	6861      	ldr	r1, [r4, #4]
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	3101      	adds	r1, #1
 800bfea:	f7ff ff79 	bl	800bee0 <_Balloc>
 800bfee:	4680      	mov	r8, r0
 800bff0:	b928      	cbnz	r0, 800bffe <__multadd+0x5a>
 800bff2:	4602      	mov	r2, r0
 800bff4:	4b0c      	ldr	r3, [pc, #48]	@ (800c028 <__multadd+0x84>)
 800bff6:	480d      	ldr	r0, [pc, #52]	@ (800c02c <__multadd+0x88>)
 800bff8:	21ba      	movs	r1, #186	@ 0xba
 800bffa:	f001 feb5 	bl	800dd68 <__assert_func>
 800bffe:	6922      	ldr	r2, [r4, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	300c      	adds	r0, #12
 800c00a:	f7ff f806 	bl	800b01a <memcpy>
 800c00e:	4621      	mov	r1, r4
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff ffa5 	bl	800bf60 <_Bfree>
 800c016:	4644      	mov	r4, r8
 800c018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c01c:	3501      	adds	r5, #1
 800c01e:	615e      	str	r6, [r3, #20]
 800c020:	6125      	str	r5, [r4, #16]
 800c022:	4620      	mov	r0, r4
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	0800e808 	.word	0x0800e808
 800c02c:	0800e819 	.word	0x0800e819

0800c030 <__s2b>:
 800c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c034:	460c      	mov	r4, r1
 800c036:	4615      	mov	r5, r2
 800c038:	461f      	mov	r7, r3
 800c03a:	2209      	movs	r2, #9
 800c03c:	3308      	adds	r3, #8
 800c03e:	4606      	mov	r6, r0
 800c040:	fb93 f3f2 	sdiv	r3, r3, r2
 800c044:	2100      	movs	r1, #0
 800c046:	2201      	movs	r2, #1
 800c048:	429a      	cmp	r2, r3
 800c04a:	db09      	blt.n	800c060 <__s2b+0x30>
 800c04c:	4630      	mov	r0, r6
 800c04e:	f7ff ff47 	bl	800bee0 <_Balloc>
 800c052:	b940      	cbnz	r0, 800c066 <__s2b+0x36>
 800c054:	4602      	mov	r2, r0
 800c056:	4b19      	ldr	r3, [pc, #100]	@ (800c0bc <__s2b+0x8c>)
 800c058:	4819      	ldr	r0, [pc, #100]	@ (800c0c0 <__s2b+0x90>)
 800c05a:	21d3      	movs	r1, #211	@ 0xd3
 800c05c:	f001 fe84 	bl	800dd68 <__assert_func>
 800c060:	0052      	lsls	r2, r2, #1
 800c062:	3101      	adds	r1, #1
 800c064:	e7f0      	b.n	800c048 <__s2b+0x18>
 800c066:	9b08      	ldr	r3, [sp, #32]
 800c068:	6143      	str	r3, [r0, #20]
 800c06a:	2d09      	cmp	r5, #9
 800c06c:	f04f 0301 	mov.w	r3, #1
 800c070:	6103      	str	r3, [r0, #16]
 800c072:	dd16      	ble.n	800c0a2 <__s2b+0x72>
 800c074:	f104 0909 	add.w	r9, r4, #9
 800c078:	46c8      	mov	r8, r9
 800c07a:	442c      	add	r4, r5
 800c07c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c080:	4601      	mov	r1, r0
 800c082:	3b30      	subs	r3, #48	@ 0x30
 800c084:	220a      	movs	r2, #10
 800c086:	4630      	mov	r0, r6
 800c088:	f7ff ff8c 	bl	800bfa4 <__multadd>
 800c08c:	45a0      	cmp	r8, r4
 800c08e:	d1f5      	bne.n	800c07c <__s2b+0x4c>
 800c090:	f1a5 0408 	sub.w	r4, r5, #8
 800c094:	444c      	add	r4, r9
 800c096:	1b2d      	subs	r5, r5, r4
 800c098:	1963      	adds	r3, r4, r5
 800c09a:	42bb      	cmp	r3, r7
 800c09c:	db04      	blt.n	800c0a8 <__s2b+0x78>
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	340a      	adds	r4, #10
 800c0a4:	2509      	movs	r5, #9
 800c0a6:	e7f6      	b.n	800c096 <__s2b+0x66>
 800c0a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	3b30      	subs	r3, #48	@ 0x30
 800c0b0:	220a      	movs	r2, #10
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7ff ff76 	bl	800bfa4 <__multadd>
 800c0b8:	e7ee      	b.n	800c098 <__s2b+0x68>
 800c0ba:	bf00      	nop
 800c0bc:	0800e808 	.word	0x0800e808
 800c0c0:	0800e819 	.word	0x0800e819

0800c0c4 <__hi0bits>:
 800c0c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	bf36      	itet	cc
 800c0cc:	0403      	lslcc	r3, r0, #16
 800c0ce:	2000      	movcs	r0, #0
 800c0d0:	2010      	movcc	r0, #16
 800c0d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0d6:	bf3c      	itt	cc
 800c0d8:	021b      	lslcc	r3, r3, #8
 800c0da:	3008      	addcc	r0, #8
 800c0dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0e0:	bf3c      	itt	cc
 800c0e2:	011b      	lslcc	r3, r3, #4
 800c0e4:	3004      	addcc	r0, #4
 800c0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ea:	bf3c      	itt	cc
 800c0ec:	009b      	lslcc	r3, r3, #2
 800c0ee:	3002      	addcc	r0, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db05      	blt.n	800c100 <__hi0bits+0x3c>
 800c0f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0f8:	f100 0001 	add.w	r0, r0, #1
 800c0fc:	bf08      	it	eq
 800c0fe:	2020      	moveq	r0, #32
 800c100:	4770      	bx	lr

0800c102 <__lo0bits>:
 800c102:	6803      	ldr	r3, [r0, #0]
 800c104:	4602      	mov	r2, r0
 800c106:	f013 0007 	ands.w	r0, r3, #7
 800c10a:	d00b      	beq.n	800c124 <__lo0bits+0x22>
 800c10c:	07d9      	lsls	r1, r3, #31
 800c10e:	d421      	bmi.n	800c154 <__lo0bits+0x52>
 800c110:	0798      	lsls	r0, r3, #30
 800c112:	bf49      	itett	mi
 800c114:	085b      	lsrmi	r3, r3, #1
 800c116:	089b      	lsrpl	r3, r3, #2
 800c118:	2001      	movmi	r0, #1
 800c11a:	6013      	strmi	r3, [r2, #0]
 800c11c:	bf5c      	itt	pl
 800c11e:	6013      	strpl	r3, [r2, #0]
 800c120:	2002      	movpl	r0, #2
 800c122:	4770      	bx	lr
 800c124:	b299      	uxth	r1, r3
 800c126:	b909      	cbnz	r1, 800c12c <__lo0bits+0x2a>
 800c128:	0c1b      	lsrs	r3, r3, #16
 800c12a:	2010      	movs	r0, #16
 800c12c:	b2d9      	uxtb	r1, r3
 800c12e:	b909      	cbnz	r1, 800c134 <__lo0bits+0x32>
 800c130:	3008      	adds	r0, #8
 800c132:	0a1b      	lsrs	r3, r3, #8
 800c134:	0719      	lsls	r1, r3, #28
 800c136:	bf04      	itt	eq
 800c138:	091b      	lsreq	r3, r3, #4
 800c13a:	3004      	addeq	r0, #4
 800c13c:	0799      	lsls	r1, r3, #30
 800c13e:	bf04      	itt	eq
 800c140:	089b      	lsreq	r3, r3, #2
 800c142:	3002      	addeq	r0, #2
 800c144:	07d9      	lsls	r1, r3, #31
 800c146:	d403      	bmi.n	800c150 <__lo0bits+0x4e>
 800c148:	085b      	lsrs	r3, r3, #1
 800c14a:	f100 0001 	add.w	r0, r0, #1
 800c14e:	d003      	beq.n	800c158 <__lo0bits+0x56>
 800c150:	6013      	str	r3, [r2, #0]
 800c152:	4770      	bx	lr
 800c154:	2000      	movs	r0, #0
 800c156:	4770      	bx	lr
 800c158:	2020      	movs	r0, #32
 800c15a:	4770      	bx	lr

0800c15c <__i2b>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	460c      	mov	r4, r1
 800c160:	2101      	movs	r1, #1
 800c162:	f7ff febd 	bl	800bee0 <_Balloc>
 800c166:	4602      	mov	r2, r0
 800c168:	b928      	cbnz	r0, 800c176 <__i2b+0x1a>
 800c16a:	4b05      	ldr	r3, [pc, #20]	@ (800c180 <__i2b+0x24>)
 800c16c:	4805      	ldr	r0, [pc, #20]	@ (800c184 <__i2b+0x28>)
 800c16e:	f240 1145 	movw	r1, #325	@ 0x145
 800c172:	f001 fdf9 	bl	800dd68 <__assert_func>
 800c176:	2301      	movs	r3, #1
 800c178:	6144      	str	r4, [r0, #20]
 800c17a:	6103      	str	r3, [r0, #16]
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	bf00      	nop
 800c180:	0800e808 	.word	0x0800e808
 800c184:	0800e819 	.word	0x0800e819

0800c188 <__multiply>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	4614      	mov	r4, r2
 800c18e:	690a      	ldr	r2, [r1, #16]
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	429a      	cmp	r2, r3
 800c194:	bfa8      	it	ge
 800c196:	4623      	movge	r3, r4
 800c198:	460f      	mov	r7, r1
 800c19a:	bfa4      	itt	ge
 800c19c:	460c      	movge	r4, r1
 800c19e:	461f      	movge	r7, r3
 800c1a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c1a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	6861      	ldr	r1, [r4, #4]
 800c1ac:	eb0a 0609 	add.w	r6, sl, r9
 800c1b0:	42b3      	cmp	r3, r6
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	bfb8      	it	lt
 800c1b6:	3101      	addlt	r1, #1
 800c1b8:	f7ff fe92 	bl	800bee0 <_Balloc>
 800c1bc:	b930      	cbnz	r0, 800c1cc <__multiply+0x44>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	4b44      	ldr	r3, [pc, #272]	@ (800c2d4 <__multiply+0x14c>)
 800c1c2:	4845      	ldr	r0, [pc, #276]	@ (800c2d8 <__multiply+0x150>)
 800c1c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1c8:	f001 fdce 	bl	800dd68 <__assert_func>
 800c1cc:	f100 0514 	add.w	r5, r0, #20
 800c1d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4543      	cmp	r3, r8
 800c1da:	d321      	bcc.n	800c220 <__multiply+0x98>
 800c1dc:	f107 0114 	add.w	r1, r7, #20
 800c1e0:	f104 0214 	add.w	r2, r4, #20
 800c1e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1ec:	9302      	str	r3, [sp, #8]
 800c1ee:	1b13      	subs	r3, r2, r4
 800c1f0:	3b15      	subs	r3, #21
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	f104 0715 	add.w	r7, r4, #21
 800c1fc:	42ba      	cmp	r2, r7
 800c1fe:	bf38      	it	cc
 800c200:	2304      	movcc	r3, #4
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	9103      	str	r1, [sp, #12]
 800c208:	428b      	cmp	r3, r1
 800c20a:	d80c      	bhi.n	800c226 <__multiply+0x9e>
 800c20c:	2e00      	cmp	r6, #0
 800c20e:	dd03      	ble.n	800c218 <__multiply+0x90>
 800c210:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c214:	2b00      	cmp	r3, #0
 800c216:	d05b      	beq.n	800c2d0 <__multiply+0x148>
 800c218:	6106      	str	r6, [r0, #16]
 800c21a:	b005      	add	sp, #20
 800c21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c220:	f843 2b04 	str.w	r2, [r3], #4
 800c224:	e7d8      	b.n	800c1d8 <__multiply+0x50>
 800c226:	f8b1 a000 	ldrh.w	sl, [r1]
 800c22a:	f1ba 0f00 	cmp.w	sl, #0
 800c22e:	d024      	beq.n	800c27a <__multiply+0xf2>
 800c230:	f104 0e14 	add.w	lr, r4, #20
 800c234:	46a9      	mov	r9, r5
 800c236:	f04f 0c00 	mov.w	ip, #0
 800c23a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c23e:	f8d9 3000 	ldr.w	r3, [r9]
 800c242:	fa1f fb87 	uxth.w	fp, r7
 800c246:	b29b      	uxth	r3, r3
 800c248:	fb0a 330b 	mla	r3, sl, fp, r3
 800c24c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c250:	f8d9 7000 	ldr.w	r7, [r9]
 800c254:	4463      	add	r3, ip
 800c256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c25a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c25e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c262:	b29b      	uxth	r3, r3
 800c264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c268:	4572      	cmp	r2, lr
 800c26a:	f849 3b04 	str.w	r3, [r9], #4
 800c26e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c272:	d8e2      	bhi.n	800c23a <__multiply+0xb2>
 800c274:	9b01      	ldr	r3, [sp, #4]
 800c276:	f845 c003 	str.w	ip, [r5, r3]
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c280:	3104      	adds	r1, #4
 800c282:	f1b9 0f00 	cmp.w	r9, #0
 800c286:	d021      	beq.n	800c2cc <__multiply+0x144>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	f104 0c14 	add.w	ip, r4, #20
 800c28e:	46ae      	mov	lr, r5
 800c290:	f04f 0a00 	mov.w	sl, #0
 800c294:	f8bc b000 	ldrh.w	fp, [ip]
 800c298:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c29c:	fb09 770b 	mla	r7, r9, fp, r7
 800c2a0:	4457      	add	r7, sl
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2a8:	f84e 3b04 	str.w	r3, [lr], #4
 800c2ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2b4:	f8be 3000 	ldrh.w	r3, [lr]
 800c2b8:	fb09 330a 	mla	r3, r9, sl, r3
 800c2bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2c0:	4562      	cmp	r2, ip
 800c2c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2c6:	d8e5      	bhi.n	800c294 <__multiply+0x10c>
 800c2c8:	9f01      	ldr	r7, [sp, #4]
 800c2ca:	51eb      	str	r3, [r5, r7]
 800c2cc:	3504      	adds	r5, #4
 800c2ce:	e799      	b.n	800c204 <__multiply+0x7c>
 800c2d0:	3e01      	subs	r6, #1
 800c2d2:	e79b      	b.n	800c20c <__multiply+0x84>
 800c2d4:	0800e808 	.word	0x0800e808
 800c2d8:	0800e819 	.word	0x0800e819

0800c2dc <__pow5mult>:
 800c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	4615      	mov	r5, r2
 800c2e2:	f012 0203 	ands.w	r2, r2, #3
 800c2e6:	4607      	mov	r7, r0
 800c2e8:	460e      	mov	r6, r1
 800c2ea:	d007      	beq.n	800c2fc <__pow5mult+0x20>
 800c2ec:	4c25      	ldr	r4, [pc, #148]	@ (800c384 <__pow5mult+0xa8>)
 800c2ee:	3a01      	subs	r2, #1
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2f6:	f7ff fe55 	bl	800bfa4 <__multadd>
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	10ad      	asrs	r5, r5, #2
 800c2fe:	d03d      	beq.n	800c37c <__pow5mult+0xa0>
 800c300:	69fc      	ldr	r4, [r7, #28]
 800c302:	b97c      	cbnz	r4, 800c324 <__pow5mult+0x48>
 800c304:	2010      	movs	r0, #16
 800c306:	f7ff fd35 	bl	800bd74 <malloc>
 800c30a:	4602      	mov	r2, r0
 800c30c:	61f8      	str	r0, [r7, #28]
 800c30e:	b928      	cbnz	r0, 800c31c <__pow5mult+0x40>
 800c310:	4b1d      	ldr	r3, [pc, #116]	@ (800c388 <__pow5mult+0xac>)
 800c312:	481e      	ldr	r0, [pc, #120]	@ (800c38c <__pow5mult+0xb0>)
 800c314:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c318:	f001 fd26 	bl	800dd68 <__assert_func>
 800c31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c320:	6004      	str	r4, [r0, #0]
 800c322:	60c4      	str	r4, [r0, #12]
 800c324:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c32c:	b94c      	cbnz	r4, 800c342 <__pow5mult+0x66>
 800c32e:	f240 2171 	movw	r1, #625	@ 0x271
 800c332:	4638      	mov	r0, r7
 800c334:	f7ff ff12 	bl	800c15c <__i2b>
 800c338:	2300      	movs	r3, #0
 800c33a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c33e:	4604      	mov	r4, r0
 800c340:	6003      	str	r3, [r0, #0]
 800c342:	f04f 0900 	mov.w	r9, #0
 800c346:	07eb      	lsls	r3, r5, #31
 800c348:	d50a      	bpl.n	800c360 <__pow5mult+0x84>
 800c34a:	4631      	mov	r1, r6
 800c34c:	4622      	mov	r2, r4
 800c34e:	4638      	mov	r0, r7
 800c350:	f7ff ff1a 	bl	800c188 <__multiply>
 800c354:	4631      	mov	r1, r6
 800c356:	4680      	mov	r8, r0
 800c358:	4638      	mov	r0, r7
 800c35a:	f7ff fe01 	bl	800bf60 <_Bfree>
 800c35e:	4646      	mov	r6, r8
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	d00b      	beq.n	800c37c <__pow5mult+0xa0>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	b938      	cbnz	r0, 800c378 <__pow5mult+0x9c>
 800c368:	4622      	mov	r2, r4
 800c36a:	4621      	mov	r1, r4
 800c36c:	4638      	mov	r0, r7
 800c36e:	f7ff ff0b 	bl	800c188 <__multiply>
 800c372:	6020      	str	r0, [r4, #0]
 800c374:	f8c0 9000 	str.w	r9, [r0]
 800c378:	4604      	mov	r4, r0
 800c37a:	e7e4      	b.n	800c346 <__pow5mult+0x6a>
 800c37c:	4630      	mov	r0, r6
 800c37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c382:	bf00      	nop
 800c384:	0800e874 	.word	0x0800e874
 800c388:	0800e799 	.word	0x0800e799
 800c38c:	0800e819 	.word	0x0800e819

0800c390 <__lshift>:
 800c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	460c      	mov	r4, r1
 800c396:	6849      	ldr	r1, [r1, #4]
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c39e:	68a3      	ldr	r3, [r4, #8]
 800c3a0:	4607      	mov	r7, r0
 800c3a2:	4691      	mov	r9, r2
 800c3a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3a8:	f108 0601 	add.w	r6, r8, #1
 800c3ac:	42b3      	cmp	r3, r6
 800c3ae:	db0b      	blt.n	800c3c8 <__lshift+0x38>
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7ff fd95 	bl	800bee0 <_Balloc>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b948      	cbnz	r0, 800c3ce <__lshift+0x3e>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	4b28      	ldr	r3, [pc, #160]	@ (800c460 <__lshift+0xd0>)
 800c3be:	4829      	ldr	r0, [pc, #164]	@ (800c464 <__lshift+0xd4>)
 800c3c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3c4:	f001 fcd0 	bl	800dd68 <__assert_func>
 800c3c8:	3101      	adds	r1, #1
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	e7ee      	b.n	800c3ac <__lshift+0x1c>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f100 0114 	add.w	r1, r0, #20
 800c3d4:	f100 0210 	add.w	r2, r0, #16
 800c3d8:	4618      	mov	r0, r3
 800c3da:	4553      	cmp	r3, sl
 800c3dc:	db33      	blt.n	800c446 <__lshift+0xb6>
 800c3de:	6920      	ldr	r0, [r4, #16]
 800c3e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3e4:	f104 0314 	add.w	r3, r4, #20
 800c3e8:	f019 091f 	ands.w	r9, r9, #31
 800c3ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3f4:	d02b      	beq.n	800c44e <__lshift+0xbe>
 800c3f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c3fa:	468a      	mov	sl, r1
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	6818      	ldr	r0, [r3, #0]
 800c400:	fa00 f009 	lsl.w	r0, r0, r9
 800c404:	4310      	orrs	r0, r2
 800c406:	f84a 0b04 	str.w	r0, [sl], #4
 800c40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40e:	459c      	cmp	ip, r3
 800c410:	fa22 f20e 	lsr.w	r2, r2, lr
 800c414:	d8f3      	bhi.n	800c3fe <__lshift+0x6e>
 800c416:	ebac 0304 	sub.w	r3, ip, r4
 800c41a:	3b15      	subs	r3, #21
 800c41c:	f023 0303 	bic.w	r3, r3, #3
 800c420:	3304      	adds	r3, #4
 800c422:	f104 0015 	add.w	r0, r4, #21
 800c426:	4584      	cmp	ip, r0
 800c428:	bf38      	it	cc
 800c42a:	2304      	movcc	r3, #4
 800c42c:	50ca      	str	r2, [r1, r3]
 800c42e:	b10a      	cbz	r2, 800c434 <__lshift+0xa4>
 800c430:	f108 0602 	add.w	r6, r8, #2
 800c434:	3e01      	subs	r6, #1
 800c436:	4638      	mov	r0, r7
 800c438:	612e      	str	r6, [r5, #16]
 800c43a:	4621      	mov	r1, r4
 800c43c:	f7ff fd90 	bl	800bf60 <_Bfree>
 800c440:	4628      	mov	r0, r5
 800c442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c446:	f842 0f04 	str.w	r0, [r2, #4]!
 800c44a:	3301      	adds	r3, #1
 800c44c:	e7c5      	b.n	800c3da <__lshift+0x4a>
 800c44e:	3904      	subs	r1, #4
 800c450:	f853 2b04 	ldr.w	r2, [r3], #4
 800c454:	f841 2f04 	str.w	r2, [r1, #4]!
 800c458:	459c      	cmp	ip, r3
 800c45a:	d8f9      	bhi.n	800c450 <__lshift+0xc0>
 800c45c:	e7ea      	b.n	800c434 <__lshift+0xa4>
 800c45e:	bf00      	nop
 800c460:	0800e808 	.word	0x0800e808
 800c464:	0800e819 	.word	0x0800e819

0800c468 <__mcmp>:
 800c468:	690a      	ldr	r2, [r1, #16]
 800c46a:	4603      	mov	r3, r0
 800c46c:	6900      	ldr	r0, [r0, #16]
 800c46e:	1a80      	subs	r0, r0, r2
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	d10e      	bne.n	800c492 <__mcmp+0x2a>
 800c474:	3314      	adds	r3, #20
 800c476:	3114      	adds	r1, #20
 800c478:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c47c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c480:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c488:	4295      	cmp	r5, r2
 800c48a:	d003      	beq.n	800c494 <__mcmp+0x2c>
 800c48c:	d205      	bcs.n	800c49a <__mcmp+0x32>
 800c48e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c492:	bd30      	pop	{r4, r5, pc}
 800c494:	42a3      	cmp	r3, r4
 800c496:	d3f3      	bcc.n	800c480 <__mcmp+0x18>
 800c498:	e7fb      	b.n	800c492 <__mcmp+0x2a>
 800c49a:	2001      	movs	r0, #1
 800c49c:	e7f9      	b.n	800c492 <__mcmp+0x2a>
	...

0800c4a0 <__mdiff>:
 800c4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	4689      	mov	r9, r1
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4648      	mov	r0, r9
 800c4ac:	4614      	mov	r4, r2
 800c4ae:	f7ff ffdb 	bl	800c468 <__mcmp>
 800c4b2:	1e05      	subs	r5, r0, #0
 800c4b4:	d112      	bne.n	800c4dc <__mdiff+0x3c>
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f7ff fd11 	bl	800bee0 <_Balloc>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	b928      	cbnz	r0, 800c4ce <__mdiff+0x2e>
 800c4c2:	4b3f      	ldr	r3, [pc, #252]	@ (800c5c0 <__mdiff+0x120>)
 800c4c4:	f240 2137 	movw	r1, #567	@ 0x237
 800c4c8:	483e      	ldr	r0, [pc, #248]	@ (800c5c4 <__mdiff+0x124>)
 800c4ca:	f001 fc4d 	bl	800dd68 <__assert_func>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	b003      	add	sp, #12
 800c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4dc:	bfbc      	itt	lt
 800c4de:	464b      	movlt	r3, r9
 800c4e0:	46a1      	movlt	r9, r4
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4e8:	bfba      	itte	lt
 800c4ea:	461c      	movlt	r4, r3
 800c4ec:	2501      	movlt	r5, #1
 800c4ee:	2500      	movge	r5, #0
 800c4f0:	f7ff fcf6 	bl	800bee0 <_Balloc>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	b918      	cbnz	r0, 800c500 <__mdiff+0x60>
 800c4f8:	4b31      	ldr	r3, [pc, #196]	@ (800c5c0 <__mdiff+0x120>)
 800c4fa:	f240 2145 	movw	r1, #581	@ 0x245
 800c4fe:	e7e3      	b.n	800c4c8 <__mdiff+0x28>
 800c500:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c504:	6926      	ldr	r6, [r4, #16]
 800c506:	60c5      	str	r5, [r0, #12]
 800c508:	f109 0310 	add.w	r3, r9, #16
 800c50c:	f109 0514 	add.w	r5, r9, #20
 800c510:	f104 0e14 	add.w	lr, r4, #20
 800c514:	f100 0b14 	add.w	fp, r0, #20
 800c518:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c51c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	46d9      	mov	r9, fp
 800c524:	f04f 0c00 	mov.w	ip, #0
 800c528:	9b01      	ldr	r3, [sp, #4]
 800c52a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c52e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	fa1f f38a 	uxth.w	r3, sl
 800c538:	4619      	mov	r1, r3
 800c53a:	b283      	uxth	r3, r0
 800c53c:	1acb      	subs	r3, r1, r3
 800c53e:	0c00      	lsrs	r0, r0, #16
 800c540:	4463      	add	r3, ip
 800c542:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c546:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c550:	4576      	cmp	r6, lr
 800c552:	f849 3b04 	str.w	r3, [r9], #4
 800c556:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c55a:	d8e5      	bhi.n	800c528 <__mdiff+0x88>
 800c55c:	1b33      	subs	r3, r6, r4
 800c55e:	3b15      	subs	r3, #21
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	3415      	adds	r4, #21
 800c566:	3304      	adds	r3, #4
 800c568:	42a6      	cmp	r6, r4
 800c56a:	bf38      	it	cc
 800c56c:	2304      	movcc	r3, #4
 800c56e:	441d      	add	r5, r3
 800c570:	445b      	add	r3, fp
 800c572:	461e      	mov	r6, r3
 800c574:	462c      	mov	r4, r5
 800c576:	4544      	cmp	r4, r8
 800c578:	d30e      	bcc.n	800c598 <__mdiff+0xf8>
 800c57a:	f108 0103 	add.w	r1, r8, #3
 800c57e:	1b49      	subs	r1, r1, r5
 800c580:	f021 0103 	bic.w	r1, r1, #3
 800c584:	3d03      	subs	r5, #3
 800c586:	45a8      	cmp	r8, r5
 800c588:	bf38      	it	cc
 800c58a:	2100      	movcc	r1, #0
 800c58c:	440b      	add	r3, r1
 800c58e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c592:	b191      	cbz	r1, 800c5ba <__mdiff+0x11a>
 800c594:	6117      	str	r7, [r2, #16]
 800c596:	e79d      	b.n	800c4d4 <__mdiff+0x34>
 800c598:	f854 1b04 	ldr.w	r1, [r4], #4
 800c59c:	46e6      	mov	lr, ip
 800c59e:	0c08      	lsrs	r0, r1, #16
 800c5a0:	fa1c fc81 	uxtah	ip, ip, r1
 800c5a4:	4471      	add	r1, lr
 800c5a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5aa:	b289      	uxth	r1, r1
 800c5ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5b0:	f846 1b04 	str.w	r1, [r6], #4
 800c5b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5b8:	e7dd      	b.n	800c576 <__mdiff+0xd6>
 800c5ba:	3f01      	subs	r7, #1
 800c5bc:	e7e7      	b.n	800c58e <__mdiff+0xee>
 800c5be:	bf00      	nop
 800c5c0:	0800e808 	.word	0x0800e808
 800c5c4:	0800e819 	.word	0x0800e819

0800c5c8 <__ulp>:
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	ed8d 0b00 	vstr	d0, [sp]
 800c5ce:	9a01      	ldr	r2, [sp, #4]
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c610 <__ulp+0x48>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dc08      	bgt.n	800c5ee <__ulp+0x26>
 800c5dc:	425b      	negs	r3, r3
 800c5de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c5e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5e6:	da04      	bge.n	800c5f2 <__ulp+0x2a>
 800c5e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5ec:	4113      	asrs	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	e008      	b.n	800c604 <__ulp+0x3c>
 800c5f2:	f1a2 0314 	sub.w	r3, r2, #20
 800c5f6:	2b1e      	cmp	r3, #30
 800c5f8:	bfda      	itte	le
 800c5fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c5fe:	40da      	lsrle	r2, r3
 800c600:	2201      	movgt	r2, #1
 800c602:	2300      	movs	r3, #0
 800c604:	4619      	mov	r1, r3
 800c606:	4610      	mov	r0, r2
 800c608:	ec41 0b10 	vmov	d0, r0, r1
 800c60c:	b002      	add	sp, #8
 800c60e:	4770      	bx	lr
 800c610:	7ff00000 	.word	0x7ff00000

0800c614 <__b2d>:
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	6906      	ldr	r6, [r0, #16]
 800c61a:	f100 0814 	add.w	r8, r0, #20
 800c61e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c622:	1f37      	subs	r7, r6, #4
 800c624:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c628:	4610      	mov	r0, r2
 800c62a:	f7ff fd4b 	bl	800c0c4 <__hi0bits>
 800c62e:	f1c0 0320 	rsb	r3, r0, #32
 800c632:	280a      	cmp	r0, #10
 800c634:	600b      	str	r3, [r1, #0]
 800c636:	491b      	ldr	r1, [pc, #108]	@ (800c6a4 <__b2d+0x90>)
 800c638:	dc15      	bgt.n	800c666 <__b2d+0x52>
 800c63a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c63e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c642:	45b8      	cmp	r8, r7
 800c644:	ea43 0501 	orr.w	r5, r3, r1
 800c648:	bf34      	ite	cc
 800c64a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c64e:	2300      	movcs	r3, #0
 800c650:	3015      	adds	r0, #21
 800c652:	fa02 f000 	lsl.w	r0, r2, r0
 800c656:	fa23 f30c 	lsr.w	r3, r3, ip
 800c65a:	4303      	orrs	r3, r0
 800c65c:	461c      	mov	r4, r3
 800c65e:	ec45 4b10 	vmov	d0, r4, r5
 800c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c666:	45b8      	cmp	r8, r7
 800c668:	bf3a      	itte	cc
 800c66a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c66e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c672:	2300      	movcs	r3, #0
 800c674:	380b      	subs	r0, #11
 800c676:	d012      	beq.n	800c69e <__b2d+0x8a>
 800c678:	f1c0 0120 	rsb	r1, r0, #32
 800c67c:	fa23 f401 	lsr.w	r4, r3, r1
 800c680:	4082      	lsls	r2, r0
 800c682:	4322      	orrs	r2, r4
 800c684:	4547      	cmp	r7, r8
 800c686:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c68a:	bf8c      	ite	hi
 800c68c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c690:	2200      	movls	r2, #0
 800c692:	4083      	lsls	r3, r0
 800c694:	40ca      	lsrs	r2, r1
 800c696:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c69a:	4313      	orrs	r3, r2
 800c69c:	e7de      	b.n	800c65c <__b2d+0x48>
 800c69e:	ea42 0501 	orr.w	r5, r2, r1
 800c6a2:	e7db      	b.n	800c65c <__b2d+0x48>
 800c6a4:	3ff00000 	.word	0x3ff00000

0800c6a8 <__d2b>:
 800c6a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	ec59 8b10 	vmov	r8, r9, d0
 800c6b4:	4616      	mov	r6, r2
 800c6b6:	f7ff fc13 	bl	800bee0 <_Balloc>
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	b930      	cbnz	r0, 800c6cc <__d2b+0x24>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	4b23      	ldr	r3, [pc, #140]	@ (800c750 <__d2b+0xa8>)
 800c6c2:	4824      	ldr	r0, [pc, #144]	@ (800c754 <__d2b+0xac>)
 800c6c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6c8:	f001 fb4e 	bl	800dd68 <__assert_func>
 800c6cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6d4:	b10d      	cbz	r5, 800c6da <__d2b+0x32>
 800c6d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	f1b8 0300 	subs.w	r3, r8, #0
 800c6e0:	d023      	beq.n	800c72a <__d2b+0x82>
 800c6e2:	4668      	mov	r0, sp
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	f7ff fd0c 	bl	800c102 <__lo0bits>
 800c6ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6ee:	b1d0      	cbz	r0, 800c726 <__d2b+0x7e>
 800c6f0:	f1c0 0320 	rsb	r3, r0, #32
 800c6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	40c2      	lsrs	r2, r0
 800c6fc:	6163      	str	r3, [r4, #20]
 800c6fe:	9201      	str	r2, [sp, #4]
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	61a3      	str	r3, [r4, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	bf0c      	ite	eq
 800c708:	2201      	moveq	r2, #1
 800c70a:	2202      	movne	r2, #2
 800c70c:	6122      	str	r2, [r4, #16]
 800c70e:	b1a5      	cbz	r5, 800c73a <__d2b+0x92>
 800c710:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c714:	4405      	add	r5, r0
 800c716:	603d      	str	r5, [r7, #0]
 800c718:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c71c:	6030      	str	r0, [r6, #0]
 800c71e:	4620      	mov	r0, r4
 800c720:	b003      	add	sp, #12
 800c722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c726:	6161      	str	r1, [r4, #20]
 800c728:	e7ea      	b.n	800c700 <__d2b+0x58>
 800c72a:	a801      	add	r0, sp, #4
 800c72c:	f7ff fce9 	bl	800c102 <__lo0bits>
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	6163      	str	r3, [r4, #20]
 800c734:	3020      	adds	r0, #32
 800c736:	2201      	movs	r2, #1
 800c738:	e7e8      	b.n	800c70c <__d2b+0x64>
 800c73a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c73e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c742:	6038      	str	r0, [r7, #0]
 800c744:	6918      	ldr	r0, [r3, #16]
 800c746:	f7ff fcbd 	bl	800c0c4 <__hi0bits>
 800c74a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c74e:	e7e5      	b.n	800c71c <__d2b+0x74>
 800c750:	0800e808 	.word	0x0800e808
 800c754:	0800e819 	.word	0x0800e819

0800c758 <__ratio>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	b085      	sub	sp, #20
 800c75e:	e9cd 1000 	strd	r1, r0, [sp]
 800c762:	a902      	add	r1, sp, #8
 800c764:	f7ff ff56 	bl	800c614 <__b2d>
 800c768:	9800      	ldr	r0, [sp, #0]
 800c76a:	a903      	add	r1, sp, #12
 800c76c:	ec55 4b10 	vmov	r4, r5, d0
 800c770:	f7ff ff50 	bl	800c614 <__b2d>
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	6919      	ldr	r1, [r3, #16]
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	691b      	ldr	r3, [r3, #16]
 800c77c:	1ac9      	subs	r1, r1, r3
 800c77e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	ec5b ab10 	vmov	sl, fp, d0
 800c788:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfce      	itee	gt
 800c790:	462a      	movgt	r2, r5
 800c792:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c796:	465a      	movle	r2, fp
 800c798:	462f      	mov	r7, r5
 800c79a:	46d9      	mov	r9, fp
 800c79c:	bfcc      	ite	gt
 800c79e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	4652      	mov	r2, sl
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f4 f84d 	bl	800084c <__aeabi_ddiv>
 800c7b2:	ec41 0b10 	vmov	d0, r0, r1
 800c7b6:	b005      	add	sp, #20
 800c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7bc <__copybits>:
 800c7bc:	3901      	subs	r1, #1
 800c7be:	b570      	push	{r4, r5, r6, lr}
 800c7c0:	1149      	asrs	r1, r1, #5
 800c7c2:	6914      	ldr	r4, [r2, #16]
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	f102 0314 	add.w	r3, r2, #20
 800c7ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7d2:	1f05      	subs	r5, r0, #4
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d30c      	bcc.n	800c7f2 <__copybits+0x36>
 800c7d8:	1aa3      	subs	r3, r4, r2
 800c7da:	3b11      	subs	r3, #17
 800c7dc:	f023 0303 	bic.w	r3, r3, #3
 800c7e0:	3211      	adds	r2, #17
 800c7e2:	42a2      	cmp	r2, r4
 800c7e4:	bf88      	it	hi
 800c7e6:	2300      	movhi	r3, #0
 800c7e8:	4418      	add	r0, r3
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	d305      	bcc.n	800c7fc <__copybits+0x40>
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7fa:	e7eb      	b.n	800c7d4 <__copybits+0x18>
 800c7fc:	f840 3b04 	str.w	r3, [r0], #4
 800c800:	e7f4      	b.n	800c7ec <__copybits+0x30>

0800c802 <__any_on>:
 800c802:	f100 0214 	add.w	r2, r0, #20
 800c806:	6900      	ldr	r0, [r0, #16]
 800c808:	114b      	asrs	r3, r1, #5
 800c80a:	4298      	cmp	r0, r3
 800c80c:	b510      	push	{r4, lr}
 800c80e:	db11      	blt.n	800c834 <__any_on+0x32>
 800c810:	dd0a      	ble.n	800c828 <__any_on+0x26>
 800c812:	f011 011f 	ands.w	r1, r1, #31
 800c816:	d007      	beq.n	800c828 <__any_on+0x26>
 800c818:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c81c:	fa24 f001 	lsr.w	r0, r4, r1
 800c820:	fa00 f101 	lsl.w	r1, r0, r1
 800c824:	428c      	cmp	r4, r1
 800c826:	d10b      	bne.n	800c840 <__any_on+0x3e>
 800c828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d803      	bhi.n	800c838 <__any_on+0x36>
 800c830:	2000      	movs	r0, #0
 800c832:	bd10      	pop	{r4, pc}
 800c834:	4603      	mov	r3, r0
 800c836:	e7f7      	b.n	800c828 <__any_on+0x26>
 800c838:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c83c:	2900      	cmp	r1, #0
 800c83e:	d0f5      	beq.n	800c82c <__any_on+0x2a>
 800c840:	2001      	movs	r0, #1
 800c842:	e7f6      	b.n	800c832 <__any_on+0x30>

0800c844 <sulp>:
 800c844:	b570      	push	{r4, r5, r6, lr}
 800c846:	4604      	mov	r4, r0
 800c848:	460d      	mov	r5, r1
 800c84a:	ec45 4b10 	vmov	d0, r4, r5
 800c84e:	4616      	mov	r6, r2
 800c850:	f7ff feba 	bl	800c5c8 <__ulp>
 800c854:	ec51 0b10 	vmov	r0, r1, d0
 800c858:	b17e      	cbz	r6, 800c87a <sulp+0x36>
 800c85a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c85e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd09      	ble.n	800c87a <sulp+0x36>
 800c866:	051b      	lsls	r3, r3, #20
 800c868:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c86c:	2400      	movs	r4, #0
 800c86e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c872:	4622      	mov	r2, r4
 800c874:	462b      	mov	r3, r5
 800c876:	f7f3 febf 	bl	80005f8 <__aeabi_dmul>
 800c87a:	ec41 0b10 	vmov	d0, r0, r1
 800c87e:	bd70      	pop	{r4, r5, r6, pc}

0800c880 <_strtod_l>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	b09f      	sub	sp, #124	@ 0x7c
 800c886:	460c      	mov	r4, r1
 800c888:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c88a:	2200      	movs	r2, #0
 800c88c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c88e:	9005      	str	r0, [sp, #20]
 800c890:	f04f 0a00 	mov.w	sl, #0
 800c894:	f04f 0b00 	mov.w	fp, #0
 800c898:	460a      	mov	r2, r1
 800c89a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c89c:	7811      	ldrb	r1, [r2, #0]
 800c89e:	292b      	cmp	r1, #43	@ 0x2b
 800c8a0:	d04a      	beq.n	800c938 <_strtod_l+0xb8>
 800c8a2:	d838      	bhi.n	800c916 <_strtod_l+0x96>
 800c8a4:	290d      	cmp	r1, #13
 800c8a6:	d832      	bhi.n	800c90e <_strtod_l+0x8e>
 800c8a8:	2908      	cmp	r1, #8
 800c8aa:	d832      	bhi.n	800c912 <_strtod_l+0x92>
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	d03b      	beq.n	800c928 <_strtod_l+0xa8>
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c8b6:	782a      	ldrb	r2, [r5, #0]
 800c8b8:	2a30      	cmp	r2, #48	@ 0x30
 800c8ba:	f040 80b3 	bne.w	800ca24 <_strtod_l+0x1a4>
 800c8be:	786a      	ldrb	r2, [r5, #1]
 800c8c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8c4:	2a58      	cmp	r2, #88	@ 0x58
 800c8c6:	d16e      	bne.n	800c9a6 <_strtod_l+0x126>
 800c8c8:	9302      	str	r3, [sp, #8]
 800c8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4a8e      	ldr	r2, [pc, #568]	@ (800cb0c <_strtod_l+0x28c>)
 800c8d4:	9805      	ldr	r0, [sp, #20]
 800c8d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c8d8:	a919      	add	r1, sp, #100	@ 0x64
 800c8da:	f001 fadf 	bl	800de9c <__gethex>
 800c8de:	f010 060f 	ands.w	r6, r0, #15
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	d005      	beq.n	800c8f2 <_strtod_l+0x72>
 800c8e6:	2e06      	cmp	r6, #6
 800c8e8:	d128      	bne.n	800c93c <_strtod_l+0xbc>
 800c8ea:	3501      	adds	r5, #1
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800c8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f040 858e 	bne.w	800d416 <_strtod_l+0xb96>
 800c8fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8fc:	b1cb      	cbz	r3, 800c932 <_strtod_l+0xb2>
 800c8fe:	4652      	mov	r2, sl
 800c900:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c904:	ec43 2b10 	vmov	d0, r2, r3
 800c908:	b01f      	add	sp, #124	@ 0x7c
 800c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	2920      	cmp	r1, #32
 800c910:	d1ce      	bne.n	800c8b0 <_strtod_l+0x30>
 800c912:	3201      	adds	r2, #1
 800c914:	e7c1      	b.n	800c89a <_strtod_l+0x1a>
 800c916:	292d      	cmp	r1, #45	@ 0x2d
 800c918:	d1ca      	bne.n	800c8b0 <_strtod_l+0x30>
 800c91a:	2101      	movs	r1, #1
 800c91c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c91e:	1c51      	adds	r1, r2, #1
 800c920:	9119      	str	r1, [sp, #100]	@ 0x64
 800c922:	7852      	ldrb	r2, [r2, #1]
 800c924:	2a00      	cmp	r2, #0
 800c926:	d1c5      	bne.n	800c8b4 <_strtod_l+0x34>
 800c928:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c92a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f040 8570 	bne.w	800d412 <_strtod_l+0xb92>
 800c932:	4652      	mov	r2, sl
 800c934:	465b      	mov	r3, fp
 800c936:	e7e5      	b.n	800c904 <_strtod_l+0x84>
 800c938:	2100      	movs	r1, #0
 800c93a:	e7ef      	b.n	800c91c <_strtod_l+0x9c>
 800c93c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c93e:	b13a      	cbz	r2, 800c950 <_strtod_l+0xd0>
 800c940:	2135      	movs	r1, #53	@ 0x35
 800c942:	a81c      	add	r0, sp, #112	@ 0x70
 800c944:	f7ff ff3a 	bl	800c7bc <__copybits>
 800c948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c94a:	9805      	ldr	r0, [sp, #20]
 800c94c:	f7ff fb08 	bl	800bf60 <_Bfree>
 800c950:	3e01      	subs	r6, #1
 800c952:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c954:	2e04      	cmp	r6, #4
 800c956:	d806      	bhi.n	800c966 <_strtod_l+0xe6>
 800c958:	e8df f006 	tbb	[pc, r6]
 800c95c:	201d0314 	.word	0x201d0314
 800c960:	14          	.byte	0x14
 800c961:	00          	.byte	0x00
 800c962:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c966:	05e1      	lsls	r1, r4, #23
 800c968:	bf48      	it	mi
 800c96a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c96e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c972:	0d1b      	lsrs	r3, r3, #20
 800c974:	051b      	lsls	r3, r3, #20
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1bb      	bne.n	800c8f2 <_strtod_l+0x72>
 800c97a:	f7fe fb21 	bl	800afc0 <__errno>
 800c97e:	2322      	movs	r3, #34	@ 0x22
 800c980:	6003      	str	r3, [r0, #0]
 800c982:	e7b6      	b.n	800c8f2 <_strtod_l+0x72>
 800c984:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c988:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c98c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c990:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c994:	e7e7      	b.n	800c966 <_strtod_l+0xe6>
 800c996:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cb14 <_strtod_l+0x294>
 800c99a:	e7e4      	b.n	800c966 <_strtod_l+0xe6>
 800c99c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c9a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c9a4:	e7df      	b.n	800c966 <_strtod_l+0xe6>
 800c9a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b30      	cmp	r3, #48	@ 0x30
 800c9b0:	d0f9      	beq.n	800c9a6 <_strtod_l+0x126>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d09d      	beq.n	800c8f2 <_strtod_l+0x72>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9308      	str	r3, [sp, #32]
 800c9c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9c4:	461f      	mov	r7, r3
 800c9c6:	220a      	movs	r2, #10
 800c9c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c9ca:	7805      	ldrb	r5, [r0, #0]
 800c9cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c9d0:	b2d9      	uxtb	r1, r3
 800c9d2:	2909      	cmp	r1, #9
 800c9d4:	d928      	bls.n	800ca28 <_strtod_l+0x1a8>
 800c9d6:	494e      	ldr	r1, [pc, #312]	@ (800cb10 <_strtod_l+0x290>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f001 f979 	bl	800dcd0 <strncmp>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d032      	beq.n	800ca48 <_strtod_l+0x1c8>
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	462a      	mov	r2, r5
 800c9e6:	4681      	mov	r9, r0
 800c9e8:	463d      	mov	r5, r7
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2a65      	cmp	r2, #101	@ 0x65
 800c9ee:	d001      	beq.n	800c9f4 <_strtod_l+0x174>
 800c9f0:	2a45      	cmp	r2, #69	@ 0x45
 800c9f2:	d114      	bne.n	800ca1e <_strtod_l+0x19e>
 800c9f4:	b91d      	cbnz	r5, 800c9fe <_strtod_l+0x17e>
 800c9f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9f8:	4302      	orrs	r2, r0
 800c9fa:	d095      	beq.n	800c928 <_strtod_l+0xa8>
 800c9fc:	2500      	movs	r5, #0
 800c9fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca00:	1c62      	adds	r2, r4, #1
 800ca02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca04:	7862      	ldrb	r2, [r4, #1]
 800ca06:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca08:	d077      	beq.n	800cafa <_strtod_l+0x27a>
 800ca0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca0c:	d07b      	beq.n	800cb06 <_strtod_l+0x286>
 800ca0e:	f04f 0c00 	mov.w	ip, #0
 800ca12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca16:	2909      	cmp	r1, #9
 800ca18:	f240 8082 	bls.w	800cb20 <_strtod_l+0x2a0>
 800ca1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca1e:	f04f 0800 	mov.w	r8, #0
 800ca22:	e0a2      	b.n	800cb6a <_strtod_l+0x2ea>
 800ca24:	2300      	movs	r3, #0
 800ca26:	e7c7      	b.n	800c9b8 <_strtod_l+0x138>
 800ca28:	2f08      	cmp	r7, #8
 800ca2a:	bfd5      	itete	le
 800ca2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca2e:	9908      	ldrgt	r1, [sp, #32]
 800ca30:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca34:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ca38:	f100 0001 	add.w	r0, r0, #1
 800ca3c:	bfd4      	ite	le
 800ca3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ca40:	9308      	strgt	r3, [sp, #32]
 800ca42:	3701      	adds	r7, #1
 800ca44:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca46:	e7bf      	b.n	800c9c8 <_strtod_l+0x148>
 800ca48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca4e:	785a      	ldrb	r2, [r3, #1]
 800ca50:	b37f      	cbz	r7, 800cab2 <_strtod_l+0x232>
 800ca52:	4681      	mov	r9, r0
 800ca54:	463d      	mov	r5, r7
 800ca56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca5a:	2b09      	cmp	r3, #9
 800ca5c:	d912      	bls.n	800ca84 <_strtod_l+0x204>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e7c4      	b.n	800c9ec <_strtod_l+0x16c>
 800ca62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca68:	785a      	ldrb	r2, [r3, #1]
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	2a30      	cmp	r2, #48	@ 0x30
 800ca6e:	d0f8      	beq.n	800ca62 <_strtod_l+0x1e2>
 800ca70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	f200 84d3 	bhi.w	800d420 <_strtod_l+0xba0>
 800ca7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca7e:	4681      	mov	r9, r0
 800ca80:	2000      	movs	r0, #0
 800ca82:	4605      	mov	r5, r0
 800ca84:	3a30      	subs	r2, #48	@ 0x30
 800ca86:	f100 0301 	add.w	r3, r0, #1
 800ca8a:	d02a      	beq.n	800cae2 <_strtod_l+0x262>
 800ca8c:	4499      	add	r9, r3
 800ca8e:	eb00 0c05 	add.w	ip, r0, r5
 800ca92:	462b      	mov	r3, r5
 800ca94:	210a      	movs	r1, #10
 800ca96:	4563      	cmp	r3, ip
 800ca98:	d10d      	bne.n	800cab6 <_strtod_l+0x236>
 800ca9a:	1c69      	adds	r1, r5, #1
 800ca9c:	4401      	add	r1, r0
 800ca9e:	4428      	add	r0, r5
 800caa0:	2808      	cmp	r0, #8
 800caa2:	dc16      	bgt.n	800cad2 <_strtod_l+0x252>
 800caa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800caa6:	230a      	movs	r3, #10
 800caa8:	fb03 2300 	mla	r3, r3, r0, r2
 800caac:	930a      	str	r3, [sp, #40]	@ 0x28
 800caae:	2300      	movs	r3, #0
 800cab0:	e018      	b.n	800cae4 <_strtod_l+0x264>
 800cab2:	4638      	mov	r0, r7
 800cab4:	e7da      	b.n	800ca6c <_strtod_l+0x1ec>
 800cab6:	2b08      	cmp	r3, #8
 800cab8:	f103 0301 	add.w	r3, r3, #1
 800cabc:	dc03      	bgt.n	800cac6 <_strtod_l+0x246>
 800cabe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cac0:	434e      	muls	r6, r1
 800cac2:	960a      	str	r6, [sp, #40]	@ 0x28
 800cac4:	e7e7      	b.n	800ca96 <_strtod_l+0x216>
 800cac6:	2b10      	cmp	r3, #16
 800cac8:	bfde      	ittt	le
 800caca:	9e08      	ldrle	r6, [sp, #32]
 800cacc:	434e      	mulle	r6, r1
 800cace:	9608      	strle	r6, [sp, #32]
 800cad0:	e7e1      	b.n	800ca96 <_strtod_l+0x216>
 800cad2:	280f      	cmp	r0, #15
 800cad4:	dceb      	bgt.n	800caae <_strtod_l+0x22e>
 800cad6:	9808      	ldr	r0, [sp, #32]
 800cad8:	230a      	movs	r3, #10
 800cada:	fb03 2300 	mla	r3, r3, r0, r2
 800cade:	9308      	str	r3, [sp, #32]
 800cae0:	e7e5      	b.n	800caae <_strtod_l+0x22e>
 800cae2:	4629      	mov	r1, r5
 800cae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cae6:	1c50      	adds	r0, r2, #1
 800cae8:	9019      	str	r0, [sp, #100]	@ 0x64
 800caea:	7852      	ldrb	r2, [r2, #1]
 800caec:	4618      	mov	r0, r3
 800caee:	460d      	mov	r5, r1
 800caf0:	e7b1      	b.n	800ca56 <_strtod_l+0x1d6>
 800caf2:	f04f 0900 	mov.w	r9, #0
 800caf6:	2301      	movs	r3, #1
 800caf8:	e77d      	b.n	800c9f6 <_strtod_l+0x176>
 800cafa:	f04f 0c00 	mov.w	ip, #0
 800cafe:	1ca2      	adds	r2, r4, #2
 800cb00:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb02:	78a2      	ldrb	r2, [r4, #2]
 800cb04:	e785      	b.n	800ca12 <_strtod_l+0x192>
 800cb06:	f04f 0c01 	mov.w	ip, #1
 800cb0a:	e7f8      	b.n	800cafe <_strtod_l+0x27e>
 800cb0c:	0800e988 	.word	0x0800e988
 800cb10:	0800e970 	.word	0x0800e970
 800cb14:	7ff00000 	.word	0x7ff00000
 800cb18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb1a:	1c51      	adds	r1, r2, #1
 800cb1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb1e:	7852      	ldrb	r2, [r2, #1]
 800cb20:	2a30      	cmp	r2, #48	@ 0x30
 800cb22:	d0f9      	beq.n	800cb18 <_strtod_l+0x298>
 800cb24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb28:	2908      	cmp	r1, #8
 800cb2a:	f63f af78 	bhi.w	800ca1e <_strtod_l+0x19e>
 800cb2e:	3a30      	subs	r2, #48	@ 0x30
 800cb30:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb36:	f04f 080a 	mov.w	r8, #10
 800cb3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb3c:	1c56      	adds	r6, r2, #1
 800cb3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cb40:	7852      	ldrb	r2, [r2, #1]
 800cb42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cb46:	f1be 0f09 	cmp.w	lr, #9
 800cb4a:	d939      	bls.n	800cbc0 <_strtod_l+0x340>
 800cb4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb4e:	1a76      	subs	r6, r6, r1
 800cb50:	2e08      	cmp	r6, #8
 800cb52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb56:	dc03      	bgt.n	800cb60 <_strtod_l+0x2e0>
 800cb58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb5a:	4588      	cmp	r8, r1
 800cb5c:	bfa8      	it	ge
 800cb5e:	4688      	movge	r8, r1
 800cb60:	f1bc 0f00 	cmp.w	ip, #0
 800cb64:	d001      	beq.n	800cb6a <_strtod_l+0x2ea>
 800cb66:	f1c8 0800 	rsb	r8, r8, #0
 800cb6a:	2d00      	cmp	r5, #0
 800cb6c:	d14e      	bne.n	800cc0c <_strtod_l+0x38c>
 800cb6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb70:	4308      	orrs	r0, r1
 800cb72:	f47f aebe 	bne.w	800c8f2 <_strtod_l+0x72>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f47f aed6 	bne.w	800c928 <_strtod_l+0xa8>
 800cb7c:	2a69      	cmp	r2, #105	@ 0x69
 800cb7e:	d028      	beq.n	800cbd2 <_strtod_l+0x352>
 800cb80:	dc25      	bgt.n	800cbce <_strtod_l+0x34e>
 800cb82:	2a49      	cmp	r2, #73	@ 0x49
 800cb84:	d025      	beq.n	800cbd2 <_strtod_l+0x352>
 800cb86:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb88:	f47f aece 	bne.w	800c928 <_strtod_l+0xa8>
 800cb8c:	499b      	ldr	r1, [pc, #620]	@ (800cdfc <_strtod_l+0x57c>)
 800cb8e:	a819      	add	r0, sp, #100	@ 0x64
 800cb90:	f001 fba6 	bl	800e2e0 <__match>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	f43f aec7 	beq.w	800c928 <_strtod_l+0xa8>
 800cb9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b28      	cmp	r3, #40	@ 0x28
 800cba0:	d12e      	bne.n	800cc00 <_strtod_l+0x380>
 800cba2:	4997      	ldr	r1, [pc, #604]	@ (800ce00 <_strtod_l+0x580>)
 800cba4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cba6:	a819      	add	r0, sp, #100	@ 0x64
 800cba8:	f001 fbae 	bl	800e308 <__hexnan>
 800cbac:	2805      	cmp	r0, #5
 800cbae:	d127      	bne.n	800cc00 <_strtod_l+0x380>
 800cbb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cbb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cbb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cbba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cbbe:	e698      	b.n	800c8f2 <_strtod_l+0x72>
 800cbc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbc2:	fb08 2101 	mla	r1, r8, r1, r2
 800cbc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cbca:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbcc:	e7b5      	b.n	800cb3a <_strtod_l+0x2ba>
 800cbce:	2a6e      	cmp	r2, #110	@ 0x6e
 800cbd0:	e7da      	b.n	800cb88 <_strtod_l+0x308>
 800cbd2:	498c      	ldr	r1, [pc, #560]	@ (800ce04 <_strtod_l+0x584>)
 800cbd4:	a819      	add	r0, sp, #100	@ 0x64
 800cbd6:	f001 fb83 	bl	800e2e0 <__match>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	f43f aea4 	beq.w	800c928 <_strtod_l+0xa8>
 800cbe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe2:	4989      	ldr	r1, [pc, #548]	@ (800ce08 <_strtod_l+0x588>)
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	a819      	add	r0, sp, #100	@ 0x64
 800cbe8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbea:	f001 fb79 	bl	800e2e0 <__match>
 800cbee:	b910      	cbnz	r0, 800cbf6 <_strtod_l+0x376>
 800cbf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ce18 <_strtod_l+0x598>
 800cbfa:	f04f 0a00 	mov.w	sl, #0
 800cbfe:	e678      	b.n	800c8f2 <_strtod_l+0x72>
 800cc00:	4882      	ldr	r0, [pc, #520]	@ (800ce0c <_strtod_l+0x58c>)
 800cc02:	f001 f8a9 	bl	800dd58 <nan>
 800cc06:	ec5b ab10 	vmov	sl, fp, d0
 800cc0a:	e672      	b.n	800c8f2 <_strtod_l+0x72>
 800cc0c:	eba8 0309 	sub.w	r3, r8, r9
 800cc10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc12:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	bf08      	it	eq
 800cc18:	462f      	moveq	r7, r5
 800cc1a:	2d10      	cmp	r5, #16
 800cc1c:	462c      	mov	r4, r5
 800cc1e:	bfa8      	it	ge
 800cc20:	2410      	movge	r4, #16
 800cc22:	f7f3 fc6f 	bl	8000504 <__aeabi_ui2d>
 800cc26:	2d09      	cmp	r5, #9
 800cc28:	4682      	mov	sl, r0
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	dc13      	bgt.n	800cc56 <_strtod_l+0x3d6>
 800cc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f43f ae5e 	beq.w	800c8f2 <_strtod_l+0x72>
 800cc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc38:	dd78      	ble.n	800cd2c <_strtod_l+0x4ac>
 800cc3a:	2b16      	cmp	r3, #22
 800cc3c:	dc5f      	bgt.n	800ccfe <_strtod_l+0x47e>
 800cc3e:	4974      	ldr	r1, [pc, #464]	@ (800ce10 <_strtod_l+0x590>)
 800cc40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc48:	4652      	mov	r2, sl
 800cc4a:	465b      	mov	r3, fp
 800cc4c:	f7f3 fcd4 	bl	80005f8 <__aeabi_dmul>
 800cc50:	4682      	mov	sl, r0
 800cc52:	468b      	mov	fp, r1
 800cc54:	e64d      	b.n	800c8f2 <_strtod_l+0x72>
 800cc56:	4b6e      	ldr	r3, [pc, #440]	@ (800ce10 <_strtod_l+0x590>)
 800cc58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	4682      	mov	sl, r0
 800cc66:	9808      	ldr	r0, [sp, #32]
 800cc68:	468b      	mov	fp, r1
 800cc6a:	f7f3 fc4b 	bl	8000504 <__aeabi_ui2d>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4650      	mov	r0, sl
 800cc74:	4659      	mov	r1, fp
 800cc76:	f7f3 fb09 	bl	800028c <__adddf3>
 800cc7a:	2d0f      	cmp	r5, #15
 800cc7c:	4682      	mov	sl, r0
 800cc7e:	468b      	mov	fp, r1
 800cc80:	ddd5      	ble.n	800cc2e <_strtod_l+0x3ae>
 800cc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc84:	1b2c      	subs	r4, r5, r4
 800cc86:	441c      	add	r4, r3
 800cc88:	2c00      	cmp	r4, #0
 800cc8a:	f340 8096 	ble.w	800cdba <_strtod_l+0x53a>
 800cc8e:	f014 030f 	ands.w	r3, r4, #15
 800cc92:	d00a      	beq.n	800ccaa <_strtod_l+0x42a>
 800cc94:	495e      	ldr	r1, [pc, #376]	@ (800ce10 <_strtod_l+0x590>)
 800cc96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc9a:	4652      	mov	r2, sl
 800cc9c:	465b      	mov	r3, fp
 800cc9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca2:	f7f3 fca9 	bl	80005f8 <__aeabi_dmul>
 800cca6:	4682      	mov	sl, r0
 800cca8:	468b      	mov	fp, r1
 800ccaa:	f034 040f 	bics.w	r4, r4, #15
 800ccae:	d073      	beq.n	800cd98 <_strtod_l+0x518>
 800ccb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ccb4:	dd48      	ble.n	800cd48 <_strtod_l+0x4c8>
 800ccb6:	2400      	movs	r4, #0
 800ccb8:	46a0      	mov	r8, r4
 800ccba:	940a      	str	r4, [sp, #40]	@ 0x28
 800ccbc:	46a1      	mov	r9, r4
 800ccbe:	9a05      	ldr	r2, [sp, #20]
 800ccc0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ce18 <_strtod_l+0x598>
 800ccc4:	2322      	movs	r3, #34	@ 0x22
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	f04f 0a00 	mov.w	sl, #0
 800cccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f43f ae0f 	beq.w	800c8f2 <_strtod_l+0x72>
 800ccd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccd6:	9805      	ldr	r0, [sp, #20]
 800ccd8:	f7ff f942 	bl	800bf60 <_Bfree>
 800ccdc:	9805      	ldr	r0, [sp, #20]
 800ccde:	4649      	mov	r1, r9
 800cce0:	f7ff f93e 	bl	800bf60 <_Bfree>
 800cce4:	9805      	ldr	r0, [sp, #20]
 800cce6:	4641      	mov	r1, r8
 800cce8:	f7ff f93a 	bl	800bf60 <_Bfree>
 800ccec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccee:	9805      	ldr	r0, [sp, #20]
 800ccf0:	f7ff f936 	bl	800bf60 <_Bfree>
 800ccf4:	9805      	ldr	r0, [sp, #20]
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	f7ff f932 	bl	800bf60 <_Bfree>
 800ccfc:	e5f9      	b.n	800c8f2 <_strtod_l+0x72>
 800ccfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd04:	4293      	cmp	r3, r2
 800cd06:	dbbc      	blt.n	800cc82 <_strtod_l+0x402>
 800cd08:	4c41      	ldr	r4, [pc, #260]	@ (800ce10 <_strtod_l+0x590>)
 800cd0a:	f1c5 050f 	rsb	r5, r5, #15
 800cd0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd12:	4652      	mov	r2, sl
 800cd14:	465b      	mov	r3, fp
 800cd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1a:	f7f3 fc6d 	bl	80005f8 <__aeabi_dmul>
 800cd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd20:	1b5d      	subs	r5, r3, r5
 800cd22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd2a:	e78f      	b.n	800cc4c <_strtod_l+0x3cc>
 800cd2c:	3316      	adds	r3, #22
 800cd2e:	dba8      	blt.n	800cc82 <_strtod_l+0x402>
 800cd30:	4b37      	ldr	r3, [pc, #220]	@ (800ce10 <_strtod_l+0x590>)
 800cd32:	eba9 0808 	sub.w	r8, r9, r8
 800cd36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd3e:	4650      	mov	r0, sl
 800cd40:	4659      	mov	r1, fp
 800cd42:	f7f3 fd83 	bl	800084c <__aeabi_ddiv>
 800cd46:	e783      	b.n	800cc50 <_strtod_l+0x3d0>
 800cd48:	4b32      	ldr	r3, [pc, #200]	@ (800ce14 <_strtod_l+0x594>)
 800cd4a:	9308      	str	r3, [sp, #32]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	1124      	asrs	r4, r4, #4
 800cd50:	4650      	mov	r0, sl
 800cd52:	4659      	mov	r1, fp
 800cd54:	461e      	mov	r6, r3
 800cd56:	2c01      	cmp	r4, #1
 800cd58:	dc21      	bgt.n	800cd9e <_strtod_l+0x51e>
 800cd5a:	b10b      	cbz	r3, 800cd60 <_strtod_l+0x4e0>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	468b      	mov	fp, r1
 800cd60:	492c      	ldr	r1, [pc, #176]	@ (800ce14 <_strtod_l+0x594>)
 800cd62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd6a:	4652      	mov	r2, sl
 800cd6c:	465b      	mov	r3, fp
 800cd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd72:	f7f3 fc41 	bl	80005f8 <__aeabi_dmul>
 800cd76:	4b28      	ldr	r3, [pc, #160]	@ (800ce18 <_strtod_l+0x598>)
 800cd78:	460a      	mov	r2, r1
 800cd7a:	400b      	ands	r3, r1
 800cd7c:	4927      	ldr	r1, [pc, #156]	@ (800ce1c <_strtod_l+0x59c>)
 800cd7e:	428b      	cmp	r3, r1
 800cd80:	4682      	mov	sl, r0
 800cd82:	d898      	bhi.n	800ccb6 <_strtod_l+0x436>
 800cd84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	bf86      	itte	hi
 800cd8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ce20 <_strtod_l+0x5a0>
 800cd90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800cd94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd98:	2300      	movs	r3, #0
 800cd9a:	9308      	str	r3, [sp, #32]
 800cd9c:	e07a      	b.n	800ce94 <_strtod_l+0x614>
 800cd9e:	07e2      	lsls	r2, r4, #31
 800cda0:	d505      	bpl.n	800cdae <_strtod_l+0x52e>
 800cda2:	9b08      	ldr	r3, [sp, #32]
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f3 fc26 	bl	80005f8 <__aeabi_dmul>
 800cdac:	2301      	movs	r3, #1
 800cdae:	9a08      	ldr	r2, [sp, #32]
 800cdb0:	3208      	adds	r2, #8
 800cdb2:	3601      	adds	r6, #1
 800cdb4:	1064      	asrs	r4, r4, #1
 800cdb6:	9208      	str	r2, [sp, #32]
 800cdb8:	e7cd      	b.n	800cd56 <_strtod_l+0x4d6>
 800cdba:	d0ed      	beq.n	800cd98 <_strtod_l+0x518>
 800cdbc:	4264      	negs	r4, r4
 800cdbe:	f014 020f 	ands.w	r2, r4, #15
 800cdc2:	d00a      	beq.n	800cdda <_strtod_l+0x55a>
 800cdc4:	4b12      	ldr	r3, [pc, #72]	@ (800ce10 <_strtod_l+0x590>)
 800cdc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdca:	4650      	mov	r0, sl
 800cdcc:	4659      	mov	r1, fp
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	f7f3 fd3b 	bl	800084c <__aeabi_ddiv>
 800cdd6:	4682      	mov	sl, r0
 800cdd8:	468b      	mov	fp, r1
 800cdda:	1124      	asrs	r4, r4, #4
 800cddc:	d0dc      	beq.n	800cd98 <_strtod_l+0x518>
 800cdde:	2c1f      	cmp	r4, #31
 800cde0:	dd20      	ble.n	800ce24 <_strtod_l+0x5a4>
 800cde2:	2400      	movs	r4, #0
 800cde4:	46a0      	mov	r8, r4
 800cde6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cde8:	46a1      	mov	r9, r4
 800cdea:	9a05      	ldr	r2, [sp, #20]
 800cdec:	2322      	movs	r3, #34	@ 0x22
 800cdee:	f04f 0a00 	mov.w	sl, #0
 800cdf2:	f04f 0b00 	mov.w	fp, #0
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	e768      	b.n	800cccc <_strtod_l+0x44c>
 800cdfa:	bf00      	nop
 800cdfc:	0800e760 	.word	0x0800e760
 800ce00:	0800e974 	.word	0x0800e974
 800ce04:	0800e758 	.word	0x0800e758
 800ce08:	0800e78f 	.word	0x0800e78f
 800ce0c:	0800eb1d 	.word	0x0800eb1d
 800ce10:	0800e8a8 	.word	0x0800e8a8
 800ce14:	0800e880 	.word	0x0800e880
 800ce18:	7ff00000 	.word	0x7ff00000
 800ce1c:	7ca00000 	.word	0x7ca00000
 800ce20:	7fefffff 	.word	0x7fefffff
 800ce24:	f014 0310 	ands.w	r3, r4, #16
 800ce28:	bf18      	it	ne
 800ce2a:	236a      	movne	r3, #106	@ 0x6a
 800ce2c:	4ea9      	ldr	r6, [pc, #676]	@ (800d0d4 <_strtod_l+0x854>)
 800ce2e:	9308      	str	r3, [sp, #32]
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	2300      	movs	r3, #0
 800ce36:	07e2      	lsls	r2, r4, #31
 800ce38:	d504      	bpl.n	800ce44 <_strtod_l+0x5c4>
 800ce3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce3e:	f7f3 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ce42:	2301      	movs	r3, #1
 800ce44:	1064      	asrs	r4, r4, #1
 800ce46:	f106 0608 	add.w	r6, r6, #8
 800ce4a:	d1f4      	bne.n	800ce36 <_strtod_l+0x5b6>
 800ce4c:	b10b      	cbz	r3, 800ce52 <_strtod_l+0x5d2>
 800ce4e:	4682      	mov	sl, r0
 800ce50:	468b      	mov	fp, r1
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	b1b3      	cbz	r3, 800ce84 <_strtod_l+0x604>
 800ce56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	4659      	mov	r1, fp
 800ce62:	dd0f      	ble.n	800ce84 <_strtod_l+0x604>
 800ce64:	2b1f      	cmp	r3, #31
 800ce66:	dd55      	ble.n	800cf14 <_strtod_l+0x694>
 800ce68:	2b34      	cmp	r3, #52	@ 0x34
 800ce6a:	bfde      	ittt	le
 800ce6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ce70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce74:	4093      	lslle	r3, r2
 800ce76:	f04f 0a00 	mov.w	sl, #0
 800ce7a:	bfcc      	ite	gt
 800ce7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce80:	ea03 0b01 	andle.w	fp, r3, r1
 800ce84:	2200      	movs	r2, #0
 800ce86:	2300      	movs	r3, #0
 800ce88:	4650      	mov	r0, sl
 800ce8a:	4659      	mov	r1, fp
 800ce8c:	f7f3 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d1a6      	bne.n	800cde2 <_strtod_l+0x562>
 800ce94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce9a:	9805      	ldr	r0, [sp, #20]
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	463a      	mov	r2, r7
 800cea0:	f7ff f8c6 	bl	800c030 <__s2b>
 800cea4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f43f af05 	beq.w	800ccb6 <_strtod_l+0x436>
 800ceac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceae:	2a00      	cmp	r2, #0
 800ceb0:	eba9 0308 	sub.w	r3, r9, r8
 800ceb4:	bfa8      	it	ge
 800ceb6:	2300      	movge	r3, #0
 800ceb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800ceba:	2400      	movs	r4, #0
 800cebc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cec0:	9316      	str	r3, [sp, #88]	@ 0x58
 800cec2:	46a0      	mov	r8, r4
 800cec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cec6:	9805      	ldr	r0, [sp, #20]
 800cec8:	6859      	ldr	r1, [r3, #4]
 800ceca:	f7ff f809 	bl	800bee0 <_Balloc>
 800cece:	4681      	mov	r9, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f43f aef4 	beq.w	800ccbe <_strtod_l+0x43e>
 800ced6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced8:	691a      	ldr	r2, [r3, #16]
 800ceda:	3202      	adds	r2, #2
 800cedc:	f103 010c 	add.w	r1, r3, #12
 800cee0:	0092      	lsls	r2, r2, #2
 800cee2:	300c      	adds	r0, #12
 800cee4:	f7fe f899 	bl	800b01a <memcpy>
 800cee8:	ec4b ab10 	vmov	d0, sl, fp
 800ceec:	9805      	ldr	r0, [sp, #20]
 800ceee:	aa1c      	add	r2, sp, #112	@ 0x70
 800cef0:	a91b      	add	r1, sp, #108	@ 0x6c
 800cef2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cef6:	f7ff fbd7 	bl	800c6a8 <__d2b>
 800cefa:	901a      	str	r0, [sp, #104]	@ 0x68
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f43f aede 	beq.w	800ccbe <_strtod_l+0x43e>
 800cf02:	9805      	ldr	r0, [sp, #20]
 800cf04:	2101      	movs	r1, #1
 800cf06:	f7ff f929 	bl	800c15c <__i2b>
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	b948      	cbnz	r0, 800cf22 <_strtod_l+0x6a2>
 800cf0e:	f04f 0800 	mov.w	r8, #0
 800cf12:	e6d4      	b.n	800ccbe <_strtod_l+0x43e>
 800cf14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf18:	fa02 f303 	lsl.w	r3, r2, r3
 800cf1c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf20:	e7b0      	b.n	800ce84 <_strtod_l+0x604>
 800cf22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf26:	2d00      	cmp	r5, #0
 800cf28:	bfab      	itete	ge
 800cf2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf32:	bfac      	ite	ge
 800cf34:	18ef      	addge	r7, r5, r3
 800cf36:	1b5e      	sublt	r6, r3, r5
 800cf38:	9b08      	ldr	r3, [sp, #32]
 800cf3a:	1aed      	subs	r5, r5, r3
 800cf3c:	4415      	add	r5, r2
 800cf3e:	4b66      	ldr	r3, [pc, #408]	@ (800d0d8 <_strtod_l+0x858>)
 800cf40:	3d01      	subs	r5, #1
 800cf42:	429d      	cmp	r5, r3
 800cf44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf48:	da50      	bge.n	800cfec <_strtod_l+0x76c>
 800cf4a:	1b5b      	subs	r3, r3, r5
 800cf4c:	2b1f      	cmp	r3, #31
 800cf4e:	eba2 0203 	sub.w	r2, r2, r3
 800cf52:	f04f 0101 	mov.w	r1, #1
 800cf56:	dc3d      	bgt.n	800cfd4 <_strtod_l+0x754>
 800cf58:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf62:	18bd      	adds	r5, r7, r2
 800cf64:	9b08      	ldr	r3, [sp, #32]
 800cf66:	42af      	cmp	r7, r5
 800cf68:	4416      	add	r6, r2
 800cf6a:	441e      	add	r6, r3
 800cf6c:	463b      	mov	r3, r7
 800cf6e:	bfa8      	it	ge
 800cf70:	462b      	movge	r3, r5
 800cf72:	42b3      	cmp	r3, r6
 800cf74:	bfa8      	it	ge
 800cf76:	4633      	movge	r3, r6
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfc2      	ittt	gt
 800cf7c:	1aed      	subgt	r5, r5, r3
 800cf7e:	1af6      	subgt	r6, r6, r3
 800cf80:	1aff      	subgt	r7, r7, r3
 800cf82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	dd16      	ble.n	800cfb6 <_strtod_l+0x736>
 800cf88:	4641      	mov	r1, r8
 800cf8a:	9805      	ldr	r0, [sp, #20]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	f7ff f9a5 	bl	800c2dc <__pow5mult>
 800cf92:	4680      	mov	r8, r0
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d0ba      	beq.n	800cf0e <_strtod_l+0x68e>
 800cf98:	4601      	mov	r1, r0
 800cf9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	f7ff f8f3 	bl	800c188 <__multiply>
 800cfa2:	900e      	str	r0, [sp, #56]	@ 0x38
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	f43f ae8a 	beq.w	800ccbe <_strtod_l+0x43e>
 800cfaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfac:	9805      	ldr	r0, [sp, #20]
 800cfae:	f7fe ffd7 	bl	800bf60 <_Bfree>
 800cfb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	dc1d      	bgt.n	800cff6 <_strtod_l+0x776>
 800cfba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dd23      	ble.n	800d008 <_strtod_l+0x788>
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cfc4:	9805      	ldr	r0, [sp, #20]
 800cfc6:	f7ff f989 	bl	800c2dc <__pow5mult>
 800cfca:	4681      	mov	r9, r0
 800cfcc:	b9e0      	cbnz	r0, 800d008 <_strtod_l+0x788>
 800cfce:	f04f 0900 	mov.w	r9, #0
 800cfd2:	e674      	b.n	800ccbe <_strtod_l+0x43e>
 800cfd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cfd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cfdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cfe0:	35e2      	adds	r5, #226	@ 0xe2
 800cfe2:	fa01 f305 	lsl.w	r3, r1, r5
 800cfe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cfea:	e7ba      	b.n	800cf62 <_strtod_l+0x6e2>
 800cfec:	2300      	movs	r3, #0
 800cfee:	9310      	str	r3, [sp, #64]	@ 0x40
 800cff0:	2301      	movs	r3, #1
 800cff2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cff4:	e7b5      	b.n	800cf62 <_strtod_l+0x6e2>
 800cff6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cff8:	9805      	ldr	r0, [sp, #20]
 800cffa:	462a      	mov	r2, r5
 800cffc:	f7ff f9c8 	bl	800c390 <__lshift>
 800d000:	901a      	str	r0, [sp, #104]	@ 0x68
 800d002:	2800      	cmp	r0, #0
 800d004:	d1d9      	bne.n	800cfba <_strtod_l+0x73a>
 800d006:	e65a      	b.n	800ccbe <_strtod_l+0x43e>
 800d008:	2e00      	cmp	r6, #0
 800d00a:	dd07      	ble.n	800d01c <_strtod_l+0x79c>
 800d00c:	4649      	mov	r1, r9
 800d00e:	9805      	ldr	r0, [sp, #20]
 800d010:	4632      	mov	r2, r6
 800d012:	f7ff f9bd 	bl	800c390 <__lshift>
 800d016:	4681      	mov	r9, r0
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0d8      	beq.n	800cfce <_strtod_l+0x74e>
 800d01c:	2f00      	cmp	r7, #0
 800d01e:	dd08      	ble.n	800d032 <_strtod_l+0x7b2>
 800d020:	4641      	mov	r1, r8
 800d022:	9805      	ldr	r0, [sp, #20]
 800d024:	463a      	mov	r2, r7
 800d026:	f7ff f9b3 	bl	800c390 <__lshift>
 800d02a:	4680      	mov	r8, r0
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f43f ae46 	beq.w	800ccbe <_strtod_l+0x43e>
 800d032:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d034:	9805      	ldr	r0, [sp, #20]
 800d036:	464a      	mov	r2, r9
 800d038:	f7ff fa32 	bl	800c4a0 <__mdiff>
 800d03c:	4604      	mov	r4, r0
 800d03e:	2800      	cmp	r0, #0
 800d040:	f43f ae3d 	beq.w	800ccbe <_strtod_l+0x43e>
 800d044:	68c3      	ldr	r3, [r0, #12]
 800d046:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d048:	2300      	movs	r3, #0
 800d04a:	60c3      	str	r3, [r0, #12]
 800d04c:	4641      	mov	r1, r8
 800d04e:	f7ff fa0b 	bl	800c468 <__mcmp>
 800d052:	2800      	cmp	r0, #0
 800d054:	da46      	bge.n	800d0e4 <_strtod_l+0x864>
 800d056:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d058:	ea53 030a 	orrs.w	r3, r3, sl
 800d05c:	d16c      	bne.n	800d138 <_strtod_l+0x8b8>
 800d05e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d062:	2b00      	cmp	r3, #0
 800d064:	d168      	bne.n	800d138 <_strtod_l+0x8b8>
 800d066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d06a:	0d1b      	lsrs	r3, r3, #20
 800d06c:	051b      	lsls	r3, r3, #20
 800d06e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d072:	d961      	bls.n	800d138 <_strtod_l+0x8b8>
 800d074:	6963      	ldr	r3, [r4, #20]
 800d076:	b913      	cbnz	r3, 800d07e <_strtod_l+0x7fe>
 800d078:	6923      	ldr	r3, [r4, #16]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	dd5c      	ble.n	800d138 <_strtod_l+0x8b8>
 800d07e:	4621      	mov	r1, r4
 800d080:	2201      	movs	r2, #1
 800d082:	9805      	ldr	r0, [sp, #20]
 800d084:	f7ff f984 	bl	800c390 <__lshift>
 800d088:	4641      	mov	r1, r8
 800d08a:	4604      	mov	r4, r0
 800d08c:	f7ff f9ec 	bl	800c468 <__mcmp>
 800d090:	2800      	cmp	r0, #0
 800d092:	dd51      	ble.n	800d138 <_strtod_l+0x8b8>
 800d094:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d098:	9a08      	ldr	r2, [sp, #32]
 800d09a:	0d1b      	lsrs	r3, r3, #20
 800d09c:	051b      	lsls	r3, r3, #20
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	d06b      	beq.n	800d17a <_strtod_l+0x8fa>
 800d0a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0a6:	d868      	bhi.n	800d17a <_strtod_l+0x8fa>
 800d0a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d0ac:	f67f ae9d 	bls.w	800cdea <_strtod_l+0x56a>
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0dc <_strtod_l+0x85c>)
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	4659      	mov	r1, fp
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f7f3 fa9e 	bl	80005f8 <__aeabi_dmul>
 800d0bc:	4b08      	ldr	r3, [pc, #32]	@ (800d0e0 <_strtod_l+0x860>)
 800d0be:	400b      	ands	r3, r1
 800d0c0:	4682      	mov	sl, r0
 800d0c2:	468b      	mov	fp, r1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f47f ae05 	bne.w	800ccd4 <_strtod_l+0x454>
 800d0ca:	9a05      	ldr	r2, [sp, #20]
 800d0cc:	2322      	movs	r3, #34	@ 0x22
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	e600      	b.n	800ccd4 <_strtod_l+0x454>
 800d0d2:	bf00      	nop
 800d0d4:	0800e9a0 	.word	0x0800e9a0
 800d0d8:	fffffc02 	.word	0xfffffc02
 800d0dc:	39500000 	.word	0x39500000
 800d0e0:	7ff00000 	.word	0x7ff00000
 800d0e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0e8:	d165      	bne.n	800d1b6 <_strtod_l+0x936>
 800d0ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0f0:	b35a      	cbz	r2, 800d14a <_strtod_l+0x8ca>
 800d0f2:	4a9f      	ldr	r2, [pc, #636]	@ (800d370 <_strtod_l+0xaf0>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d12b      	bne.n	800d150 <_strtod_l+0x8d0>
 800d0f8:	9b08      	ldr	r3, [sp, #32]
 800d0fa:	4651      	mov	r1, sl
 800d0fc:	b303      	cbz	r3, 800d140 <_strtod_l+0x8c0>
 800d0fe:	4b9d      	ldr	r3, [pc, #628]	@ (800d374 <_strtod_l+0xaf4>)
 800d100:	465a      	mov	r2, fp
 800d102:	4013      	ands	r3, r2
 800d104:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d10c:	d81b      	bhi.n	800d146 <_strtod_l+0x8c6>
 800d10e:	0d1b      	lsrs	r3, r3, #20
 800d110:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d114:	fa02 f303 	lsl.w	r3, r2, r3
 800d118:	4299      	cmp	r1, r3
 800d11a:	d119      	bne.n	800d150 <_strtod_l+0x8d0>
 800d11c:	4b96      	ldr	r3, [pc, #600]	@ (800d378 <_strtod_l+0xaf8>)
 800d11e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d120:	429a      	cmp	r2, r3
 800d122:	d102      	bne.n	800d12a <_strtod_l+0x8aa>
 800d124:	3101      	adds	r1, #1
 800d126:	f43f adca 	beq.w	800ccbe <_strtod_l+0x43e>
 800d12a:	4b92      	ldr	r3, [pc, #584]	@ (800d374 <_strtod_l+0xaf4>)
 800d12c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d12e:	401a      	ands	r2, r3
 800d130:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d134:	f04f 0a00 	mov.w	sl, #0
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1b8      	bne.n	800d0b0 <_strtod_l+0x830>
 800d13e:	e5c9      	b.n	800ccd4 <_strtod_l+0x454>
 800d140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d144:	e7e8      	b.n	800d118 <_strtod_l+0x898>
 800d146:	4613      	mov	r3, r2
 800d148:	e7e6      	b.n	800d118 <_strtod_l+0x898>
 800d14a:	ea53 030a 	orrs.w	r3, r3, sl
 800d14e:	d0a1      	beq.n	800d094 <_strtod_l+0x814>
 800d150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d152:	b1db      	cbz	r3, 800d18c <_strtod_l+0x90c>
 800d154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d156:	4213      	tst	r3, r2
 800d158:	d0ee      	beq.n	800d138 <_strtod_l+0x8b8>
 800d15a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d15c:	9a08      	ldr	r2, [sp, #32]
 800d15e:	4650      	mov	r0, sl
 800d160:	4659      	mov	r1, fp
 800d162:	b1bb      	cbz	r3, 800d194 <_strtod_l+0x914>
 800d164:	f7ff fb6e 	bl	800c844 <sulp>
 800d168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d16c:	ec53 2b10 	vmov	r2, r3, d0
 800d170:	f7f3 f88c 	bl	800028c <__adddf3>
 800d174:	4682      	mov	sl, r0
 800d176:	468b      	mov	fp, r1
 800d178:	e7de      	b.n	800d138 <_strtod_l+0x8b8>
 800d17a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d17e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d182:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d186:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d18a:	e7d5      	b.n	800d138 <_strtod_l+0x8b8>
 800d18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d18e:	ea13 0f0a 	tst.w	r3, sl
 800d192:	e7e1      	b.n	800d158 <_strtod_l+0x8d8>
 800d194:	f7ff fb56 	bl	800c844 <sulp>
 800d198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d19c:	ec53 2b10 	vmov	r2, r3, d0
 800d1a0:	f7f3 f872 	bl	8000288 <__aeabi_dsub>
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4682      	mov	sl, r0
 800d1aa:	468b      	mov	fp, r1
 800d1ac:	f7f3 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0c1      	beq.n	800d138 <_strtod_l+0x8b8>
 800d1b4:	e619      	b.n	800cdea <_strtod_l+0x56a>
 800d1b6:	4641      	mov	r1, r8
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f7ff facd 	bl	800c758 <__ratio>
 800d1be:	ec57 6b10 	vmov	r6, r7, d0
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 fc90 	bl	8000af0 <__aeabi_dcmple>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d06f      	beq.n	800d2b4 <_strtod_l+0xa34>
 800d1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d17a      	bne.n	800d2d0 <_strtod_l+0xa50>
 800d1da:	f1ba 0f00 	cmp.w	sl, #0
 800d1de:	d158      	bne.n	800d292 <_strtod_l+0xa12>
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d15a      	bne.n	800d2a0 <_strtod_l+0xa20>
 800d1ea:	4b64      	ldr	r3, [pc, #400]	@ (800d37c <_strtod_l+0xafc>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	f7f3 fc73 	bl	8000adc <__aeabi_dcmplt>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d159      	bne.n	800d2ae <_strtod_l+0xa2e>
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	4b60      	ldr	r3, [pc, #384]	@ (800d380 <_strtod_l+0xb00>)
 800d200:	2200      	movs	r2, #0
 800d202:	f7f3 f9f9 	bl	80005f8 <__aeabi_dmul>
 800d206:	4606      	mov	r6, r0
 800d208:	460f      	mov	r7, r1
 800d20a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d20e:	9606      	str	r6, [sp, #24]
 800d210:	9307      	str	r3, [sp, #28]
 800d212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d216:	4d57      	ldr	r5, [pc, #348]	@ (800d374 <_strtod_l+0xaf4>)
 800d218:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d21c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d21e:	401d      	ands	r5, r3
 800d220:	4b58      	ldr	r3, [pc, #352]	@ (800d384 <_strtod_l+0xb04>)
 800d222:	429d      	cmp	r5, r3
 800d224:	f040 80b2 	bne.w	800d38c <_strtod_l+0xb0c>
 800d228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d22a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d22e:	ec4b ab10 	vmov	d0, sl, fp
 800d232:	f7ff f9c9 	bl	800c5c8 <__ulp>
 800d236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d23a:	ec51 0b10 	vmov	r0, r1, d0
 800d23e:	f7f3 f9db 	bl	80005f8 <__aeabi_dmul>
 800d242:	4652      	mov	r2, sl
 800d244:	465b      	mov	r3, fp
 800d246:	f7f3 f821 	bl	800028c <__adddf3>
 800d24a:	460b      	mov	r3, r1
 800d24c:	4949      	ldr	r1, [pc, #292]	@ (800d374 <_strtod_l+0xaf4>)
 800d24e:	4a4e      	ldr	r2, [pc, #312]	@ (800d388 <_strtod_l+0xb08>)
 800d250:	4019      	ands	r1, r3
 800d252:	4291      	cmp	r1, r2
 800d254:	4682      	mov	sl, r0
 800d256:	d942      	bls.n	800d2de <_strtod_l+0xa5e>
 800d258:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d25a:	4b47      	ldr	r3, [pc, #284]	@ (800d378 <_strtod_l+0xaf8>)
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d103      	bne.n	800d268 <_strtod_l+0x9e8>
 800d260:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d262:	3301      	adds	r3, #1
 800d264:	f43f ad2b 	beq.w	800ccbe <_strtod_l+0x43e>
 800d268:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d378 <_strtod_l+0xaf8>
 800d26c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d272:	9805      	ldr	r0, [sp, #20]
 800d274:	f7fe fe74 	bl	800bf60 <_Bfree>
 800d278:	9805      	ldr	r0, [sp, #20]
 800d27a:	4649      	mov	r1, r9
 800d27c:	f7fe fe70 	bl	800bf60 <_Bfree>
 800d280:	9805      	ldr	r0, [sp, #20]
 800d282:	4641      	mov	r1, r8
 800d284:	f7fe fe6c 	bl	800bf60 <_Bfree>
 800d288:	9805      	ldr	r0, [sp, #20]
 800d28a:	4621      	mov	r1, r4
 800d28c:	f7fe fe68 	bl	800bf60 <_Bfree>
 800d290:	e618      	b.n	800cec4 <_strtod_l+0x644>
 800d292:	f1ba 0f01 	cmp.w	sl, #1
 800d296:	d103      	bne.n	800d2a0 <_strtod_l+0xa20>
 800d298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f43f ada5 	beq.w	800cdea <_strtod_l+0x56a>
 800d2a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d350 <_strtod_l+0xad0>
 800d2a4:	4f35      	ldr	r7, [pc, #212]	@ (800d37c <_strtod_l+0xafc>)
 800d2a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2aa:	2600      	movs	r6, #0
 800d2ac:	e7b1      	b.n	800d212 <_strtod_l+0x992>
 800d2ae:	4f34      	ldr	r7, [pc, #208]	@ (800d380 <_strtod_l+0xb00>)
 800d2b0:	2600      	movs	r6, #0
 800d2b2:	e7aa      	b.n	800d20a <_strtod_l+0x98a>
 800d2b4:	4b32      	ldr	r3, [pc, #200]	@ (800d380 <_strtod_l+0xb00>)
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d09f      	beq.n	800d20a <_strtod_l+0x98a>
 800d2ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d2ce:	e7a0      	b.n	800d212 <_strtod_l+0x992>
 800d2d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d358 <_strtod_l+0xad8>
 800d2d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2d8:	ec57 6b17 	vmov	r6, r7, d7
 800d2dc:	e799      	b.n	800d212 <_strtod_l+0x992>
 800d2de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d2e2:	9b08      	ldr	r3, [sp, #32]
 800d2e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1c1      	bne.n	800d270 <_strtod_l+0x9f0>
 800d2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2f0:	0d1b      	lsrs	r3, r3, #20
 800d2f2:	051b      	lsls	r3, r3, #20
 800d2f4:	429d      	cmp	r5, r3
 800d2f6:	d1bb      	bne.n	800d270 <_strtod_l+0x9f0>
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f3 fcdc 	bl	8000cb8 <__aeabi_d2lz>
 800d300:	f7f3 f94c 	bl	800059c <__aeabi_l2d>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	4630      	mov	r0, r6
 800d30a:	4639      	mov	r1, r7
 800d30c:	f7f2 ffbc 	bl	8000288 <__aeabi_dsub>
 800d310:	460b      	mov	r3, r1
 800d312:	4602      	mov	r2, r0
 800d314:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d318:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	ea46 060a 	orr.w	r6, r6, sl
 800d322:	431e      	orrs	r6, r3
 800d324:	d06f      	beq.n	800d406 <_strtod_l+0xb86>
 800d326:	a30e      	add	r3, pc, #56	@ (adr r3, 800d360 <_strtod_l+0xae0>)
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	f7f3 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800d330:	2800      	cmp	r0, #0
 800d332:	f47f accf 	bne.w	800ccd4 <_strtod_l+0x454>
 800d336:	a30c      	add	r3, pc, #48	@ (adr r3, 800d368 <_strtod_l+0xae8>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d340:	f7f3 fbea 	bl	8000b18 <__aeabi_dcmpgt>
 800d344:	2800      	cmp	r0, #0
 800d346:	d093      	beq.n	800d270 <_strtod_l+0x9f0>
 800d348:	e4c4      	b.n	800ccd4 <_strtod_l+0x454>
 800d34a:	bf00      	nop
 800d34c:	f3af 8000 	nop.w
 800d350:	00000000 	.word	0x00000000
 800d354:	bff00000 	.word	0xbff00000
 800d358:	00000000 	.word	0x00000000
 800d35c:	3ff00000 	.word	0x3ff00000
 800d360:	94a03595 	.word	0x94a03595
 800d364:	3fdfffff 	.word	0x3fdfffff
 800d368:	35afe535 	.word	0x35afe535
 800d36c:	3fe00000 	.word	0x3fe00000
 800d370:	000fffff 	.word	0x000fffff
 800d374:	7ff00000 	.word	0x7ff00000
 800d378:	7fefffff 	.word	0x7fefffff
 800d37c:	3ff00000 	.word	0x3ff00000
 800d380:	3fe00000 	.word	0x3fe00000
 800d384:	7fe00000 	.word	0x7fe00000
 800d388:	7c9fffff 	.word	0x7c9fffff
 800d38c:	9b08      	ldr	r3, [sp, #32]
 800d38e:	b323      	cbz	r3, 800d3da <_strtod_l+0xb5a>
 800d390:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d394:	d821      	bhi.n	800d3da <_strtod_l+0xb5a>
 800d396:	a328      	add	r3, pc, #160	@ (adr r3, 800d438 <_strtod_l+0xbb8>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f3 fba6 	bl	8000af0 <__aeabi_dcmple>
 800d3a4:	b1a0      	cbz	r0, 800d3d0 <_strtod_l+0xb50>
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7f3 fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 800d3ae:	2801      	cmp	r0, #1
 800d3b0:	bf38      	it	cc
 800d3b2:	2001      	movcc	r0, #1
 800d3b4:	f7f3 f8a6 	bl	8000504 <__aeabi_ui2d>
 800d3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	b9fb      	cbnz	r3, 800d400 <_strtod_l+0xb80>
 800d3c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d3c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d3cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d3d6:	1b5b      	subs	r3, r3, r5
 800d3d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d3de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d3e2:	f7ff f8f1 	bl	800c5c8 <__ulp>
 800d3e6:	4650      	mov	r0, sl
 800d3e8:	ec53 2b10 	vmov	r2, r3, d0
 800d3ec:	4659      	mov	r1, fp
 800d3ee:	f7f3 f903 	bl	80005f8 <__aeabi_dmul>
 800d3f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d3f6:	f7f2 ff49 	bl	800028c <__adddf3>
 800d3fa:	4682      	mov	sl, r0
 800d3fc:	468b      	mov	fp, r1
 800d3fe:	e770      	b.n	800d2e2 <_strtod_l+0xa62>
 800d400:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d404:	e7e0      	b.n	800d3c8 <_strtod_l+0xb48>
 800d406:	a30e      	add	r3, pc, #56	@ (adr r3, 800d440 <_strtod_l+0xbc0>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	f7f3 fb66 	bl	8000adc <__aeabi_dcmplt>
 800d410:	e798      	b.n	800d344 <_strtod_l+0xac4>
 800d412:	2300      	movs	r3, #0
 800d414:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d416:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	f7ff ba6d 	b.w	800c8fa <_strtod_l+0x7a>
 800d420:	2a65      	cmp	r2, #101	@ 0x65
 800d422:	f43f ab66 	beq.w	800caf2 <_strtod_l+0x272>
 800d426:	2a45      	cmp	r2, #69	@ 0x45
 800d428:	f43f ab63 	beq.w	800caf2 <_strtod_l+0x272>
 800d42c:	2301      	movs	r3, #1
 800d42e:	f7ff bb9e 	b.w	800cb6e <_strtod_l+0x2ee>
 800d432:	bf00      	nop
 800d434:	f3af 8000 	nop.w
 800d438:	ffc00000 	.word	0xffc00000
 800d43c:	41dfffff 	.word	0x41dfffff
 800d440:	94a03595 	.word	0x94a03595
 800d444:	3fcfffff 	.word	0x3fcfffff

0800d448 <_strtod_r>:
 800d448:	4b01      	ldr	r3, [pc, #4]	@ (800d450 <_strtod_r+0x8>)
 800d44a:	f7ff ba19 	b.w	800c880 <_strtod_l>
 800d44e:	bf00      	nop
 800d450:	2000006c 	.word	0x2000006c

0800d454 <_strtol_l.constprop.0>:
 800d454:	2b24      	cmp	r3, #36	@ 0x24
 800d456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d45a:	4686      	mov	lr, r0
 800d45c:	4690      	mov	r8, r2
 800d45e:	d801      	bhi.n	800d464 <_strtol_l.constprop.0+0x10>
 800d460:	2b01      	cmp	r3, #1
 800d462:	d106      	bne.n	800d472 <_strtol_l.constprop.0+0x1e>
 800d464:	f7fd fdac 	bl	800afc0 <__errno>
 800d468:	2316      	movs	r3, #22
 800d46a:	6003      	str	r3, [r0, #0]
 800d46c:	2000      	movs	r0, #0
 800d46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d472:	4834      	ldr	r0, [pc, #208]	@ (800d544 <_strtol_l.constprop.0+0xf0>)
 800d474:	460d      	mov	r5, r1
 800d476:	462a      	mov	r2, r5
 800d478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d47c:	5d06      	ldrb	r6, [r0, r4]
 800d47e:	f016 0608 	ands.w	r6, r6, #8
 800d482:	d1f8      	bne.n	800d476 <_strtol_l.constprop.0+0x22>
 800d484:	2c2d      	cmp	r4, #45	@ 0x2d
 800d486:	d12d      	bne.n	800d4e4 <_strtol_l.constprop.0+0x90>
 800d488:	782c      	ldrb	r4, [r5, #0]
 800d48a:	2601      	movs	r6, #1
 800d48c:	1c95      	adds	r5, r2, #2
 800d48e:	f033 0210 	bics.w	r2, r3, #16
 800d492:	d109      	bne.n	800d4a8 <_strtol_l.constprop.0+0x54>
 800d494:	2c30      	cmp	r4, #48	@ 0x30
 800d496:	d12a      	bne.n	800d4ee <_strtol_l.constprop.0+0x9a>
 800d498:	782a      	ldrb	r2, [r5, #0]
 800d49a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d49e:	2a58      	cmp	r2, #88	@ 0x58
 800d4a0:	d125      	bne.n	800d4ee <_strtol_l.constprop.0+0x9a>
 800d4a2:	786c      	ldrb	r4, [r5, #1]
 800d4a4:	2310      	movs	r3, #16
 800d4a6:	3502      	adds	r5, #2
 800d4a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d4ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	fbbc f9f3 	udiv	r9, ip, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d4bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d4c0:	2f09      	cmp	r7, #9
 800d4c2:	d81b      	bhi.n	800d4fc <_strtol_l.constprop.0+0xa8>
 800d4c4:	463c      	mov	r4, r7
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	dd27      	ble.n	800d51a <_strtol_l.constprop.0+0xc6>
 800d4ca:	1c57      	adds	r7, r2, #1
 800d4cc:	d007      	beq.n	800d4de <_strtol_l.constprop.0+0x8a>
 800d4ce:	4581      	cmp	r9, r0
 800d4d0:	d320      	bcc.n	800d514 <_strtol_l.constprop.0+0xc0>
 800d4d2:	d101      	bne.n	800d4d8 <_strtol_l.constprop.0+0x84>
 800d4d4:	45a2      	cmp	sl, r4
 800d4d6:	db1d      	blt.n	800d514 <_strtol_l.constprop.0+0xc0>
 800d4d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4e2:	e7eb      	b.n	800d4bc <_strtol_l.constprop.0+0x68>
 800d4e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d4e6:	bf04      	itt	eq
 800d4e8:	782c      	ldrbeq	r4, [r5, #0]
 800d4ea:	1c95      	addeq	r5, r2, #2
 800d4ec:	e7cf      	b.n	800d48e <_strtol_l.constprop.0+0x3a>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1da      	bne.n	800d4a8 <_strtol_l.constprop.0+0x54>
 800d4f2:	2c30      	cmp	r4, #48	@ 0x30
 800d4f4:	bf0c      	ite	eq
 800d4f6:	2308      	moveq	r3, #8
 800d4f8:	230a      	movne	r3, #10
 800d4fa:	e7d5      	b.n	800d4a8 <_strtol_l.constprop.0+0x54>
 800d4fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d500:	2f19      	cmp	r7, #25
 800d502:	d801      	bhi.n	800d508 <_strtol_l.constprop.0+0xb4>
 800d504:	3c37      	subs	r4, #55	@ 0x37
 800d506:	e7de      	b.n	800d4c6 <_strtol_l.constprop.0+0x72>
 800d508:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d50c:	2f19      	cmp	r7, #25
 800d50e:	d804      	bhi.n	800d51a <_strtol_l.constprop.0+0xc6>
 800d510:	3c57      	subs	r4, #87	@ 0x57
 800d512:	e7d8      	b.n	800d4c6 <_strtol_l.constprop.0+0x72>
 800d514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d518:	e7e1      	b.n	800d4de <_strtol_l.constprop.0+0x8a>
 800d51a:	1c53      	adds	r3, r2, #1
 800d51c:	d108      	bne.n	800d530 <_strtol_l.constprop.0+0xdc>
 800d51e:	2322      	movs	r3, #34	@ 0x22
 800d520:	f8ce 3000 	str.w	r3, [lr]
 800d524:	4660      	mov	r0, ip
 800d526:	f1b8 0f00 	cmp.w	r8, #0
 800d52a:	d0a0      	beq.n	800d46e <_strtol_l.constprop.0+0x1a>
 800d52c:	1e69      	subs	r1, r5, #1
 800d52e:	e006      	b.n	800d53e <_strtol_l.constprop.0+0xea>
 800d530:	b106      	cbz	r6, 800d534 <_strtol_l.constprop.0+0xe0>
 800d532:	4240      	negs	r0, r0
 800d534:	f1b8 0f00 	cmp.w	r8, #0
 800d538:	d099      	beq.n	800d46e <_strtol_l.constprop.0+0x1a>
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	d1f6      	bne.n	800d52c <_strtol_l.constprop.0+0xd8>
 800d53e:	f8c8 1000 	str.w	r1, [r8]
 800d542:	e794      	b.n	800d46e <_strtol_l.constprop.0+0x1a>
 800d544:	0800e9c9 	.word	0x0800e9c9

0800d548 <_strtol_r>:
 800d548:	f7ff bf84 	b.w	800d454 <_strtol_l.constprop.0>

0800d54c <__ssputs_r>:
 800d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	688e      	ldr	r6, [r1, #8]
 800d552:	461f      	mov	r7, r3
 800d554:	42be      	cmp	r6, r7
 800d556:	680b      	ldr	r3, [r1, #0]
 800d558:	4682      	mov	sl, r0
 800d55a:	460c      	mov	r4, r1
 800d55c:	4690      	mov	r8, r2
 800d55e:	d82d      	bhi.n	800d5bc <__ssputs_r+0x70>
 800d560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d568:	d026      	beq.n	800d5b8 <__ssputs_r+0x6c>
 800d56a:	6965      	ldr	r5, [r4, #20]
 800d56c:	6909      	ldr	r1, [r1, #16]
 800d56e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d572:	eba3 0901 	sub.w	r9, r3, r1
 800d576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d57a:	1c7b      	adds	r3, r7, #1
 800d57c:	444b      	add	r3, r9
 800d57e:	106d      	asrs	r5, r5, #1
 800d580:	429d      	cmp	r5, r3
 800d582:	bf38      	it	cc
 800d584:	461d      	movcc	r5, r3
 800d586:	0553      	lsls	r3, r2, #21
 800d588:	d527      	bpl.n	800d5da <__ssputs_r+0x8e>
 800d58a:	4629      	mov	r1, r5
 800d58c:	f7fe fc1c 	bl	800bdc8 <_malloc_r>
 800d590:	4606      	mov	r6, r0
 800d592:	b360      	cbz	r0, 800d5ee <__ssputs_r+0xa2>
 800d594:	6921      	ldr	r1, [r4, #16]
 800d596:	464a      	mov	r2, r9
 800d598:	f7fd fd3f 	bl	800b01a <memcpy>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	6126      	str	r6, [r4, #16]
 800d5aa:	6165      	str	r5, [r4, #20]
 800d5ac:	444e      	add	r6, r9
 800d5ae:	eba5 0509 	sub.w	r5, r5, r9
 800d5b2:	6026      	str	r6, [r4, #0]
 800d5b4:	60a5      	str	r5, [r4, #8]
 800d5b6:	463e      	mov	r6, r7
 800d5b8:	42be      	cmp	r6, r7
 800d5ba:	d900      	bls.n	800d5be <__ssputs_r+0x72>
 800d5bc:	463e      	mov	r6, r7
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	4632      	mov	r2, r6
 800d5c2:	4641      	mov	r1, r8
 800d5c4:	f000 fb6a 	bl	800dc9c <memmove>
 800d5c8:	68a3      	ldr	r3, [r4, #8]
 800d5ca:	1b9b      	subs	r3, r3, r6
 800d5cc:	60a3      	str	r3, [r4, #8]
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	4433      	add	r3, r6
 800d5d2:	6023      	str	r3, [r4, #0]
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5da:	462a      	mov	r2, r5
 800d5dc:	f000 ff41 	bl	800e462 <_realloc_r>
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d1e0      	bne.n	800d5a8 <__ssputs_r+0x5c>
 800d5e6:	6921      	ldr	r1, [r4, #16]
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	f7fe fb79 	bl	800bce0 <_free_r>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	f8ca 3000 	str.w	r3, [sl]
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d600:	e7e9      	b.n	800d5d6 <__ssputs_r+0x8a>
	...

0800d604 <_svfiprintf_r>:
 800d604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d608:	4698      	mov	r8, r3
 800d60a:	898b      	ldrh	r3, [r1, #12]
 800d60c:	061b      	lsls	r3, r3, #24
 800d60e:	b09d      	sub	sp, #116	@ 0x74
 800d610:	4607      	mov	r7, r0
 800d612:	460d      	mov	r5, r1
 800d614:	4614      	mov	r4, r2
 800d616:	d510      	bpl.n	800d63a <_svfiprintf_r+0x36>
 800d618:	690b      	ldr	r3, [r1, #16]
 800d61a:	b973      	cbnz	r3, 800d63a <_svfiprintf_r+0x36>
 800d61c:	2140      	movs	r1, #64	@ 0x40
 800d61e:	f7fe fbd3 	bl	800bdc8 <_malloc_r>
 800d622:	6028      	str	r0, [r5, #0]
 800d624:	6128      	str	r0, [r5, #16]
 800d626:	b930      	cbnz	r0, 800d636 <_svfiprintf_r+0x32>
 800d628:	230c      	movs	r3, #12
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d630:	b01d      	add	sp, #116	@ 0x74
 800d632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d636:	2340      	movs	r3, #64	@ 0x40
 800d638:	616b      	str	r3, [r5, #20]
 800d63a:	2300      	movs	r3, #0
 800d63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d63e:	2320      	movs	r3, #32
 800d640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d644:	f8cd 800c 	str.w	r8, [sp, #12]
 800d648:	2330      	movs	r3, #48	@ 0x30
 800d64a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7e8 <_svfiprintf_r+0x1e4>
 800d64e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d652:	f04f 0901 	mov.w	r9, #1
 800d656:	4623      	mov	r3, r4
 800d658:	469a      	mov	sl, r3
 800d65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d65e:	b10a      	cbz	r2, 800d664 <_svfiprintf_r+0x60>
 800d660:	2a25      	cmp	r2, #37	@ 0x25
 800d662:	d1f9      	bne.n	800d658 <_svfiprintf_r+0x54>
 800d664:	ebba 0b04 	subs.w	fp, sl, r4
 800d668:	d00b      	beq.n	800d682 <_svfiprintf_r+0x7e>
 800d66a:	465b      	mov	r3, fp
 800d66c:	4622      	mov	r2, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	4638      	mov	r0, r7
 800d672:	f7ff ff6b 	bl	800d54c <__ssputs_r>
 800d676:	3001      	adds	r0, #1
 800d678:	f000 80a7 	beq.w	800d7ca <_svfiprintf_r+0x1c6>
 800d67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d67e:	445a      	add	r2, fp
 800d680:	9209      	str	r2, [sp, #36]	@ 0x24
 800d682:	f89a 3000 	ldrb.w	r3, [sl]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 809f 	beq.w	800d7ca <_svfiprintf_r+0x1c6>
 800d68c:	2300      	movs	r3, #0
 800d68e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d696:	f10a 0a01 	add.w	sl, sl, #1
 800d69a:	9304      	str	r3, [sp, #16]
 800d69c:	9307      	str	r3, [sp, #28]
 800d69e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6a4:	4654      	mov	r4, sl
 800d6a6:	2205      	movs	r2, #5
 800d6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ac:	484e      	ldr	r0, [pc, #312]	@ (800d7e8 <_svfiprintf_r+0x1e4>)
 800d6ae:	f7f2 fd8f 	bl	80001d0 <memchr>
 800d6b2:	9a04      	ldr	r2, [sp, #16]
 800d6b4:	b9d8      	cbnz	r0, 800d6ee <_svfiprintf_r+0xea>
 800d6b6:	06d0      	lsls	r0, r2, #27
 800d6b8:	bf44      	itt	mi
 800d6ba:	2320      	movmi	r3, #32
 800d6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6c0:	0711      	lsls	r1, r2, #28
 800d6c2:	bf44      	itt	mi
 800d6c4:	232b      	movmi	r3, #43	@ 0x2b
 800d6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6d0:	d015      	beq.n	800d6fe <_svfiprintf_r+0xfa>
 800d6d2:	9a07      	ldr	r2, [sp, #28]
 800d6d4:	4654      	mov	r4, sl
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f04f 0c0a 	mov.w	ip, #10
 800d6dc:	4621      	mov	r1, r4
 800d6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6e2:	3b30      	subs	r3, #48	@ 0x30
 800d6e4:	2b09      	cmp	r3, #9
 800d6e6:	d94b      	bls.n	800d780 <_svfiprintf_r+0x17c>
 800d6e8:	b1b0      	cbz	r0, 800d718 <_svfiprintf_r+0x114>
 800d6ea:	9207      	str	r2, [sp, #28]
 800d6ec:	e014      	b.n	800d718 <_svfiprintf_r+0x114>
 800d6ee:	eba0 0308 	sub.w	r3, r0, r8
 800d6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	9304      	str	r3, [sp, #16]
 800d6fa:	46a2      	mov	sl, r4
 800d6fc:	e7d2      	b.n	800d6a4 <_svfiprintf_r+0xa0>
 800d6fe:	9b03      	ldr	r3, [sp, #12]
 800d700:	1d19      	adds	r1, r3, #4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	9103      	str	r1, [sp, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	bfbb      	ittet	lt
 800d70a:	425b      	neglt	r3, r3
 800d70c:	f042 0202 	orrlt.w	r2, r2, #2
 800d710:	9307      	strge	r3, [sp, #28]
 800d712:	9307      	strlt	r3, [sp, #28]
 800d714:	bfb8      	it	lt
 800d716:	9204      	strlt	r2, [sp, #16]
 800d718:	7823      	ldrb	r3, [r4, #0]
 800d71a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d71c:	d10a      	bne.n	800d734 <_svfiprintf_r+0x130>
 800d71e:	7863      	ldrb	r3, [r4, #1]
 800d720:	2b2a      	cmp	r3, #42	@ 0x2a
 800d722:	d132      	bne.n	800d78a <_svfiprintf_r+0x186>
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	9203      	str	r2, [sp, #12]
 800d72c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d730:	3402      	adds	r4, #2
 800d732:	9305      	str	r3, [sp, #20]
 800d734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7f8 <_svfiprintf_r+0x1f4>
 800d738:	7821      	ldrb	r1, [r4, #0]
 800d73a:	2203      	movs	r2, #3
 800d73c:	4650      	mov	r0, sl
 800d73e:	f7f2 fd47 	bl	80001d0 <memchr>
 800d742:	b138      	cbz	r0, 800d754 <_svfiprintf_r+0x150>
 800d744:	9b04      	ldr	r3, [sp, #16]
 800d746:	eba0 000a 	sub.w	r0, r0, sl
 800d74a:	2240      	movs	r2, #64	@ 0x40
 800d74c:	4082      	lsls	r2, r0
 800d74e:	4313      	orrs	r3, r2
 800d750:	3401      	adds	r4, #1
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d758:	4824      	ldr	r0, [pc, #144]	@ (800d7ec <_svfiprintf_r+0x1e8>)
 800d75a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d75e:	2206      	movs	r2, #6
 800d760:	f7f2 fd36 	bl	80001d0 <memchr>
 800d764:	2800      	cmp	r0, #0
 800d766:	d036      	beq.n	800d7d6 <_svfiprintf_r+0x1d2>
 800d768:	4b21      	ldr	r3, [pc, #132]	@ (800d7f0 <_svfiprintf_r+0x1ec>)
 800d76a:	bb1b      	cbnz	r3, 800d7b4 <_svfiprintf_r+0x1b0>
 800d76c:	9b03      	ldr	r3, [sp, #12]
 800d76e:	3307      	adds	r3, #7
 800d770:	f023 0307 	bic.w	r3, r3, #7
 800d774:	3308      	adds	r3, #8
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77a:	4433      	add	r3, r6
 800d77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d77e:	e76a      	b.n	800d656 <_svfiprintf_r+0x52>
 800d780:	fb0c 3202 	mla	r2, ip, r2, r3
 800d784:	460c      	mov	r4, r1
 800d786:	2001      	movs	r0, #1
 800d788:	e7a8      	b.n	800d6dc <_svfiprintf_r+0xd8>
 800d78a:	2300      	movs	r3, #0
 800d78c:	3401      	adds	r4, #1
 800d78e:	9305      	str	r3, [sp, #20]
 800d790:	4619      	mov	r1, r3
 800d792:	f04f 0c0a 	mov.w	ip, #10
 800d796:	4620      	mov	r0, r4
 800d798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d79c:	3a30      	subs	r2, #48	@ 0x30
 800d79e:	2a09      	cmp	r2, #9
 800d7a0:	d903      	bls.n	800d7aa <_svfiprintf_r+0x1a6>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0c6      	beq.n	800d734 <_svfiprintf_r+0x130>
 800d7a6:	9105      	str	r1, [sp, #20]
 800d7a8:	e7c4      	b.n	800d734 <_svfiprintf_r+0x130>
 800d7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e7f0      	b.n	800d796 <_svfiprintf_r+0x192>
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f4 <_svfiprintf_r+0x1f0>)
 800d7bc:	a904      	add	r1, sp, #16
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f7fc fb82 	bl	8009ec8 <_printf_float>
 800d7c4:	1c42      	adds	r2, r0, #1
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	d1d6      	bne.n	800d778 <_svfiprintf_r+0x174>
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	065b      	lsls	r3, r3, #25
 800d7ce:	f53f af2d 	bmi.w	800d62c <_svfiprintf_r+0x28>
 800d7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7d4:	e72c      	b.n	800d630 <_svfiprintf_r+0x2c>
 800d7d6:	ab03      	add	r3, sp, #12
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	462a      	mov	r2, r5
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <_svfiprintf_r+0x1f0>)
 800d7de:	a904      	add	r1, sp, #16
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	f7fc fe09 	bl	800a3f8 <_printf_i>
 800d7e6:	e7ed      	b.n	800d7c4 <_svfiprintf_r+0x1c0>
 800d7e8:	0800eac9 	.word	0x0800eac9
 800d7ec:	0800ead3 	.word	0x0800ead3
 800d7f0:	08009ec9 	.word	0x08009ec9
 800d7f4:	0800d54d 	.word	0x0800d54d
 800d7f8:	0800eacf 	.word	0x0800eacf

0800d7fc <__sfputc_r>:
 800d7fc:	6893      	ldr	r3, [r2, #8]
 800d7fe:	3b01      	subs	r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	b410      	push	{r4}
 800d804:	6093      	str	r3, [r2, #8]
 800d806:	da08      	bge.n	800d81a <__sfputc_r+0x1e>
 800d808:	6994      	ldr	r4, [r2, #24]
 800d80a:	42a3      	cmp	r3, r4
 800d80c:	db01      	blt.n	800d812 <__sfputc_r+0x16>
 800d80e:	290a      	cmp	r1, #10
 800d810:	d103      	bne.n	800d81a <__sfputc_r+0x1e>
 800d812:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d816:	f7fd baec 	b.w	800adf2 <__swbuf_r>
 800d81a:	6813      	ldr	r3, [r2, #0]
 800d81c:	1c58      	adds	r0, r3, #1
 800d81e:	6010      	str	r0, [r2, #0]
 800d820:	7019      	strb	r1, [r3, #0]
 800d822:	4608      	mov	r0, r1
 800d824:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <__sfputs_r>:
 800d82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82c:	4606      	mov	r6, r0
 800d82e:	460f      	mov	r7, r1
 800d830:	4614      	mov	r4, r2
 800d832:	18d5      	adds	r5, r2, r3
 800d834:	42ac      	cmp	r4, r5
 800d836:	d101      	bne.n	800d83c <__sfputs_r+0x12>
 800d838:	2000      	movs	r0, #0
 800d83a:	e007      	b.n	800d84c <__sfputs_r+0x22>
 800d83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d840:	463a      	mov	r2, r7
 800d842:	4630      	mov	r0, r6
 800d844:	f7ff ffda 	bl	800d7fc <__sfputc_r>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d1f3      	bne.n	800d834 <__sfputs_r+0xa>
 800d84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d850 <_vfiprintf_r>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	460d      	mov	r5, r1
 800d856:	b09d      	sub	sp, #116	@ 0x74
 800d858:	4614      	mov	r4, r2
 800d85a:	4698      	mov	r8, r3
 800d85c:	4606      	mov	r6, r0
 800d85e:	b118      	cbz	r0, 800d868 <_vfiprintf_r+0x18>
 800d860:	6a03      	ldr	r3, [r0, #32]
 800d862:	b90b      	cbnz	r3, 800d868 <_vfiprintf_r+0x18>
 800d864:	f7fd f988 	bl	800ab78 <__sinit>
 800d868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d86a:	07d9      	lsls	r1, r3, #31
 800d86c:	d405      	bmi.n	800d87a <_vfiprintf_r+0x2a>
 800d86e:	89ab      	ldrh	r3, [r5, #12]
 800d870:	059a      	lsls	r2, r3, #22
 800d872:	d402      	bmi.n	800d87a <_vfiprintf_r+0x2a>
 800d874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d876:	f7fd fbce 	bl	800b016 <__retarget_lock_acquire_recursive>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	071b      	lsls	r3, r3, #28
 800d87e:	d501      	bpl.n	800d884 <_vfiprintf_r+0x34>
 800d880:	692b      	ldr	r3, [r5, #16]
 800d882:	b99b      	cbnz	r3, 800d8ac <_vfiprintf_r+0x5c>
 800d884:	4629      	mov	r1, r5
 800d886:	4630      	mov	r0, r6
 800d888:	f7fd faf2 	bl	800ae70 <__swsetup_r>
 800d88c:	b170      	cbz	r0, 800d8ac <_vfiprintf_r+0x5c>
 800d88e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d890:	07dc      	lsls	r4, r3, #31
 800d892:	d504      	bpl.n	800d89e <_vfiprintf_r+0x4e>
 800d894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d898:	b01d      	add	sp, #116	@ 0x74
 800d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	0598      	lsls	r0, r3, #22
 800d8a2:	d4f7      	bmi.n	800d894 <_vfiprintf_r+0x44>
 800d8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8a6:	f7fd fbb7 	bl	800b018 <__retarget_lock_release_recursive>
 800d8aa:	e7f3      	b.n	800d894 <_vfiprintf_r+0x44>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b0:	2320      	movs	r3, #32
 800d8b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ba:	2330      	movs	r3, #48	@ 0x30
 800d8bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da6c <_vfiprintf_r+0x21c>
 800d8c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8c4:	f04f 0901 	mov.w	r9, #1
 800d8c8:	4623      	mov	r3, r4
 800d8ca:	469a      	mov	sl, r3
 800d8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8d0:	b10a      	cbz	r2, 800d8d6 <_vfiprintf_r+0x86>
 800d8d2:	2a25      	cmp	r2, #37	@ 0x25
 800d8d4:	d1f9      	bne.n	800d8ca <_vfiprintf_r+0x7a>
 800d8d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8da:	d00b      	beq.n	800d8f4 <_vfiprintf_r+0xa4>
 800d8dc:	465b      	mov	r3, fp
 800d8de:	4622      	mov	r2, r4
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7ff ffa1 	bl	800d82a <__sfputs_r>
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f000 80a7 	beq.w	800da3c <_vfiprintf_r+0x1ec>
 800d8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8f0:	445a      	add	r2, fp
 800d8f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 809f 	beq.w	800da3c <_vfiprintf_r+0x1ec>
 800d8fe:	2300      	movs	r3, #0
 800d900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d908:	f10a 0a01 	add.w	sl, sl, #1
 800d90c:	9304      	str	r3, [sp, #16]
 800d90e:	9307      	str	r3, [sp, #28]
 800d910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d914:	931a      	str	r3, [sp, #104]	@ 0x68
 800d916:	4654      	mov	r4, sl
 800d918:	2205      	movs	r2, #5
 800d91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91e:	4853      	ldr	r0, [pc, #332]	@ (800da6c <_vfiprintf_r+0x21c>)
 800d920:	f7f2 fc56 	bl	80001d0 <memchr>
 800d924:	9a04      	ldr	r2, [sp, #16]
 800d926:	b9d8      	cbnz	r0, 800d960 <_vfiprintf_r+0x110>
 800d928:	06d1      	lsls	r1, r2, #27
 800d92a:	bf44      	itt	mi
 800d92c:	2320      	movmi	r3, #32
 800d92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d932:	0713      	lsls	r3, r2, #28
 800d934:	bf44      	itt	mi
 800d936:	232b      	movmi	r3, #43	@ 0x2b
 800d938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d93c:	f89a 3000 	ldrb.w	r3, [sl]
 800d940:	2b2a      	cmp	r3, #42	@ 0x2a
 800d942:	d015      	beq.n	800d970 <_vfiprintf_r+0x120>
 800d944:	9a07      	ldr	r2, [sp, #28]
 800d946:	4654      	mov	r4, sl
 800d948:	2000      	movs	r0, #0
 800d94a:	f04f 0c0a 	mov.w	ip, #10
 800d94e:	4621      	mov	r1, r4
 800d950:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d954:	3b30      	subs	r3, #48	@ 0x30
 800d956:	2b09      	cmp	r3, #9
 800d958:	d94b      	bls.n	800d9f2 <_vfiprintf_r+0x1a2>
 800d95a:	b1b0      	cbz	r0, 800d98a <_vfiprintf_r+0x13a>
 800d95c:	9207      	str	r2, [sp, #28]
 800d95e:	e014      	b.n	800d98a <_vfiprintf_r+0x13a>
 800d960:	eba0 0308 	sub.w	r3, r0, r8
 800d964:	fa09 f303 	lsl.w	r3, r9, r3
 800d968:	4313      	orrs	r3, r2
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	46a2      	mov	sl, r4
 800d96e:	e7d2      	b.n	800d916 <_vfiprintf_r+0xc6>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	1d19      	adds	r1, r3, #4
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	9103      	str	r1, [sp, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	bfbb      	ittet	lt
 800d97c:	425b      	neglt	r3, r3
 800d97e:	f042 0202 	orrlt.w	r2, r2, #2
 800d982:	9307      	strge	r3, [sp, #28]
 800d984:	9307      	strlt	r3, [sp, #28]
 800d986:	bfb8      	it	lt
 800d988:	9204      	strlt	r2, [sp, #16]
 800d98a:	7823      	ldrb	r3, [r4, #0]
 800d98c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d98e:	d10a      	bne.n	800d9a6 <_vfiprintf_r+0x156>
 800d990:	7863      	ldrb	r3, [r4, #1]
 800d992:	2b2a      	cmp	r3, #42	@ 0x2a
 800d994:	d132      	bne.n	800d9fc <_vfiprintf_r+0x1ac>
 800d996:	9b03      	ldr	r3, [sp, #12]
 800d998:	1d1a      	adds	r2, r3, #4
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	9203      	str	r2, [sp, #12]
 800d99e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9a2:	3402      	adds	r4, #2
 800d9a4:	9305      	str	r3, [sp, #20]
 800d9a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da7c <_vfiprintf_r+0x22c>
 800d9aa:	7821      	ldrb	r1, [r4, #0]
 800d9ac:	2203      	movs	r2, #3
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	f7f2 fc0e 	bl	80001d0 <memchr>
 800d9b4:	b138      	cbz	r0, 800d9c6 <_vfiprintf_r+0x176>
 800d9b6:	9b04      	ldr	r3, [sp, #16]
 800d9b8:	eba0 000a 	sub.w	r0, r0, sl
 800d9bc:	2240      	movs	r2, #64	@ 0x40
 800d9be:	4082      	lsls	r2, r0
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	3401      	adds	r4, #1
 800d9c4:	9304      	str	r3, [sp, #16]
 800d9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ca:	4829      	ldr	r0, [pc, #164]	@ (800da70 <_vfiprintf_r+0x220>)
 800d9cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9d0:	2206      	movs	r2, #6
 800d9d2:	f7f2 fbfd 	bl	80001d0 <memchr>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d03f      	beq.n	800da5a <_vfiprintf_r+0x20a>
 800d9da:	4b26      	ldr	r3, [pc, #152]	@ (800da74 <_vfiprintf_r+0x224>)
 800d9dc:	bb1b      	cbnz	r3, 800da26 <_vfiprintf_r+0x1d6>
 800d9de:	9b03      	ldr	r3, [sp, #12]
 800d9e0:	3307      	adds	r3, #7
 800d9e2:	f023 0307 	bic.w	r3, r3, #7
 800d9e6:	3308      	adds	r3, #8
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ec:	443b      	add	r3, r7
 800d9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9f0:	e76a      	b.n	800d8c8 <_vfiprintf_r+0x78>
 800d9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	e7a8      	b.n	800d94e <_vfiprintf_r+0xfe>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	3401      	adds	r4, #1
 800da00:	9305      	str	r3, [sp, #20]
 800da02:	4619      	mov	r1, r3
 800da04:	f04f 0c0a 	mov.w	ip, #10
 800da08:	4620      	mov	r0, r4
 800da0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da0e:	3a30      	subs	r2, #48	@ 0x30
 800da10:	2a09      	cmp	r2, #9
 800da12:	d903      	bls.n	800da1c <_vfiprintf_r+0x1cc>
 800da14:	2b00      	cmp	r3, #0
 800da16:	d0c6      	beq.n	800d9a6 <_vfiprintf_r+0x156>
 800da18:	9105      	str	r1, [sp, #20]
 800da1a:	e7c4      	b.n	800d9a6 <_vfiprintf_r+0x156>
 800da1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da20:	4604      	mov	r4, r0
 800da22:	2301      	movs	r3, #1
 800da24:	e7f0      	b.n	800da08 <_vfiprintf_r+0x1b8>
 800da26:	ab03      	add	r3, sp, #12
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	462a      	mov	r2, r5
 800da2c:	4b12      	ldr	r3, [pc, #72]	@ (800da78 <_vfiprintf_r+0x228>)
 800da2e:	a904      	add	r1, sp, #16
 800da30:	4630      	mov	r0, r6
 800da32:	f7fc fa49 	bl	8009ec8 <_printf_float>
 800da36:	4607      	mov	r7, r0
 800da38:	1c78      	adds	r0, r7, #1
 800da3a:	d1d6      	bne.n	800d9ea <_vfiprintf_r+0x19a>
 800da3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da3e:	07d9      	lsls	r1, r3, #31
 800da40:	d405      	bmi.n	800da4e <_vfiprintf_r+0x1fe>
 800da42:	89ab      	ldrh	r3, [r5, #12]
 800da44:	059a      	lsls	r2, r3, #22
 800da46:	d402      	bmi.n	800da4e <_vfiprintf_r+0x1fe>
 800da48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da4a:	f7fd fae5 	bl	800b018 <__retarget_lock_release_recursive>
 800da4e:	89ab      	ldrh	r3, [r5, #12]
 800da50:	065b      	lsls	r3, r3, #25
 800da52:	f53f af1f 	bmi.w	800d894 <_vfiprintf_r+0x44>
 800da56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da58:	e71e      	b.n	800d898 <_vfiprintf_r+0x48>
 800da5a:	ab03      	add	r3, sp, #12
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	462a      	mov	r2, r5
 800da60:	4b05      	ldr	r3, [pc, #20]	@ (800da78 <_vfiprintf_r+0x228>)
 800da62:	a904      	add	r1, sp, #16
 800da64:	4630      	mov	r0, r6
 800da66:	f7fc fcc7 	bl	800a3f8 <_printf_i>
 800da6a:	e7e4      	b.n	800da36 <_vfiprintf_r+0x1e6>
 800da6c:	0800eac9 	.word	0x0800eac9
 800da70:	0800ead3 	.word	0x0800ead3
 800da74:	08009ec9 	.word	0x08009ec9
 800da78:	0800d82b 	.word	0x0800d82b
 800da7c:	0800eacf 	.word	0x0800eacf

0800da80 <__sflush_r>:
 800da80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	0716      	lsls	r6, r2, #28
 800da8a:	4605      	mov	r5, r0
 800da8c:	460c      	mov	r4, r1
 800da8e:	d454      	bmi.n	800db3a <__sflush_r+0xba>
 800da90:	684b      	ldr	r3, [r1, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	dc02      	bgt.n	800da9c <__sflush_r+0x1c>
 800da96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dd48      	ble.n	800db2e <__sflush_r+0xae>
 800da9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da9e:	2e00      	cmp	r6, #0
 800daa0:	d045      	beq.n	800db2e <__sflush_r+0xae>
 800daa2:	2300      	movs	r3, #0
 800daa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800daa8:	682f      	ldr	r7, [r5, #0]
 800daaa:	6a21      	ldr	r1, [r4, #32]
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	d030      	beq.n	800db12 <__sflush_r+0x92>
 800dab0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	0759      	lsls	r1, r3, #29
 800dab6:	d505      	bpl.n	800dac4 <__sflush_r+0x44>
 800dab8:	6863      	ldr	r3, [r4, #4]
 800daba:	1ad2      	subs	r2, r2, r3
 800dabc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dabe:	b10b      	cbz	r3, 800dac4 <__sflush_r+0x44>
 800dac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dac2:	1ad2      	subs	r2, r2, r3
 800dac4:	2300      	movs	r3, #0
 800dac6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dac8:	6a21      	ldr	r1, [r4, #32]
 800daca:	4628      	mov	r0, r5
 800dacc:	47b0      	blx	r6
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	89a3      	ldrh	r3, [r4, #12]
 800dad2:	d106      	bne.n	800dae2 <__sflush_r+0x62>
 800dad4:	6829      	ldr	r1, [r5, #0]
 800dad6:	291d      	cmp	r1, #29
 800dad8:	d82b      	bhi.n	800db32 <__sflush_r+0xb2>
 800dada:	4a2a      	ldr	r2, [pc, #168]	@ (800db84 <__sflush_r+0x104>)
 800dadc:	410a      	asrs	r2, r1
 800dade:	07d6      	lsls	r6, r2, #31
 800dae0:	d427      	bmi.n	800db32 <__sflush_r+0xb2>
 800dae2:	2200      	movs	r2, #0
 800dae4:	6062      	str	r2, [r4, #4]
 800dae6:	04d9      	lsls	r1, r3, #19
 800dae8:	6922      	ldr	r2, [r4, #16]
 800daea:	6022      	str	r2, [r4, #0]
 800daec:	d504      	bpl.n	800daf8 <__sflush_r+0x78>
 800daee:	1c42      	adds	r2, r0, #1
 800daf0:	d101      	bne.n	800daf6 <__sflush_r+0x76>
 800daf2:	682b      	ldr	r3, [r5, #0]
 800daf4:	b903      	cbnz	r3, 800daf8 <__sflush_r+0x78>
 800daf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800daf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dafa:	602f      	str	r7, [r5, #0]
 800dafc:	b1b9      	cbz	r1, 800db2e <__sflush_r+0xae>
 800dafe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db02:	4299      	cmp	r1, r3
 800db04:	d002      	beq.n	800db0c <__sflush_r+0x8c>
 800db06:	4628      	mov	r0, r5
 800db08:	f7fe f8ea 	bl	800bce0 <_free_r>
 800db0c:	2300      	movs	r3, #0
 800db0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800db10:	e00d      	b.n	800db2e <__sflush_r+0xae>
 800db12:	2301      	movs	r3, #1
 800db14:	4628      	mov	r0, r5
 800db16:	47b0      	blx	r6
 800db18:	4602      	mov	r2, r0
 800db1a:	1c50      	adds	r0, r2, #1
 800db1c:	d1c9      	bne.n	800dab2 <__sflush_r+0x32>
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0c6      	beq.n	800dab2 <__sflush_r+0x32>
 800db24:	2b1d      	cmp	r3, #29
 800db26:	d001      	beq.n	800db2c <__sflush_r+0xac>
 800db28:	2b16      	cmp	r3, #22
 800db2a:	d11e      	bne.n	800db6a <__sflush_r+0xea>
 800db2c:	602f      	str	r7, [r5, #0]
 800db2e:	2000      	movs	r0, #0
 800db30:	e022      	b.n	800db78 <__sflush_r+0xf8>
 800db32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db36:	b21b      	sxth	r3, r3
 800db38:	e01b      	b.n	800db72 <__sflush_r+0xf2>
 800db3a:	690f      	ldr	r7, [r1, #16]
 800db3c:	2f00      	cmp	r7, #0
 800db3e:	d0f6      	beq.n	800db2e <__sflush_r+0xae>
 800db40:	0793      	lsls	r3, r2, #30
 800db42:	680e      	ldr	r6, [r1, #0]
 800db44:	bf08      	it	eq
 800db46:	694b      	ldreq	r3, [r1, #20]
 800db48:	600f      	str	r7, [r1, #0]
 800db4a:	bf18      	it	ne
 800db4c:	2300      	movne	r3, #0
 800db4e:	eba6 0807 	sub.w	r8, r6, r7
 800db52:	608b      	str	r3, [r1, #8]
 800db54:	f1b8 0f00 	cmp.w	r8, #0
 800db58:	dde9      	ble.n	800db2e <__sflush_r+0xae>
 800db5a:	6a21      	ldr	r1, [r4, #32]
 800db5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db5e:	4643      	mov	r3, r8
 800db60:	463a      	mov	r2, r7
 800db62:	4628      	mov	r0, r5
 800db64:	47b0      	blx	r6
 800db66:	2800      	cmp	r0, #0
 800db68:	dc08      	bgt.n	800db7c <__sflush_r+0xfc>
 800db6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db72:	81a3      	strh	r3, [r4, #12]
 800db74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	4407      	add	r7, r0
 800db7e:	eba8 0800 	sub.w	r8, r8, r0
 800db82:	e7e7      	b.n	800db54 <__sflush_r+0xd4>
 800db84:	dfbffffe 	.word	0xdfbffffe

0800db88 <_fflush_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	690b      	ldr	r3, [r1, #16]
 800db8c:	4605      	mov	r5, r0
 800db8e:	460c      	mov	r4, r1
 800db90:	b913      	cbnz	r3, 800db98 <_fflush_r+0x10>
 800db92:	2500      	movs	r5, #0
 800db94:	4628      	mov	r0, r5
 800db96:	bd38      	pop	{r3, r4, r5, pc}
 800db98:	b118      	cbz	r0, 800dba2 <_fflush_r+0x1a>
 800db9a:	6a03      	ldr	r3, [r0, #32]
 800db9c:	b90b      	cbnz	r3, 800dba2 <_fflush_r+0x1a>
 800db9e:	f7fc ffeb 	bl	800ab78 <__sinit>
 800dba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f3      	beq.n	800db92 <_fflush_r+0xa>
 800dbaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbac:	07d0      	lsls	r0, r2, #31
 800dbae:	d404      	bmi.n	800dbba <_fflush_r+0x32>
 800dbb0:	0599      	lsls	r1, r3, #22
 800dbb2:	d402      	bmi.n	800dbba <_fflush_r+0x32>
 800dbb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbb6:	f7fd fa2e 	bl	800b016 <__retarget_lock_acquire_recursive>
 800dbba:	4628      	mov	r0, r5
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	f7ff ff5f 	bl	800da80 <__sflush_r>
 800dbc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbc4:	07da      	lsls	r2, r3, #31
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	d4e4      	bmi.n	800db94 <_fflush_r+0xc>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	059b      	lsls	r3, r3, #22
 800dbce:	d4e1      	bmi.n	800db94 <_fflush_r+0xc>
 800dbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbd2:	f7fd fa21 	bl	800b018 <__retarget_lock_release_recursive>
 800dbd6:	e7dd      	b.n	800db94 <_fflush_r+0xc>

0800dbd8 <__swhatbuf_r>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	460c      	mov	r4, r1
 800dbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	b096      	sub	sp, #88	@ 0x58
 800dbe4:	4615      	mov	r5, r2
 800dbe6:	461e      	mov	r6, r3
 800dbe8:	da0d      	bge.n	800dc06 <__swhatbuf_r+0x2e>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dbf0:	f04f 0100 	mov.w	r1, #0
 800dbf4:	bf14      	ite	ne
 800dbf6:	2340      	movne	r3, #64	@ 0x40
 800dbf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	6031      	str	r1, [r6, #0]
 800dc00:	602b      	str	r3, [r5, #0]
 800dc02:	b016      	add	sp, #88	@ 0x58
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	466a      	mov	r2, sp
 800dc08:	f000 f874 	bl	800dcf4 <_fstat_r>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	dbec      	blt.n	800dbea <__swhatbuf_r+0x12>
 800dc10:	9901      	ldr	r1, [sp, #4]
 800dc12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc1a:	4259      	negs	r1, r3
 800dc1c:	4159      	adcs	r1, r3
 800dc1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc22:	e7eb      	b.n	800dbfc <__swhatbuf_r+0x24>

0800dc24 <__smakebuf_r>:
 800dc24:	898b      	ldrh	r3, [r1, #12]
 800dc26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc28:	079d      	lsls	r5, r3, #30
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	d507      	bpl.n	800dc40 <__smakebuf_r+0x1c>
 800dc30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	2301      	movs	r3, #1
 800dc3a:	6163      	str	r3, [r4, #20]
 800dc3c:	b003      	add	sp, #12
 800dc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc40:	ab01      	add	r3, sp, #4
 800dc42:	466a      	mov	r2, sp
 800dc44:	f7ff ffc8 	bl	800dbd8 <__swhatbuf_r>
 800dc48:	9f00      	ldr	r7, [sp, #0]
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7fe f8ba 	bl	800bdc8 <_malloc_r>
 800dc54:	b948      	cbnz	r0, 800dc6a <__smakebuf_r+0x46>
 800dc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5a:	059a      	lsls	r2, r3, #22
 800dc5c:	d4ee      	bmi.n	800dc3c <__smakebuf_r+0x18>
 800dc5e:	f023 0303 	bic.w	r3, r3, #3
 800dc62:	f043 0302 	orr.w	r3, r3, #2
 800dc66:	81a3      	strh	r3, [r4, #12]
 800dc68:	e7e2      	b.n	800dc30 <__smakebuf_r+0xc>
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	6020      	str	r0, [r4, #0]
 800dc6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc72:	81a3      	strh	r3, [r4, #12]
 800dc74:	9b01      	ldr	r3, [sp, #4]
 800dc76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc7a:	b15b      	cbz	r3, 800dc94 <__smakebuf_r+0x70>
 800dc7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc80:	4630      	mov	r0, r6
 800dc82:	f000 f849 	bl	800dd18 <_isatty_r>
 800dc86:	b128      	cbz	r0, 800dc94 <__smakebuf_r+0x70>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	f023 0303 	bic.w	r3, r3, #3
 800dc8e:	f043 0301 	orr.w	r3, r3, #1
 800dc92:	81a3      	strh	r3, [r4, #12]
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	431d      	orrs	r5, r3
 800dc98:	81a5      	strh	r5, [r4, #12]
 800dc9a:	e7cf      	b.n	800dc3c <__smakebuf_r+0x18>

0800dc9c <memmove>:
 800dc9c:	4288      	cmp	r0, r1
 800dc9e:	b510      	push	{r4, lr}
 800dca0:	eb01 0402 	add.w	r4, r1, r2
 800dca4:	d902      	bls.n	800dcac <memmove+0x10>
 800dca6:	4284      	cmp	r4, r0
 800dca8:	4623      	mov	r3, r4
 800dcaa:	d807      	bhi.n	800dcbc <memmove+0x20>
 800dcac:	1e43      	subs	r3, r0, #1
 800dcae:	42a1      	cmp	r1, r4
 800dcb0:	d008      	beq.n	800dcc4 <memmove+0x28>
 800dcb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcba:	e7f8      	b.n	800dcae <memmove+0x12>
 800dcbc:	4402      	add	r2, r0
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	428a      	cmp	r2, r1
 800dcc2:	d100      	bne.n	800dcc6 <memmove+0x2a>
 800dcc4:	bd10      	pop	{r4, pc}
 800dcc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcce:	e7f7      	b.n	800dcc0 <memmove+0x24>

0800dcd0 <strncmp>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	b16a      	cbz	r2, 800dcf0 <strncmp+0x20>
 800dcd4:	3901      	subs	r1, #1
 800dcd6:	1884      	adds	r4, r0, r2
 800dcd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d103      	bne.n	800dcec <strncmp+0x1c>
 800dce4:	42a0      	cmp	r0, r4
 800dce6:	d001      	beq.n	800dcec <strncmp+0x1c>
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	d1f5      	bne.n	800dcd8 <strncmp+0x8>
 800dcec:	1ad0      	subs	r0, r2, r3
 800dcee:	bd10      	pop	{r4, pc}
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	e7fc      	b.n	800dcee <strncmp+0x1e>

0800dcf4 <_fstat_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4d07      	ldr	r5, [pc, #28]	@ (800dd14 <_fstat_r+0x20>)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	4611      	mov	r1, r2
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	f7f3 ff49 	bl	8001b98 <_fstat>
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	d102      	bne.n	800dd10 <_fstat_r+0x1c>
 800dd0a:	682b      	ldr	r3, [r5, #0]
 800dd0c:	b103      	cbz	r3, 800dd10 <_fstat_r+0x1c>
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	bd38      	pop	{r3, r4, r5, pc}
 800dd12:	bf00      	nop
 800dd14:	200020e4 	.word	0x200020e4

0800dd18 <_isatty_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4d06      	ldr	r5, [pc, #24]	@ (800dd34 <_isatty_r+0x1c>)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	602b      	str	r3, [r5, #0]
 800dd24:	f7f3 ff48 	bl	8001bb8 <_isatty>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d102      	bne.n	800dd32 <_isatty_r+0x1a>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	b103      	cbz	r3, 800dd32 <_isatty_r+0x1a>
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	200020e4 	.word	0x200020e4

0800dd38 <_sbrk_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	@ (800dd54 <_sbrk_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f3 ff50 	bl	8001be8 <_sbrk>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_sbrk_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_sbrk_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	200020e4 	.word	0x200020e4

0800dd58 <nan>:
 800dd58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dd60 <nan+0x8>
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	00000000 	.word	0x00000000
 800dd64:	7ff80000 	.word	0x7ff80000

0800dd68 <__assert_func>:
 800dd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd6a:	4614      	mov	r4, r2
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b09      	ldr	r3, [pc, #36]	@ (800dd94 <__assert_func+0x2c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4605      	mov	r5, r0
 800dd74:	68d8      	ldr	r0, [r3, #12]
 800dd76:	b954      	cbnz	r4, 800dd8e <__assert_func+0x26>
 800dd78:	4b07      	ldr	r3, [pc, #28]	@ (800dd98 <__assert_func+0x30>)
 800dd7a:	461c      	mov	r4, r3
 800dd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd80:	9100      	str	r1, [sp, #0]
 800dd82:	462b      	mov	r3, r5
 800dd84:	4905      	ldr	r1, [pc, #20]	@ (800dd9c <__assert_func+0x34>)
 800dd86:	f000 fba7 	bl	800e4d8 <fiprintf>
 800dd8a:	f000 fbb7 	bl	800e4fc <abort>
 800dd8e:	4b04      	ldr	r3, [pc, #16]	@ (800dda0 <__assert_func+0x38>)
 800dd90:	e7f4      	b.n	800dd7c <__assert_func+0x14>
 800dd92:	bf00      	nop
 800dd94:	2000001c 	.word	0x2000001c
 800dd98:	0800eb1d 	.word	0x0800eb1d
 800dd9c:	0800eaef 	.word	0x0800eaef
 800dda0:	0800eae2 	.word	0x0800eae2

0800dda4 <_calloc_r>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	fba1 5402 	umull	r5, r4, r1, r2
 800ddaa:	b93c      	cbnz	r4, 800ddbc <_calloc_r+0x18>
 800ddac:	4629      	mov	r1, r5
 800ddae:	f7fe f80b 	bl	800bdc8 <_malloc_r>
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	b928      	cbnz	r0, 800ddc2 <_calloc_r+0x1e>
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	4630      	mov	r0, r6
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	220c      	movs	r2, #12
 800ddbe:	6002      	str	r2, [r0, #0]
 800ddc0:	e7f9      	b.n	800ddb6 <_calloc_r+0x12>
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	f7fd f8a9 	bl	800af1c <memset>
 800ddca:	e7f5      	b.n	800ddb8 <_calloc_r+0x14>

0800ddcc <rshift>:
 800ddcc:	6903      	ldr	r3, [r0, #16]
 800ddce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ddd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddda:	f100 0414 	add.w	r4, r0, #20
 800ddde:	dd45      	ble.n	800de6c <rshift+0xa0>
 800dde0:	f011 011f 	ands.w	r1, r1, #31
 800dde4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dde8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddec:	d10c      	bne.n	800de08 <rshift+0x3c>
 800ddee:	f100 0710 	add.w	r7, r0, #16
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	42b1      	cmp	r1, r6
 800ddf6:	d334      	bcc.n	800de62 <rshift+0x96>
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	1eea      	subs	r2, r5, #3
 800ddfe:	4296      	cmp	r6, r2
 800de00:	bf38      	it	cc
 800de02:	2300      	movcc	r3, #0
 800de04:	4423      	add	r3, r4
 800de06:	e015      	b.n	800de34 <rshift+0x68>
 800de08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de0c:	f1c1 0820 	rsb	r8, r1, #32
 800de10:	40cf      	lsrs	r7, r1
 800de12:	f105 0e04 	add.w	lr, r5, #4
 800de16:	46a1      	mov	r9, r4
 800de18:	4576      	cmp	r6, lr
 800de1a:	46f4      	mov	ip, lr
 800de1c:	d815      	bhi.n	800de4a <rshift+0x7e>
 800de1e:	1a9a      	subs	r2, r3, r2
 800de20:	0092      	lsls	r2, r2, #2
 800de22:	3a04      	subs	r2, #4
 800de24:	3501      	adds	r5, #1
 800de26:	42ae      	cmp	r6, r5
 800de28:	bf38      	it	cc
 800de2a:	2200      	movcc	r2, #0
 800de2c:	18a3      	adds	r3, r4, r2
 800de2e:	50a7      	str	r7, [r4, r2]
 800de30:	b107      	cbz	r7, 800de34 <rshift+0x68>
 800de32:	3304      	adds	r3, #4
 800de34:	1b1a      	subs	r2, r3, r4
 800de36:	42a3      	cmp	r3, r4
 800de38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de3c:	bf08      	it	eq
 800de3e:	2300      	moveq	r3, #0
 800de40:	6102      	str	r2, [r0, #16]
 800de42:	bf08      	it	eq
 800de44:	6143      	streq	r3, [r0, #20]
 800de46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de4a:	f8dc c000 	ldr.w	ip, [ip]
 800de4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800de52:	ea4c 0707 	orr.w	r7, ip, r7
 800de56:	f849 7b04 	str.w	r7, [r9], #4
 800de5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de5e:	40cf      	lsrs	r7, r1
 800de60:	e7da      	b.n	800de18 <rshift+0x4c>
 800de62:	f851 cb04 	ldr.w	ip, [r1], #4
 800de66:	f847 cf04 	str.w	ip, [r7, #4]!
 800de6a:	e7c3      	b.n	800ddf4 <rshift+0x28>
 800de6c:	4623      	mov	r3, r4
 800de6e:	e7e1      	b.n	800de34 <rshift+0x68>

0800de70 <__hexdig_fun>:
 800de70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de74:	2b09      	cmp	r3, #9
 800de76:	d802      	bhi.n	800de7e <__hexdig_fun+0xe>
 800de78:	3820      	subs	r0, #32
 800de7a:	b2c0      	uxtb	r0, r0
 800de7c:	4770      	bx	lr
 800de7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de82:	2b05      	cmp	r3, #5
 800de84:	d801      	bhi.n	800de8a <__hexdig_fun+0x1a>
 800de86:	3847      	subs	r0, #71	@ 0x47
 800de88:	e7f7      	b.n	800de7a <__hexdig_fun+0xa>
 800de8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de8e:	2b05      	cmp	r3, #5
 800de90:	d801      	bhi.n	800de96 <__hexdig_fun+0x26>
 800de92:	3827      	subs	r0, #39	@ 0x27
 800de94:	e7f1      	b.n	800de7a <__hexdig_fun+0xa>
 800de96:	2000      	movs	r0, #0
 800de98:	4770      	bx	lr
	...

0800de9c <__gethex>:
 800de9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea0:	b085      	sub	sp, #20
 800dea2:	468a      	mov	sl, r1
 800dea4:	9302      	str	r3, [sp, #8]
 800dea6:	680b      	ldr	r3, [r1, #0]
 800dea8:	9001      	str	r0, [sp, #4]
 800deaa:	4690      	mov	r8, r2
 800deac:	1c9c      	adds	r4, r3, #2
 800deae:	46a1      	mov	r9, r4
 800deb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800deb4:	2830      	cmp	r0, #48	@ 0x30
 800deb6:	d0fa      	beq.n	800deae <__gethex+0x12>
 800deb8:	eba9 0303 	sub.w	r3, r9, r3
 800debc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dec0:	f7ff ffd6 	bl	800de70 <__hexdig_fun>
 800dec4:	4605      	mov	r5, r0
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d168      	bne.n	800df9c <__gethex+0x100>
 800deca:	49a0      	ldr	r1, [pc, #640]	@ (800e14c <__gethex+0x2b0>)
 800decc:	2201      	movs	r2, #1
 800dece:	4648      	mov	r0, r9
 800ded0:	f7ff fefe 	bl	800dcd0 <strncmp>
 800ded4:	4607      	mov	r7, r0
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d167      	bne.n	800dfaa <__gethex+0x10e>
 800deda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dede:	4626      	mov	r6, r4
 800dee0:	f7ff ffc6 	bl	800de70 <__hexdig_fun>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d062      	beq.n	800dfae <__gethex+0x112>
 800dee8:	4623      	mov	r3, r4
 800deea:	7818      	ldrb	r0, [r3, #0]
 800deec:	2830      	cmp	r0, #48	@ 0x30
 800deee:	4699      	mov	r9, r3
 800def0:	f103 0301 	add.w	r3, r3, #1
 800def4:	d0f9      	beq.n	800deea <__gethex+0x4e>
 800def6:	f7ff ffbb 	bl	800de70 <__hexdig_fun>
 800defa:	fab0 f580 	clz	r5, r0
 800defe:	096d      	lsrs	r5, r5, #5
 800df00:	f04f 0b01 	mov.w	fp, #1
 800df04:	464a      	mov	r2, r9
 800df06:	4616      	mov	r6, r2
 800df08:	3201      	adds	r2, #1
 800df0a:	7830      	ldrb	r0, [r6, #0]
 800df0c:	f7ff ffb0 	bl	800de70 <__hexdig_fun>
 800df10:	2800      	cmp	r0, #0
 800df12:	d1f8      	bne.n	800df06 <__gethex+0x6a>
 800df14:	498d      	ldr	r1, [pc, #564]	@ (800e14c <__gethex+0x2b0>)
 800df16:	2201      	movs	r2, #1
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff fed9 	bl	800dcd0 <strncmp>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d13f      	bne.n	800dfa2 <__gethex+0x106>
 800df22:	b944      	cbnz	r4, 800df36 <__gethex+0x9a>
 800df24:	1c74      	adds	r4, r6, #1
 800df26:	4622      	mov	r2, r4
 800df28:	4616      	mov	r6, r2
 800df2a:	3201      	adds	r2, #1
 800df2c:	7830      	ldrb	r0, [r6, #0]
 800df2e:	f7ff ff9f 	bl	800de70 <__hexdig_fun>
 800df32:	2800      	cmp	r0, #0
 800df34:	d1f8      	bne.n	800df28 <__gethex+0x8c>
 800df36:	1ba4      	subs	r4, r4, r6
 800df38:	00a7      	lsls	r7, r4, #2
 800df3a:	7833      	ldrb	r3, [r6, #0]
 800df3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df40:	2b50      	cmp	r3, #80	@ 0x50
 800df42:	d13e      	bne.n	800dfc2 <__gethex+0x126>
 800df44:	7873      	ldrb	r3, [r6, #1]
 800df46:	2b2b      	cmp	r3, #43	@ 0x2b
 800df48:	d033      	beq.n	800dfb2 <__gethex+0x116>
 800df4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800df4c:	d034      	beq.n	800dfb8 <__gethex+0x11c>
 800df4e:	1c71      	adds	r1, r6, #1
 800df50:	2400      	movs	r4, #0
 800df52:	7808      	ldrb	r0, [r1, #0]
 800df54:	f7ff ff8c 	bl	800de70 <__hexdig_fun>
 800df58:	1e43      	subs	r3, r0, #1
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b18      	cmp	r3, #24
 800df5e:	d830      	bhi.n	800dfc2 <__gethex+0x126>
 800df60:	f1a0 0210 	sub.w	r2, r0, #16
 800df64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df68:	f7ff ff82 	bl	800de70 <__hexdig_fun>
 800df6c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800df70:	fa5f fc8c 	uxtb.w	ip, ip
 800df74:	f1bc 0f18 	cmp.w	ip, #24
 800df78:	f04f 030a 	mov.w	r3, #10
 800df7c:	d91e      	bls.n	800dfbc <__gethex+0x120>
 800df7e:	b104      	cbz	r4, 800df82 <__gethex+0xe6>
 800df80:	4252      	negs	r2, r2
 800df82:	4417      	add	r7, r2
 800df84:	f8ca 1000 	str.w	r1, [sl]
 800df88:	b1ed      	cbz	r5, 800dfc6 <__gethex+0x12a>
 800df8a:	f1bb 0f00 	cmp.w	fp, #0
 800df8e:	bf0c      	ite	eq
 800df90:	2506      	moveq	r5, #6
 800df92:	2500      	movne	r5, #0
 800df94:	4628      	mov	r0, r5
 800df96:	b005      	add	sp, #20
 800df98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	2500      	movs	r5, #0
 800df9e:	462c      	mov	r4, r5
 800dfa0:	e7b0      	b.n	800df04 <__gethex+0x68>
 800dfa2:	2c00      	cmp	r4, #0
 800dfa4:	d1c7      	bne.n	800df36 <__gethex+0x9a>
 800dfa6:	4627      	mov	r7, r4
 800dfa8:	e7c7      	b.n	800df3a <__gethex+0x9e>
 800dfaa:	464e      	mov	r6, r9
 800dfac:	462f      	mov	r7, r5
 800dfae:	2501      	movs	r5, #1
 800dfb0:	e7c3      	b.n	800df3a <__gethex+0x9e>
 800dfb2:	2400      	movs	r4, #0
 800dfb4:	1cb1      	adds	r1, r6, #2
 800dfb6:	e7cc      	b.n	800df52 <__gethex+0xb6>
 800dfb8:	2401      	movs	r4, #1
 800dfba:	e7fb      	b.n	800dfb4 <__gethex+0x118>
 800dfbc:	fb03 0002 	mla	r0, r3, r2, r0
 800dfc0:	e7ce      	b.n	800df60 <__gethex+0xc4>
 800dfc2:	4631      	mov	r1, r6
 800dfc4:	e7de      	b.n	800df84 <__gethex+0xe8>
 800dfc6:	eba6 0309 	sub.w	r3, r6, r9
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	4629      	mov	r1, r5
 800dfce:	2b07      	cmp	r3, #7
 800dfd0:	dc0a      	bgt.n	800dfe8 <__gethex+0x14c>
 800dfd2:	9801      	ldr	r0, [sp, #4]
 800dfd4:	f7fd ff84 	bl	800bee0 <_Balloc>
 800dfd8:	4604      	mov	r4, r0
 800dfda:	b940      	cbnz	r0, 800dfee <__gethex+0x152>
 800dfdc:	4b5c      	ldr	r3, [pc, #368]	@ (800e150 <__gethex+0x2b4>)
 800dfde:	4602      	mov	r2, r0
 800dfe0:	21e4      	movs	r1, #228	@ 0xe4
 800dfe2:	485c      	ldr	r0, [pc, #368]	@ (800e154 <__gethex+0x2b8>)
 800dfe4:	f7ff fec0 	bl	800dd68 <__assert_func>
 800dfe8:	3101      	adds	r1, #1
 800dfea:	105b      	asrs	r3, r3, #1
 800dfec:	e7ef      	b.n	800dfce <__gethex+0x132>
 800dfee:	f100 0a14 	add.w	sl, r0, #20
 800dff2:	2300      	movs	r3, #0
 800dff4:	4655      	mov	r5, sl
 800dff6:	469b      	mov	fp, r3
 800dff8:	45b1      	cmp	r9, r6
 800dffa:	d337      	bcc.n	800e06c <__gethex+0x1d0>
 800dffc:	f845 bb04 	str.w	fp, [r5], #4
 800e000:	eba5 050a 	sub.w	r5, r5, sl
 800e004:	10ad      	asrs	r5, r5, #2
 800e006:	6125      	str	r5, [r4, #16]
 800e008:	4658      	mov	r0, fp
 800e00a:	f7fe f85b 	bl	800c0c4 <__hi0bits>
 800e00e:	016d      	lsls	r5, r5, #5
 800e010:	f8d8 6000 	ldr.w	r6, [r8]
 800e014:	1a2d      	subs	r5, r5, r0
 800e016:	42b5      	cmp	r5, r6
 800e018:	dd54      	ble.n	800e0c4 <__gethex+0x228>
 800e01a:	1bad      	subs	r5, r5, r6
 800e01c:	4629      	mov	r1, r5
 800e01e:	4620      	mov	r0, r4
 800e020:	f7fe fbef 	bl	800c802 <__any_on>
 800e024:	4681      	mov	r9, r0
 800e026:	b178      	cbz	r0, 800e048 <__gethex+0x1ac>
 800e028:	1e6b      	subs	r3, r5, #1
 800e02a:	1159      	asrs	r1, r3, #5
 800e02c:	f003 021f 	and.w	r2, r3, #31
 800e030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e034:	f04f 0901 	mov.w	r9, #1
 800e038:	fa09 f202 	lsl.w	r2, r9, r2
 800e03c:	420a      	tst	r2, r1
 800e03e:	d003      	beq.n	800e048 <__gethex+0x1ac>
 800e040:	454b      	cmp	r3, r9
 800e042:	dc36      	bgt.n	800e0b2 <__gethex+0x216>
 800e044:	f04f 0902 	mov.w	r9, #2
 800e048:	4629      	mov	r1, r5
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7ff febe 	bl	800ddcc <rshift>
 800e050:	442f      	add	r7, r5
 800e052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e056:	42bb      	cmp	r3, r7
 800e058:	da42      	bge.n	800e0e0 <__gethex+0x244>
 800e05a:	9801      	ldr	r0, [sp, #4]
 800e05c:	4621      	mov	r1, r4
 800e05e:	f7fd ff7f 	bl	800bf60 <_Bfree>
 800e062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e064:	2300      	movs	r3, #0
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	25a3      	movs	r5, #163	@ 0xa3
 800e06a:	e793      	b.n	800df94 <__gethex+0xf8>
 800e06c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e070:	2a2e      	cmp	r2, #46	@ 0x2e
 800e072:	d012      	beq.n	800e09a <__gethex+0x1fe>
 800e074:	2b20      	cmp	r3, #32
 800e076:	d104      	bne.n	800e082 <__gethex+0x1e6>
 800e078:	f845 bb04 	str.w	fp, [r5], #4
 800e07c:	f04f 0b00 	mov.w	fp, #0
 800e080:	465b      	mov	r3, fp
 800e082:	7830      	ldrb	r0, [r6, #0]
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	f7ff fef3 	bl	800de70 <__hexdig_fun>
 800e08a:	9b03      	ldr	r3, [sp, #12]
 800e08c:	f000 000f 	and.w	r0, r0, #15
 800e090:	4098      	lsls	r0, r3
 800e092:	ea4b 0b00 	orr.w	fp, fp, r0
 800e096:	3304      	adds	r3, #4
 800e098:	e7ae      	b.n	800dff8 <__gethex+0x15c>
 800e09a:	45b1      	cmp	r9, r6
 800e09c:	d8ea      	bhi.n	800e074 <__gethex+0x1d8>
 800e09e:	492b      	ldr	r1, [pc, #172]	@ (800e14c <__gethex+0x2b0>)
 800e0a0:	9303      	str	r3, [sp, #12]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f7ff fe13 	bl	800dcd0 <strncmp>
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d1e1      	bne.n	800e074 <__gethex+0x1d8>
 800e0b0:	e7a2      	b.n	800dff8 <__gethex+0x15c>
 800e0b2:	1ea9      	subs	r1, r5, #2
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7fe fba4 	bl	800c802 <__any_on>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d0c2      	beq.n	800e044 <__gethex+0x1a8>
 800e0be:	f04f 0903 	mov.w	r9, #3
 800e0c2:	e7c1      	b.n	800e048 <__gethex+0x1ac>
 800e0c4:	da09      	bge.n	800e0da <__gethex+0x23e>
 800e0c6:	1b75      	subs	r5, r6, r5
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	9801      	ldr	r0, [sp, #4]
 800e0cc:	462a      	mov	r2, r5
 800e0ce:	f7fe f95f 	bl	800c390 <__lshift>
 800e0d2:	1b7f      	subs	r7, r7, r5
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	f100 0a14 	add.w	sl, r0, #20
 800e0da:	f04f 0900 	mov.w	r9, #0
 800e0de:	e7b8      	b.n	800e052 <__gethex+0x1b6>
 800e0e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0e4:	42bd      	cmp	r5, r7
 800e0e6:	dd6f      	ble.n	800e1c8 <__gethex+0x32c>
 800e0e8:	1bed      	subs	r5, r5, r7
 800e0ea:	42ae      	cmp	r6, r5
 800e0ec:	dc34      	bgt.n	800e158 <__gethex+0x2bc>
 800e0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d022      	beq.n	800e13c <__gethex+0x2a0>
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d024      	beq.n	800e144 <__gethex+0x2a8>
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d115      	bne.n	800e12a <__gethex+0x28e>
 800e0fe:	42ae      	cmp	r6, r5
 800e100:	d113      	bne.n	800e12a <__gethex+0x28e>
 800e102:	2e01      	cmp	r6, #1
 800e104:	d10b      	bne.n	800e11e <__gethex+0x282>
 800e106:	9a02      	ldr	r2, [sp, #8]
 800e108:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	2301      	movs	r3, #1
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	f8ca 3000 	str.w	r3, [sl]
 800e116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e118:	2562      	movs	r5, #98	@ 0x62
 800e11a:	601c      	str	r4, [r3, #0]
 800e11c:	e73a      	b.n	800df94 <__gethex+0xf8>
 800e11e:	1e71      	subs	r1, r6, #1
 800e120:	4620      	mov	r0, r4
 800e122:	f7fe fb6e 	bl	800c802 <__any_on>
 800e126:	2800      	cmp	r0, #0
 800e128:	d1ed      	bne.n	800e106 <__gethex+0x26a>
 800e12a:	9801      	ldr	r0, [sp, #4]
 800e12c:	4621      	mov	r1, r4
 800e12e:	f7fd ff17 	bl	800bf60 <_Bfree>
 800e132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e134:	2300      	movs	r3, #0
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	2550      	movs	r5, #80	@ 0x50
 800e13a:	e72b      	b.n	800df94 <__gethex+0xf8>
 800e13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1f3      	bne.n	800e12a <__gethex+0x28e>
 800e142:	e7e0      	b.n	800e106 <__gethex+0x26a>
 800e144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1dd      	bne.n	800e106 <__gethex+0x26a>
 800e14a:	e7ee      	b.n	800e12a <__gethex+0x28e>
 800e14c:	0800e970 	.word	0x0800e970
 800e150:	0800e808 	.word	0x0800e808
 800e154:	0800eb1e 	.word	0x0800eb1e
 800e158:	1e6f      	subs	r7, r5, #1
 800e15a:	f1b9 0f00 	cmp.w	r9, #0
 800e15e:	d130      	bne.n	800e1c2 <__gethex+0x326>
 800e160:	b127      	cbz	r7, 800e16c <__gethex+0x2d0>
 800e162:	4639      	mov	r1, r7
 800e164:	4620      	mov	r0, r4
 800e166:	f7fe fb4c 	bl	800c802 <__any_on>
 800e16a:	4681      	mov	r9, r0
 800e16c:	117a      	asrs	r2, r7, #5
 800e16e:	2301      	movs	r3, #1
 800e170:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e174:	f007 071f 	and.w	r7, r7, #31
 800e178:	40bb      	lsls	r3, r7
 800e17a:	4213      	tst	r3, r2
 800e17c:	4629      	mov	r1, r5
 800e17e:	4620      	mov	r0, r4
 800e180:	bf18      	it	ne
 800e182:	f049 0902 	orrne.w	r9, r9, #2
 800e186:	f7ff fe21 	bl	800ddcc <rshift>
 800e18a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e18e:	1b76      	subs	r6, r6, r5
 800e190:	2502      	movs	r5, #2
 800e192:	f1b9 0f00 	cmp.w	r9, #0
 800e196:	d047      	beq.n	800e228 <__gethex+0x38c>
 800e198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d015      	beq.n	800e1cc <__gethex+0x330>
 800e1a0:	2b03      	cmp	r3, #3
 800e1a2:	d017      	beq.n	800e1d4 <__gethex+0x338>
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d109      	bne.n	800e1bc <__gethex+0x320>
 800e1a8:	f019 0f02 	tst.w	r9, #2
 800e1ac:	d006      	beq.n	800e1bc <__gethex+0x320>
 800e1ae:	f8da 3000 	ldr.w	r3, [sl]
 800e1b2:	ea49 0903 	orr.w	r9, r9, r3
 800e1b6:	f019 0f01 	tst.w	r9, #1
 800e1ba:	d10e      	bne.n	800e1da <__gethex+0x33e>
 800e1bc:	f045 0510 	orr.w	r5, r5, #16
 800e1c0:	e032      	b.n	800e228 <__gethex+0x38c>
 800e1c2:	f04f 0901 	mov.w	r9, #1
 800e1c6:	e7d1      	b.n	800e16c <__gethex+0x2d0>
 800e1c8:	2501      	movs	r5, #1
 800e1ca:	e7e2      	b.n	800e192 <__gethex+0x2f6>
 800e1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ce:	f1c3 0301 	rsb	r3, r3, #1
 800e1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d0f0      	beq.n	800e1bc <__gethex+0x320>
 800e1da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1de:	f104 0314 	add.w	r3, r4, #20
 800e1e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1ea:	f04f 0c00 	mov.w	ip, #0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e1f8:	d01b      	beq.n	800e232 <__gethex+0x396>
 800e1fa:	3201      	adds	r2, #1
 800e1fc:	6002      	str	r2, [r0, #0]
 800e1fe:	2d02      	cmp	r5, #2
 800e200:	f104 0314 	add.w	r3, r4, #20
 800e204:	d13c      	bne.n	800e280 <__gethex+0x3e4>
 800e206:	f8d8 2000 	ldr.w	r2, [r8]
 800e20a:	3a01      	subs	r2, #1
 800e20c:	42b2      	cmp	r2, r6
 800e20e:	d109      	bne.n	800e224 <__gethex+0x388>
 800e210:	1171      	asrs	r1, r6, #5
 800e212:	2201      	movs	r2, #1
 800e214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e218:	f006 061f 	and.w	r6, r6, #31
 800e21c:	fa02 f606 	lsl.w	r6, r2, r6
 800e220:	421e      	tst	r6, r3
 800e222:	d13a      	bne.n	800e29a <__gethex+0x3fe>
 800e224:	f045 0520 	orr.w	r5, r5, #32
 800e228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e22a:	601c      	str	r4, [r3, #0]
 800e22c:	9b02      	ldr	r3, [sp, #8]
 800e22e:	601f      	str	r7, [r3, #0]
 800e230:	e6b0      	b.n	800df94 <__gethex+0xf8>
 800e232:	4299      	cmp	r1, r3
 800e234:	f843 cc04 	str.w	ip, [r3, #-4]
 800e238:	d8d9      	bhi.n	800e1ee <__gethex+0x352>
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	459b      	cmp	fp, r3
 800e23e:	db17      	blt.n	800e270 <__gethex+0x3d4>
 800e240:	6861      	ldr	r1, [r4, #4]
 800e242:	9801      	ldr	r0, [sp, #4]
 800e244:	3101      	adds	r1, #1
 800e246:	f7fd fe4b 	bl	800bee0 <_Balloc>
 800e24a:	4681      	mov	r9, r0
 800e24c:	b918      	cbnz	r0, 800e256 <__gethex+0x3ba>
 800e24e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b8 <__gethex+0x41c>)
 800e250:	4602      	mov	r2, r0
 800e252:	2184      	movs	r1, #132	@ 0x84
 800e254:	e6c5      	b.n	800dfe2 <__gethex+0x146>
 800e256:	6922      	ldr	r2, [r4, #16]
 800e258:	3202      	adds	r2, #2
 800e25a:	f104 010c 	add.w	r1, r4, #12
 800e25e:	0092      	lsls	r2, r2, #2
 800e260:	300c      	adds	r0, #12
 800e262:	f7fc feda 	bl	800b01a <memcpy>
 800e266:	4621      	mov	r1, r4
 800e268:	9801      	ldr	r0, [sp, #4]
 800e26a:	f7fd fe79 	bl	800bf60 <_Bfree>
 800e26e:	464c      	mov	r4, r9
 800e270:	6923      	ldr	r3, [r4, #16]
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e278:	6122      	str	r2, [r4, #16]
 800e27a:	2201      	movs	r2, #1
 800e27c:	615a      	str	r2, [r3, #20]
 800e27e:	e7be      	b.n	800e1fe <__gethex+0x362>
 800e280:	6922      	ldr	r2, [r4, #16]
 800e282:	455a      	cmp	r2, fp
 800e284:	dd0b      	ble.n	800e29e <__gethex+0x402>
 800e286:	2101      	movs	r1, #1
 800e288:	4620      	mov	r0, r4
 800e28a:	f7ff fd9f 	bl	800ddcc <rshift>
 800e28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e292:	3701      	adds	r7, #1
 800e294:	42bb      	cmp	r3, r7
 800e296:	f6ff aee0 	blt.w	800e05a <__gethex+0x1be>
 800e29a:	2501      	movs	r5, #1
 800e29c:	e7c2      	b.n	800e224 <__gethex+0x388>
 800e29e:	f016 061f 	ands.w	r6, r6, #31
 800e2a2:	d0fa      	beq.n	800e29a <__gethex+0x3fe>
 800e2a4:	4453      	add	r3, sl
 800e2a6:	f1c6 0620 	rsb	r6, r6, #32
 800e2aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e2ae:	f7fd ff09 	bl	800c0c4 <__hi0bits>
 800e2b2:	42b0      	cmp	r0, r6
 800e2b4:	dbe7      	blt.n	800e286 <__gethex+0x3ea>
 800e2b6:	e7f0      	b.n	800e29a <__gethex+0x3fe>
 800e2b8:	0800e808 	.word	0x0800e808

0800e2bc <L_shift>:
 800e2bc:	f1c2 0208 	rsb	r2, r2, #8
 800e2c0:	0092      	lsls	r2, r2, #2
 800e2c2:	b570      	push	{r4, r5, r6, lr}
 800e2c4:	f1c2 0620 	rsb	r6, r2, #32
 800e2c8:	6843      	ldr	r3, [r0, #4]
 800e2ca:	6804      	ldr	r4, [r0, #0]
 800e2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e2d0:	432c      	orrs	r4, r5
 800e2d2:	40d3      	lsrs	r3, r2
 800e2d4:	6004      	str	r4, [r0, #0]
 800e2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2da:	4288      	cmp	r0, r1
 800e2dc:	d3f4      	bcc.n	800e2c8 <L_shift+0xc>
 800e2de:	bd70      	pop	{r4, r5, r6, pc}

0800e2e0 <__match>:
 800e2e0:	b530      	push	{r4, r5, lr}
 800e2e2:	6803      	ldr	r3, [r0, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ea:	b914      	cbnz	r4, 800e2f2 <__match+0x12>
 800e2ec:	6003      	str	r3, [r0, #0]
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	bd30      	pop	{r4, r5, pc}
 800e2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e2fa:	2d19      	cmp	r5, #25
 800e2fc:	bf98      	it	ls
 800e2fe:	3220      	addls	r2, #32
 800e300:	42a2      	cmp	r2, r4
 800e302:	d0f0      	beq.n	800e2e6 <__match+0x6>
 800e304:	2000      	movs	r0, #0
 800e306:	e7f3      	b.n	800e2f0 <__match+0x10>

0800e308 <__hexnan>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	680b      	ldr	r3, [r1, #0]
 800e30e:	6801      	ldr	r1, [r0, #0]
 800e310:	115e      	asrs	r6, r3, #5
 800e312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e316:	f013 031f 	ands.w	r3, r3, #31
 800e31a:	b087      	sub	sp, #28
 800e31c:	bf18      	it	ne
 800e31e:	3604      	addne	r6, #4
 800e320:	2500      	movs	r5, #0
 800e322:	1f37      	subs	r7, r6, #4
 800e324:	4682      	mov	sl, r0
 800e326:	4690      	mov	r8, r2
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e32e:	46b9      	mov	r9, r7
 800e330:	463c      	mov	r4, r7
 800e332:	9502      	str	r5, [sp, #8]
 800e334:	46ab      	mov	fp, r5
 800e336:	784a      	ldrb	r2, [r1, #1]
 800e338:	1c4b      	adds	r3, r1, #1
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	b342      	cbz	r2, 800e390 <__hexnan+0x88>
 800e33e:	4610      	mov	r0, r2
 800e340:	9105      	str	r1, [sp, #20]
 800e342:	9204      	str	r2, [sp, #16]
 800e344:	f7ff fd94 	bl	800de70 <__hexdig_fun>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d151      	bne.n	800e3f0 <__hexnan+0xe8>
 800e34c:	9a04      	ldr	r2, [sp, #16]
 800e34e:	9905      	ldr	r1, [sp, #20]
 800e350:	2a20      	cmp	r2, #32
 800e352:	d818      	bhi.n	800e386 <__hexnan+0x7e>
 800e354:	9b02      	ldr	r3, [sp, #8]
 800e356:	459b      	cmp	fp, r3
 800e358:	dd13      	ble.n	800e382 <__hexnan+0x7a>
 800e35a:	454c      	cmp	r4, r9
 800e35c:	d206      	bcs.n	800e36c <__hexnan+0x64>
 800e35e:	2d07      	cmp	r5, #7
 800e360:	dc04      	bgt.n	800e36c <__hexnan+0x64>
 800e362:	462a      	mov	r2, r5
 800e364:	4649      	mov	r1, r9
 800e366:	4620      	mov	r0, r4
 800e368:	f7ff ffa8 	bl	800e2bc <L_shift>
 800e36c:	4544      	cmp	r4, r8
 800e36e:	d952      	bls.n	800e416 <__hexnan+0x10e>
 800e370:	2300      	movs	r3, #0
 800e372:	f1a4 0904 	sub.w	r9, r4, #4
 800e376:	f844 3c04 	str.w	r3, [r4, #-4]
 800e37a:	f8cd b008 	str.w	fp, [sp, #8]
 800e37e:	464c      	mov	r4, r9
 800e380:	461d      	mov	r5, r3
 800e382:	9903      	ldr	r1, [sp, #12]
 800e384:	e7d7      	b.n	800e336 <__hexnan+0x2e>
 800e386:	2a29      	cmp	r2, #41	@ 0x29
 800e388:	d157      	bne.n	800e43a <__hexnan+0x132>
 800e38a:	3102      	adds	r1, #2
 800e38c:	f8ca 1000 	str.w	r1, [sl]
 800e390:	f1bb 0f00 	cmp.w	fp, #0
 800e394:	d051      	beq.n	800e43a <__hexnan+0x132>
 800e396:	454c      	cmp	r4, r9
 800e398:	d206      	bcs.n	800e3a8 <__hexnan+0xa0>
 800e39a:	2d07      	cmp	r5, #7
 800e39c:	dc04      	bgt.n	800e3a8 <__hexnan+0xa0>
 800e39e:	462a      	mov	r2, r5
 800e3a0:	4649      	mov	r1, r9
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7ff ff8a 	bl	800e2bc <L_shift>
 800e3a8:	4544      	cmp	r4, r8
 800e3aa:	d936      	bls.n	800e41a <__hexnan+0x112>
 800e3ac:	f1a8 0204 	sub.w	r2, r8, #4
 800e3b0:	4623      	mov	r3, r4
 800e3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3ba:	429f      	cmp	r7, r3
 800e3bc:	d2f9      	bcs.n	800e3b2 <__hexnan+0xaa>
 800e3be:	1b3b      	subs	r3, r7, r4
 800e3c0:	f023 0303 	bic.w	r3, r3, #3
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	3401      	adds	r4, #1
 800e3c8:	3e03      	subs	r6, #3
 800e3ca:	42b4      	cmp	r4, r6
 800e3cc:	bf88      	it	hi
 800e3ce:	2304      	movhi	r3, #4
 800e3d0:	4443      	add	r3, r8
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f843 2b04 	str.w	r2, [r3], #4
 800e3d8:	429f      	cmp	r7, r3
 800e3da:	d2fb      	bcs.n	800e3d4 <__hexnan+0xcc>
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	b91b      	cbnz	r3, 800e3e8 <__hexnan+0xe0>
 800e3e0:	4547      	cmp	r7, r8
 800e3e2:	d128      	bne.n	800e436 <__hexnan+0x12e>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	603b      	str	r3, [r7, #0]
 800e3e8:	2005      	movs	r0, #5
 800e3ea:	b007      	add	sp, #28
 800e3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f0:	3501      	adds	r5, #1
 800e3f2:	2d08      	cmp	r5, #8
 800e3f4:	f10b 0b01 	add.w	fp, fp, #1
 800e3f8:	dd06      	ble.n	800e408 <__hexnan+0x100>
 800e3fa:	4544      	cmp	r4, r8
 800e3fc:	d9c1      	bls.n	800e382 <__hexnan+0x7a>
 800e3fe:	2300      	movs	r3, #0
 800e400:	f844 3c04 	str.w	r3, [r4, #-4]
 800e404:	2501      	movs	r5, #1
 800e406:	3c04      	subs	r4, #4
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	f000 000f 	and.w	r0, r0, #15
 800e40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e412:	6020      	str	r0, [r4, #0]
 800e414:	e7b5      	b.n	800e382 <__hexnan+0x7a>
 800e416:	2508      	movs	r5, #8
 800e418:	e7b3      	b.n	800e382 <__hexnan+0x7a>
 800e41a:	9b01      	ldr	r3, [sp, #4]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0dd      	beq.n	800e3dc <__hexnan+0xd4>
 800e420:	f1c3 0320 	rsb	r3, r3, #32
 800e424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e428:	40da      	lsrs	r2, r3
 800e42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e42e:	4013      	ands	r3, r2
 800e430:	f846 3c04 	str.w	r3, [r6, #-4]
 800e434:	e7d2      	b.n	800e3dc <__hexnan+0xd4>
 800e436:	3f04      	subs	r7, #4
 800e438:	e7d0      	b.n	800e3dc <__hexnan+0xd4>
 800e43a:	2004      	movs	r0, #4
 800e43c:	e7d5      	b.n	800e3ea <__hexnan+0xe2>

0800e43e <__ascii_mbtowc>:
 800e43e:	b082      	sub	sp, #8
 800e440:	b901      	cbnz	r1, 800e444 <__ascii_mbtowc+0x6>
 800e442:	a901      	add	r1, sp, #4
 800e444:	b142      	cbz	r2, 800e458 <__ascii_mbtowc+0x1a>
 800e446:	b14b      	cbz	r3, 800e45c <__ascii_mbtowc+0x1e>
 800e448:	7813      	ldrb	r3, [r2, #0]
 800e44a:	600b      	str	r3, [r1, #0]
 800e44c:	7812      	ldrb	r2, [r2, #0]
 800e44e:	1e10      	subs	r0, r2, #0
 800e450:	bf18      	it	ne
 800e452:	2001      	movne	r0, #1
 800e454:	b002      	add	sp, #8
 800e456:	4770      	bx	lr
 800e458:	4610      	mov	r0, r2
 800e45a:	e7fb      	b.n	800e454 <__ascii_mbtowc+0x16>
 800e45c:	f06f 0001 	mvn.w	r0, #1
 800e460:	e7f8      	b.n	800e454 <__ascii_mbtowc+0x16>

0800e462 <_realloc_r>:
 800e462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e466:	4680      	mov	r8, r0
 800e468:	4615      	mov	r5, r2
 800e46a:	460c      	mov	r4, r1
 800e46c:	b921      	cbnz	r1, 800e478 <_realloc_r+0x16>
 800e46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e472:	4611      	mov	r1, r2
 800e474:	f7fd bca8 	b.w	800bdc8 <_malloc_r>
 800e478:	b92a      	cbnz	r2, 800e486 <_realloc_r+0x24>
 800e47a:	f7fd fc31 	bl	800bce0 <_free_r>
 800e47e:	2400      	movs	r4, #0
 800e480:	4620      	mov	r0, r4
 800e482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e486:	f000 f840 	bl	800e50a <_malloc_usable_size_r>
 800e48a:	4285      	cmp	r5, r0
 800e48c:	4606      	mov	r6, r0
 800e48e:	d802      	bhi.n	800e496 <_realloc_r+0x34>
 800e490:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e494:	d8f4      	bhi.n	800e480 <_realloc_r+0x1e>
 800e496:	4629      	mov	r1, r5
 800e498:	4640      	mov	r0, r8
 800e49a:	f7fd fc95 	bl	800bdc8 <_malloc_r>
 800e49e:	4607      	mov	r7, r0
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d0ec      	beq.n	800e47e <_realloc_r+0x1c>
 800e4a4:	42b5      	cmp	r5, r6
 800e4a6:	462a      	mov	r2, r5
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	bf28      	it	cs
 800e4ac:	4632      	movcs	r2, r6
 800e4ae:	f7fc fdb4 	bl	800b01a <memcpy>
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	f7fd fc13 	bl	800bce0 <_free_r>
 800e4ba:	463c      	mov	r4, r7
 800e4bc:	e7e0      	b.n	800e480 <_realloc_r+0x1e>

0800e4be <__ascii_wctomb>:
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	b141      	cbz	r1, 800e4d6 <__ascii_wctomb+0x18>
 800e4c4:	2aff      	cmp	r2, #255	@ 0xff
 800e4c6:	d904      	bls.n	800e4d2 <__ascii_wctomb+0x14>
 800e4c8:	228a      	movs	r2, #138	@ 0x8a
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4d0:	4770      	bx	lr
 800e4d2:	700a      	strb	r2, [r1, #0]
 800e4d4:	2001      	movs	r0, #1
 800e4d6:	4770      	bx	lr

0800e4d8 <fiprintf>:
 800e4d8:	b40e      	push	{r1, r2, r3}
 800e4da:	b503      	push	{r0, r1, lr}
 800e4dc:	4601      	mov	r1, r0
 800e4de:	ab03      	add	r3, sp, #12
 800e4e0:	4805      	ldr	r0, [pc, #20]	@ (800e4f8 <fiprintf+0x20>)
 800e4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e6:	6800      	ldr	r0, [r0, #0]
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	f7ff f9b1 	bl	800d850 <_vfiprintf_r>
 800e4ee:	b002      	add	sp, #8
 800e4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4f4:	b003      	add	sp, #12
 800e4f6:	4770      	bx	lr
 800e4f8:	2000001c 	.word	0x2000001c

0800e4fc <abort>:
 800e4fc:	b508      	push	{r3, lr}
 800e4fe:	2006      	movs	r0, #6
 800e500:	f000 f834 	bl	800e56c <raise>
 800e504:	2001      	movs	r0, #1
 800e506:	f7f3 faf7 	bl	8001af8 <_exit>

0800e50a <_malloc_usable_size_r>:
 800e50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e50e:	1f18      	subs	r0, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	bfbc      	itt	lt
 800e514:	580b      	ldrlt	r3, [r1, r0]
 800e516:	18c0      	addlt	r0, r0, r3
 800e518:	4770      	bx	lr

0800e51a <_raise_r>:
 800e51a:	291f      	cmp	r1, #31
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4605      	mov	r5, r0
 800e520:	460c      	mov	r4, r1
 800e522:	d904      	bls.n	800e52e <_raise_r+0x14>
 800e524:	2316      	movs	r3, #22
 800e526:	6003      	str	r3, [r0, #0]
 800e528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e52c:	bd38      	pop	{r3, r4, r5, pc}
 800e52e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e530:	b112      	cbz	r2, 800e538 <_raise_r+0x1e>
 800e532:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e536:	b94b      	cbnz	r3, 800e54c <_raise_r+0x32>
 800e538:	4628      	mov	r0, r5
 800e53a:	f000 f831 	bl	800e5a0 <_getpid_r>
 800e53e:	4622      	mov	r2, r4
 800e540:	4601      	mov	r1, r0
 800e542:	4628      	mov	r0, r5
 800e544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e548:	f000 b818 	b.w	800e57c <_kill_r>
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d00a      	beq.n	800e566 <_raise_r+0x4c>
 800e550:	1c59      	adds	r1, r3, #1
 800e552:	d103      	bne.n	800e55c <_raise_r+0x42>
 800e554:	2316      	movs	r3, #22
 800e556:	6003      	str	r3, [r0, #0]
 800e558:	2001      	movs	r0, #1
 800e55a:	e7e7      	b.n	800e52c <_raise_r+0x12>
 800e55c:	2100      	movs	r1, #0
 800e55e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e562:	4620      	mov	r0, r4
 800e564:	4798      	blx	r3
 800e566:	2000      	movs	r0, #0
 800e568:	e7e0      	b.n	800e52c <_raise_r+0x12>
	...

0800e56c <raise>:
 800e56c:	4b02      	ldr	r3, [pc, #8]	@ (800e578 <raise+0xc>)
 800e56e:	4601      	mov	r1, r0
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	f7ff bfd2 	b.w	800e51a <_raise_r>
 800e576:	bf00      	nop
 800e578:	2000001c 	.word	0x2000001c

0800e57c <_kill_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4d07      	ldr	r5, [pc, #28]	@ (800e59c <_kill_r+0x20>)
 800e580:	2300      	movs	r3, #0
 800e582:	4604      	mov	r4, r0
 800e584:	4608      	mov	r0, r1
 800e586:	4611      	mov	r1, r2
 800e588:	602b      	str	r3, [r5, #0]
 800e58a:	f7f3 faa5 	bl	8001ad8 <_kill>
 800e58e:	1c43      	adds	r3, r0, #1
 800e590:	d102      	bne.n	800e598 <_kill_r+0x1c>
 800e592:	682b      	ldr	r3, [r5, #0]
 800e594:	b103      	cbz	r3, 800e598 <_kill_r+0x1c>
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	bd38      	pop	{r3, r4, r5, pc}
 800e59a:	bf00      	nop
 800e59c:	200020e4 	.word	0x200020e4

0800e5a0 <_getpid_r>:
 800e5a0:	f7f3 ba92 	b.w	8001ac8 <_getpid>

0800e5a4 <_init>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	bf00      	nop
 800e5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5aa:	bc08      	pop	{r3}
 800e5ac:	469e      	mov	lr, r3
 800e5ae:	4770      	bx	lr

0800e5b0 <_fini>:
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	bf00      	nop
 800e5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b6:	bc08      	pop	{r3}
 800e5b8:	469e      	mov	lr, r3
 800e5ba:	4770      	bx	lr
